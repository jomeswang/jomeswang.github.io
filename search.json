[{"title":"转载：前端开发的瓶颈","url":"/posts/6c0bcfea/","content":"<h1 id=\"前端开发的瓶颈与未来之路\"><a href=\"#前端开发的瓶颈与未来之路\" class=\"headerlink\" title=\"前端开发的瓶颈与未来之路\"></a>前端开发的瓶颈与未来之路</h1><a id=\"more\"></a>\n\n<p>​                                                                            –转载 <a href=\"https://keelii.com/2020/05/10/frontend-dev-bottleneck-and-future/\" target=\"_blank\" rel=\"noopener\">https://keelii.com/2020/05/10/frontend-dev-bottleneck-and-future/</a></p>\n<p>2020-5-10 19:18 PM · <a href=\"https://keelii.com/\" target=\"_blank\" rel=\"noopener\">首页</a></p>\n<blockquote>\n<p>前端开发的瓶颈到底在哪里，前端技术是否已经走到一个十字路口，全栈化的系统架构是否能改变目前的窘境？本文将根据作者自身的开发经历谈谈当下前端开发中遇到的一些问题和想法。</p>\n</blockquote>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>近两年我一直在思考的一个问题：</p>\n<blockquote>\n<p>如果前端不用考虑性能问题、不用考虑终端兼容性、不用考虑历史遗留问题，甚至不用考虑具体技术实现…</p>\n</blockquote>\n<p>如果我们假设自己有丰富的技术储备，同时不用考虑上面的问题，那么前端究竟 <strong>能</strong> 做出什么样有价值的东西？</p>\n<p>我们把时间拉到 5 年前…</p>\n<p>如果你「那时」还是前端开发的话。上面的问题肯定是你不得不面临的典型问题。甚至是当时前端开发的意义所在。</p>\n<ul>\n<li>你会为了精确还原设计稿熬夜加班，从而练就一双像素眼；</li>\n<li>你会为了解决几个字节的性能问题研究优化方案，以至看懂了每一个 HTTP 请求头；</li>\n<li>你也会因为某些技术问题和同事理论，最终到达到与产品谈笑风声的境界；</li>\n<li>…</li>\n</ul>\n<p>但是随着时间的推移，前端技术的更新迭代，以及互联网的发展。你会发现这些曾经的问题似乎已经不再是问题，或者说在能预见的未来 <em>可能</em> 不再是问题。</p>\n<p>页面加载性能可能不再是问题，技术上有了 HTTP2，基建上有了 5G，硬盘也越来越快。</p>\n<p>兼容性问题慢慢淡出大家的视角，Chrome 一家独大，微软也不得不向它靠拢。</p>\n<p>很多前端开发已经具备了后端（或者说多端）的技术能力，技术储备也可能不是问题，当然前提是你能招到人。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>到底什么是前端开发，前端与后端的界限在哪里？我在三年前对它的定义是：</p>\n<blockquote>\n<p>前端为 界面、交互展示负责； 后端为 数据、业务逻辑负责;</p>\n</blockquote>\n<p>不过现在看来似乎已经过时了，我越来越觉得不应该有这样一个清晰的界限把前后端分割开来，尤其是技术层面（除了职能层面的界限有利于协作以外）。这就好比说：如果你不能打破规则，那就必将被规则束缚。</p>\n<p>我一直认为程序员应该对新的技术、工具、理念有比平常人更快的适应能力。举个简单的例子，我以前写代码通常使用 tab 缩进，后来大家都建议使用空格，刚开始尝试换成空格肯定是拒绝的，因为让人改变习惯是一件很难的事情。但是当你真正为了改变做出实践的时候，往往就会发现一条新大路。同样还有加不加分号的问题。</p>\n<p>现在回过头来再看，前端在整个系统层面担任的角色至少应该是整个视图 View 层面的。视图层面的技术更接近软件系统的上层，更感性。感性的东西就是说一个颜色，我觉得好看，他觉得不好看，完全属于个人情感诉求。所以前端更注重与UI、交互 以及整个产品层面需要解决的问题。优秀的前端必然要具备敏锐的产品洞察能力。</p>\n<p>当然这还只是前端最基础的职责所在。同时前端做为最接近产品的技术角色，技术才是前端真正的硬实力。</p>\n<p>大约在去年一年的时间，我的岗位从前端转向了后端 Java 程序员的角色。虽然只做了一年的 Java 程序员，但是对我自身的技术提升而言是最多的一年。大家可能普遍的认为后端转前端比较容易，前端转后端会有门槛，实际上根据我自己的体验来讲并非如此。</p>\n<p>Java 这门语言是商业化、成熟度特别高的语言。无论是语言本身，还是周边框架、工具都有一套非常成熟且层次分明的系统化抽象。如果你有两、三年的编程经验，突然让你上转写 Java 是非常容易的一件事情，尤其是写 Java web。Spring 框架已经为程序员屏蔽了很多复杂问题，而且已经事实上成为了各大互联网公司的主流框架选型。</p>\n<p>我特意按我自己的学习线路绘制了一张 Java 版的程序员学习线路，仅供参考：</p>\n<p><img src=\"https://vip1.loli.net/2020/05/10/wpNtkiOI231evPV.png\" alt=\"Java arch.png\"></p>\n<p>我们可以清楚的看出来 Java 构建的整个体系最大的特点：它是渐进式的，一步一步地给开发者建立正向的引导。</p>\n<p>当我处在在<strong>应用层</strong>阶段的时候，我需要关心的只是一些概念，方法，具备基础了以后就可以借助 Spring 框架入门，入门后就可以研究源码，你会发现 Spring 的本质核心类 DispatchServlet，从此 Servlet 就出现在了你的视野。我以前上学时理解不了 java 中 Servlet 的概念，后来参加了工作又学些了 Python，再次看到 Java 中的 Servlet 的时候瞬间就明白了它就是 Python 中的 uwsgi，就是一种接口，将编程语言和服务器网关链接起来的一种规范。</p>\n<p>然后你就可以顺利进入下一环节，服务器/通信。这里你会发现整个网络编程的核心 Socket，同样以前上学的时候没理解 Socket 的概念，继续学习后你就会明白 Socket 其实就是操作系统提供给编程语言的一种能力，有了它就可以建立服务器与客户端之间的通信。在这一环节中你会学习到网络层 TCP/IP 协议，明白了 TCP/UDP 的区别，<code>while (true) { socket.listen() }</code> 建立 Socket 监听会有性能问题，此时你便进入下一个抽象层次，操作系统和计算机原理。</p>\n<p>为了解决「while true」监听连接的性能问题，你会去学习多线程技术，了解并发的概念。你可能总会听到别人讨论并发和并行的区别。继续学习后，慢慢的你就会明白：并发多用来解决网络IO（硬盘）的效率问题，而并行则是为了更好的利用多/核处理器（CPU）的问题。这时你会发现这个阶段涉及到了很多的计算机硬件知识。内存分配、CPU计算、IO 复用等等。</p>\n<p>像 Spring 这种框架才能真正意义上被称做 <strong>框架</strong>，因为它不仅仅解决了软件开发的问题，更重要的是 AOP/IoC 这类概念可以完全改变编程的一些理念。使用 Spring 开发 web 应用，联合 Java 构建出来的生态，整个开发流程就像呼吸一样自然。</p>\n<p>Java 构建出来的软件开发体系就像是把程序员放进了一个一个的层次分明的小柜子里面，进去了以后你根本不需要关注外界是怎么样的，做好自己那部分工作就可以了。如果你对外界有兴趣可以一点点的顺藤摸瓜，跳出你原来的小柜子。即保证精力专注的同时又建立起一套有秩序的提升曲线。这一点是别的语言体系没有的。</p>\n<p>实际上我在转 Java 之前对 Java 有着不小的误解，甚至转 Java 本身也不是我自己的想法。但当你真正转型成 Java 程序员后。看懂了数以百万行记的代码仓库、维护过每秒好几十万的 QPS 项目、见识过百行的 SQL 的时候，你才会对 Java 和软件开发产生一种敬畏之心，才会对技术才有了更深层次的理解。</p>\n<p>这时候再回过头来看前端，看 JavaScript，才会发现它们之间的区别与特点。很多之前争论的东西也就有了结论。</p>\n<h2 id=\"瓶颈\"><a href=\"#瓶颈\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h2><p>我相信从事前端工作稍微长一点（5年以上）的人近两年都会有一种感觉：前端似乎没什么东西可以玩出花样了。这是因为很多东西都已经成为了前端事实上的主流，以前前端没有的基建慢慢的被完善。语言、框架、可视化、跨端、游戏、工具/自动化/工程化 这些领域都在发展。</p>\n<p>语言方面 TypeScript 必然是主流，无论你愿意与否，你都将不得不使用它来写前端。框架方面 React 已经是事实上的主流了，没必要再做选择题。打包工具 Webpack 也是一家独大，虽然被很多人诟病，但是社区生态起来了，想改变就很难。跨端应用 Electron 也不用想了，VSCode 能做好你做不好那就不是选型的问题了。2D 游戏/绘图方面 PixiJS 6 已经在设计中了，3D 我个人认为就先别玩了。</p>\n<p>这些看似成熟的体系实际上还是有很多可以挖掘的东西。如果你不深入研究，或许会认为过两年这些技术就稳定了前端就可以做到大一统的状态。这个想法可能就过于天真了，我举例解释下它们各自的瓶颈：</p>\n<h3 id=\"前-客户端框架的瓶颈\"><a href=\"#前-客户端框架的瓶颈\" class=\"headerlink\" title=\"前/客户端框架的瓶颈\"></a>前/客户端框架的瓶颈</h3><p>React（并不特指 React）虽然现在看起来是主流，但是它本身有很多问题是没解决的，甚至可以说是无解的。React 的本质只是一个 UI Library，并不是框架 Framework。框架要解决的问题是系统层面的不是某个抽象层面的。用 React 写过几个项目以后你就会认识到用 React 去写大型项目是非常麻烦的事情，React 本身并不解决 SPA 应用中数据流的问题，甚至没解决状态管理的问题（或者说状态管理本来就是个伪命题？）。一个很简单的父子组件之间状态共享的问题一直没有成熟的解决方案，hooks 这种方案更像是拆了东墙补西墙。</p>\n<p>而且现在 React 社区弥漫着一种崇尚函数式编程的邪气，hooks 更像是一块遮羞布。多数人用 hooks 的原因仅仅是不想使用 Class，因为 Class 很臃肿，function 更简单。当然这个逻辑是没问题的。函数确实简单，但是如果你把一个函数里面写上几百行的代码，各种 hooks 用到飞起的时候，你才会回过头来反思如何组织代码。如果 Class 能以一种更好/更易于理解的方式去抽象那为什么不用呢？</p>\n<h3 id=\"后-服务端框架的瓶颈\"><a href=\"#后-服务端框架的瓶颈\" class=\"headerlink\" title=\"后/服务端框架的瓶颈\"></a>后/服务端框架的瓶颈</h3><p>前端框架如此，基于 Node.JS 的后端框架也好不到哪儿去，难道你真的想用 Express/Koa.js 去写大型的后端应用？这种量级的框架连 web 开发最简单的三层模型（ 模型、视图、控制器）支持都不完整。当然你可能会说小型框架本来就只关注某一方面嘛，视图和模型层的东西可以用其它三方库解决。是的，确实可以这样，不过你不觉得 Node.JS 的第三方库有点太多了吗。正如 NestJS 在文档中提到的一个问题一样「很多 JavaScript 类库都没有高效地解决一个问题 <strong>架构</strong>。」React/Vue/Express/Koa 这些都是相对独立的点，没有一个东西能把他们连接起来形成一个面，形成一种框架级别的体系。这就是架构的问题。</p>\n<p>这里多说一点，结合上面 Java 构建出来的生态，对比 Node.JS 的话。我借用自己打过的比喻：如果你低头看到的是 Node.JS，那么你抬头未必能看见 Java。假如你从事前端开发 2，3 年遇到瓶颈，想转学 Node.JS，你会学习 Exporess/Koa 这类框架，但是很快你就会发现一个严重的问题：没办法深入下去了。因为当你用 Express 写完一个页面后就面临着各种技术上的盲点，会让你无所适从。</p>\n<p>我也尝试绘制一张我对 JavaScript/Node.JS 或者说大前端体系理解的一张图:</p>\n<p><img src=\"https://vip1.loli.net/2020/05/10/6DBWfH7tybxdP1Q.png\" alt=\"node-arch.png\"></p>\n<p>JavaScript 体系看似前后端通吃，客户端、 服务端甚至桌面端皆有。但是最大的问题在于：没有一个东西能给他们建立起关系并发展成为一种体系。</p>\n<p>插播一条娱乐看点，前两天写 Ruby on rails 框架的作者 DHH 发推并配图：</p>\n<p><img src=\"https://vip1.loli.net/2020/05/10/bKAeufqpHXNRmoG.png\" alt=\"dhh.png\"></p>\n<p>大意如下：</p>\n<blockquote>\n<p>现在的年轻人在 web 开发的时候是这样的嘛？底层逻辑、纯手写连接池 + 纯手工 SQL、配置文件都放在了一起。天哪！（截图中使用的式TJ大神写的 Express 框架）</p>\n</blockquote>\n<p>然后 TJ 大神也回复了：</p>\n<p><img src=\"https://vip1.loli.net/2020/05/10/vCJ4zSNBVDmLEHo.png\" alt=\"tj.png\"></p>\n<p>大意如下：</p>\n<blockquote>\n<p>只有菜鸟玩家才能写出干净、简洁、高性能（黑 Ruby 性能）、见名知意的 SQL，而不是去写一个有15层的抽象。</p>\n</blockquote>\n<p>两者的推特对话挺有意思，大家娱乐一下。</p>\n<h3 id=\"TypeScript-语言的瓶颈\"><a href=\"#TypeScript-语言的瓶颈\" class=\"headerlink\" title=\"TypeScript 语言的瓶颈\"></a>TypeScript 语言的瓶颈</h3><p>TypeScript 也主流，但是持续关注 TS 到现在，我发现 TS 也遇到了瓶颈，这个瓶颈不仅来自于 TS 的设计目标与理念，更多的还是社区及 TC39。TS 的设计初衷是 JavaScript 的超集，由于本身要编译成 JS，这一点本质上限制了 TypeScript 的方向，设计者对于添加一个新特性会非常谨慎，一者怕与 TC39 ES proposal 冲突，二者要考编译到不同版本 JavaScript 的兼容性问题。以至于现在 TS 新的语言特性只会跟进 TC 39 发布的最新 ES proposal。但是我个人对于 TC 39 的效率及未来持怀疑态度，decorator 的提案一直还处于 Stage 2 的阶段，像这种其它语言都成为标配好几年的事情，现在 JavaScript 社区还在草案（stage-2）阶段。</p>\n<blockquote>\n<p>普及下 ECMA 的标准的流程：</p>\n<ol>\n<li>stage-1：前期设想</li>\n<li>stage-2：正式提案（装饰器所在的阶段）</li>\n<li>stage-3：实现候选</li>\n<li>Stage-4：完成测试</li>\n<li>各个浏览器 JS 引擎实现；TypeScript 实现</li>\n</ol>\n</blockquote>\n<p><img src=\"https://vip1.loli.net/2020/05/10/zuS1fYsNeyUKtxI.png\" alt=\"stage2-decorator.png\"></p>\n<p>在这个问题上我认为其实也很好解决，开个脑洞：如果微软想借助编程语言一统浏览器和客户端是没有什么不可能的。并入 TC39 组织，开发真正属于 TypeScript 的原生引擎，奉天子以令不臣的方式也未尝不可。</p>\n<p>近几年 Microsoft 对于开源的投入是肉眼可见的，微软要发力我相信很多东西都会有翻天覆地的变化。</p>\n<h3 id=\"打包工具的瓶颈\"><a href=\"#打包工具的瓶颈\" class=\"headerlink\" title=\"打包工具的瓶颈\"></a>打包工具的瓶颈</h3><p>Webpack/Babel 就更不用说了，主流中的主流。但是也是问题最严重的一个。Webpack/Babel 的流行恰恰从反面证明了前端的基础设施有多么的烂。现在国外网友老天天叫喊着 Webpack/Babel is eval 也是挺值得深思的。我们引入了一个新工具来解决问题，却又在不经意之间产生了新问题。</p>\n<p>前端构建工具问题的本质还是在于 Node.JS 的包管理工具的设计。这一点在 Node.JS 的作者 Ryan Dahl 关于 Deno 演讲《10 Things I Regret About Node.js》中也有过「官方」的承认。我相信任何一个实现过构建工具的人都被 Node gyp 打败过。node-sass, fsevent 的痛不必细说。更不用说万年被黑的 node_modules 了，你根本不知道一个简单的 npm install 命令会导致安装成千上万个 npm 包被安装到你的机器上。</p>\n<p><img src=\"https://vip1.loli.net/2020/05/10/4FWgDfbqiOLh5Iu.png\" alt=\"ry-node-regret.png\"></p>\n<p>当然每种编程语言对应的包管理工具都要解决依赖问题，而且这是一个普遍的问题，脚本/解释型编程语言尤为突出，Python/Ruby/PHP 都有这些类似的问题。或许 Go/Rust 这种把源代码编译打包成单个可执行文件的方式才是好的解决方式。</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p>从前人们总是抱怨 JavaScript 这门语言，黑它、讽刺它。但是我看到的是它在一点点变好。不仅是语言层面逐步完善，工具链生态日趋成熟，使用它的也人越来越多。大家对它的关注程度也在提高，整个 JavaScript 开发者的水平也在向更高更强的方向发展。生存环境只会淘汰那些老旧不再进化的事物，能适应变化的才会永存。</p>\n<p>JavaScript 这门语言有两个其它 <strong>任何</strong> 编程语言都不具备的优点：</p>\n<ol>\n<li>几乎 <strong>无所不在</strong> 且不用安装，有浏览器就有 JavaScript。脚本语言意味着它能被嵌入到任何宿主环境中去：Nginx、Native应用、硬件编程、物连网、嵌入式 都有它的身影</li>\n<li>这门语言对于技术的更新迭代有着强大的 <strong>适应能力</strong>。JavaScript 本身的更新迭代速度导致它进化速度很多，语言上的新特性会很快被运用到生产环境。相比 Python 而言，这简直是做梦，Python 2 到 3 的转换没人能看到真正的时间表。</li>\n</ol>\n<p>当下的前端开发状况不由得让我我想起苏东坡《晁错论》中的一段话：</p>\n<blockquote>\n<p>天下之患，最不可为者，名为治平无事，而其实有不测之忧…</p>\n</blockquote>\n<p>最大的问题在于，有些事物，从表面上看着平淡无奇，但实际上底层暗流涌动，似乎每一时刻都有着巨变的可能性。这也是前端开发最有趣也最有潜力的地方。</p>\n<p>作为一名新时代的前端开发者，就是要在这看似风平浪静的表面之下，找到一些真正的突破点，兴许只是一个简单的想法，顺应时势然后造就出不斐的成就也说不定呢。</p>\n<p>无论是前端还是后端、国内还是国外，技术才是真正的核心竞争力，只有技术革新才能提高生产力，而对于我们程序员来讲，编程则是唯一能提升硬实力的方法。只要你心中充满了热情，坚持下去总会走出一条自己的路子。</p>\n<p><strong>分享一段小经历</strong></p>\n<p>我在 2018 年有幸参加了 TypeScirpt 的推广大会，TypeScript 的作者 Anders Hejlsberg 亲自主讲。一位将近 60 岁的程序员在讲台上滔滔不绝的讲技术方案，TS 的设计理念。你真的很难想像这样一位处于「知天命」阶段的老头子（实际上很年轻）讲的东西。</p>\n<p><img src=\"https://vip1.loli.net/2020/05/10/lz6uP1RijHBqotd.jpg\" alt=\"typescript-2015.jpg\"></p>\n<p>QA 环节有个年轻小伙问到 Anders「在中国做程序员很累、很难应该怎么坚持下去（类似这样的描述，细节记不清楚了）」的问题。</p>\n<p>Anders 几乎毫不犹豫的说出了「Passion」这个单词。我瞬间就被打动了。因为在此之前我对于「激情」这个词的认识还停留在成功人士的演讲说辞层面，当 Anders 亲口说出 Passion 一词的时候，让人感觉真的是一字千金。</p>\n<p>直到现在 Anders 还做为 TypeScript 的核心贡献者为它提交代码，到处奔走为 TypeScript 宣传。</p>\n<p>我们再回到前端，那么未来的前端到底会发展成什么样？长期而言充满了未知数，谁也没法预测，但是短期来讲我比较关注几个东西：</p>\n<ul>\n<li><strong>ESBuild</strong> ：一个极快的 JavaScript bundler。这个工具可以说是真正的「Game changer」。同样是一个打包任务，它快到让你没反应过来就完成任务了。ESBuild 使用 Go 语言编写，实现了整套 <strong>并行的</strong> ES 解析器、代码生成器，作者是 Figma 的 CTO（是的国外的 CTO 是要写代码的）。最近更新很频繁，Vue 新的构建工具也会基于它来做 TS 部分的打包功能。</li>\n<li><strong>Deno</strong> ：一个安全的 JavaScript &amp; TypeScript 运行时。Deno 的方向充满了可能性，未来 deno 不仅仅可以做 JS 后端，还能和 Rust 打通，给JS注入一些原生 native 的能力，然后 Webasmbly, webGL 之类的技术都变成了可能，1.0 正式版发布日期也快到了。</li>\n<li><strong>Figma</strong>：一个在线版的 Sketch，虽然功能还没有 Sketch 强大，但是已经有了设计界面的基本能力。关键还在于它的整个实现都是基于 web 技术，底层 C++ 实现图形的渲染、绘制，前端通过 Webasmbly 与浏览器 Canvas 交互，做到了让用户在浏览器端体验到了 Native 软件能力。像 AutoLayout 这种功能在用户体验上就是颠覆式的，使用的时候它很自然，没有什么存在感。但是用了就回不去了。</li>\n</ul>\n<p>如果你仔细研究一番，上面的这些新鲜东西，都是起源于前端，但又不把视野局限在前端。或许这就是前端未来的发展方向吧。</p>\n<p>这几项技术我们会在后期的更新中会有专门的干货文章，敬请期待~</p>\n"},{"title":"粤港澳大湾区金融数学建模大赛（一等奖）量化论文","url":"/posts/4b195fc0/","content":"<h1 id=\"econmoic-model\"><a href=\"#econmoic-model\" class=\"headerlink\" title=\"econmoic_model\"></a>econmoic_model</h1><a id=\"more\"></a>\n\n<p>粤港澳大湾区金融数学建模一等奖作品(量化模型的建立)</p>\n<p>在这里记录一下比赛时峥嵘的岁月，记录当年疯狂的青春，记录当初无数个挑灯野战的夜晚。</p>\n<p>数据和论文我都放在 这里了哦！！！    地址: <a href=\"https://github.com/jomeswang/econmoic_model\" target=\"_blank\" rel=\"noopener\">https://github.com/jomeswang/econmoic_model</a></p>\n<p><img src=\"https://photo.jomeswang.top/20210214215717.png\" alt=\"\"></p>\n<p>作者： 罗立旺  龚晓雪   张雯</p>\n<p><img src=\"https://photo.jomeswang.top/20210213224418.png\" alt=\"\"></p>\n<ul>\n<li>首次上传于2021.2.14</li>\n</ul>\n","categories":["建模"],"tags":["建模"]},{"title":"以太链上发行自己的代币Token","url":"/posts/4f7564f/","content":"<blockquote>\n<p>最近币圈随便发行的币太多了，都不知道什么币有什么的一个价值，所以自己亲自来尝试以下，发币的一个流程。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-流程介绍\"><a href=\"#一：-流程介绍\" class=\"headerlink\" title=\"一： 流程介绍\"></a>一： 流程介绍</h2><ol>\n<li>创建自己的钱包</li>\n<li>编写智能合约</li>\n<li>部署智能合约</li>\n<li>添加和接受代币</li>\n</ol>\n<p>智能合约地址:  <a href=\"https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol\" target=\"_blank\" rel=\"noopener\">https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol</a></p>\n<p>小狐狸钱包官网： <a href=\"https://metamask.io/\" target=\"_blank\" rel=\"noopener\">https://metamask.io/</a></p>\n<p>智能合约查询网站： <a href=\"https://blockexplorer.one/eth/ropsten\" target=\"_blank\" rel=\"noopener\">https://blockexplorer.one/eth/ropsten</a></p>\n<p>以太坊编译器： <a href=\"https://remix.ethereum.org/\" target=\"_blank\" rel=\"noopener\">https://remix.ethereum.org/</a></p>\n<h2 id=\"二：-创建自己的一个MetaMask-钱包\"><a href=\"#二：-创建自己的一个MetaMask-钱包\" class=\"headerlink\" title=\"二： 创建自己的一个MetaMask 钱包\"></a>二： 创建自己的一个MetaMask 钱包</h2><p>安装 MetaMask 插件（使用谷歌浏览器f）需要fq： <a href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=zh-CN</a></p>\n<p><img src=\"https://photo.jomeswang.top/20210213170032.png\" alt=\"\"></p>\n<p>安装之后 然后他会弹出一个页面，点击确认进入来进入到这一个页面之后 ，之后点击下面的 创建钱包的这一个按钮。</p>\n<p><img src=\"https://photo.jomeswang.top/20210213170301.png\" alt=\"\"></p>\n<p>然后点击I agree，进入到设置密码的阶段。</p>\n<p><img src=\"https://photo.jomeswang.top/20210213170532.png\" alt=\"\"></p>\n<p><strong>注意：必须把下述的这一个密语复制 并且 妥善的保存下来（这是你账户的唯一凭证）</strong></p>\n<p><img src=\"https://photo.jomeswang.top/20210213170546.png\" alt=\"\"></p>\n<p>之后会让你重新输入这一个密语。</p>\n<p>这就算 将 注册钱包的这一个流程完成啦！！！</p>\n<h2 id=\"三：-编写智能合约\"><a href=\"#三：-编写智能合约\" class=\"headerlink\" title=\"三： 编写智能合约\"></a>三： 编写智能合约</h2><p>智能合约地址:  <a href=\"https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol\" target=\"_blank\" rel=\"noopener\">https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol</a></p>\n<p>打开这一个地址然后复制里面的一个代码：</p>\n<p><img src=\"https://photo.jomeswang.top/20210213172459.png\" alt=\"\"></p>\n<h2 id=\"四：-部署智能合约\"><a href=\"#四：-部署智能合约\" class=\"headerlink\" title=\"四： 部署智能合约\"></a>四： 部署智能合约</h2><p>由于部署合约需要一定的GAS 费用，因此我们先在 测试网络上获取需要的测试ETF。</p>\n<p><img src=\"https://photo.jomeswang.top/20210213173336.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210213173426.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210213173442.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210213173514.png\" alt=\"\"></p>\n<p>然后看到下面 transactions  出现记录之后，就阔以耐心等待了，之后等3-5 分钟之后点击 刚刚那一个小猫咪插件 就阔以看到 我们已经有了 1个ETF（虽然是在测试网络上的）</p>\n<p><img src=\"https://photo.jomeswang.top/20210213174244.png\" alt=\"\"></p>\n<p>以太坊编译器： <a href=\"https://remix.ethereum.org/\" target=\"_blank\" rel=\"noopener\">https://remix.ethereum.org/</a></p>\n<p>打开这一个网站</p>\n<p><img src=\"https://photo.jomeswang.top/20210213173055.png\" alt=\"\"></p>\n<p>之后编译代码</p>\n<p><img src=\"https://photo.jomeswang.top/20210213181147.png\" alt=\"\"></p>\n<p>之后部署在测试链上去</p>\n<p><img src=\"https://photo.jomeswang.top/20210213182029.png\" alt=\"\"></p>\n<p>发现右边有这一个说明成功部署好了</p>\n<p><img src=\"https://photo.jomeswang.top/20210213182213.png\" alt=\"\"></p>\n<h2 id=\"六：-添加代币\"><a href=\"#六：-添加代币\" class=\"headerlink\" title=\"六： 添加代币\"></a>六： 添加代币</h2><p>左下角有这一个出现</p>\n<p><img src=\"https://photo.jomeswang.top/20210213182412.png\" alt=\"\"></p>\n<p>复制后要在 metamask 钱包中添加这一个代币</p>\n<p><img src=\"https://photo.jomeswang.top/20210213182454.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210213182618.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210213182638.png\" alt=\"\"></p>\n<p>有啦！！！！</p>\n<p><img src=\"https://photo.jomeswang.top/20210213182707.png\" alt=\"\"></p>\n<p>成功导入 ！！！！</p>\n<p>发现整一个发布代币的流程非常简单。。。。。。 而且代币还有更简单的一个发布手段，代币做起来不难，主要是看代币背后的团队以及项目靠不靠谱，在2021的这一个大牛市时保持一番对币的清晰认识，这总归是我们这一群开发者所要做的事情，为大家解开发币的神秘面纱，普及区块链概念，让更多人了解区块链，认识区块链，看到区块链给我们生活带来的改变。</p>\n","categories":["区块链"],"tags":["区块链","以太链开发"]},{"title":"2020-年春节总结","url":"/posts/22ff3d83/","content":"<blockquote>\n<p>学会顺势而为。这样才能在未来找到属于自己的一个机遇。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>2020年对全球而言是非常特殊的一年，因为疫情的原因，我们都被锁在了家里难以回到学校继续我们的学业，但是呢！！！！！！阔以和好朋友一起快乐地玩耍呀！！！真不错，阔以做自己想做的那一些事。但是也因为这样地一个原因，自己学习地方向也是很迷茫地。但是呢？？我觉得一切都是铺垫，为了自己能够对后面接的这些项目做了一个思维上地一个铺垫。好多呀！！我后面整理以下先再说吧！！</p>\n<h2 id=\"一：-学习上\"><a href=\"#一：-学习上\" class=\"headerlink\" title=\"一： 学习上\"></a>一： 学习上</h2><h3 id=\"1-1-学习内容\"><a href=\"#1-1-学习内容\" class=\"headerlink\" title=\"1.1 学习内容\"></a>1.1 学习内容</h3><p>额，怎么说呢？ 在上半年中由于待在了家里，就非常地摸鱼！！！</p>\n<p>上学期的话由于还在原来的微电专业，学习的还是原来电子相关的课程像（电路分析这些），但我后面呢？？？发现我对这些的兴趣不是很大，我希望呢！！！由于后面做项目的原因，做着做着就突然发现自己已经逃不出技术这一个大圈子里了，干着干着就突然变成了前端工程师了，额。。。。。。。算了算了干就干吧！！！之后呢！！被骗去计软的这一个圈子里，额 发现我也不是特别喜欢这一个oyouyih东西，我到底喜欢什么东西呢？？？？？发现我对金融感兴趣哎！！！我觉得我到时应该会进金融互联网公司阔能 干区块链相关的工作或者式其他的一些东西？？？？</p>\n<p>讲讲我在计软的一个学习状态：我的态度无所谓。。。</p>\n<p>学习数据结构只是任务如此，学习其他的也是一样。但是呢？ 这些都是我们在成长过程中不可或缺的一大部分，相信自己，我终能够熬过去的，寻找属于自己的未来。</p>\n<h3 id=\"1-2-学习成就\"><a href=\"#1-2-学习成就\" class=\"headerlink\" title=\"1.2 学习成就\"></a>1.2 学习成就</h3><p>旺旺还是非常棒的哦！！！！！</p>\n<p>大一一年的时间搞到了均绩点 3.8多这是非常强的哎！！！  拿了一个 学习之星 二等 也是真不错！！！！嘻嘻嘻 之后我就跑到其他专业鬼混去啦！！！</p>\n<p><img src=\"https://photo.jomeswang.top/20210213221415.png\" alt=\"\"></p>\n<p>之后拿到这一个奖后，我就开始摸鱼了，因为我觉得学习实在没啥好玩的了。。。。。</p>\n<h2 id=\"二：竞赛上\"><a href=\"#二：竞赛上\" class=\"headerlink\" title=\"二：竞赛上\"></a>二：竞赛上</h2><h3 id=\"2-1-粤港澳金融数学建模大赛\"><a href=\"#2-1-粤港澳金融数学建模大赛\" class=\"headerlink\" title=\"2.1  粤港澳金融数学建模大赛\"></a>2.1  粤港澳金融数学建模大赛</h3><p>之后呢，和晓雪，张雯她们一起打了两个建模比赛，一个是大湾区金融建模竞赛，一个是美赛，额。。。。我的感觉是啥呢？？？ 比赛得时候确实会感觉到非常累得一个感觉，但是呢，，， 我却感觉到非常得充实，喜欢这样的一个 生活，喜欢这样的一个忙碌得生活，虽然会好累，但是却享受这样得一个过程，享受大家一起努力奋斗得一个生活，这就是我喜欢得一个生活.呀！！</p>\n<p><img src=\"https://photo.jomeswang.top/20210213224418.png\" alt=\"\"></p>\n<p>当然呢？？ 我也是超级感觉累得。。。。。额</p>\n<p><img src=\"https://photo.jomeswang.top/20210213225853.png\" alt=\"\"></p>\n<p>这一题做的是这样得一个样子！！！</p>\n<p>我们呢！！！ 哈哈哈 ！！！！ 用了好几天的一个时间，来对这一个东西进行一个分析，然后还是我最后排版的，累死了。 超级怀念当初那一个充满活力的那一个自己啊！！！！希望未来阔以越来越棒哦！！！！我自己的一个代码哈  我来整理以下有点多，然后我就放上来吧！！</p>\n<p>提交数据Github地址： <a href=\"https://github.com/jomeswang/econmoic_model\" target=\"_blank\" rel=\"noopener\">https://github.com/jomeswang/econmoic_model</a></p>\n<h3 id=\"2-2-美赛（F-题）\"><a href=\"#2-2-美赛（F-题）\" class=\"headerlink\" title=\"2.2  美赛（F 题）\"></a>2.2  美赛（F 题）</h3><p><a href=\"https://shimo.im/docs/q8WXPHcXVwxpWgKQ\" target=\"_blank\" rel=\"noopener\">https://shimo.im/docs/q8WXPHcXVwxpWgKQ</a><br>美赛记录文档（题目翻译，注意事项） </p>\n<p><a href=\"https://shimo.im/docs/rvJtWJjJhdXtR6xj\" target=\"_blank\" rel=\"noopener\">https://shimo.im/docs/rvJtWJjJhdXtR6xj</a><br>美赛论文 记录文档<br>找到相关链接可以丢进去<br>记录格式  中文标题  链接      关键内容截图<br>自己的看法文档如何结合起题目以至于模型</p>\n<p>美赛将于北京时间2021年‍‍‍‍‍‍‍‍‍2月5日上午6:00至2月9日上午9:00举行。</p>\n<h2 id=\"三：项目上\"><a href=\"#三：项目上\" class=\"headerlink\" title=\"三：项目上\"></a>三：项目上</h2><p>今年肝了好多项目呀！！！</p>\n<p>我先汇总一下！！！</p>\n<p>对了 单单一个学期就被骗去好几个 开发团队了  哈哈哈  但最终发现校内团队，每一个可行的，都是有头但是过程 哈哈哈！！！</p>\n<p>阿布这个人 我觉得的话，太过技术化了，很少从我们的一个角度去思考问题，感觉这样不太行，技术做领导，处理人与人之间的关系，真的不行啊。。。。。。</p>\n<h3 id=\"3-1-百姓渔村\"><a href=\"#3-1-百姓渔村\" class=\"headerlink\" title=\"3.1  百姓渔村\"></a>3.1  百姓渔村</h3><p>之前在做这一个项目的时候，做的是一个小程序的管理后台，基本实现了大多数的一个功能，但还是套用的是 vue-admin-el 的一个后台管理模板，额。。。。技术还不够娴熟，希望你阔以继续努力的提高呀！！！</p>\n<p>地址： <a href=\"https://github.com/Miigon/baixin-console\" target=\"_blank\" rel=\"noopener\">https://github.com/Miigon/baixin-console</a></p>\n<h3 id=\"3-2-大学生荔教\"><a href=\"#3-2-大学生荔教\" class=\"headerlink\" title=\"3.2 大学生荔教\"></a>3.2 大学生荔教</h3><p><img src=\"https://photo.jomeswang.top/20210214010925.png\" alt=\"\"></p>\n<p>已上线项目：二维码见下</p>\n<p><img src=\"https://photo.jomeswang.top/20210214011335.png\" alt=\"\"></p>\n<h3 id=\"3-3-深大树洞和荔小树的改进\"><a href=\"#3-3-深大树洞和荔小树的改进\" class=\"headerlink\" title=\"3.3 深大树洞和荔小树的改进\"></a>3.3 深大树洞和荔小树的改进</h3><p>深大树洞的修改已上线 但仍有许多的一个问题 还没修复完成</p>\n<p>。。。</p>\n<h3 id=\"3-4-深大百科，实验室交流平台（待完成）\"><a href=\"#3-4-深大百科，实验室交流平台（待完成）\" class=\"headerlink\" title=\"3.4 深大百科，实验室交流平台（待完成）\"></a>3.4 深大百科，实验室交流平台（待完成）</h3><p>。。。。。。</p>\n<h3 id=\"3-5-402-网站搭建\"><a href=\"#3-5-402-网站搭建\" class=\"headerlink\" title=\"3.5 402 网站搭建\"></a>3.5 402 网站搭建</h3><p>。。。。。。</p>\n<h2 id=\"四：情感上\"><a href=\"#四：情感上\" class=\"headerlink\" title=\"四：情感上\"></a>四：情感上</h2><p>5555  好难！！！！算了 还是一直做单身🐕 吧！！！！ 哈哈哈哈哈哈！！</p>\n<h2 id=\"五：编程上\"><a href=\"#五：编程上\" class=\"headerlink\" title=\"五：编程上\"></a>五：编程上</h2><p>学习 React, 小程序云开发，小程序使用。但是呢  在做业务的同时缺乏了对技术</p>\n<h2 id=\"六：理财上\"><a href=\"#六：理财上\" class=\"headerlink\" title=\"六：理财上\"></a>六：理财上</h2><p>看了一些理财的书如： 富爸爸穷爸爸等 使用币投资和资金获得了一定的 资金汇报</p>\n<h2 id=\"七：总结\"><a href=\"#七：总结\" class=\"headerlink\" title=\"七：总结\"></a>七：总结</h2><p>我再想一想。。。。。。。</p>\n","categories":["随笔"],"tags":["总结"]},{"title":"区块链学习二(以太坊)","url":"/posts/4a21ea90/","content":"<blockquote>\n<p>学习新技术，享受新技术给我们带来的新突破</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：以太坊账户\"><a href=\"#一：以太坊账户\" class=\"headerlink\" title=\"一：以太坊账户\"></a>一：以太坊账户</h2><p>比特币的计算余额通过交易来计算，</p>\n<p>以太坊基于账户的计算方式</p>\n<p><img src=\"https://photo.jomeswang.top/20210211103243.png\" alt=\"\"></p>\n<h2 id=\"二：以太坊的数据结构（状态树，交易树，收据树）\"><a href=\"#二：以太坊的数据结构（状态树，交易树，收据树）\" class=\"headerlink\" title=\"二：以太坊的数据结构（状态树，交易树，收据树）\"></a>二：以太坊的数据结构（状态树，交易树，收据树）</h2><p>状态树 -&gt; 前缀树（MPT      ）</p>\n<p><img src=\"https://photo.jomeswang.top/20210211112112.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210211112345.png\" alt=\"\"></p>\n<p>听不懂。。。。。。。。</p>\n<h2 id=\"三：-以太坊的共识机制（GHOST）\"><a href=\"#三：-以太坊的共识机制（GHOST）\" class=\"headerlink\" title=\"三： 以太坊的共识机制（GHOST）\"></a>三： 以太坊的共识机制（GHOST）</h2><p> 出块时间短，迭代速度快， 无法成为最长链的快阔以成为 叔父区块，也阔以获得 7/8*3 的区块奖励。</p>\n<h3 id=\"3-1-POW\"><a href=\"#3-1-POW\" class=\"headerlink\" title=\"3.1  POW\"></a>3.1  POW</h3><p>要研发出防止 ASIC Resistance 的共识算法</p>\n<p>于是用内存来进行挖矿！！！ 第一个是LTC，使用scrypt算法！！！。</p>\n<h3 id=\"3-2-POS-（PROOTAF-OF-STATE）\"><a href=\"#3-2-POS-（PROOTAF-OF-STATE）\" class=\"headerlink\" title=\"3.2 POS （PROOTAF OF STATE）\"></a>3.2 POS （PROOTAF OF STATE）</h3><p>量多的有投票权。</p>\n<p>按照投票来获得记账权。</p>\n<p>( ETF2.0    FFG)</p>\n<h3 id=\"3-2-POD-（proof-of-prosit）\"><a href=\"#3-2-POD-（proof-of-prosit）\" class=\"headerlink\" title=\"3.2 POD （proof of prosit）\"></a>3.2 POD （proof of prosit）</h3><p>听不懂！！！！！</p>\n","categories":["区块链"],"tags":["区块链","以太坊"]},{"title":"区块链学习一（比特币）","url":"/posts/566c809e/","content":"<blockquote>\n<p>逐渐打开区块链的神秘的大门</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-比特币的密码学原理\"><a href=\"#一：-比特币的密码学原理\" class=\"headerlink\" title=\"一： 比特币的密码学原理\"></a>一： 比特币的密码学原理</h2><h3 id=\"1-1-哈希函数\"><a href=\"#1-1-哈希函数\" class=\"headerlink\" title=\"1.1  哈希函数\"></a>1.1  哈希函数</h3><h4 id=\"1-1-1-哈希碰撞\"><a href=\"#1-1-1-哈希碰撞\" class=\"headerlink\" title=\"1.1.1  哈希碰撞\"></a>1.1.1  哈希碰撞</h4><p>选取的哈希函数需要 有 collision resistance  即 在常理认为 哈希之后的数不会重复。</p>\n<h4 id=\"1-1-2-哈希单向性\"><a href=\"#1-1-2-哈希单向性\" class=\"headerlink\" title=\"1.1.2 哈希单向性\"></a>1.1.2 哈希单向性</h4><p>即 x-&gt; f(x)  是 单向性的，即f（x） 不可能 得出 x的  (条件： 输入的值范围要足够大，足够随机）所以阔以在源数据之中拼接一个 nounce 值。</p>\n<h4 id=\"1-1-3-puzzle-friendly\"><a href=\"#1-1-3-puzzle-friendly\" class=\"headerlink\" title=\"1.1.3  puzzle friendly\"></a>1.1.3  puzzle friendly</h4><p>知道输出，无法主导输入的值的大致范围，需要一个个 的进行计算，计算出NONCE， 在 block header 中有nonce，我们就需要算出这一个 nonce 值满足以下条件。 难以解决，容易验证。</p>\n<p><img src=\"https://photo.jomeswang.top/20210210142642.png\" alt=\"\"></p>\n<h4 id=\"1-1-4-哈希函数的算法\"><a href=\"#1-1-4-哈希函数的算法\" class=\"headerlink\" title=\"1.1.4 哈希函数的算法\"></a>1.1.4 哈希函数的算法</h4><p>比特币 使用 SHA-256 哈徐算法</p>\n<h3 id=\"1-2-电子签名\"><a href=\"#1-2-电子签名\" class=\"headerlink\" title=\"1.2  电子签名\"></a>1.2  电子签名</h3><h4 id=\"1-2-1-非对称加密\"><a href=\"#1-2-1-非对称加密\" class=\"headerlink\" title=\"1.2.1  非对称加密\"></a>1.2.1  非对称加密</h4><p>使用公私钥对方式对信息进行加密和解密。</p>\n<p>公钥加密，私钥解密。</p>\n<p>因此r如果用私钥来 签名，相当于电子签名。</p>\n<h4 id=\"1-2-2-公私钥生成\"><a href=\"#1-2-2-公私钥生成\" class=\"headerlink\" title=\"1.2.2  公私钥生成\"></a>1.2.2  公私钥生成</h4><p>生成的时候随机，那么随机 选取的随机源要good</p>\n<h2 id=\"二：-比特币的数据结构\"><a href=\"#二：-比特币的数据结构\" class=\"headerlink\" title=\"二： 比特币的数据结构\"></a>二： 比特币的数据结构</h2><h3 id=\"2-1-哈希指针\"><a href=\"#2-1-哈希指针\" class=\"headerlink\" title=\"2.1  哈希指针\"></a>2.1  哈希指针</h3><p>有 指针域和哈希域</p>\n<p>哈希域存上一个节点的哈希值。</p>\n<p><img src=\"https://photo.jomeswang.top/20210210144026.png\" alt=\"\"></p>\n<h3 id=\"2-3-莫克尔树\"><a href=\"#2-3-莫克尔树\" class=\"headerlink\" title=\"2.3 莫克尔树\"></a>2.3 莫克尔树</h3><p>使用莫克尔树，阔以对区块记录下来的交易记录进行错误勘察（查看数据源中有哪一些是被篡改过的）</p>\n<p><img src=\"https://photo.jomeswang.top/20210210144453.png\" alt=\"\"></p>\n<h3 id=\"2-3-莫克尔-证明\"><a href=\"#2-3-莫克尔-证明\" class=\"headerlink\" title=\"2.3   莫克尔 证明\"></a>2.3   莫克尔 证明</h3><p>需要去验证当前记录已经被打包在了区块中了</p>\n<p>节点分轻节点和全节点。 轻节点只储存 block header 部分，一般运用在手机上。u。全节点需要去储存block header 部分和 block body 部分。</p>\n<p>当轻节点想要去查找莫一交易记录是否已经记录在区块链中的时候。</p>\n<p>那么需要全节点提供 红色部分的哈希值，然后 用要验证的交易记录来取一次哈希，接着用红色部分的哈希再来取一次哈希，不断重复这一个步骤。 最后 验证出来的 根哈希值和轻节点拥有的根哈希值比对 看是否对的上来验证交易记录是否存在区块链中。</p>\n<p><img src=\"https://photo.jomeswang.top/20210210145107.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210210211822.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210210211850.png\" alt=\"\"></p>\n<p>​     </p>\n<h3 id=\"2-4-区块结构\"><a href=\"#2-4-区块结构\" class=\"headerlink\" title=\"2.4 区块结构\"></a>2.4 区块结构</h3><p><img src=\"https://photo.jomeswang.top/20210210165809.png\" alt=\"\"></p>\n<h2 id=\"三：-比特币的共识算法\"><a href=\"#三：-比特币的共识算法\" class=\"headerlink\" title=\"三： 比特币的共识算法\"></a>三： 比特币的共识算法</h2><h3 id=\"3-1-攻击方式\"><a href=\"#3-1-攻击方式\" class=\"headerlink\" title=\"3.1 攻击方式\"></a>3.1 攻击方式</h3><h4 id=\"3-1-1-双花攻击\"><a href=\"#3-1-1-双花攻击\" class=\"headerlink\" title=\"3.1.1  双花攻击\"></a>3.1.1  双花攻击</h4><p>一个货币使用两次</p>\n<p>解决方案：</p>\n<ol>\n<li>（中心化  是由央行发行 央行确认）</li>\n<li>（去中心化  使用 区块链方式 双向哈希指针，指向币的 来源和去向。</li>\n</ol>\n<h4 id=\"3-1-2-分叉攻击\"><a href=\"#3-1-2-分叉攻击\" class=\"headerlink\" title=\"3.1.2 分叉攻击\"></a>3.1.2 分叉攻击</h4><p><img src=\"https://photo.jomeswang.top/20210210190636.png\" alt=\"\"></p>\n<p>六节点确认，一小时确认时间</p>\n<h3 id=\"3-2-分布式共识\"><a href=\"#3-2-分布式共识\" class=\"headerlink\" title=\"3.2 分布式共识\"></a>3.2 分布式共识</h3><p>FLP： 在一个异步的系统里，网络延迟没有上限，那么只要有一个错误，那么就无法达到共识。</p>\n<p>CAP: Consistyncy, Availability, Partiton tolerance 三角形模型，无法满足三者完美。</p>\n<h4 id=\"3-2-1-挖矿\"><a href=\"#3-2-1-挖矿\" class=\"headerlink\" title=\"3.2.1 挖矿\"></a>3.2.1 挖矿</h4><p>记录账本 -&gt; 矿工 -&gt; 计算nonce -&gt; POW </p>\n<h2 id=\"四：-比特币系统的实现\"><a href=\"#四：-比特币系统的实现\" class=\"headerlink\" title=\"四： 比特币系统的实现\"></a>四： 比特币系统的实现</h2><h3 id=\"4-1-激励机制\"><a href=\"#4-1-激励机制\" class=\"headerlink\" title=\"4.1  激励机制\"></a>4.1  激励机制</h3><p>打包-&gt; 小费 and 出块奖励</p>\n<h3 id=\"4-2-出块\"><a href=\"#4-2-出块\" class=\"headerlink\" title=\"4.2 出块\"></a>4.2 出块</h3><p>4 年出块奖励减半（挖出21万比特币的时间为4年左右 ） 由一开始的 50个   4年之后变到 25，以及类推 最终比特币的总量为2100个。</p>\n<p>transaction-based ledger 维护一个结构 维护 totaloutputs</p>\n<p>account-based ledger 账户机制</p>\n<p><img src=\"https://photo.jomeswang.top/20210210183435.png\" alt=\"\"></p>\n<p><img src=\"https://photo.jomeswang.top/20210210185624.png\" alt=\"\"></p>\n<h3 id=\"4-3-挖矿\"><a href=\"#4-3-挖矿\" class=\"headerlink\" title=\"4.3  挖矿\"></a>4.3  挖矿</h3><p>进行伯努利试验，并且无记忆性   保证了算力与概率之间的比例关系。</p>\n<p><img src=\"https://photo.jomeswang.top/20210210185206.png\" alt=\"\"></p>\n<h2 id=\"四：-比特币挖矿难度调整\"><a href=\"#四：-比特币挖矿难度调整\" class=\"headerlink\" title=\"四： 比特币挖矿难度调整\"></a>四： 比特币挖矿难度调整</h2><p><img src=\"https://photo.jomeswang.top/20210210211015.png\" alt=\"\"></p>\n<p> <img src=\"https://photo.jomeswang.top/20210210214129.png\" alt=\"\"> </p>\n<h2 id=\"五：-分叉\"><a href=\"#五：-分叉\" class=\"headerlink\" title=\"五： 分叉\"></a>五： 分叉</h2><h3 id=\"5-1-状态分叉\"><a href=\"#5-1-状态分叉\" class=\"headerlink\" title=\"5.1 状态分叉\"></a>5.1 状态分叉</h3><p>分叉攻击</p>\n<p><img src=\"https://photo.jomeswang.top/20210210232019.png\" alt=\"\"></p>\n<h3 id=\"5-2-协议分叉\"><a href=\"#5-2-协议分叉\" class=\"headerlink\" title=\"5.2 协议分叉\"></a>5.2 协议分叉</h3><h4 id=\"5-2-1-硬分叉\"><a href=\"#5-2-1-硬分叉\" class=\"headerlink\" title=\"5.2.1 硬分叉\"></a>5.2.1 硬分叉</h4><p>对协议的内容产生分叉</p>\n<ol>\n<li>区块大小限制 1M （7tx/sec）</li>\n</ol>\n<h4 id=\"5-2-2-软分叉\"><a href=\"#5-2-2-软分叉\" class=\"headerlink\" title=\"5.2.2 软分叉\"></a>5.2.2 软分叉</h4><p>待探索</p>\n","categories":["区块链"],"tags":["区块链","比特币"]},{"title":"前端进阶之路","url":"/posts/948da657/","content":"<blockquote>\n<p>拨开一切的迷雾，最终一定能看到事物的本质！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-JS-相关\"><a href=\"#一：-JS-相关\" class=\"headerlink\" title=\"一： JS 相关\"></a>一： JS 相关</h2><h3 id=\"1-1-基础类型\"><a href=\"#1-1-基础类型\" class=\"headerlink\" title=\"1.1 基础类型\"></a>1.1 基础类型</h3><p>七种原始数据类型</p>\n<ul>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>number</li>\n<li>string</li>\n<li>symbol</li>\n<li>bigint</li>\n</ul>\n<p>引用类型</p>\n<ul>\n<li>Object 对象<ul>\n<li>Object 普通对象</li>\n<li>Array 数组对象</li>\n<li>RegExp 正则对象</li>\n<li>Date 日期对象</li>\n<li>Math 数学函数</li>\n<li>Function 函数对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-检测类型\"><a href=\"#1-2-检测类型\" class=\"headerlink\" title=\"1.2 检测类型\"></a>1.2 检测类型</h3><h4 id=\"1-2-1-typeof\"><a href=\"#1-2-1-typeof\" class=\"headerlink\" title=\"1.2.1 typeof\"></a>1.2.1 typeof</h4><p>对于原始类型来说，除了 null 都可以调用typeof显示正确的类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span> <span class=\"comment\">// 'number'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'1'</span> <span class=\"comment\">// 'string'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// 'undefined'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">// 'boolean'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span>() <span class=\"comment\">// 'symbol'</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>但对于引用数据类型，除了函数之外，都会显示”object”。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// 'object'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// 'object'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span>.log <span class=\"comment\">// 'function'</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>因此采用typeof判断对象数据类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true</p>\n<h4 id=\"1-2-2-instanceof\"><a href=\"#1-2-2-instanceof\" class=\"headerlink\" title=\"1.2.2 instanceof\"></a>1.2.2 instanceof</h4><p>因此采用typeof判断对象数据类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person()</span><br><span class=\"line\">p1 <span class=\"keyword\">instanceof</span> Person <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">'hello world'</span></span><br><span class=\"line\">str1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">str2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-3-实现-instanceof-的功能\"><a href=\"#1-2-3-实现-instanceof-的功能\" class=\"headerlink\" title=\"1.2.3  实现 instanceof 的功能\"></a>1.2.3  实现 instanceof 的功能</h4><p>核心: 原型链的向上查找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstanceof</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//基本数据类型直接返回false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> left !== <span class=\"string\">'object'</span> || left === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//getProtypeOf是Object对象自带的一个方法，能够拿到参数的原型对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> proto = <span class=\"built_in\">Object</span>.getPrototypeOf(left);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//查找到尽头，还没找到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(proto == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找到相同的原型对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(proto == right.prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        proto = <span class=\"built_in\">Object</span>.getPrototypeOf(proto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(<span class=\"string\">\"111\"</span>, <span class=\"built_in\">String</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"111\"</span>), <span class=\"built_in\">String</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-类型转换\"><a href=\"#1-3-类型转换\" class=\"headerlink\" title=\"1.3 类型转换\"></a>1.3 类型转换</h3><h4 id=\"1-3-1-类型转换\"><a href=\"#1-3-1-类型转换\" class=\"headerlink\" title=\"1.3.1  类型转换\"></a>1.3.1  类型转换</h4><ul>\n<li><p>转换为布尔值</p>\n</li>\n<li><p>转换为数字</p>\n</li>\n<li><p>转换为字符串</p>\n</li>\n</ul>\n<p>  <img src=\"http://photo.jomeswang.top/20210101234802.png\" alt=\"\"></p>\n<h4 id=\"1-3-2-结果是什么？为什么？\"><a href=\"#1-3-2-结果是什么？为什么？\" class=\"headerlink\" title=\"1.3.2 [] == ![]结果是什么？为什么？\"></a>1.3.2 [] == ![]结果是什么？为什么？</h4><p>== 中，左右两边都需要转换为数字然后进行比较。</p>\n<p>[]转换为数字为0。</p>\n<p>![] 首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true。</p>\n<p>因此![]为false，进而在转换成数字，变为0。</p>\n<p>0 == 0 ， 结果为true。</p>\n<h3 id=\"1-4-闭包\"><a href=\"#1-4-闭包\" class=\"headerlink\" title=\"1.4  闭包\"></a>1.4  闭包</h3><p>红宝书(p178)上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数.</p>\n<h4 id=\"1-4-1-闭包产生的原因\"><a href=\"#1-4-1-闭包产生的原因\" class=\"headerlink\" title=\"1.4.1 闭包产生的原因?\"></a>1.4.1 闭包产生的原因?</h4><p>首先要明白作用域链的概念，其实很简单，在ES5中只存在两种作用域————全局作用域和函数作用域，<code>当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链</code>，值得注意的是，每一个子函数都会拷贝上级的作用域，形成一个作用域的链条。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function f1() &#123;</span><br><span class=\"line\">  var a &#x3D; 2</span><br><span class=\"line\">  function f2() &#123;</span><br><span class=\"line\">    console.log(a);&#x2F;&#x2F;2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x &#x3D; f1();</span><br><span class=\"line\">x();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-2-闭包有哪些表现形式\"><a href=\"#1-4-2-闭包有哪些表现形式\" class=\"headerlink\" title=\"1.4.2  闭包有哪些表现形式?\"></a>1.4.2  闭包有哪些表现形式?</h4><p>明白了本质之后，我们就来看看，在真实的场景中，究竟在哪些地方能体现闭包的存在？</p>\n<ol>\n<li><p>返回一个函数。刚刚已经举例。</p>\n</li>\n<li><p>作为函数参数传递</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 1;</span><br><span class=\"line\">function foo()&#123;</span><br><span class=\"line\">  var a &#x3D; 2;</span><br><span class=\"line\">  function baz()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  bar(baz);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar(fn)&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 这就是闭包</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; 输出2，而不是1</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>在定时器、事件监听、Ajax请求、跨窗口通信、Web Workers或者任何异步中，只要使用了回调函数，实际上就是在使用闭包。</p>\n</li>\n<li><p>IIFE(立即执行函数表达式)创建闭包, 保存了<code>全局作用域window</code>和<code>当前函数的作用域</code>，因此可以全局的变量。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 2;</span><br><span class=\"line\">(function IIFE()&#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 输出2</span><br><span class=\"line\">  console.log(a);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-5-原型链相关\"><a href=\"#1-5-原型链相关\" class=\"headerlink\" title=\"1.5 原型链相关\"></a>1.5 原型链相关</h3><h4 id=\"1-5-1-原型对象和构造函数有何关系？\"><a href=\"#1-5-1-原型对象和构造函数有何关系？\" class=\"headerlink\" title=\"1.5.1 .原型对象和构造函数有何关系？\"></a>1.5.1 .原型对象和构造函数有何关系？</h4><p>在JavaScript中，每当定义一个函数数据类型(普通函数、类)时候，都会天生自带一个prototype属性，这个属性指向函数的原型对象。</p>\n<p>当函数经过new调用时，这个函数就成为了构造函数，返回一个全新的实例对象，这个实例对象有一个<strong>proto</strong>属性，指向构造函数的原型对象。</p>\n<p><img src=\"http://photo.jomeswang.top/20210102004853.png\" alt=\"\"></p>\n<h4 id=\"1-5-2-描述一下-原型链\"><a href=\"#1-5-2-描述一下-原型链\" class=\"headerlink\" title=\"1.5.2 描述一下 原型链\"></a>1.5.2 描述一下 原型链</h4><p>JavaScript对象通过<strong>proto</strong> 指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条, 即原型链。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/20/16de955ca89f6091?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<ul>\n<li>对象的 hasOwnProperty() 来检查对象自身中是否含有该属性</li>\n<li>使用 in 检查对象中是否含有某个属性时，如果对象中没有但是原型链中有，也会返回 true</li>\n</ul>\n<h4 id=\"1-5-3-原型和原型链\"><a href=\"#1-5-3-原型和原型链\" class=\"headerlink\" title=\"1.5.3 原型和原型链\"></a>1.5.3 原型和原型链</h4><p>其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链</p>\n<p><img src=\"http://photo.jomeswang.top/20210102005401.png\" alt=\"\"></p>\n<p>看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 <code>__proto__</code> 的方式连接了起来。为什么 <code>obj</code> 可以访问到 <code>valueOf</code> 函数，就是因为 <code>obj</code> 通过原型链找到了 <code>valueOf</code> 函数。</p>\n<p>对于这一小节的知识点，总结起来就是以下几点：</p>\n<ul>\n<li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li>\n<li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li>\n<li>函数的 <code>prototype</code> 是一个对象</li>\n<li>对象的 <code>__proto__</code> 属性指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链</li>\n</ul>\n<h4 id=\"1-6-继承相关\"><a href=\"#1-6-继承相关\" class=\"headerlink\" title=\"1.6 继承相关\"></a>1.6 继承相关</h4><h4 id=\"1-6-1-借助call\"><a href=\"#1-6-1-借助call\" class=\"headerlink\" title=\"1.6.1  借助call\"></a>1.6.1  借助call</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent1'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  Parent1.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'child1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child1);</span><br></pre></td></tr></table></figure>\n\n<p>这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。</p>\n<h4 id=\"1-6-2-借助原型链\"><a href=\"#1-6-2-借助原型链\" class=\"headerlink\" title=\"1.6.2 借助原型链\"></a>1.6.2 借助原型链</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent2'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'child2'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child2.prototype = <span class=\"keyword\">new</span> Parent2();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Child2());</span><br></pre></td></tr></table></figure>\n\n<p>看似没有问题，父类的方法和属性都能够访问，但实际上有一个潜在的不足。举个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Child2();</span><br><span class=\"line\">s1.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.play, s2.play);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到控制台：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/20/16de955fbdbd9d9c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<p>明明我只改变了s1的play属性，为什么s2也跟着变了呢？很简单，因为两个实例使用的是同一个原型对象。</p>\n<p>那么还有更好的方式么？</p>\n<h4 id=\"1-6-3-将前两种组合\"><a href=\"#1-6-3-将前两种组合\" class=\"headerlink\" title=\"1.6.3  将前两种组合\"></a>1.6.3  将前两种组合</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent3'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child3</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Parent3.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'child3'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child3.prototype = <span class=\"keyword\">new</span> Parent3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child3();</span><br><span class=\"line\">s3.play.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3.play, s4.play);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到控制台：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/20/16de95621c0cdde1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<p>之前的问题都得以解决。但是这里又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype = new Parent3();）。这是我们不愿看到的。那么如何解决这个问题？</p>\n<h4 id=\"1-6-4-组合继承的优化1\"><a href=\"#1-6-4-组合继承的优化1\" class=\"headerlink\" title=\"1.6.4  组合继承的优化1\"></a>1.6.4  组合继承的优化1</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent4</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent4'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Parent4.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.type = <span class=\"string\">'child4'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child4.prototype = Parent4.prototype;</span><br></pre></td></tr></table></figure>\n\n<p>这里让将父类原型对象直接给到子类，父类构造函数只执行一次，而且父类属性和方法均能访问，但是我们来测试一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> Child4();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/10/20/16de956480812408?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<p>子类实例的构造函数是Parent4，显然这是不对的，应该是Child4。</p>\n<h4 id=\"1-6-5-最推荐使用-组合继承的优化1\"><a href=\"#1-6-5-最推荐使用-组合继承的优化1\" class=\"headerlink\" title=\"1.6.5  (最推荐使用): 组合继承的优化1\"></a>1.6.5  (最推荐使用): 组合继承的优化1</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent5</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent5'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.play = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Parent5.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.type = <span class=\"string\">'child5'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Child5.prototype = <span class=\"built_in\">Object</span>.create(Parent5.prototype);</span><br><span class=\"line\">  Child5.prototype.constructor = Child5;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这是最推荐的一种方式，接近完美的继承，它的名字也叫做寄生组合继承。</p>\n<h3 id=\"1-6-手写JS-Array-原生方法\"><a href=\"#1-6-手写JS-Array-原生方法\" class=\"headerlink\" title=\"1.6 手写JS  Array 原生方法\"></a>1.6 手写JS  Array 原生方法</h3><h4 id=\"1-6-1-实现-Array-prototype-map-方法\"><a href=\"#1-6-1-实现-Array-prototype-map-方法\" class=\"headerlink\" title=\"1.6.1 实现 Array.prototype.map 方法\"></a>1.6.1 实现 Array.prototype.map 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.prototype.mymap &#x3D; function(callbackFn, thisArg) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 处理数组类型异常</span><br><span class=\"line\">  if (this &#x3D;&#x3D;&#x3D; null || this &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">    throw new TypeError(&quot;Cannot read property &#39;map&#39; of null or undefined&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 处理回调类型异常</span><br><span class=\"line\">  if (Object.prototype.toString.call(callbackFn) !&#x3D; &quot;[object Function]&quot;) &#123;</span><br><span class=\"line\">    throw new TypeError(callbackFn + &#39; is not a function&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 草案中提到要先转换为对象</span><br><span class=\"line\">  let O &#x3D; Object(this);</span><br><span class=\"line\">  let T &#x3D; thisArg;</span><br><span class=\"line\">  </span><br><span class=\"line\">  let len &#x3D; O.length &gt;&gt;&gt; 0;</span><br><span class=\"line\">  let A &#x3D; new Array(len);</span><br><span class=\"line\">  for(let k &#x3D; 0; k &lt; len; k++) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 还记得原型链那一节提到的 in 吗？in 表示在原型链查找</span><br><span class=\"line\">    &#x2F;&#x2F; 如果用 hasOwnProperty 是有问题的，它只能找私有属性</span><br><span class=\"line\">    if (k in O) &#123;</span><br><span class=\"line\">      let kValue &#x3D; O[k];</span><br><span class=\"line\">      &#x2F;&#x2F; 依次传入this, 当前项，当前索引，整个数组</span><br><span class=\"line\">      let mappedValue &#x3D; callbackFn.call(T, kValue, k, O);</span><br><span class=\"line\">      A[k] &#x3D; mappedValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里解释一下, length &gt;&gt;&gt; 0, 字面意思是指”右移 0 位”，但实际上是把前面的空位用0填充，这里的作用是保证len为数字且为整数。</p>\n<h4 id=\"1-6-2-实现-Array-prototype-reduce-方法\"><a href=\"#1-6-2-实现-Array-prototype-reduce-方法\" class=\"headerlink\" title=\"1.6.2  实现 Array.prototype.reduce 方法\"></a>1.6.2  实现 Array.prototype.reduce 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.prototype.reduce  &#x3D; function(callbackfn, initialValue) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 异常处理，和 map 一样</span><br><span class=\"line\">  &#x2F;&#x2F; 处理数组类型异常</span><br><span class=\"line\">  if (this &#x3D;&#x3D;&#x3D; null || this &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">    throw new TypeError(&quot;Cannot read property &#39;reduce&#39; of null or undefined&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 处理回调类型异常</span><br><span class=\"line\">  if (Object.prototype.toString.call(callbackfn) !&#x3D; &quot;[object Function]&quot;) &#123;</span><br><span class=\"line\">    throw new TypeError(callbackfn + &#39; is not a function&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let O &#x3D; Object(this);</span><br><span class=\"line\">  let len &#x3D; O.length &gt;&gt;&gt; 0;</span><br><span class=\"line\">  let k &#x3D; 0;</span><br><span class=\"line\">  let accumulator &#x3D; initialValue;</span><br><span class=\"line\">  if (accumulator &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">    for(; k &lt; len ; k++) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 查找原型链</span><br><span class=\"line\">      if (k in O) &#123;</span><br><span class=\"line\">        accumulator &#x3D; O[k];</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 表示数组全为空</span><br><span class=\"line\">  if(k &#x3D;&#x3D;&#x3D; len &amp;&amp; accumulator &#x3D;&#x3D;&#x3D; undefined) </span><br><span class=\"line\">    throw new Error(&#39;Each element of the array is empty&#39;);</span><br><span class=\"line\">  for(;k &lt; len; k++) &#123;</span><br><span class=\"line\">    if (k in O) &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 注意，核心！</span><br><span class=\"line\">      accumulator &#x3D; callbackfn.call(undefined, accumulator, O[k], k, O);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return accumulator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-6-3-实现-Array-prototype-push-pop-方法\"><a href=\"#1-6-3-实现-Array-prototype-push-pop-方法\" class=\"headerlink\" title=\"1.6.3 实现 Array.prototype.push  pop 方法\"></a>1.6.3 实现 Array.prototype.push  pop 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.prototype.push &#x3D; function(...items) &#123;</span><br><span class=\"line\">  let O &#x3D; Object(this);</span><br><span class=\"line\">  let len &#x3D; this.length &gt;&gt;&gt; 0;</span><br><span class=\"line\">  let argCount &#x3D; items.length &gt;&gt;&gt; 0;</span><br><span class=\"line\">  &#x2F;&#x2F; 2 ** 53 - 1 为JS能表示的最大正整数</span><br><span class=\"line\">  if (len + argCount &gt; 2 ** 53 - 1) &#123;</span><br><span class=\"line\">    throw new TypeError(&quot;The number of array is over the max value restricted!&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for(let i &#x3D; 0; i &lt; argCount; i++) &#123;</span><br><span class=\"line\">    O[len + i] &#x3D; items[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let newLength &#x3D; len + argCount;</span><br><span class=\"line\">  O.length &#x3D; newLength;</span><br><span class=\"line\">  return newLength;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Array.prototype.pop &#x3D; function() &#123;</span><br><span class=\"line\">  let O &#x3D; Object(this);</span><br><span class=\"line\">  let len &#x3D; this.length &gt;&gt;&gt; 0;</span><br><span class=\"line\">  if (len &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">    O.length &#x3D; 0;</span><br><span class=\"line\">    return undefined;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  len --;</span><br><span class=\"line\">  let value &#x3D; O[len];</span><br><span class=\"line\">  delete O[len];</span><br><span class=\"line\">  O.length &#x3D; len;</span><br><span class=\"line\">  return value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-6-4-实现-Array-prototype-filter-方法\"><a href=\"#1-6-4-实现-Array-prototype-filter-方法\" class=\"headerlink\" title=\"1.6.4 实现 Array.prototype.filter 方法\"></a>1.6.4 实现 Array.prototype.filter 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array.prototype.filter &#x3D; function(callbackfn, thisArg) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 处理数组类型异常</span><br><span class=\"line\">  if (this &#x3D;&#x3D;&#x3D; null || this &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">    throw new TypeError(&quot;Cannot read property &#39;filter&#39; of null or undefined&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F; 处理回调类型异常</span><br><span class=\"line\">  if (Object.prototype.toString.call(callbackfn) !&#x3D; &quot;[object Function]&quot;) &#123;</span><br><span class=\"line\">    throw new TypeError(callbackfn + &#39; is not a function&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let O &#x3D; Object(this);</span><br><span class=\"line\">  let len &#x3D; O.length &gt;&gt;&gt; 0;</span><br><span class=\"line\">  let resLen &#x3D; 0;</span><br><span class=\"line\">  let res &#x3D; [];</span><br><span class=\"line\">  for(let i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    if (i in O) &#123;</span><br><span class=\"line\">      let element &#x3D; O[i];</span><br><span class=\"line\">      if (callbackfn.call(thisArg, O[i], i, O)) &#123;</span><br><span class=\"line\">        res[resLen++] &#x3D; element;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-7-手写-new-apply-call-bind-方法\"><a href=\"#1-7-手写-new-apply-call-bind-方法\" class=\"headerlink\" title=\"1.7 手写 new, apply, call, bind 方法\"></a>1.7 手写 new, apply, call, bind 方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function newOperator(ctor, ...args) &#123;</span><br><span class=\"line\">    if(typeof ctor !&#x3D;&#x3D; &#39;function&#39;)&#123;</span><br><span class=\"line\">      throw &#39;newOperator function the first param must be a function&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    let obj &#x3D; Object.create(ctor.prototype);</span><br><span class=\"line\">    let res &#x3D; ctor.apply(obj, args);</span><br><span class=\"line\">    </span><br><span class=\"line\">    let isObject &#x3D; typeof res &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; res !&#x3D;&#x3D; null;</span><br><span class=\"line\">    let isFunction &#x3D; typoof res &#x3D;&#x3D;&#x3D; &#39;function&#39;;</span><br><span class=\"line\">    return isObect || isFunction ? res : obj;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.bind &#x3D; function (context, ...args) &#123;</span><br><span class=\"line\">    if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class=\"line\">      throw new Error(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var self &#x3D; this;</span><br><span class=\"line\"></span><br><span class=\"line\">    var fbound &#x3D; function () &#123;</span><br><span class=\"line\">        self.apply(this instanceof self ? </span><br><span class=\"line\">            this : </span><br><span class=\"line\">            context, args.concat(Array.prototype.slice.call(arguments)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fbound.prototype &#x3D; Object.create(self.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">    return fbound;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.call &#x3D; function (context, ...args) &#123;</span><br><span class=\"line\">  let context &#x3D; context || window;</span><br><span class=\"line\">  let fn &#x3D; Symbol(&#39;fn&#39;);</span><br><span class=\"line\">  context.fn &#x3D; this;</span><br><span class=\"line\"></span><br><span class=\"line\">  let result &#x3D; eval(&#39;context.fn(...args)&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  delete context.fn</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.apply &#x3D; function (context, args) &#123;</span><br><span class=\"line\">  let context &#x3D; context || window;</span><br><span class=\"line\">  context.fn &#x3D; this;</span><br><span class=\"line\">  let result &#x3D; eval(&#39;context.fn(...args)&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  delete context.fn</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：-HTML-CSS-相关\"><a href=\"#二：-HTML-CSS-相关\" class=\"headerlink\" title=\"二： HTML, CSS 相关\"></a>二： HTML, CSS 相关</h2><h2 id=\"三：-浏览器相关\"><a href=\"#三：-浏览器相关\" class=\"headerlink\" title=\"三： 浏览器相关\"></a>三： 浏览器相关</h2><h2 id=\"四：-框架进阶\"><a href=\"#四：-框架进阶\" class=\"headerlink\" title=\"四： 框架进阶\"></a>四： 框架进阶</h2><h2 id=\"五：-打包造轮子\"><a href=\"#五：-打包造轮子\" class=\"headerlink\" title=\"五： 打包造轮子\"></a>五： 打包造轮子</h2><h2 id=\"六：-计算机网络\"><a href=\"#六：-计算机网络\" class=\"headerlink\" title=\"六： 计算机网络\"></a>六： 计算机网络</h2><h2 id=\"七：-设计模式\"><a href=\"#七：-设计模式\" class=\"headerlink\" title=\"七： 设计模式\"></a>七： 设计模式</h2><h2 id=\"八：-数据结构\"><a href=\"#八：-数据结构\" class=\"headerlink\" title=\"八： 数据结构\"></a>八： 数据结构</h2>","categories":["JS"],"tags":["JS"]},{"title":"JS Generator 生成器和迭代器","url":"/posts/d567a06f/","content":"<blockquote>\n<p>JS的 生成器真的是一个神奇的东西， yield 和  function*（）</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>在 JavaScript 中，<strong>迭代器</strong>是一个对象，它定义一个序列，并在终止时可能返回一个返回值。 更具体地说，迭代器是通过使用 <code>next()</code> 方法实现 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" target=\"_blank\" rel=\"noopener\">Iterator protocol</a> 的任何一个对象，该方法返回具有两个属性的对象： <code>value</code>，这是序列中的 next 值；和 <code>done</code> ，如果已经迭代到序列中的最后一个值，则它为 <code>true</code> 。如果 <code>value</code> 和 <code>done</code> 一起存在，则它是迭代器的返回值。</p>\n<p>一旦创建，迭代器对象可以通过重复调用next（）显式地迭代。 迭代一个迭代器被称为消耗了这个迭代器，因为它通常只能执行一次。 在产生终止值之后，对next（）的额外调用应该继续返回{done：true}。</p>\n<p>The <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator/next\" target=\"_blank\" rel=\"noopener\"><code>next()</code></a> 方法也接受一个参数用于修改生成器内部状态。传递给 <code>next()</code> 的参数值会被yield接收。要注意的是，传给第一个 <code>next()</code> 的值会被忽略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function * generatorFunction()&#123;</span><br><span class=\"line\">  yield;</span><br><span class=\"line\">  foo(yield &quot;I am a good boy!!&quot;)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo(x)&#123;</span><br><span class=\"line\">  console.log(&quot;Hello !!&quot;, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let generator &#x3D; generatorFunction()</span><br><span class=\"line\">console.log(generator.next());  &#x2F;&#x2F;  &#123; value: undefined, done: false &#125;</span><br><span class=\"line\">console.log(generator.next());  &#x2F;&#x2F;  &#123; value: &#39;I am a good boy!!&#39;, done: false &#125;</span><br><span class=\"line\">console.log(generator.next(23)); &#x2F;&#x2F; &#123; value: undefined, done: true &#125; 23 will be transpoted to yield yield &quot;I am a good boy!!&quot; as the x in the foo fuc</span><br></pre></td></tr></table></figure>\n\n","categories":["JS"],"tags":["JS"]},{"title":"JS Event Loop机制","url":"/posts/ad8e9b31/","content":"<blockquote>\n<p>这篇写 JS 讲异步，任务的文章超级好！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>文章链接： <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>\n<p>上一小节我们讲到了什么是执行栈，大家也知道了当我们执行 JS 代码的时候其实就是往执行栈中放入函数，那么遇到异步代码的时候该怎么办？其实当遇到异步的代码时，会被<strong>挂起</strong>并在需要执行的时候加入到 Task（有多种 Task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。</p>\n<p><img src=\"http://books.shepiji.top/BOOKLETS_IMAGES/16740fa4cd9c6937\" alt=\"img\">事件循环</p>\n<p>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 <strong>微任务</strong>（microtask） 和 <strong>宏任务</strong>（macrotask）。在 ES6 规范中，microtask 称为 <code>jobs</code>，macrotask 称为 <code>task</code>。下面来看以下代码的执行顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(&#39;script start&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">async function async1() &#123;</span><br><span class=\"line\">  await async2()</span><br><span class=\"line\">  console.log(&#39;async1 end&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async function async2() &#123;</span><br><span class=\"line\">  console.log(&#39;async2 end&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async1()</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\">  console.log(&#39;setTimeout&#39;)</span><br><span class=\"line\">&#125;, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise(resolve &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;Promise&#39;)</span><br><span class=\"line\">  resolve()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .then(function() &#123;</span><br><span class=\"line\">    console.log(&#39;promise1&#39;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(function() &#123;</span><br><span class=\"line\">    console.log(&#39;promise2&#39;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;script end&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; script start &#x3D;&gt; async2 end &#x3D;&gt; Promise &#x3D;&gt; script end &#x3D;&gt; promise1 &#x3D;&gt; promise2 &#x3D;&gt; async1 end &#x3D;&gt; setTimeout</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：新的浏览器中不是如上打印的，因为 await 变快了，具体内容可以往下看</p>\n</blockquote>\n<p>首先先来解释下上述代码的 <code>async</code> 和 <code>await</code> 的执行顺序。当我们调用 <code>async1</code> 函数时，会马上输出 <code>async2 end</code>，并且函数返回一个 <code>Promise</code>，接下来在遇到 <code>await</code>的时候会就让出线程开始执行 <code>async1</code> 外的代码，所以我们完全可以把 <code>await</code> 看成是<strong>让出线程</strong>的标志。</p>\n<p>然后当同步代码全部执行完毕以后，就会去执行所有的异步代码，那么又会回到 <code>await</code> 的位置执行返回的 <code>Promise</code> 的 <code>resolve</code> 函数，这又会把 <code>resolve</code> 丢到微任务队列中，接下来去执行 <code>then</code> 中的回调，当两个 <code>then</code> 中的回调全部执行完毕以后，又会回到 <code>await</code> 的位置处理返回值，这时候你可以看成是 <code>Promise.resolve(返回值).then()</code>，然后 <code>await</code> 后的代码全部被包裹进了 <code>then</code> 的回调中，所以 <code>console.log(&#39;async1 end&#39;)</code> 会优先执行于 <code>setTimeout</code>。</p>\n<p>如果你觉得上面这段解释还是有点绕，那么我把 <code>async</code> 的这两个函数改造成你一定能理解的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;async2 end&#39;)</span><br><span class=\"line\">  &#x2F;&#x2F; Promise.resolve() 将代码插入微任务队列尾部</span><br><span class=\"line\">  &#x2F;&#x2F; resolve 再次插入微任务队列尾部</span><br><span class=\"line\">  resolve(Promise.resolve())</span><br><span class=\"line\">&#125;).then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#39;async1 end&#39;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，如果 <code>await</code> 后面跟着 <code>Promise</code> 的话，<code>async1 end</code> 需要等待三个 tick 才能执行到。那么其实这个性能相对来说还是略慢的，所以 V8 团队借鉴了 Node 8 中的一个 Bug，在引擎底层将三次 tick 减少到了二次 tick。但是这种做法其实是违法了规范的，当然规范也是可以更改的，这是 V8 团队的一个 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Ftc39%2Fecma262%2Fpull%2F1250\">PR</a>，目前已被同意这种做法。</p>\n<p>所以 Event Loop 执行顺序如下所示：</p>\n<ul>\n<li>首先执行同步代码，这属于宏任务</li>\n<li>当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</li>\n<li>执行所有微任务</li>\n<li>当执行完所有微任务后，如有必要会渲染页面</li>\n<li>然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 <code>setTimeout</code> 中的回调函数</li>\n</ul>\n<p>所以以上代码虽然 <code>setTimeout</code> 写在 <code>Promise</code> 之前，但是因为 <code>Promise</code> 属于微任务而 <code>setTimeout</code> 属于宏任务，所以会有以上的打印。</p>\n<p>微任务包括 <code>process.nextTick</code> ，<code>promise</code> ，<code>MutationObserver</code>。</p>\n<p>宏任务包括 <code>script</code> ， <code>setTimeout</code> ，<code>setInterval</code> ，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI rendering</code>。</p>\n<p>这里很多人会有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 <code>script</code> ，浏览器会<strong>先执行一个宏任务</strong>，接下来有异步代码的话才会先执行微任务。</p>\n","categories":["JS"],"tags":["JS"]},{"title":"JS 正则表达式","url":"/posts/392503a1/","content":"<blockquote>\n<p>JS 表达式 看到</p>\n</blockquote>\n<a id=\"more\"></a>","categories":["JS"],"tags":["JS"]},{"title":"JS 学习文章总结","url":"/posts/d6009c7/","content":"<blockquote>\n<p>总结一下看过的文章</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>原生JS灵魂之问, 请问你能接得住几个？(上)</p>\n<p><a href=\"https://juejin.cn/post/6844903974378668039#heading-19\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/6844903974378668039#heading-19</a></p>\n</li>\n<li><p>原生JS灵魂之问(中)，检验自己是否真的熟悉JavaScript</p>\n<p><a href=\"https://juejin.cn/post/6844903986479251464#heading-56\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/6844903986479251464#heading-56</a></p>\n</li>\n<li><p>原生JS灵魂之问(下), 冲刺🚀进阶最后一公里(附个人成长经验分享)</p>\n<p><a href=\"https://juejin.cn/post/6844904004007247880#heading-76\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/6844904004007247880#heading-76</a></p>\n</li>\n<li><p>写给初中级前端的高级进阶指南（万字路线）</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI3NTM5NDgzOA==&amp;mid=2247484321&amp;idx=1&amp;sn=e5fb9256ce7887b314e69c17f3d3b872&amp;chksm=eb043bd8dc73b2cebc529089df47e12100144f936090c8e97eaa9450c3d4a6f72351b416a35b&amp;token=962173348&amp;lang=zh_CN#rd\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s?__biz=MzI3NTM5NDgzOA==&amp;mid=2247484321&amp;idx=1&amp;sn=e5fb9256ce7887b314e69c17f3d3b872&amp;chksm=eb043bd8dc73b2cebc529089df47e12100144f936090c8e97eaa9450c3d4a6f72351b416a35b&amp;token=962173348&amp;lang=zh_CN#rd</a></p>\n</li>\n<li><p>看完跳槽少说涨 5 K，前端面试从准备到谈薪完全指南（近万字精华）</p>\n<p><a href=\"https://github.com/KieSun/Dream/issues/28\" target=\"_blank\" rel=\"noopener\">https://github.com/KieSun/Dream/issues/28</a></p>\n</li>\n<li><p>JS EventLoop， 宏任务， 微任务 运行机制</p>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" target=\"_blank\" rel=\"noopener\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>\n</li>\n</ol>\n","categories":["JS"],"tags":["JS"]},{"title":"JS 之 apply，call, bind的运用","url":"/posts/4c61acf0/","content":"<blockquote>\n<p>回炉重造喽</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<ul>\n<li>call 会l立即调用该函数，并允许您一个一个地传递参数。</li>\n<li>Apply立即调用该函数，并允许您将参数作为数组传递。</li>\n<li>Bind返回一个新函数，允许您传入this和任意数量的参数。</li>\n</ul>\n<p><strong>Call</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person1 = &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'Jon'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'Kuperman'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'Kelly'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'King'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">say.call(person1, <span class=\"string\">'Hello'</span>); <span class=\"comment\">// Hello Jon Kuperman</span></span><br><span class=\"line\">say.call(person2, <span class=\"string\">'Hello'</span>); <span class=\"comment\">// Hello Kelly King</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Apply</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person1 = &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'Jon'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'Kuperman'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'Kelly'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'King'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\">greeting</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(greeting + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">say.apply(person1, [<span class=\"string\">'Hello'</span>]); <span class=\"comment\">// Hello Jon Kuperman</span></span><br><span class=\"line\">say.apply(person2, [<span class=\"string\">'Hello'</span>]); <span class=\"comment\">// Hello Kelly King</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Bind</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person1 = &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'Jon'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'Kuperman'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = &#123;<span class=\"attr\">firstName</span>: <span class=\"string\">'Kelly'</span>, <span class=\"attr\">lastName</span>: <span class=\"string\">'King'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.lastName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sayHelloJon = say.bind(person1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sayHelloKelly = say.bind(person2);</span><br><span class=\"line\"></span><br><span class=\"line\">sayHelloJon(); <span class=\"comment\">// Hello Jon Kuperman</span></span><br><span class=\"line\">sayHelloKelly(); <span class=\"comment\">// Hello Kelly King</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>总而言之：</p>\n<p>bind 会有点不同。它会返回一个新函数。 Call and Apply立即执行当前功能。</p>\n<p>同时 bind 还可以做许多事情比如： </p>\n<p>我们可以使用它来管理上面的示例中的函数。我们可以采用一个简单的hello函数并将其转换为helloJon或helloKelly。我们还可以将其用于诸如onClick之类的事件，这些事件我们不知道何时触发，但我们知道我们希望它们具有什么上下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function hello(name, date)&#123;</span><br><span class=\"line\">  console.log(&#96;$&#123;name&#125; was working here!!  on $&#123;date&#125;&#96;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let helloWang &#x3D; hello.bind(this, &quot;wangwang&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">helloWang(new Date())</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; log</span><br><span class=\"line\">&#x2F;&#x2F; wangwang was working here!!  on Sun Dec 27 2020 21:35:24 GMT+0800 (GMT+08:00)</span><br></pre></td></tr></table></figure>\n\n","categories":["JS"],"tags":["JS"]},{"title":"node Koa2 学习","url":"/posts/9e6407/","content":"<blockquote>\n<p>新的世界的大门又将向我们打开</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-简介\"><a href=\"#一：-简介\" class=\"headerlink\" title=\"一： 简介\"></a>一： 简介</h2><p>Express是目前最流行的Node.js框架之一。 Koa是由Express背后的团队创建的新的Web框架。它旨在成为Express的现代且更加简约的版本。它的一些特征是它的支持和对新JavaScript功能（例如生成器和async / await）的依赖。 Koa也没有附带任何中间件，尽管可以使用自定义插件和现有插件进行扩展。</p>\n<h2 id=\"二：-引入和使用\"><a href=\"#二：-引入和使用\" class=\"headerlink\" title=\"二：  引入和使用\"></a>二：  引入和使用</h2><p>router 功能需要自己引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i koa koa-router</span><br></pre></td></tr></table></figure>\n\n<p>并且最后还要将router 挂载上去。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class=\"line\">const app &#x3D; new Koa();</span><br><span class=\"line\">const Router &#x3D; require(&quot;koa-router&quot;)</span><br><span class=\"line\">const router &#x3D; new Router()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; logger</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(async (ctx, next) &#x3D;&gt; &#123;</span><br><span class=\"line\">  await next();</span><br><span class=\"line\">  const rt &#x3D; ctx.response.get(&#39;X-Response-Time&#39;);</span><br><span class=\"line\">  console.log(&#96;$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;rt&#125;&#96;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; x-response-time</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(async (ctx, next) &#x3D;&gt; &#123;</span><br><span class=\"line\">  const start &#x3D; Date.now();</span><br><span class=\"line\">  await next();</span><br><span class=\"line\">  const ms &#x3D; Date.now() - start;</span><br><span class=\"line\">  ctx.set(&#39;X-Response-Time&#39;, &#96;$&#123;ms&#125;ms&#96;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; response</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; app.use(async ctx &#x3D;&gt; &#123;</span><br><span class=\"line\">&#x2F;&#x2F;   ctx.body &#x3D; &#39;Hello World&#39;;</span><br><span class=\"line\">&#x2F;&#x2F; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&quot;&#x2F;:id&quot;, async (ctx)&#x3D;&gt;&#123;</span><br><span class=\"line\">  ctx.body &#x3D;  &quot;get&quot; + ctx.params.id </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.use(router.routes());   &#x2F;*启动路由*&#x2F;</span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\">app.listen(3000);</span><br></pre></td></tr></table></figure>\n\n","categories":["node"],"tags":["node","koa2"]},{"title":"node-express 的学习","url":"/posts/adc804d1/","content":"<blockquote>\n<p>Node 的一个框架 ， 简洁好用是它的一个特性！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>全文地址： <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website</a></p>\n<h2 id=\"一：-安装-express\"><a href=\"#一：-安装-express\" class=\"headerlink\" title=\"一： 安装 express\"></a>一： 安装 express</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 一个空目录</span><br><span class=\"line\">mkdir myapp</span><br><span class=\"line\">cd myapp</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;  初始化 npm</span><br><span class=\"line\">npm init</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 下载 npm 包</span><br><span class=\"line\">npm i express</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：-编写-js-文件\"><a href=\"#二：-编写-js-文件\" class=\"headerlink\" title=\"二： 编写 js 文件\"></a>二： 编写 js 文件</h2><p>编写 index.js 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 引入 express 包</span><br><span class=\"line\">const express &#x3D; require(&#39;express&#39;)</span><br><span class=\"line\">const app &#x3D; express()</span><br><span class=\"line\">const port &#x3D; 3000</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 匹配路由中间件  当当请求 localhost:3000 的时候服务端会返回以下数据</span><br><span class=\"line\">app.get(&#39;&#x2F;&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  res.send(&#39;Hello World!&#39;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 监听端口</span><br><span class=\"line\">app.listen(port, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(&#96;Example app listening at http:&#x2F;&#x2F;localhost:$&#123;port&#125;&#96;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>然后运行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">node index.js</span><br></pre></td></tr></table></figure>\n\n\n\n<p>即可打开浏览器 访问 localhost:3000 看到返回</p>\n<p><img src=\"http://photo.jomeswang.top/20201226140403.png\" alt=\"\"></p>\n<h2 id=\"三：-Express-生成器\"><a href=\"#三：-Express-生成器\" class=\"headerlink\" title=\"三： Express 生成器\"></a>三： Express 生成器</h2><h3 id=\"3-1：-安装\"><a href=\"#3-1：-安装\" class=\"headerlink\" title=\"3.1： 安装\"></a>3.1： 安装</h3><p> 可使用应用程序生成器工具 (<code>express</code>) 快速创建应用程序框架。</p>\n<p>使用以下命令安装 <code>express</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install express-generator -g</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-使用\"><a href=\"#3-2-使用\" class=\"headerlink\" title=\"3.2 使用\"></a>3.2 使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">express test_express</span><br><span class=\"line\">cd test_express</span><br><span class=\"line\">npm i</span><br><span class=\"line\">&#x2F;&#x2F; 运行</span><br><span class=\"line\">DEBUG&#x3D;test-express:* &amp; npm start</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器中输入 <code>http://localhost:3000/</code> 以访问此应用程序。</p>\n<p><img src=\"http://photo.jomeswang.top/20201226142259.png\" alt=\"\"></p>\n<h3 id=\"3-3-详细讲解\"><a href=\"#3-3-详细讲解\" class=\"headerlink\" title=\"3.3 详细讲解\"></a>3.3 详细讲解</h3><p>框架信息详解： <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website</a></p>\n<p>这个页面讲的超级详细的，我就不cv了。</p>\n<h3 id=\"3-4-操作数据库\"><a href=\"#3-4-操作数据库\" class=\"headerlink\" title=\"3.4 操作数据库\"></a>3.4 操作数据库</h3><p>与数据库交互有两种方法：</p>\n<ul>\n<li><p>使用数据库的原生查询语言（例如SQL）</p>\n</li>\n<li><p>使用对象数据模型（Object Data Model，简称 ODM）或对象关系模型（Object Relational Model，简称 ORM）。 ODM / ORM 能将网站中的数据表示为 JavaScript 对象，然后将它们映射到底层数据库。一些 ORM 只适用某些特定数据库，还有一些是普遍适用的。</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/mongoose\" target=\"_blank\" rel=\"noopener\">Mongoose</a>：一款为异步工作环境设计的 <a href=\"https://www.mongodb.org/\" target=\"_blank\" rel=\"noopener\">MongoDB</a> 对象建模工具。</p>\n</li>\n</ul>\n<h4 id=\"3-4-1-安装-Mongoose-和-MongoDB\"><a href=\"#3-4-1-安装-Mongoose-和-MongoDB\" class=\"headerlink\" title=\"3.4.1  安装 Mongoose 和 MongoDB\"></a>3.4.1  安装 Mongoose 和 MongoDB</h4><p>Mongoose 像任何其他依赖项一样，使用 NPM 将其安装在您的项目（<strong>package.json</strong>）中 。请在项目文件夹中运行下面的命令以完成安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install mongoose</span><br></pre></td></tr></table></figure>\n\n<p>安装 Mongoose 会添加所有依赖项，包括 MongoDB 数据库驱动程序，但不会安装 MongoDB 本身。要安装 MongoDB 服务器，可以 <a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"noopener\">点击下载</a> 各操作系统的安装程序在本地安装。也可以使用云端 MongoDB 实例。</p>\n<h4 id=\"3-4-2-连接数据库\"><a href=\"#3-4-2-连接数据库\" class=\"headerlink\" title=\"3.4.2  连接数据库\"></a>3.4.2  连接数据库</h4><p>在  app.js 中放置如下语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 导入 mongoose 模块</span><br><span class=\"line\">const mongoose &#x3D; require(&#39;mongoose&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 设置默认 mongoose 连接</span><br><span class=\"line\">const mongoDB &#x3D; &#39;mongodb:&#x2F;&#x2F;127.0.0.1&#x2F;my_database&#39;;</span><br><span class=\"line\">mongoose.connect(mongoDB);</span><br><span class=\"line\">&#x2F;&#x2F; 让 mongoose 使用全局 Promise 库</span><br><span class=\"line\">mongoose.Promise &#x3D; global.Promise;</span><br><span class=\"line\">&#x2F;&#x2F; 取得默认连接</span><br><span class=\"line\">const db &#x3D; mongoose.connection;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将连接与错误事件绑定（以获得连接错误的提示）</span><br><span class=\"line\">db.on(&#39;error&#39;, console.error.bind(console, &#39;MongoDB 连接错误：&#39;));</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-4-3-定义和添加模型\"><a href=\"#3-4-3-定义和添加模型\" class=\"headerlink\" title=\"3.4.3  定义和添加模型\"></a>3.4.3  定义和添加模型</h4><p>模型使用 <code>Schema</code> 接口进行定义。 <code>Schema</code> 可以定义每个文档中存储的字段，及字段的验证要求和默认值。还可以通过定义静态和实例辅助方法来更轻松地处理各种类型的数据，还可以像使用普通字段一样使用数据库中并不存在的虚拟属性（稍后讨论）。</p>\n<p>创建一个 bookModel 实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const mongoose &#x3D; require(&quot;mongoose&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">let Schema &#x3D; mongoose.Schema</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义模式</span><br><span class=\"line\">let BookSchema &#x3D; new Schema(&#123;</span><br><span class=\"line\">  name: String,</span><br><span class=\"line\">  author: String,</span><br><span class=\"line\">  id: &#123;type: Number, required: true&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 虚拟属性， 不存在数据库中， 类似于 计算属性</span><br><span class=\"line\">BookSchema</span><br><span class=\"line\">.virtual(&quot;url&quot;)</span><br><span class=\"line\">.get(()&#x3D;&gt;&#123;</span><br><span class=\"line\">  return &quot;&#x2F;book&#x2F;&quot;+ this.id;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 使用模式“编译”模型</span><br><span class=\"line\">module.exports &#x3D; mongoose.model(&quot;Book&quot;, BookSchema)</span><br><span class=\"line\">&#x2F;&#x2F;第一个参数是为模型所创建集合的别名（Mongoose 将为 SomeModel 模型创建数据库集合），第二个参数是创建模型时使用的模式。</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-4-4-创建，-查找，-修改记录\"><a href=\"#3-4-4-创建，-查找，-修改记录\" class=\"headerlink\" title=\"3.4.4 创建， 查找， 修改记录\"></a>3.4.4 创建， 查找， 修改记录</h4><p>创建  <code>bookController.js</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const &#123; log &#125; &#x3D; require(&quot;debug&quot;)</span><br><span class=\"line\">let Book &#x3D; require(&quot;..&#x2F;model&#x2F;bookModel&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">exports.create &#x3D; (req, res)&#x3D;&gt;&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;  创建</span><br><span class=\"line\">  let bookInstance &#x3D; new Book(&#123;</span><br><span class=\"line\">    name: &quot;llw&quot;,</span><br><span class=\"line\">    author: &quot;llwnb&quot;,</span><br><span class=\"line\">    id: 23</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  bookInstance.save(err&#x3D;&gt;&#123;</span><br><span class=\"line\">    if(err)</span><br><span class=\"line\">      return handleError(err)</span><br><span class=\"line\">    res.send(&quot;Hello World!!&quot;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.query &#x3D; (req, res)&#x3D;&gt;&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;  搜索</span><br><span class=\"line\">  Book.find()</span><br><span class=\"line\">      .exec((err, data)&#x3D;&gt;&#123;</span><br><span class=\"line\">        console.log(data);</span><br><span class=\"line\">        res.send(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.edit &#x3D; (req, res)&#x3D;&gt;&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;  只更新一个记录</span><br><span class=\"line\">  Book.where(&#123;id: 23&#125;)</span><br><span class=\"line\">  .update(&#123;$set: &#123;name: &quot;111111wangwang&quot;&#125;&#125;)</span><br><span class=\"line\">  .exec((err, data)&#x3D;&gt;&#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">    res.send(data)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3-4-5-配置路由\"><a href=\"#3-4-5-配置路由\" class=\"headerlink\" title=\"3.4.5  配置路由\"></a>3.4.5  配置路由</h4><p>在 <code>routes/index.js</code> 中配置成如下形式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var express &#x3D; require(&#39;express&#39;);</span><br><span class=\"line\">var router &#x3D; express.Router();</span><br><span class=\"line\">let book_controller &#x3D; require(&quot;..&#x2F;controllers&#x2F;bookController&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* GET home page. *&#x2F;</span><br><span class=\"line\">router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;</span><br><span class=\"line\">  res.render(&#39;index&#39;, &#123; title: &#39;Express&#39; &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&quot;&#x2F;create&quot;, book_controller.create)</span><br><span class=\"line\">router.get(&quot;&#x2F;query&quot;, book_controller.query)</span><br><span class=\"line\">router.get(&quot;&#x2F;edit&quot;, book_controller.edit)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; router;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>之后就可以愉快的访问啦！！！！</p>\n","categories":["node"],"tags":["node","express"]},{"title":"node 学习","url":"/posts/f4f44d6e/","content":"<blockquote>\n<p>终于有时间来学习 node 啦！！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-Node-介绍\"><a href=\"#一：-Node-介绍\" class=\"headerlink\" title=\"一： Node 介绍\"></a>一： Node 介绍</h2><p>Node.js运行单线程，非阻塞，异步编程，这非常节省内存。</p>\n<ol>\n<li>Node.js可以生成动态页面内容</li>\n<li>Node.js可以在服务器上创建，打开，读取，写入，删除和关闭文件</li>\n<li>Node.js可以收集表单数据</li>\n<li>Node.js可以添加，删除，修改数据库中的数据</li>\n</ol>\n<h2 id=\"二：-Node-的语法\"><a href=\"#二：-Node-的语法\" class=\"headerlink\" title=\"二： Node 的语法\"></a>二： Node 的语法</h2><h3 id=\"2-1-Node-HTTP-服务\"><a href=\"#2-1-Node-HTTP-服务\" class=\"headerlink\" title=\"2.1 Node  HTTP 服务\"></a>2.1 Node  HTTP 服务</h3><p>HTTP模块可以创建一个HTTP服务器，该服务器侦听服务器端口并将响应返回给客户端。</p>\n<p>使用 url 模块来对url 进行解析 获得 url 的query 参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">let url &#x3D; require(&quot;url&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;create a server object:</span><br><span class=\"line\">http.createServer(function (req, res) &#123;</span><br><span class=\"line\">  res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html&#39;&#125;);</span><br><span class=\"line\">  let queryData &#x3D; url.parse(req.url, true).query   &#x2F;&#x2F; call ?test&#x3D;123 return &#123;test: 123&#125;</span><br><span class=\"line\">  res.write(&#39;Hello World!&#39;); &#x2F;&#x2F;write a response to the client</span><br><span class=\"line\">  res.end(); &#x2F;&#x2F;end the response</span><br><span class=\"line\">&#125;).listen(8080); &#x2F;&#x2F;the server object listens on port 8080</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-Node-模块化\"><a href=\"#2-2-Node-模块化\" class=\"headerlink\" title=\"2.2 Node 模块化\"></a>2.2 Node 模块化</h3><p>编写一个 返回 当前时间的 模块 并命名为 getDate.js </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">exports.getDate &#x3D; ()&#x3D;&gt;&#123;</span><br><span class=\"line\">  return new Date()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后创建 index.js  在里面写入以下内容  注意要与 getDate.js 在同意路径下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let http &#x3D; require(&#39;http&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 析构出 getDate 函数 ， 并且通过 require 方法引入模块</span><br><span class=\"line\">let &#123;getDate&#125; &#x3D; require(&quot;.&#x2F;getDate.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function (req, res) &#123;</span><br><span class=\"line\">  res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html&#39;&#125;);</span><br><span class=\"line\">  res.write(&#39;Hello World!&#39; + getDate());</span><br><span class=\"line\">  res.end();</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-Node-文件操作\"><a href=\"#2-3-Node-文件操作\" class=\"headerlink\" title=\"2.3  Node 文件操作\"></a>2.3  Node 文件操作</h3><p>使用 fs 模块 来 对文件进行 增删改查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let http &#x3D; require(&quot;http&quot;)</span><br><span class=\"line\">let fs &#x3D; require(&quot;fs&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;  读取文件</span><br><span class=\"line\">let readFile &#x3D; (filePath)&#x3D;&gt;&#123;</span><br><span class=\"line\">  return new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class=\"line\">    fs.readFile(filePath, (err, data)&#x3D;&gt;&#123;</span><br><span class=\"line\">      if(err)</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;  创建文件</span><br><span class=\"line\">let createFile &#x3D; (path, content)&#x3D;&gt;&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;  有三种方法 </span><br><span class=\"line\">  &#x2F;&#x2F;  1. fs.appendFile()  如果有 继续往后添加内容</span><br><span class=\"line\">  &#x2F;&#x2F; 2. fs.open()  接受一个 path 参数， 一个打开模式</span><br><span class=\"line\">  &#x2F;&#x2F;  3. fs.writeFile()  如果有取而代之</span><br><span class=\"line\">  return new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class=\"line\">    fs.writeFile(path, content, (err)&#x3D;&gt;&#123;</span><br><span class=\"line\">      if(err)</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(&#123;code: 200, errmsg:&quot;Success&quot;&#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer((req, res)&#x3D;&gt;&#123;</span><br><span class=\"line\">  &#x2F;&#x2F;  创建文件 并返回文件内容</span><br><span class=\"line\">  createFile(&quot;hello.txt&quot;, &quot;Hello, I am creating a file using writeFile method &quot;)</span><br><span class=\"line\">        .then(()&#x3D;&gt; &#123;</span><br><span class=\"line\">          &#x2F;&#x2F;  重新创建文件之后 读取文件内容并返回</span><br><span class=\"line\">          readFile(&quot;hello.txt&quot;)</span><br><span class=\"line\">                .then(</span><br><span class=\"line\">                data&#x3D;&gt; &#123;res.write(data), res.end()&#125;</span><br><span class=\"line\">                )&#125;)</span><br><span class=\"line\">&#125;).listen(8080)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-Node-事件监听\"><a href=\"#2-4-Node-事件监听\" class=\"headerlink\" title=\"2.4   Node 事件监听\"></a>2.4   Node 事件监听</h3><p>Node.js具有一个内置的模块，称为“event”，您可以在其中创建，触发和侦听自己的事件。使用  eventEmitter 来 监听 事件的触发。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var events &#x3D; require(&#39;events&#39;);</span><br><span class=\"line\">var eventEmitter &#x3D; new events.EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;Create an event handler:</span><br><span class=\"line\">var myEventHandler &#x3D; function () &#123;</span><br><span class=\"line\">  console.log(&#39;I hear a scream!&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;Assign the event handler to an event:</span><br><span class=\"line\">eventEmitter.on(&#39;scream&#39;, myEventHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;Fire the &#39;scream&#39; event:</span><br><span class=\"line\">eventEmitter.emit(&#39;scream&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>要发布事件，我们使用emit（）函数，要监听事件，我们使用on（）函数。  </p>\n<p>同时在这一个样例中， 我们先 监听 scream 事件， 之后我们再发布， 同时发布事件的这一个过程是同步操作的。</p>\n<p>还要再发布之前必须先去 监听。</p>\n<h2 id=\"三：-Node-与-Mysql-交互\"><a href=\"#三：-Node-与-Mysql-交互\" class=\"headerlink\" title=\"三： Node 与 Mysql 交互\"></a>三： Node 与 Mysql 交互</h2><h3 id=\"3-1-在本机中安装-mysql\"><a href=\"#3-1-在本机中安装-mysql\" class=\"headerlink\" title=\"3.1 在本机中安装 mysql\"></a>3.1 在本机中安装 mysql</h3><p><a href=\"https://www.mysql.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.mysql.com/downloads/</a></p>\n<h3 id=\"3-2-安装-mysql-驱动\"><a href=\"#3-2-安装-mysql-驱动\" class=\"headerlink\" title=\"3.2 安装 mysql 驱动\"></a>3.2 安装 mysql 驱动</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-配置myql-参数\"><a href=\"#3-3-配置myql-参数\" class=\"headerlink\" title=\"3.3 配置myql 参数\"></a>3.3 配置myql 参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let con &#x3D; mysql.createConnection(&#123;</span><br><span class=\"line\">  host: &quot;localhost&quot;,</span><br><span class=\"line\">  user: &quot;root&quot;,</span><br><span class=\"line\">  password: &quot;llw012800&quot;,</span><br><span class=\"line\">  database: &quot;test_node&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>创建 test_node 数据库  和 user 数据表</p>\n<h3 id=\"3-4-mysql-模块包和-mysql8-0-验证方式不兼容\"><a href=\"#3-4-mysql-模块包和-mysql8-0-验证方式不兼容\" class=\"headerlink\" title=\"3.4 mysql  模块包和 mysql8.0 验证方式不兼容\"></a>3.4 mysql  模块包和 mysql8.0 验证方式不兼容</h3><p><code>Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</code></p>\n<p><img src=\"http://photo.jomeswang.top/20201226020304.png\" alt=\"\"></p>\n<p>解决方法：</p>\n<p>导致这个错误的原因是，目前，最新的mysql模块并未完全支持MySQL 8的“caching_sha2_password”加密方式，而“caching_sha2_password”在MySQL 8中是默认的加密方式。因此，下面的方式命令是默认已经使用了“caching_sha2_password”加密方式，该账号、密码无法在mysql模块中使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.12 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>解决方法是从新修改用户root的密码，并指定mysql模块能够支持的加密方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br><span class=\"line\">Query OK, 0 rows affected (0.12 sec)</span><br></pre></td></tr></table></figure>\n\n<p>上述语句，显示指定了使用“mysql_native_password”的加密方式。这种方式是在mysql模块能够支持。</p>\n<h3 id=\"3-5-mysql-交互-全部代码\"><a href=\"#3-5-mysql-交互-全部代码\" class=\"headerlink\" title=\"3.5 mysql 交互 全部代码\"></a>3.5 mysql 交互 全部代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let http &#x3D; require(&quot;http&quot;)</span><br><span class=\"line\">const &#123; reject, result &#125; &#x3D; require(&quot;lodash&quot;)</span><br><span class=\"line\">let mysql &#x3D; require(&quot;mysql&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">let con &#x3D; mysql.createConnection(&#123;</span><br><span class=\"line\">  host: &quot;localhost&quot;,</span><br><span class=\"line\">  user: &quot;root&quot;,</span><br><span class=\"line\">  password: &quot;llw012800&quot;,</span><br><span class=\"line\">  database: &quot;test_node&quot;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">let queryDB &#x3D; (sql)&#x3D;&gt;&#123;</span><br><span class=\"line\">  return new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class=\"line\">    con.query(sql, (err, result)&#x3D;&gt;&#123;</span><br><span class=\"line\">      &#x2F;&#x2F; console.log(result)</span><br><span class=\"line\">      if(err)</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      resolve(result)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  con.connect((err)&#x3D;&gt;&#123;</span><br><span class=\"line\">    if(err)</span><br><span class=\"line\">      throw err;</span><br><span class=\"line\">    &#x2F;&#x2F;  插入语法</span><br><span class=\"line\">    let sql &#x3D; &quot;INSERT INTO user (name, address) VALUES (&#39;Michelle&#39;, &#39;Blue Village 1&#39;)&quot;</span><br><span class=\"line\">    queryDB(sql)</span><br><span class=\"line\">          .then(res&#x3D;&gt;&#123;</span><br><span class=\"line\">            console.log(res)</span><br><span class=\"line\">            &#x2F;&#x2F;  取出数据表的数据</span><br><span class=\"line\">            queryDB(&quot;SELECT * FROM user LIMIT 1&quot;)</span><br><span class=\"line\">            .then(res&#x3D;&gt;&#123;</span><br><span class=\"line\">              console.log(res)</span><br><span class=\"line\">              &#x2F;&#x2F;  这里是 update 数据表记录的方法</span><br><span class=\"line\">              let updateSql &#x3D; &quot;UPDATE user SET address &#x3D;&#39;szdx&#39;, name&#x3D;&#39;llw&#39; WHERE id&#x3D;2 &quot;</span><br><span class=\"line\">              queryDB(updateSql)</span><br><span class=\"line\">              .then(res&#x3D;&gt;&#123;</span><br><span class=\"line\">                console.log(res)</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; catch (error) &#123;</span><br><span class=\"line\">  console.error(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四：-Node-与-Mongodb-进行交互\"><a href=\"#四：-Node-与-Mongodb-进行交互\" class=\"headerlink\" title=\"四： Node 与 Mongodb 进行交互\"></a>四： Node 与 Mongodb 进行交互</h2><h3 id=\"4-1-安装-mongodb\"><a href=\"#4-1-安装-mongodb\" class=\"headerlink\" title=\"4.1 安装 mongodb\"></a>4.1 安装 mongodb</h3><p> 安装 Windows 版本的  <a href=\"https://www.mongodb.com/try/download/community?tck=docs_server\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/try/download/community?tck=docs_server</a></p>\n<h3 id=\"4-2-安装mongodb-模块\"><a href=\"#4-2-安装mongodb-模块\" class=\"headerlink\" title=\"4.2  安装mongodb 模块\"></a>4.2  安装mongodb 模块</h3><p>Download and install mongodb package:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install mongodb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-创建-数据库和数据表\"><a href=\"#4-3-创建-数据库和数据表\" class=\"headerlink\" title=\"4.3   创建 数据库和数据表\"></a>4.3   创建 数据库和数据表</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class=\"line\">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, function(err, db) &#123;</span><br><span class=\"line\">  if (err) throw err;</span><br><span class=\"line\">  &#x2F;&#x2F;  如果不存在 数据库 数据集合 会自动创建</span><br><span class=\"line\">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class=\"line\">  dbo.createCollection(&quot;customers&quot;, function(err, res) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    console.log(&quot;Collection created!&quot;);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-4-插入一条记录\"><a href=\"#4-4-插入一条记录\" class=\"headerlink\" title=\"4.4    插入一条记录\"></a>4.4    插入一条记录</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class=\"line\">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, function(err, db) &#123;</span><br><span class=\"line\">  if (err) throw err;</span><br><span class=\"line\">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class=\"line\">  var myobj &#x3D; &#123; name: &quot;Company Inc&quot;, address: &quot;Highway 37&quot; &#125;;</span><br><span class=\"line\">  dbo.collection(&quot;customers&quot;).insertOne(myobj, function(err, res) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    console.log(&quot;1 document inserted&quot;);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-插入多条记录\"><a href=\"#4-5-插入多条记录\" class=\"headerlink\" title=\"4.5   插入多条记录\"></a>4.5   插入多条记录</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class=\"line\">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, function(err, db) &#123;</span><br><span class=\"line\">  if (err) throw err;</span><br><span class=\"line\">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class=\"line\">  var myobj &#x3D; [</span><br><span class=\"line\">    &#123; name: &#39;John&#39;, address: &#39;Highway 71&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Peter&#39;, address: &#39;Lowstreet 4&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Amy&#39;, address: &#39;Apple st 652&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Hannah&#39;, address: &#39;Mountain 21&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Michael&#39;, address: &#39;Valley 345&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Sandy&#39;, address: &#39;Ocean blvd 2&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Betty&#39;, address: &#39;Green Grass 1&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Richard&#39;, address: &#39;Sky st 331&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Susan&#39;, address: &#39;One way 98&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Vicky&#39;, address: &#39;Yellow Garden 2&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Ben&#39;, address: &#39;Park Lane 38&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;William&#39;, address: &#39;Central st 954&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Chuck&#39;, address: &#39;Main Road 989&#39;&#125;,</span><br><span class=\"line\">    &#123; name: &#39;Viola&#39;, address: &#39;Sideway 1633&#39;&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  dbo.collection(&quot;customers&quot;).insertMany(myobj, function(err, res) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    console.log(&quot;Number of documents inserted: &quot; + res.insertedCount);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-6-查找一个数据\"><a href=\"#4-6-查找一个数据\" class=\"headerlink\" title=\"4.6     查找一个数据\"></a>4.6     查找一个数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class=\"line\">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, function(err, db) &#123;</span><br><span class=\"line\">  if (err) throw err;</span><br><span class=\"line\">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class=\"line\">  dbo.collection(&quot;customers&quot;).findOne(&#123;&#125;, function(err, result) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    console.log(result.name);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-7-查找多个数据\"><a href=\"#4-7-查找多个数据\" class=\"headerlink\" title=\"4.7    查找多个数据\"></a>4.7    查找多个数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class=\"line\">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, function(err, db) &#123;</span><br><span class=\"line\">  if (err) throw err;</span><br><span class=\"line\">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class=\"line\">  var query &#x3D; &#123; address: &quot;Park Lane 38&quot; &#125;;</span><br><span class=\"line\">  dbo.collection(&quot;customers&quot;).find(query).toArray(function(err, result) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-更新一条数据\"><a href=\"#4-8-更新一条数据\" class=\"headerlink\" title=\"4.8   更新一条数据\"></a>4.8   更新一条数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class=\"line\">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, function(err, db) &#123;</span><br><span class=\"line\">  if (err) throw err;</span><br><span class=\"line\">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class=\"line\">  var myquery &#x3D; &#123; address: &quot;Valley 345&quot; &#125;;</span><br><span class=\"line\">  var newvalues &#x3D; &#123; $set: &#123;name: &quot;Mickey&quot;, address: &quot;Canyon 123&quot; &#125; &#125;;</span><br><span class=\"line\">  dbo.collection(&quot;customers&quot;).updateOne(myquery, newvalues, function(err, res) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    console.log(&quot;1 document updated&quot;);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"9\">\n<li><h3 id=\"更新多条数据\"><a href=\"#更新多条数据\" class=\"headerlink\" title=\"更新多条数据\"></a>更新多条数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class=\"line\">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, function(err, db) &#123;</span><br><span class=\"line\">  if (err) throw err;</span><br><span class=\"line\">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class=\"line\">  var myquery &#x3D; &#123; address: &#x2F;^S&#x2F; &#125;;</span><br><span class=\"line\">  var newvalues &#x3D; &#123;$set: &#123;name: &quot;Minnie&quot;&#125; &#125;;</span><br><span class=\"line\">  dbo.collection(&quot;customers&quot;).updateMany(myquery, newvalues, function(err, res) &#123;</span><br><span class=\"line\">    if (err) throw err;</span><br><span class=\"line\">    console.log(res.result.nModified + &quot; document(s) updated&quot;);</span><br><span class=\"line\">    db.close();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","categories":["node"],"tags":["node"]},{"title":"JS实现深拷贝","url":"/posts/b83467fc/","content":"<blockquote>\n<p>最近得学一下 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-递归-复制法\"><a href=\"#一：-递归-复制法\" class=\"headerlink\" title=\"一： 递归 复制法\"></a>一： 递归 复制法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let deepClone &#x3D; (obj)&#x3D;&gt;&#123;</span><br><span class=\"line\">&#x2F;&#x2F; 1. 先判断 是否是 [] || &#123;&#125;, 不是 就返回</span><br><span class=\"line\">  if(!obj | typeof obj !&#x3D;&#x3D; &quot;object&quot;)</span><br><span class=\"line\">    return obj</span><br><span class=\"line\"> &#x2F;&#x2F; 2. 初始化 objClone</span><br><span class=\"line\">  let objClone &#x3D; Array.isArray(obj)?[]:&#123;&#125;</span><br><span class=\"line\">  for(key in obj)&#123;</span><br><span class=\"line\">    if(typeof obj[key] &#x3D;&#x3D; &quot;object&quot;)</span><br><span class=\"line\">      objClone[key] &#x3D; deepClone(obj[key])</span><br><span class=\"line\">    else</span><br><span class=\"line\">      objClone[key] &#x3D; obj[key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return objClone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let arr &#x3D; [&quot;sf&quot;, 1, &#123;&quot;fsdf&quot;: &quot;fsdf&quot;&#125;, [1,2,3]]</span><br><span class=\"line\">console.log(deepClone(arr));</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：-JSON-方法\"><a href=\"#二：-JSON-方法\" class=\"headerlink\" title=\"二： JSON 方法\"></a>二： JSON 方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let obj &#x3D; [56, 43]</span><br><span class=\"line\">let objClone &#x3D; JSON.parse(JSON.stringify(obj));</span><br><span class=\"line\">console.log(objClone);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三：-lodash-方法\"><a href=\"#三：-lodash-方法\" class=\"headerlink\" title=\"三： lodash 方法\"></a>三： lodash 方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;  在这里主要的是 析构 cloneDeep 函数 之后 重命名为 clone 函数</span><br><span class=\"line\">const &#123;cloneDeep: clone &#125;   &#x3D; require(&#39;lodash&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">let objA &#x3D; &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: &#123;</span><br><span class=\"line\">        c: 2,</span><br><span class=\"line\">        d: &#123;</span><br><span class=\"line\">            e: 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; copy objA save as new variable objB</span><br><span class=\"line\">let objB &#x3D; clone(objA)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; change the values in the original object objA</span><br><span class=\"line\">objA.a &#x3D; 20</span><br><span class=\"line\">objA.b.c &#x3D; 30</span><br><span class=\"line\">objA.b.d.e &#x3D; 40</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(JSON.stringify(objA))</span><br><span class=\"line\">&#x2F;&#x2F; → &#123;&quot;a&quot;:20,&quot;b&quot;:&#123;&quot;c&quot;:30,&quot;d&quot;:&#123;&quot;e&quot;:40&#125;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; objB which is the cloned object is still the same</span><br><span class=\"line\">console.log(JSON.stringify(objB))</span><br><span class=\"line\">&#x2F;&#x2F; → &#123;&quot;a&quot;:1,&quot;b&quot;:&#123;&quot;c&quot;:2,&quot;d&quot;:&#123;&quot;e&quot;:3&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["JS"],"tags":["JS"]},{"title":"React-router 的学习和使用","url":"/posts/d32c71e/","content":"<blockquote>\n<p>在React 中 处处皆组件！！ Router 这也是一个组件，有点不怎么好用</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-安装-react-router-dom\"><a href=\"#一：-安装-react-router-dom\" class=\"headerlink\" title=\"一： 安装 react-router-dom\"></a>一： 安装 react-router-dom</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install react-router-dom</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二-简单使用方法\"><a href=\"#二-简单使用方法\" class=\"headerlink\" title=\"二: 简单使用方法\"></a>二: 简单使用方法</h2><p><code>在 src/app.js 中 用以下代码</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">  BrowserRouter as Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route,</span><br><span class=\"line\">  Link,</span><br><span class=\"line\">  useRouteMatch,</span><br><span class=\"line\">  useParams,</span><br><span class=\"line\">  NavLink </span><br><span class=\"line\">&#125; from &quot;react-router-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;.&#x2F;App.css&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Router&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;NavLink&gt;</span><br><span class=\"line\">          &lt;&#x2F;li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;NavLink&gt;</span><br><span class=\"line\">          &lt;&#x2F;li&gt;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&quot;&#x2F;topics&quot;&gt;Topics&lt;&#x2F;NavLink&gt;</span><br><span class=\"line\">          &lt;&#x2F;li&gt;</span><br><span class=\"line\">        &lt;&#x2F;ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Switch&gt;</span><br><span class=\"line\">          &lt;Route path&#x3D;&quot;&#x2F;about&quot;&gt;</span><br><span class=\"line\">            &lt;About &#x2F;&gt;</span><br><span class=\"line\">          &lt;&#x2F;Route&gt;</span><br><span class=\"line\">          &lt;Route path&#x3D;&quot;&#x2F;topics&quot;&gt;</span><br><span class=\"line\">            &lt;Topics &#x2F;&gt;</span><br><span class=\"line\">          &lt;&#x2F;Route&gt;</span><br><span class=\"line\">          &lt;Route exact  path&#x3D;&quot;&#x2F;&quot;&gt;</span><br><span class=\"line\">            &lt;Home &#x2F;&gt;</span><br><span class=\"line\">          &lt;&#x2F;Route&gt;</span><br><span class=\"line\">        &lt;&#x2F;Switch&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Home() &#123;</span><br><span class=\"line\">  return &lt;h2&gt;Home&lt;&#x2F;h2&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function About() &#123;</span><br><span class=\"line\">  return &lt;h2&gt;About&lt;&#x2F;h2&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Topics() &#123;</span><br><span class=\"line\">  let match &#x3D; useRouteMatch();</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;h2&gt;Topics&lt;&#x2F;h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&#123;&#96;$&#123;match.url&#125;&#x2F;components&#96;&#125;&gt;Components&lt;&#x2F;NavLink&gt;</span><br><span class=\"line\">        &lt;&#x2F;li&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">          &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&#123;&#96;$&#123;match.url&#125;&#x2F;props-v-state&#96;&#125;&gt;</span><br><span class=\"line\">            Props v. State</span><br><span class=\"line\">          &lt;&#x2F;NavLink&gt;</span><br><span class=\"line\">        &lt;&#x2F;li&gt;</span><br><span class=\"line\">      &lt;&#x2F;ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;&#x2F;* The Topics page has its own &lt;Switch&gt; with more routes</span><br><span class=\"line\">          that build on the &#x2F;topics URL path. You can think of the</span><br><span class=\"line\">          2nd &lt;Route&gt; here as an &quot;index&quot; page for all topics, or</span><br><span class=\"line\">          the page that is shown when no topic is selected *&#x2F;&#125;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&#123;&#96;$&#123;match.path&#125;&#x2F;:topicId&#96;&#125;&gt;</span><br><span class=\"line\">          &lt;Topic &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;Route&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&#123;match.path&#125;&gt;</span><br><span class=\"line\">          &lt;h3&gt;Please select a topic.&lt;&#x2F;h3&gt;</span><br><span class=\"line\">        &lt;&#x2F;Route&gt;</span><br><span class=\"line\">      &lt;&#x2F;Switch&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Topic() &#123;</span><br><span class=\"line\">  let &#123; topicId &#125; &#x3D; useParams();</span><br><span class=\"line\">  return &lt;h3&gt;Requested topic ID: &#123;topicId&#125;&lt;&#x2F;h3&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三：-Router-详解\"><a href=\"#三：-Router-详解\" class=\"headerlink\" title=\"三： Router 详解\"></a>三： Router 详解</h2><h3 id=\"3-1-Router-的引入\"><a href=\"#3-1-Router-的引入\" class=\"headerlink\" title=\"3.1  Router 的引入\"></a>3.1  Router 的引入</h3><p>每个React Router应用程序的核心应该是路由器组件。对于Web项目，react-router-dom提供<BrowserRouter>和<HashRouter>路由器。两者之间的主要区别是它们存储URL和与Web服务器通信的方式。</p>\n<p>因此需要在 把根组件包囊在 router 组件内部</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\">import ReactDOM from &quot;react-dom&quot;;</span><br><span class=\"line\">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return &lt;h1&gt;Hello React Router&lt;&#x2F;h1&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;BrowserRouter&gt;</span><br><span class=\"line\">    &lt;App &#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;BrowserRouter&gt;,</span><br><span class=\"line\">  document.getElementById(&quot;root&quot;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-Router-的匹配\"><a href=\"#3-2-Router-的匹配\" class=\"headerlink\" title=\"3.2 Router 的匹配\"></a>3.2 Router 的匹配</h3><p>使用 Switch， Route 这两个组件 来匹配路由。</p>\n<p><Switch>的独特之处在于它专门呈现一条路由。使用<div>的话，每个与位置匹配的<Route>都将包含在内。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\">import ReactDOM from &quot;react-dom&quot;;</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">  BrowserRouter as Router,</span><br><span class=\"line\">  Switch,</span><br><span class=\"line\">  Route</span><br><span class=\"line\">&#125; from &quot;react-router-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &#123;&#x2F;* If the current URL is &#x2F;about, this route is rendered</span><br><span class=\"line\">            while the rest are ignored *&#x2F;&#125;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;about&quot;&gt;</span><br><span class=\"line\">          &lt;About &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;Route&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;&#x2F;* Note how these two routes are ordered. The more specific</span><br><span class=\"line\">            path&#x3D;&quot;&#x2F;contact&#x2F;:id&quot; comes before path&#x3D;&quot;&#x2F;contact&quot; so that</span><br><span class=\"line\">            route will render when viewing an individual contact *&#x2F;&#125;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;contact&#x2F;:id&quot;&gt;</span><br><span class=\"line\">          &lt;Contact &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;Route&gt;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;contact&quot;&gt;</span><br><span class=\"line\">          &lt;AllContacts &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;Route&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;&#x2F;* If none of the previous routes render anything,</span><br><span class=\"line\">            this route acts as a fallback.</span><br><span class=\"line\"></span><br><span class=\"line\">            Important: A route with path&#x3D;&quot;&#x2F;&quot; will *always* match</span><br><span class=\"line\">            the URL because all URLs begin with a &#x2F;. So that&#39;s</span><br><span class=\"line\">            why we put this one last of all *&#x2F;&#125;</span><br><span class=\"line\">        &lt;Route path&#x3D;&quot;&#x2F;&quot;&gt;</span><br><span class=\"line\">          &lt;Home &#x2F;&gt;</span><br><span class=\"line\">        &lt;&#x2F;Route&gt;</span><br><span class=\"line\">      &lt;&#x2F;Switch&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;App &#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;Router&gt;,</span><br><span class=\"line\">  document.getElementById(&quot;root&quot;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-路由跳转\"><a href=\"#3-3-路由跳转\" class=\"headerlink\" title=\"3.3 路由跳转\"></a>3.3 路由跳转</h3><p>React Router提供了一个<Link>组件来在您的应用程序中创建链接。无论在何处呈现<Link>，锚点（<a>）都将呈现在HTML文档中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;Link&gt;</span><br><span class=\"line\">&#x2F;&#x2F; &lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;The &lt;NavLink&gt; is a special type of &lt;Link&gt; that can style itself as “active” when its to prop matches the current location.</span><br><span class=\"line\">&lt;NavLink to&#x3D;&quot;&#x2F;react&quot; activeClassName&#x3D;&quot;hurray&quot;&gt;</span><br><span class=\"line\">  React</span><br><span class=\"line\">&lt;&#x2F;NavLink&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; When the URL is &#x2F;react, this renders:</span><br><span class=\"line\">&#x2F;&#x2F; &lt;a href&#x3D;&quot;&#x2F;react&quot; className&#x3D;&quot;hurray&quot;&gt;React&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; When it&#39;s something else:</span><br><span class=\"line\">&#x2F;&#x2F; &lt;a href&#x3D;&quot;&#x2F;react&quot;&gt;React&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["react"],"tags":["react-router","react"]},{"title":"为react 项目添加 scss 和 ts","url":"/posts/f84ce3f2/","content":"<blockquote>\n<h1 id=\"How-to-Set-Up-a-React-Project-Using-Webpack-TypeScript-and-Sass\"><a href=\"#How-to-Set-Up-a-React-Project-Using-Webpack-TypeScript-and-Sass\" class=\"headerlink\" title=\"How to Set Up a React Project Using Webpack, TypeScript, and Sass\"></a>How to Set Up a React Project Using Webpack, TypeScript, and Sass</h1></blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"https://miro.medium.com/max/5472/0*QJHASp4Lqspc4Gt8\" alt=\"Image for post\"></p>\n<p>Photo by <a href=\"https://unsplash.com/@sapegin?utm_source=medium&utm_medium=referral\" target=\"_blank\" rel=\"noopener\">Artem Sapegin</a> on <a href=\"https://unsplash.com/?utm_source=medium&utm_medium=referral\" target=\"_blank\" rel=\"noopener\">Unsplash</a></p>\n<p>I’ve always used <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">Create-React-App</a> (CRA) when I needed to make a project. I needed to make another React project, but this time I didn’t want to use CRA. I was stuck with many problems and it took a lot of time to get through them. So, let me tell you what I did and how I got through it.</p>\n<h2 id=\"Prior-reading\"><a href=\"#Prior-reading\" class=\"headerlink\" title=\"Prior reading\"></a>Prior reading</h2><p>If you aren’t aware of what Webpack is, go to the <a href=\"https://webpack.js.org/concepts/\" target=\"_blank\" rel=\"noopener\">official Webpack site</a> and read about it.</p>\n<h1 id=\"React-Project-Setup\"><a href=\"#React-Project-Setup\" class=\"headerlink\" title=\"React Project Setup\"></a>React Project Setup</h1><p>First, you need to install some packages for the Webpack or React.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -D webpack webpack-cli @babel&#x2F;core @babel&#x2F;preset-env @babel&#x2F;preset-react babel-loadernpm i -S react react-dom</span><br></pre></td></tr></table></figure>\n\n<p>Webpack is the code bundler for JavaScript, CSS and HTML files. It reduces the size of your project by putting everything into a few files.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch webpack.config.js</span><br></pre></td></tr></table></figure>\n\n<p>Now, create the configuration file for Webpack. This will be used automatically by the Webpack once you run the program.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: path.resolve(__dirname, &#39;src&#39;, &#39;index.jsx&#39;),</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mode: &quot;development&quot;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [&#39;.js&#39;, &#39;.jsx&#39;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.jsx?$&#x2F;,</span><br><span class=\"line\">        use: [&#39;babel-loader&#39;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>entry</code> — the file to be used at first once Webpack starts to work.</li>\n<li><code>output</code>— the file to be exported by the Webpack process.</li>\n<li><code>resolve.extensions</code> — the file extensions to be used by Webpack.</li>\n<li><code>module</code> — the rules Webpack will use when it works on the files.</li>\n</ul>\n<p>We will check if Webpack can recognize the React files before adopting TypeScript.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir src dist</span><br><span class=\"line\">touch src&#x2F;index.jsx</span><br></pre></td></tr></table></figure>\n\n<p>And write this code into <code>index.jsx</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;;const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return &lt;h1&gt;Hello Wepack!&lt;&#x2F;h1&gt;;</span><br><span class=\"line\">&#125;;ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure>\n\n<p>This is the simple first React component, which prints “Hello Webpack!”. You need to use <code>react-dom</code> to hook React components into the HTML file. But we don’t have any HTML files yet.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -D html-webpack-plugin html-loadermkdir public</span><br><span class=\"line\">touch public&#x2F;index.html</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://medium.com/media/b478c684c8d3b465a2a5e196e4cbfea7\" allowfullscreen=\"\" frameborder=\"0\" height=\"369\" width=\"680\" title=\"medium_index.html\" class=\"t u v iz aj\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 369px;\"></iframe>\n\n<p>To make Webpack recognize and use this file, add more information in <code>webpack.config.js</code>:</p>\n<iframe src=\"https://medium.com/media/39b3679dc7831e68c98e5e9475034e6e\" allowfullscreen=\"\" frameborder=\"0\" height=\"391\" width=\"680\" title=\"\" class=\"t u v iz aj\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 391px;\"></iframe>\n\n<p>And add the script in <code>package.json</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you run this script, you’ll see the following error:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*xr5cmCeXHG4OVkuA47OPvA.png?q=20\" alt=\"Image for post\"></p>\n<p><img src=\"https://miro.medium.com/max/1392/1*xr5cmCeXHG4OVkuA47OPvA.png\" alt=\"Image for post\"></p>\n<p>Webpack gives you an error, but why?</p>\n<p>This is because you didn’t let Babel know what plugins it should use to transpile your React code to the plain JavaScript code.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch .babelrc</span><br></pre></td></tr></table></figure>\n\n<p>Write this in <code>.babelrc</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;, &quot;@babel&#x2F;preset-react&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@babel/preset-env</code> lets you use the latest JavaScript without having a headache of what plugins you should use. <code>@babel/preset-react</code> is a plugin that can interpret the JSX syntax and transforms it into JavaScript DOM syntax.</p>\n<p>One thing you ought to remember is that Babel reads the “presets” configuration from the right to the left. So, React JSX should be transformed into DOM syntax first by <code>@babel/preset-react</code>, then it can be transformed into the appropriate JavaScript version by <code>@babel/preset-env</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n<p>Now, let’s see if the code can be run successfully. Install the package that allows you to run your code in the dev server. Add this to <code>webpack.config.js</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    port: 8888</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To run the dev server more conveniently, add the new script:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; package.json&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  &quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now if you run the script, your code should be run well on port 8888.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://miro.medium.com/max/60/1*ugyMi_bCjdtSXBr_87mbiA.png?q=20\" alt=\"Image for post\"></p>\n<p><img src=\"https://miro.medium.com/max/476/1*ugyMi_bCjdtSXBr_87mbiA.png\" alt=\"Image for post\"></p>\n<p>The code should be run successfully</p>\n<h1 id=\"Use-SASS\"><a href=\"#Use-SASS\" class=\"headerlink\" title=\"Use SASS\"></a>Use SASS</h1><p>Now, it’s time to adopt the SASS in the project. For this, you should install the appropriate loader for SASS.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -D style-loader css-loader sass-loader node-sass</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>style-loader</code>— Inject CSS to the DOM</li>\n<li><code>css-loader</code>— Takes the CSS files and returns the CSS with <code>imports</code> and <code>url(...)</code> for Webpack</li>\n<li><code>sass-loader</code> — Takes the Sass/SCSS file and compiles to the CSS</li>\n<li><code>node-sass</code>— You need this is the required package to load your SCSS files</li>\n</ul>\n<p>And add this to your <code>webpack.config.js</code>:</p>\n<iframe src=\"https://medium.com/media/9a7530ecbcd6ca4ee7932980fc37cc8e\" allowfullscreen=\"\" frameborder=\"0\" height=\"457\" width=\"680\" title=\"\" class=\"t u v iz aj\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 456.984px;\"></iframe>\n\n<p>In case you want to use the module system with SASS, add <code>modules: true</code> in the <code>options</code> property that will allow you to use it.</p>\n<p>Create the SASS file.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch src&#x2F;index.scss</span><br></pre></td></tr></table></figure>\n\n<p>It will be very simple:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; index.scss</span><br><span class=\"line\">.title &#123; </span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;&#x2F;&#x2F; index.jsx</span><br><span class=\"line\">...</span><br><span class=\"line\">import styles from &#39;.&#x2F;index.scss&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>All you need to do is to add it as the class name of the DOM:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 className&#x3D;&#123;styles.title&#125;&gt;Hello Webpack!&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Now you can see the color is changed:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*WrEF2WajeUaFpiuTY705jA.png?q=20\" alt=\"Image for post\"></p>\n<p><img src=\"https://miro.medium.com/max/472/1*WrEF2WajeUaFpiuTY705jA.png\" alt=\"Image for post\"></p>\n<p>The color is changed</p>\n<h1 id=\"Use-TypeScript\"><a href=\"#Use-TypeScript\" class=\"headerlink\" title=\"Use TypeScript\"></a>Use TypeScript</h1><p>Install Typescript and its loader for Webpack.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i -D typescript ts-loader @types&#x2F;react @types&#x2F;react-dom</span><br></pre></td></tr></table></figure>\n\n<p>There are a few changes in <code>webpack.config.js</code> to use TypeScript.</p>\n<p>First, you should change the loader for <code>.jsx</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: &#x2F;\\.tsx?$&#x2F;,</span><br><span class=\"line\">  use: [&#39;ts-loader&#39;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>.jsx</code> → <code>.tsx</code> and <code>babel-loader</code> → <code>ts-loader</code> .</p>\n<p>Secondly, change the extensions:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [&#39;.js&#39;, &#39;.ts&#39;, &#39;.tsx&#39;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[&#39;.js&#39;, &#39;.jsx&#39;]&#96; → &#96;[&#39;.js&#39;, &#39;.ts&#39;, &#39;.tsx&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>You should still need <code>&#39;.js&#39;</code> so that Webpack can recognize the transpiled JavaScript files.</p>\n<p>Finally, change the entry point:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">entry: path.resolve(__dirname, &#39;src&#39;, &#39;index.tsx&#39;)</span><br><span class=\"line\">&#39;index.jsx&#39;&#96; → &#96;&#39;index.tsx&#39;</span><br></pre></td></tr></table></figure>\n\n<p>And change the file name to <code>index.tsx</code>.</p>\n<p>Then you’ll encounter this error:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*gHYdGc-E7pQrAdU6w-Rclg.png?q=20\" alt=\"Image for post\"></p>\n<p><img src=\"https://miro.medium.com/max/956/1*gHYdGc-E7pQrAdU6w-Rclg.png\" alt=\"Image for post\"></p>\n<p>This is because TypeScript in your project doesn’t know where <code>index.scss</code> is. You can resolve this problem simply by creating the configuration file for TypeSciprt and a little extra setup.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch tsconfig.json</span><br></pre></td></tr></table></figure>\n\n<p>TypeScript automatically looks for <code>tsconfig.json</code> from the root directory of your project, unless you specify its location.</p>\n<iframe src=\"https://medium.com/media/54c8c85e1d0f71b3bf362cc8dddac213\" allowfullscreen=\"\" frameborder=\"0\" height=\"457\" width=\"680\" title=\"medium_typescript_webpack_config.json\" class=\"t u v iz aj\" scrolling=\"auto\" style=\"box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 456.984px;\"></iframe>\n\n<p>Create a new folder and make a file in it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir src&#x2F;typings</span><br><span class=\"line\">touch src&#x2F;typings&#x2F;scss.d.ts</span><br></pre></td></tr></table></figure>\n\n<p><code>scss.d.ts</code> is a typed file. TypeScript can read and understand what types it should also remember.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; scss.d.ts</span><br><span class=\"line\">declare module &#39;*.css&#39; &#123;</span><br><span class=\"line\">  const content: &#123; [className: string]: string; &#125;;</span><br><span class=\"line\">  export default content;</span><br><span class=\"line\">&#125;declare module &#39;*.scss&#39; &#123;</span><br><span class=\"line\">  const content: &#123; [className: string]: string; &#125;;</span><br><span class=\"line\">  export default content;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, you’ll see the error is gone. Now run the server and see if the result is the same.</p>\n<h1 id=\"Bonus-—-Hash-ClassNames\"><a href=\"#Bonus-—-Hash-ClassNames\" class=\"headerlink\" title=\"Bonus — Hash ClassNames\"></a>Bonus — Hash ClassNames</h1><p>In development mode, it would be quite inconvenient to work with the CSS class names transformed into the hash strings.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*qPIcxN0EA7SXMjiCupVUHw.png?q=20\" alt=\"Image for post\"></p>\n<p><img src=\"https://miro.medium.com/max/566/1*qPIcxN0EA7SXMjiCupVUHw.png\" alt=\"Image for post\"></p>\n<p>Hash strings always get in the way of your working journey</p>\n<p>Actually, you can tell Webpack not to create a hash name for CSS.</p>\n<p>Change the <code>module</code> part of <code>css-loader</code> in <code>webpack.config.js</code> as follows.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  loader: &#39;css-loader&#39;,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      modules: &#123;</span><br><span class=\"line\">        localIdentName: &#39;[local]&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now you’ll see the non-hash strings.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*_k5Zft_4aF-0sWo5KyhCrA.png?q=20\" alt=\"Image for post\"></p>\n<p><img src=\"https://miro.medium.com/max/432/1*_k5Zft_4aF-0sWo5KyhCrA.png\" alt=\"Image for post\"></p>\n<p>Now it’s much better!</p>\n","categories":["react"],"tags":["react","webpack","sass","typescript"]},{"title":"初始化React 项目 使用webpack和Babel","url":"/posts/1a1b343a/","content":"<blockquote>\n<p>今天建react 项目的时候发现</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>在一个典型的React项目中，我们使用Babel和Webpack。 Babel用于将JSX和ES6转换为纯ES5代码。 Webpack用作捆绑程序。在这一篇文章中，我们从头开始对React 项目的建立。</p>\n<p>首先 创建一个 <code>react-starter</code> 的文件夹。 之后在文件夹内部操作。</p>\n<h2 id=\"一：-初始化-Package-json-文件夹\"><a href=\"#一：-初始化-Package-json-文件夹\" class=\"headerlink\" title=\"一： 初始化 Package.json 文件夹\"></a>一： 初始化 Package.json 文件夹</h2><p>在Node项目中，package.json文件存储有关项目的信息，例如其名称，许可证，脚本，依赖项等。我们可以使用这一条命令来创建package.json文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<p>-y标志用于设置默认值。现在，在项目文件夹中创建了一个package.json文件，内容如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;react-starter&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二：-创建-资源文件夹\"><a href=\"#二：-创建-资源文件夹\" class=\"headerlink\" title=\"二： 创建 资源文件夹\"></a>二： 创建 资源文件夹</h2><p>因此，首先在根目录中创建一个文件夹src。现在，该文件夹将包含所有使用JSX编写的React组件代码，使用SCSS编写的样式以及用于呈现React组件的模板HTML。当我们构建项目时，所有的JSX将被转换为JavaScript，所有的SCSS将被转换为纯CSS，HTML将使用所需的文件引用进行更新，并复制到/ dist文件夹中。</p>\n<p>创建一个 <code>src/index.html</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;React Starter&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>关于此index.html源文件的几点要点。即将创建的React组件将呈现在div标签内。目前，我们在html中看不到任何对JavaScript或CSS文件的引用。这些将在构建步骤中添加到生成的html文件中。怎么样？我们稍后会看到。</p>\n<h2 id=\"三：-React-组件\"><a href=\"#三：-React-组件\" class=\"headerlink\" title=\"三： React 组件\"></a>三： React 组件</h2><p> <code>src/index.js</code>  中创建一个 这样的一个文件  写入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\">import ReactDOM from &quot;react-dom&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return &lt;h1&gt;Hello React 16,Webpack 4 &amp; Babel 7!&lt;&#x2F;h1&gt;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&quot;root&quot;));</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下载如下NPM包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install react react-dom --save</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四：配置Webpack\"><a href=\"#四：配置Webpack\" class=\"headerlink\" title=\"四：配置Webpack\"></a>四：配置Webpack</h2><p>到目前为止，我们的源代码位于/ src文件夹中。我们没有可以部署到服务器的任何文件。如果仅将index.html和index.js复制到nginx或Apache之类的Web服务器，会发生什么情况？它只是在浏览器中呈现index.html。由于没有引用index.js，因此将其忽略。</p>\n<p>因此，我们需要有人缝制两个文件并将其设置为可在/ dist文件夹中进行部署。有人是Webpack。 Webpack是捆绑器。简单来说，我们可以说Webpack将项目的所有依赖项都包装到一个捆绑文件中，并将其放置在/ dist文件夹中。</p>\n<p>这是我们为什么要安装Webpack。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n\n<p>安装webpack程序包后，我们需要向webpack提供操作说明。为此，我们需要在项目根目录中创建webpack.config.js文件。 Webpack总是检查此文件以了解如何捆绑项目。</p>\n<p>在项目根目录中创建webpack.config.js文件。粘贴以下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"五：-运行-webpack\"><a href=\"#五：-运行-webpack\" class=\"headerlink\" title=\"五： 运行 webpack\"></a>五： 运行 webpack</h2><p>让我们在 package.json 中创建相应的脚本吧！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;webpack&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后再 输入 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n\n<p>来启动项目。</p>\n<p>但会产生这样的一个错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">One CLI for webpack must be installed.</span><br><span class=\"line\">...</span><br><span class=\"line\">You need to install &#39;webpack-cli&#39; to use webpack via CLI.</span><br></pre></td></tr></table></figure>\n\n<p>这一个错误 告诉我们， 我们需要去安装 这样的一个包  <code>webpack-cli</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i webpack-cli -g</span><br></pre></td></tr></table></figure>\n\n<p> 这里需要全局安装才行！！！！</p>\n<p>之后我们 再次使用  <code>npm start</code>  命令来启动</p>\n<p>但是 报了以下的错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module parse failed: Unexpected token (5:9)</span><br><span class=\"line\">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https:&#x2F;&#x2F;webpack.js.org&#x2F;concepts#loaders</span><br></pre></td></tr></table></figure>\n\n<p> 说 webpack不认识 这样的 jsx 语法。</p>\n<p> 所以需要有一个工具， 来将 JSX 的语法转为 JS的语法。 因此 我们就有了 Babel 的这样一个工具。</p>\n<h2 id=\"六：-配置Babel\"><a href=\"#六：-配置Babel\" class=\"headerlink\" title=\"六： 配置Babel\"></a>六： 配置Babel</h2><p>Babel是一个编译器，这意味着它可以将一种类型的代码转换为另一种类型。在我们的项目中，我们使用Babel将JSX转换为JavaScript。</p>\n<p>Babel可以单独使用，也可以将JSX转换为JavaScript。但是，我们已经完成了将文件捆绑到Webpack的工作。因此，为了使webpack使用Babel处理JSX文件，Webpack需要babel-loader。</p>\n<p>babel-loader只是将Babel功能加载到webpack。它没有任何其他权力。因此，为了使babel-loader正常工作，我们需要安装核心babel软件包@ babel / core。我们还需要安装@ babel / preset-env @ babel / preset-react分别将ES6和JSX转换为ES5。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i @babel&#x2F;core babel-loader @babel&#x2F;preset-env @babel&#x2F;preset-react --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>现在 所有的 Babel 包都已经安装好了， 但是 我们 还没有告诉 webpack 去加载这一个 Babel 去加载JS 文件， 因此 我们需要在 <code>webpack.config.js</code> 中去添加以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: &#x2F;\\.(js|jsx)$&#x2F;,</span><br><span class=\"line\">      exclude: &#x2F;node_modules&#x2F;,</span><br><span class=\"line\">      use: &#123;</span><br><span class=\"line\">        loader: &quot;babel-loader&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码在webpack配置文件中设置了一条规则。该规则适用于.js或.jsx文件，不包括node_modules文件夹中的文件。由于存在此规则，因此每当webpack需要将JavaScript文件或JSX文件添加到包中时，它都会使用babel来转译代码，然后将输出添加到包中。</p>\n<p>Webpack使用babel-loader调用babel。 Babel需要知道它需要具备的所有功能，换句话说，需要定义所有预设。为此，我们在项目根目录中创建一个<code>.babelrc</code>文件，并添加以下文本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;, &quot;@babel&#x2F;preset-react&quot;] &#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在让我们转到终端并运行npm start。这次，webpack成功创建了bundle.js并将其放置在/ dist文件夹中。我们可以在控制台中看到类似下面的输出。</p>\n<p><img src=\"http://photo.jomeswang.top/20201223190635.png\" alt=\"\"></p>\n<h2 id=\"七：-配置-HtmlWebpackPlugin-来产生-html-文件\"><a href=\"#七：-配置-HtmlWebpackPlugin-来产生-html-文件\" class=\"headerlink\" title=\"七： 配置 HtmlWebpackPlugin 来产生 html 文件\"></a>七： 配置 HtmlWebpackPlugin 来产生 html 文件</h2><p>目前的状态是，我们现在在/ dist文件夹中有一个bundle.js。 但 dist文件夹中没有要部署的HTML文件。在构建过程中，我们希望Webpack在/ dist文件夹中创建一个HTML文件来加载bundle.js文件。 HtmlWebpackPlugin是一个webpack插件，可以在此处为我们提供帮助。首先使用以下命令安装它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>当我们安装好之后，我们需要去 修改  <code>webpack.config.js</code> 文件来加载这一个插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class=\"line\">var path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class=\"line\">  &#x2F;&#x2F;...</span><br><span class=\"line\">  module: &#123; &#x2F;*...*&#x2F; &#125;,</span><br><span class=\"line\">  plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们将HtmlWebpackPlugin添加到webpack.config.js中的plugins数组。插件接受模板选项，我们可以在其中指定已创建的源模板html文件。</p>\n<p>现在，当我们运行npm start时，webpack在/ dist文件夹中同时创建bundle.js和index.html。生成的index.html文件包含对bundle.js的引用。</p>\n<p>我们可以在浏览器中打开index.html文件来查看我们的React组件！</p>\n<h2 id=\"八：-配置-Webpackdevserver\"><a href=\"#八：-配置-Webpackdevserver\" class=\"headerlink\" title=\"八： 配置 Webpackdevserver\"></a>八： 配置 Webpackdevserver</h2><p>我们的项目运行良好。但是在开发过程中，每次我们需要运行webpack命令并等待构建完成。然后在浏览器中打开html文件以查看输出。这很费时间。Webpack有自己的Web服务器，称为webpack-dev-server。如果源文件中有任何文件更改，它将自动以新更改刷新浏览器。首先让我们安装webpack-dev-server。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>然后我们修改    <code>package.json</code> 文件来加载这一个配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;start&quot;: &quot;webpack serve&quot;,</span><br><span class=\"line\">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后还要  <code>webpack.config.js</code>  修改端口号和配置热重载  在  里面添加多这一个属性 与 plugins 并列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  open: true,</span><br><span class=\"line\">  port: 3000,</span><br><span class=\"line\">  hot: true,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后 就可以在 命令行中输入 <code>npm start</code> 来运行啦。</p>\n<h2 id=\"九：-总结\"><a href=\"#九：-总结\" class=\"headerlink\" title=\"九： 总结\"></a>九： 总结</h2><p>现在我们有了一个代码库，可以开始尝试任何React项目。这只是一个开始。在投入实际生产之前，可以做很多改进。</p>\n<p>博文源地址：  <a href=\"https://backbencher.dev/create-react-starter-webpack-babel\" target=\"_blank\" rel=\"noopener\">https://backbencher.dev/create-react-starter-webpack-babel</a></p>\n<p>仓库代码： <a href=\"https://github.com/jomeswang/react-webpack-babel-test\" target=\"_blank\" rel=\"noopener\">https://github.com/jomeswang/react-webpack-babel-test</a></p>\n","categories":["react"],"tags":["webpack"]},{"title":"Typescript interface 和 type 的区别","url":"/posts/cd0b2548/","content":"<blockquote>\n<p>学习学习学习！！！！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>首先，interface只能表示function，object和class类型，type除了这些类型还可以表示其他类型，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface A&#123;name:string;</span><br><span class=\"line\">            add:()&#x3D;&gt;void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface B&#123;():void&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">type C&#x3D;()&#x3D;&gt;number;</span><br><span class=\"line\">type D&#x3D;string;</span><br><span class=\"line\">type E&#x3D;&#123;name:string,age:number&#125;</span><br></pre></td></tr></table></figure>\n\n<p>interface可以合并同名接口，type不可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface A&#123;name:string&#125;</span><br><span class=\"line\">interface A&#123;age:number&#125;</span><br><span class=\"line\">var x:A&#x3D;&#123;name:&#39;xx&#39;,age:20&#125;</span><br></pre></td></tr></table></figure>\n\n<p>interface可以继承interface，继承type，使用extends关键字，type也可继承type，也可继承interface，使用&amp;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface A&#123;name:string&#125;</span><br><span class=\"line\">interface B extends A&#123;age:number&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">type C&#x3D;&#123;sex:string&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">interface D extends C&#123;name:string&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">type E&#x3D;&#123;name:string&#125;&amp;C</span><br><span class=\"line\"> </span><br><span class=\"line\">type F &#x3D;&#123;age:number&#125;&amp;A</span><br></pre></td></tr></table></figure>\n\n<p>还有类可以实现接口，也可以实现type</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface A&#123;name:string;add:()&#x3D;&gt;void&#125;</span><br><span class=\"line\">type B&#x3D;&#123;age:number,add:()&#x3D;&gt;void&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">class C implements A&#123;</span><br><span class=\"line\">    name:&#39;xx&#39;</span><br><span class=\"line\">    add()&#123;console.log(&#39;类实现接口&#39;)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">class D implements B&#123;</span><br><span class=\"line\">    age:20</span><br><span class=\"line\">    add()&#123;console.log(&#39;类实现type&#39;)&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Typescript"],"tags":["Typescript"]},{"title":"Mobx 和 Taro 的结合运用","url":"/posts/6673b515/","content":"<blockquote>\n<p>静下心来学习一些数据管理方面的知识吧！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20201220144649.png\" alt=\"\"></p>\n<h2 id=\"一：-安装与使用\"><a href=\"#一：-安装与使用\" class=\"headerlink\" title=\"一： 安装与使用\"></a>一： 安装与使用</h2><p>在使用  <code>taro init taro-ts</code> 之后可以创建一个基于 Mobx 数据统一管理， 使用Ts的Taro （React）框架。</p>\n<h2 id=\"二：-目录解析以及方法说明\"><a href=\"#二：-目录解析以及方法说明\" class=\"headerlink\" title=\"二： 目录解析以及方法说明\"></a>二： 目录解析以及方法说明</h2><p><img src=\"http://photo.jomeswang.top/20201220144350.png\" alt=\"\"></p>\n<h3 id=\"2-1-mobx-的引入\"><a href=\"#2-1-mobx-的引入\" class=\"headerlink\" title=\"2.1  mobx 的引入\"></a>2.1  mobx 的引入</h3><p>在项目的入口文件中 app.tsx 中使用</p>\n<p><img src=\"http://photo.jomeswang.top/20201220144835.png\" alt=\"\"></p>\n<h3 id=\"2-2-写一个计数器的-数据管理\"><a href=\"#2-2-写一个计数器的-数据管理\" class=\"headerlink\" title=\"2.2 写一个计数器的 数据管理\"></a>2.2 写一个计数器的 数据管理</h3><p><img src=\"http://photo.jomeswang.top/20201220145011.png\" alt=\"\"></p>\n<h3 id=\"2-3-通过在页面中-使用-inject-装饰器来引入-并且解构来使用\"><a href=\"#2-3-通过在页面中-使用-inject-装饰器来引入-并且解构来使用\" class=\"headerlink\" title=\"2.3 通过在页面中 使用 @inject 装饰器来引入 并且解构来使用\"></a>2.3 通过在页面中 使用 @inject 装饰器来引入 并且解构来使用</h3><p><img src=\"http://photo.jomeswang.top/20201220153223.png\" alt=\"\"></p>\n","categories":["Taro"],"tags":["Taro","Mobx"]},{"title":"SpringBoot Controller接收参数的方式，@RequestParam，@PathVariable，@RequestBody","url":"/posts/5fce7a90/","content":"<blockquote>\n<p>慢慢的思考与总结，终会让你看到不一样的风景</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><strong>第一类：请求路径参数</strong></p>\n<p><strong>1、@PathVariable     获取路径参数。即url/{id}这种形式。</strong></p>\n<p><strong>2、@RequestParam   获取查询参数。即url?name=这种形式</strong></p>\n<p>例：<br>GET<br><a href=\"http://localhost:8080/demo/123?name=suki_rong\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/123?name=suki_rong</a><br>对应的java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo</span><span class=\"params\">(@PathVariable(name = <span class=\"string\">\"id\"</span>)</span> String id, @<span class=\"title\">RequestParam</span><span class=\"params\">(name = <span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"id=\"</span>+id);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"name=\"</span>+name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：<br>id=123<br>name=suki_rong</p>\n<p><strong>第二类：Body参数</strong></p>\n<p>因为是POST请求，这里用Postman的截图结合代码说明</p>\n<h2 id=\"1、-RequestBody\"><a href=\"#1、-RequestBody\" class=\"headerlink\" title=\"1、@RequestBody\"></a>1、@RequestBody</h2><h3 id=\"例：\"><a href=\"#例：\" class=\"headerlink\" title=\"例：\"></a>例：</h3><p><img src=\"http://www.chengxudaren.com/uploads/images/1909/18/8adf56b4fedd066e8accbb3736345045.png\" alt=\"demo1\"></p>\n<p>对应的java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(path = <span class=\"string\">\"/demo1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">(@RequestBody Person person)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(person.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：<br>name:suki_rong;age=18;hobby:programing</p>\n<p>也可以是这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(path = <span class=\"string\">\"/demo1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">(@RequestBody Map&lt;String, String&gt; person)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(person.get(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：<br>suki_rong</p>\n<h2 id=\"2、无注解\"><a href=\"#2、无注解\" class=\"headerlink\" title=\"2、无注解\"></a>2、无注解</h2><h3 id=\"例：-1\"><a href=\"#例：-1\" class=\"headerlink\" title=\"例：\"></a>例：</h3><p><img src=\"http://www.chengxudaren.com/uploads/images/1909/18/88112dd3ce27a833396b75c017b81cc6.png\" alt=\"demo2\"><br>对应的java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(path = <span class=\"string\">\"/demo2\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(person.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：<br>name:suki_rong;age=18;hobby:programing</p>\n<p><strong>Person类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String hobby;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"name:\"</span>+name+<span class=\"string\">\";age=\"</span>+age+<span class=\"string\">\";hobby:\"</span>+hobby;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// getters and setters</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"第三类：请求头参数以及Cookie：-RequestHeader-，-CookieValue\"><a href=\"#第三类：请求头参数以及Cookie：-RequestHeader-，-CookieValue\" class=\"headerlink\" title=\"第三类：请求头参数以及Cookie：@RequestHeader ，@CookieValue\"></a>第三类：请求头参数以及Cookie：@RequestHeader ，@CookieValue</h2><h3 id=\"例：-2\"><a href=\"#例：-2\" class=\"headerlink\" title=\"例：\"></a>例：</h3><p>java代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo3\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">(@RequestHeader(name = <span class=\"string\">\"myHeader\"</span>)</span> String myHeader,</span></span><br><span class=\"line\"><span class=\"function\">        @<span class=\"title\">CookieValue</span><span class=\"params\">(name = <span class=\"string\">\"myCookie\"</span>)</span> String myCookie) </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"myHeader=\"</span> + myHeader);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"myCookie=\"</span> + myCookie);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/demo3\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo3</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(request.getHeader(<span class=\"string\">\"myHeader\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Cookie cookie : request.getCookies()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"myCookie\"</span>.equals(cookie.getName())) &#123;</span><br><span class=\"line\">            System.out.println(cookie.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Spring Boot","Java"],"tags":["Spring Boot"]},{"title":"Spring Boot 注解-@Repository、@Service、@Controller 和 @Component","url":"/posts/7ed33fb4/","content":"<blockquote>\n<p>一切的开始都是艰难的开始，只有多多思考，最终才能达成目标！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>Spring 2.5 中除了提供 @Component 注释外，还定义了几个拥有特殊语义的注释，它们分别是：@Repository、@Service 和 @Controller。<br>在目前的 Spring 版本中，这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。<br>1、@Component<br>@Component<br>是所有受Spring 管理组件的通用形式，@Component注解可以放在类的头上，@Component不推荐使用。</p>\n<p>2、@Controller<br>@Controller对应表现层的Bean，也就是Action，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">@Scope(&quot;prototype&quot;)</span><br><span class=\"line\"> public class UserAction extends BaseAction&lt;User&gt;&#123;</span><br><span class=\"line\">……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>使用@Controller注解标识UserAction之后，就表示要把UserAction交给Spring容器管理，在Spring容器中会存在一个名字为”userAction”的action，这个名字是根据UserAction类名来取的。注意：如果@Controller不指定其value【@Controller】，则默认的bean名字为这个类的类名首字母小写，如果指定value【@Controller(value=”UserAction”)】或者【@Controller(“UserAction”)】，则使用value作为bean的名字。</p>\n<p>这里的UserAction还使用了@Scope注解，@Scope(“prototype”)表示将Action的范围声明为原型，可以利用容器的scope=”prototype”来保证每一个请求有一个单独的Action来处理，避免struts中Action的线程安全问题。spring 默认scope 是单例模式(scope=”singleton”)，这样只会创建一个Action对象，每次访问都是同一Action对象，数据不安全，struts2 是要求每次次访问都对应不同的Action，scope=”prototype” 可以保证当有请求的时候都创建一个Action对象</p>\n<p>3、@ Service<br>@Service对应的是业务层Bean，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> @Service(&quot;userService&quot;)</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\"> ………</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>@Service(“userService”)注解是告诉Spring，当Spring要创建UserServiceImpl的的实例时，bean的名字必须叫做”userService”，这样当Action需要使用UserServiceImpl的的实例时,就可以由Spring创建好的”userService”，然后注入给Action：在Action只需要声明一个名字叫“userService”的变量来接收由Spring注入的”userService”即可，具体代码如下：</p>\n<p> // 注入userService</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Resource(name &#x3D; &quot;userService&quot;)</span><br><span class=\"line\">private UserService userService;</span><br></pre></td></tr></table></figure>\n\n<p>注意：在Action声明的“userService”变量的类型必须是“UserServiceImpl”或者是其父类“UserService”，否则由于类型不一致而无法注入，由于Action中的声明的“userService”变量使用了@Resource注解去标注，并且指明了其name = “userService”，这就等于告诉Spring，说我Action要实例化一个“userService”，你Spring快点帮我实例化好，然后给我，当Spring看到userService变量上的@Resource的注解时，根据其指明的name属性可以知道，Action中需要用到一个UserServiceImpl的实例，此时Spring就会把自己创建好的名字叫做”userService”的UserServiceImpl的实例注入给Action中的“userService”变量，帮助Action完成userService的实例化，这样在Action中就不用通过“UserService userService = new UserServiceImpl();”这种最原始的方式去实例化userService了。如果没有Spring，那么当Action需要使用UserServiceImpl时，必须通过“UserService userService = new UserServiceImpl();”主动去创建实例对象，但使用了Spring之后，Action要使用UserServiceImpl时，就不用主动去创建UserServiceImpl的实例了，创建UserServiceImpl实例已经交给Spring来做了，Spring把创建好的UserServiceImpl实例给Action，Action拿到就可以直接用了。Action由原来的主动创建UserServiceImpl实例后就可以马上使用，变成了被动等待由Spring创建好UserServiceImpl实例之后再注入给Action，Action才能够使用。这说明Action对“UserServiceImpl”类的“控制权”已经被“反转”了，原来主动权在自己手上，自己要使用“UserServiceImpl”类的实例，自己主动去new一个出来马上就可以使用了，但现在自己不能主动去new“UserServiceImpl”类的实例，new“UserServiceImpl”类的实例的权力已经被Spring拿走了，只有Spring才能够new“UserServiceImpl”类的实例，而Action只能等Spring创建好“UserServiceImpl”类的实例后，再“恳求”Spring把创建好的“UserServiceImpl”类的实例给他，这样他才能够使用“UserServiceImpl”，这就是Spring核心思想“控制反转”，也叫“依赖注入”，“依赖注入”也很好理解，Action需要使用UserServiceImpl干活，那么就是对UserServiceImpl产生了依赖，Spring把Acion需要依赖的UserServiceImpl注入(也就是“给”)给Action，这就是所谓的“依赖注入”。对Action而言，Action依赖什么东西，就请求Spring注入给他，对Spring而言，Action需要什么，Spring就主动注入给他。</p>\n<p>4、@ Repository<br>@Repository对应数据访问层Bean ，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Repository(value&#x3D;&quot;userDao&quot;)</span><br><span class=\"line\">public class UserDaoImpl extends BaseDaoImpl&lt;User&gt; &#123;</span><br><span class=\"line\"> ………</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>@Repository(value=”userDao”)注解是告诉Spring，让Spring创建一个名字叫“userDao”的UserDaoImpl实例。</p>\n<p>当Service需要使用Spring创建的名字叫“userDao”的UserDaoImpl实例时，就可以使用@Resource(name = “userDao”)注解告诉Spring，Spring把创建好的userDao注入给Service即可。</p>\n<p> // 注入userDao，从数据库中根据用户Id取出指定用户时需要用到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Resource(name &#x3D; &quot;userDao&quot;)</span><br><span class=\"line\"> private BaseDao&lt;User&gt; userDao;</span><br></pre></td></tr></table></figure>\n\n","categories":["Spring Boot"],"tags":["Spring Boot","Java"]},{"title":"Java SpringBoot基础入门","url":"/posts/aec98d42/","content":"<blockquote>\n<p>又是学新东西的时间啦！！！！  我好好好难顶！！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-介绍\"><a href=\"#一：-介绍\" class=\"headerlink\" title=\"一： 介绍\"></a>一： 介绍</h2><p><img src=\"http://photo.jomeswang.top/20201218140613.png\" alt=\"\"></p>\n<p> Spring Boot使编码变简单</p>\n<p>Spring Boot使配置变简单</p>\n<p>Spring Boot使监控变简单</p>\n<p>Spring Boot使部署变简单</p>\n<p><img src=\"http://photo.jomeswang.top/20201219214623.png\" alt=\"\"></p>\n<h2 id=\"二：框架解析\"><a href=\"#二：框架解析\" class=\"headerlink\" title=\"二：框架解析\"></a>二：框架解析</h2><p><img src=\"http://photo.jomeswang.top/20201218144535.png\" alt=\"\"></p>\n<h3 id=\"2-1-RestFul-框架的设置\"><a href=\"#2-1-RestFul-框架的设置\" class=\"headerlink\" title=\"2.1 RestFul 框架的设置\"></a>2.1 RestFul 框架的设置</h3><h4 id=\"2-1-1-RestFul-的含义\"><a href=\"#2-1-1-RestFul-的含义\" class=\"headerlink\" title=\"2.1.1    RestFul 的含义\"></a>2.1.1    RestFul 的含义</h4><p><a href=\"http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html</a></p>\n<h4 id=\"2-1-2-Javaspring的-路由配置\"><a href=\"#2-1-2-Javaspring的-路由配置\" class=\"headerlink\" title=\"2.1.2  Javaspring的 路由配置\"></a>2.1.2  Javaspring的 路由配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在路由类上加上 </span><br><span class=\"line\">@RestController</span><br><span class=\"line\">注解</span><br><span class=\"line\"></span><br><span class=\"line\">在 实现函数中加上一个实现路由函数</span><br><span class=\"line\">@GetMapping(value &#x3D; &quot;&#x2F;&quot;)</span><br><span class=\"line\">    public String hello()&#123;</span><br><span class=\"line\">        return &quot;Hello world&quot;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-与数据库的交互\"><a href=\"#2-2-与数据库的交互\" class=\"headerlink\" title=\"2.2  与数据库的交互\"></a>2.2  与数据库的交互</h3><h4 id=\"2-2-1-使用-JPA-和-Mysql-建立一个数据库的连接\"><a href=\"#2-2-1-使用-JPA-和-Mysql-建立一个数据库的连接\" class=\"headerlink\" title=\"2.2.1      使用  JPA 和 Mysql 建立一个数据库的连接\"></a>2.2.1      使用  JPA 和 Mysql 建立一个数据库的连接</h4><p>安装JPA 插件和 Mysql 驱动</p>\n<p>继而在 application.yml 中配置文件</p>\n<p><img src=\"http://photo.jomeswang.top/20201219215442.png\" alt=\"\"></p>\n<h4 id=\"2-2-2-继而在domain-中定义一个-User-类，-在这一个类中-定义数据库中表有的字段。\"><a href=\"#2-2-2-继而在domain-中定义一个-User-类，-在这一个类中-定义数据库中表有的字段。\" class=\"headerlink\" title=\"2.2.2    继而在domain 中定义一个 User 类， 在这一个类中 定义数据库中表有的字段。\"></a>2.2.2    继而在domain 中定义一个 User 类， 在这一个类中 定义数据库中表有的字段。</h4><p><img src=\"http://photo.jomeswang.top/20201219220725.png\" alt=\"\"></p>\n<h4 id=\"2-2-3-在-repository-层中定义-数据库操作方法\"><a href=\"#2-2-3-在-repository-层中定义-数据库操作方法\" class=\"headerlink\" title=\"2.2.3 在 repository 层中定义 数据库操作方法\"></a>2.2.3 在 repository 层中定义 数据库操作方法</h4><p><img src=\"http://photo.jomeswang.top/20201219222425.png\" alt=\"\"></p>\n<h4 id=\"2-2-3-继而在service-层中写-数据操作\"><a href=\"#2-2-3-继而在service-层中写-数据操作\" class=\"headerlink\" title=\"2.2.3    继而在service 层中写 数据操作\"></a>2.2.3    继而在service 层中写 数据操作</h4><p><img src=\"http://photo.jomeswang.top/20201219220838.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201219222256.png\" alt=\"\"></p>\n<p>仓库地址： <a href=\"https://github.com/jomeswang/SpringBootLearning\" target=\"_blank\" rel=\"noopener\">https://github.com/jomeswang/SpringBootLearning</a></p>\n","categories":["java"],"tags":["java","spring boot"]},{"title":"JAVA 基础学习","url":"/posts/bd97933b/","content":"<blockquote>\n<p>不断地更新自己，在新知识中遨游。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-Java-环境配置\"><a href=\"#一：-Java-环境配置\" class=\"headerlink\" title=\"一： Java 环境配置\"></a>一： Java 环境配置</h2><p><strong>下载地址：</strong><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html</a></p>\n<p>详细地址如下： <a href=\"https://www.runoob.com/w3cnote/windows10-java-setup.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/w3cnote/windows10-java-setup.html</a></p>\n<h2 id=\"二：-基础语法\"><a href=\"#二：-基础语法\" class=\"headerlink\" title=\"二： 基础语法\"></a>二： 基础语法</h2><p><img src=\"http://photo.jomeswang.top/20201217183832.png\" alt=\"\"></p>\n<p>额 其他看这里吧！！！！</p>\n<p>没啥好记录的了！！！！</p>\n<p><a href=\"https://www.yuque.com/xianwei-0o74a/ehcv1a/la3hhz#BQwH5\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/xianwei-0o74a/ehcv1a/la3hhz#BQwH5</a></p>\n","categories":["JAVA"],"tags":["JAVA"]},{"title":"hexo 迁移电脑","url":"/posts/921d30fb/","content":"<blockquote>\n<p>hexo 迁移电脑</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：安装gitbash\"><a href=\"#一：安装gitbash\" class=\"headerlink\" title=\"一：安装gitbash\"></a>一：安装gitbash</h2><p>打开官网，下载，然后几乎全部默认安装即可</p>\n<p>进入官网：<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">https://gitforwindows.org/</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200606134139.png\" alt=\"\"></p>\n<h2 id=\"二：设置密钥连接GitHub\"><a href=\"#二：设置密钥连接GitHub\" class=\"headerlink\" title=\"二：设置密钥连接GitHub\"></a>二：设置密钥连接GitHub</h2><ul>\n<li>设置git全局邮箱和用户名</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourgithubname&quot;</span><br><span class=\"line\">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置ssh key</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class=\"line\">#生成后填到github和coding上（有coding平台的话）</span><br></pre></td></tr></table></figure>\n\n<p>打开其中的文件，将其中的内容复制下来，进入web的GitHub</p>\n<p><img src=\"http://photo.jomeswang.top/20200606142650.png\" alt=\"\"></p>\n<p>进入GitHub，选取settings-&gt;SSH and GPG keys-&gt;NewSSH key</p>\n<p>title随意，然后将刚才复制的密钥粘贴进去。</p>\n<p>此时进入git bash 中，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#验证是否成功</span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200606142754.png\" alt=\"\"></p>\n<p>然后打开自己的GitHub仓库使用ssh方式克隆下仓库，同时克隆下的仓库默认是master分支，所以需要先更改默认分支为dev，然后在clone下来。</p>\n<p>之后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd  xxx.github.io</span><br><span class=\"line\">npm install &#x2F;&#x2F; 安装好依赖包</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class=\"line\">看看能不能发布上去</span><br></pre></td></tr></table></figure>\n\n","categories":["hexo"],"tags":["hexo"]},{"title":"前端学习配置教程一","url":"/posts/742e52ad/","content":"<blockquote>\n<p>配置这个都是很烦的啦！！这里总结记录一下哈!!!</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"前端学习配置环境一\"><a href=\"#前端学习配置环境一\" class=\"headerlink\" title=\"前端学习配置环境一\"></a>前端学习配置环境一</h2><h2 id=\"一：VSCode-的安装（win的配置）\"><a href=\"#一：VSCode-的安装（win的配置）\" class=\"headerlink\" title=\"一：VSCode 的安装（win的配置）\"></a>一：VSCode 的安装（win的配置）</h2><h3 id=\"1-1-下载-VSC\"><a href=\"#1-1-下载-VSC\" class=\"headerlink\" title=\"1.1 下载 VSC\"></a>1.1 下载 VSC</h3><p>打开下载链接： <a href=\"https://jomeswang.lanzous.com/iwWDzhz5eta\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iwWDzhz5eta</a></p>\n<h3 id=\"1-2-安装-VSC\"><a href=\"#1-2-安装-VSC\" class=\"headerlink\" title=\"1.2 安装 VSC\"></a>1.2 安装 VSC</h3><p><img src=\"http://photo.jomeswang.top/20201102142850.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201102142938.png\" alt=\"\"></p>\n<p>之后一直下一步就好了</p>\n<p>打开的初始页面如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20201102143056.png\" alt=\"\"></p>\n<h2 id=\"二：-VSCode-的配置\"><a href=\"#二：-VSCode-的配置\" class=\"headerlink\" title=\"二： VSCode 的配置\"></a>二： VSCode 的配置</h2><h3 id=\"2-1-中文插件的安装-Chinese-Simplified\"><a href=\"#2-1-中文插件的安装-Chinese-Simplified\" class=\"headerlink\" title=\"2.1  中文插件的安装     (Chinese (Simplified))\"></a>2.1  中文插件的安装     (Chinese (Simplified))</h3><p><img src=\"http://photo.jomeswang.top/20201102143251.png\" alt=\"\"></p>\n<p>之后重启VSC 来重载配置</p>\n<h3 id=\"2-2-安装-Live-Server-插件\"><a href=\"#2-2-安装-Live-Server-插件\" class=\"headerlink\" title=\"2.2  安装  Live Server 插件\"></a>2.2  安装  Live Server 插件</h3><p><img src=\"http://photo.jomeswang.top/20201102143430.png\" alt=\"\"></p>\n<h3 id=\"2-3-配置-VSC-自动保存\"><a href=\"#2-3-配置-VSC-自动保存\" class=\"headerlink\" title=\"2.3 配置 VSC 自动保存\"></a>2.3 配置 VSC 自动保存</h3><p><img src=\"http://photo.jomeswang.top/20201102143629.png\" alt=\"\"></p>\n<h2 id=\"三：-VSC-配置的-检验\"><a href=\"#三：-VSC-配置的-检验\" class=\"headerlink\" title=\"三： VSC 配置的 检验\"></a>三： VSC 配置的 检验</h2><p><img src=\"http://photo.jomeswang.top/20201102143903.png\" alt=\"\"></p>\n<p>之后</p>\n<p><img src=\"http://photo.jomeswang.top/20201102144218.png\" alt=\"\"></p>\n<p>将下面的代码复制进文件内</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://photo.jomeswang.top/20201102144734.png\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>SZUEA<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.center</span>&#123;</span></span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      top: 50%;</span><br><span class=\"line\">      left: 50%;</span><br><span class=\"line\">      transform: translate(-20%, -70%);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.centerImg</span>&#123;</span></span><br><span class=\"line\">      position: relative;;</span><br><span class=\"line\">      width: 30%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.centerText</span>&#123;</span></span><br><span class=\"line\">      width: 30%;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"centerImg\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://photo.jomeswang.top/20201102144734.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"SZUEAIMG\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"centerText\"</span>&gt;</span></span><br><span class=\"line\">          SZUEA NB!!!</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20201102153046.png\" alt=\"\"></p>\n<p>最终效果：</p>\n<p><img src=\"http://photo.jomeswang.top/20201102153105.png\" alt=\"\"></p>\n","categories":["前端"],"tags":["前端","配置教程"]},{"title":"JS 对象与函数 学习二","url":"/posts/b3fdae5d/","content":"<blockquote>\n<p>每天都要学习哈！！！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：函数\"><a href=\"#一：函数\" class=\"headerlink\" title=\"一：函数\"></a>一：函数</h2><h3 id=\"1-1-Function-构造器\"><a href=\"#1-1-Function-构造器\" class=\"headerlink\" title=\"1.1 Function() 构造器\"></a>1.1 Function() 构造器</h3><p>正如您在之前的例子中看到的，JavaScript 函数是通过 function 关键词定义的。</p>\n<p>函数也可以通过名为 Function() 的内建 JavaScript 函数构造器来定义。</p>\n<p>大多数情况下，您可以避免在 JavaScript 中使用 new 关键词。</p>\n<h3 id=\"1-2-函数提升\"><a href=\"#1-2-函数提升\" class=\"headerlink\" title=\"1.2  函数提升\"></a>1.2  函数提升</h3><p>在本教程中稍早前，您已经学到了“提升”（hoisting）。</p>\n<p>Hoisting 是 JavaScript 将<em>声明</em>移动到当前作用域顶端的默认行为。</p>\n<p>Hoisting 应用于变量声明和函数声明。</p>\n<p>正因如此，JavaScript 函数能够在声明之前被调用：</p>\n<h3 id=\"1-3-箭头函数\"><a href=\"#1-3-箭头函数\" class=\"headerlink\" title=\"1.3  箭头函数\"></a>1.3  箭头函数</h3><p>箭头函数允许使用简短的语法来编写函数表达式。</p>\n<p>您不需要 function 关键字、return 关键字和花括号。</p>\n<p>实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; ES5</span><br><span class=\"line\">var x &#x3D; function(x, y) &#123;</span><br><span class=\"line\">  return x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ES6</span><br><span class=\"line\">const x &#x3D; (x, y) &#x3D;&gt; x * y;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-函数参数\"><a href=\"#1-4-函数参数\" class=\"headerlink\" title=\"1.4  函数参数\"></a>1.4  函数参数</h3><p>在本教程中稍早的时间，您已经学到了函数可以拥有<em>参数</em>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">functionName(parameter1, parameter2, parameter3) &#123;</span><br><span class=\"line\">    要执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>函数参数（parameter）</em>指的是在函数定义中列出的<em>名称</em>。</p>\n<p><em>函数参数（argument）</em>指的是传递到函数或由函数接收到的真实<em>值</em>。</p>\n<h3 id=\"1-5-arguments-对象\"><a href=\"#1-5-arguments-对象\" class=\"headerlink\" title=\"1.5   arguments 对象\"></a>1.5   arguments 对象</h3><p>JavaScript 函数有一个名为 arguments 对象的内置对象。</p>\n<p>arguments 对象包含函数调用时使用的参数数组。</p>\n<p>这样，您就可以简单地使用函数来查找（例如）数字列表中的最高值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">x &#x3D; findMax(1, 123, 500, 115, 44, 88);</span><br><span class=\"line\"></span><br><span class=\"line\">function findMax() &#123;</span><br><span class=\"line\">    var i;</span><br><span class=\"line\">    var max &#x3D; -Infinity;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">        if (arguments[i] &gt; max) &#123;</span><br><span class=\"line\">            max &#x3D; arguments[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-JavaScript-call-方法\"><a href=\"#1-6-JavaScript-call-方法\" class=\"headerlink\" title=\"1.6    JavaScript call() 方法\"></a>1.6    JavaScript call() 方法</h3><p>call() 方法是预定义的 JavaScript 方法。</p>\n<p>它可以用来调用所有者对象作为参数的方法。</p>\n<p>通过 call()，您能够使用属于另一个对象的方法。</p>\n<p>本例调用 person 的 fullName 方法，并用于 person1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var person &#x3D; &#123;</span><br><span class=\"line\">    fullName: function() &#123;</span><br><span class=\"line\">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 &#x3D; &#123;</span><br><span class=\"line\">    firstName:&quot;Bill&quot;,</span><br><span class=\"line\">    lastName: &quot;Gates&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person2 &#x3D; &#123;</span><br><span class=\"line\">    firstName:&quot;Steve&quot;,</span><br><span class=\"line\">    lastName: &quot;Jobs&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.fullName.call(person1);  &#x2F;&#x2F; 将返回 &quot;Bill Gates&quot;</span><br></pre></td></tr></table></figure>\n\n<p>不同之处是：</p>\n<p>call() 方法分别接受参数。</p>\n<p>apply() 方法接受数组形式的参数。</p>\n<p>闭包？？</p>\n<h2 id=\"二：-什么是-DOM？\"><a href=\"#二：-什么是-DOM？\" class=\"headerlink\" title=\"二：  什么是 DOM？\"></a>二：  什么是 DOM？</h2><p>DOM 是一项 W3C (World Wide Web Consortium) 标准。</p>\n<p>DOM 定义了访问文档的标准：</p>\n<blockquote>\n<p>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”</p>\n</blockquote>\n<p>W3C DOM 标准被分为 3 个不同的部分：</p>\n<ul>\n<li>Core DOM - 所有文档类型的标准模型</li>\n<li>XML DOM - XML 文档的标准模型</li>\n<li>HTML DOM - HTML 文档的标准模型</li>\n</ul>\n<h3 id=\"2-1-查找HTML元素\"><a href=\"#2-1-查找HTML元素\" class=\"headerlink\" title=\"2.1  查找HTML元素\"></a>2.1  查找HTML元素</h3><ul>\n<li>通过 id 查找 HTML 元素</li>\n<li>通过标签名查找 HTML 元素</li>\n<li>通过类名查找 HTML 元素</li>\n<li>通过 CSS 选择器查找 HTML 元素</li>\n<li>通过 HTML 对象集合查找 HTML 元素</li>\n</ul>\n<h3 id=\"2-2-通过-CSS-选择器查找-HTML-元素\"><a href=\"#2-2-通过-CSS-选择器查找-HTML-元素\" class=\"headerlink\" title=\"2.2  通过 CSS 选择器查找 HTML 元素\"></a>2.2  通过 CSS 选择器查找 HTML 元素</h3><p>如果您需要查找匹配指定 CSS 选择器（id、类名、类型、属性、属性值等等）的所有 HTML 元素，请使用 querySelectorAll() 方法。</p>\n<h3 id=\"2-3-事件\"><a href=\"#2-3-事件\" class=\"headerlink\" title=\"2.3   事件\"></a>2.3   事件</h3><p>HTML 事件的例子：</p>\n<ul>\n<li>当用户点击鼠标时</li>\n<li>当网页加载后</li>\n<li>当图像加载后</li>\n<li>当鼠标移至元素上时</li>\n<li>当输入字段被改变时</li>\n<li>当 HTML 表单被提交时</li>\n<li>当用户敲击按键时</li>\n</ul>\n<h3 id=\"2-4-JavaScript-HTML-DOM-事件监听器\"><a href=\"#2-4-JavaScript-HTML-DOM-事件监听器\" class=\"headerlink\" title=\"2.4  JavaScript HTML DOM 事件监听器\"></a>2.4  JavaScript HTML DOM 事件监听器</h3><p>addEventListener() 方法为指定元素指定事件处理程序。</p>\n<p>您能够通过使用 removeEventListener() 方法轻松地删除事件监听器。</p>\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">element.addEventListener(event, function, useCapture);</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数是事件的类型（比如 “click” 或 “mousedown”）。</p>\n<p>第二个参数是当事件发生时我们需要调用的函数。</p>\n<p>第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的。</p>\n<p><strong>注意：</strong>请勿对事件使用 “on” 前缀；请使用 “click” 代替 “onclick”。</p>\n<p>你能够通过使用“useCapture”参数来规定传播类型：默认值是 false，将使用冒泡传播，如果该值设置为 true，则事件使用捕获传播。</p>\n<h4 id=\"2-5-DOM-节点\"><a href=\"#2-5-DOM-节点\" class=\"headerlink\" title=\"2.5   DOM 节点\"></a>2.5   DOM 节点</h4><p>根据 W3C HTML DOM 标准，HTML 文档中的所有事物都是节点：</p>\n<ul>\n<li>整个文档是文档节点</li>\n<li>每个 HTML 元素是元素节点</li>\n<li>HTML 元素内的文本是文本节点</li>\n<li>每个 HTML 属性是属性节点</li>\n<li>所有注释是注释节点</li>\n</ul>\n<h3 id=\"2-6-节点关系\"><a href=\"#2-6-节点关系\" class=\"headerlink\" title=\"2.6  节点关系\"></a>2.6  节点关系</h3><p>节点树中的节点彼此之间有一定的等级关系。</p>\n<ul>\n<li>术语（父、子和同胞，parent、child 以及 sibling）用于描述这些关系。</li>\n</ul>\n<p>通过 JavaScript，您可以使用以下节点属性在节点之间导航：</p>\n<ul>\n<li>parentNode</li>\n<li>childNodes[<em>nodenumber</em>]</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>nextSibling</li>\n<li>previousSibling</li>\n</ul>\n<h3 id=\"2-6-节点属性\"><a href=\"#2-6-节点属性\" class=\"headerlink\" title=\"2.6  节点属性\"></a>2.6  节点属性</h3><h4 id=\"2-6-1-InnerHTML\"><a href=\"#2-6-1-InnerHTML\" class=\"headerlink\" title=\"2.6.1  InnerHTML\"></a>2.6.1  InnerHTML</h4><p>在本教程中，我们使用 innerHTML 取回 HTML 元素的内容。</p>\n<h4 id=\"2-6-2-nodeValue-属性\"><a href=\"#2-6-2-nodeValue-属性\" class=\"headerlink\" title=\"2.6.2  nodeValue 属性\"></a>2.6.2  nodeValue 属性</h4><p>nodeValue 属性规定节点的值。</p>\n<ul>\n<li>元素节点的 nodeValue 是 undefined</li>\n<li>文本节点的 nodeValue 是文本文本</li>\n<li>属性节点的 nodeValue 是属性值</li>\n</ul>\n<h3 id=\"2-7-创建新-HTML-元素（节点）\"><a href=\"#2-7-创建新-HTML-元素（节点）\" class=\"headerlink\" title=\"2.7  创建新 HTML 元素（节点）\"></a>2.7  创建新 HTML 元素（节点）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class=\"line\">var node &#x3D; document.createTextNode(&quot;这是新文本。&quot;);</span><br><span class=\"line\">para.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\">var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">element.appendChild(para);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-8-创建新-HTML-元素-insertBefore\"><a href=\"#2-8-创建新-HTML-元素-insertBefore\" class=\"headerlink\" title=\"2.8   创建新 HTML 元素 - insertBefore()\"></a>2.8   创建新 HTML 元素 - insertBefore()</h3><h3 id=\"2-9-删除已有-HTML-元素\"><a href=\"#2-9-删除已有-HTML-元素\" class=\"headerlink\" title=\"2.9   删除已有 HTML 元素\"></a>2.9   删除已有 HTML 元素</h3><p>如需删除某个 HTML 元素，您需要知晓该元素的父：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">parent.removeChild(child);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-10-替换-HTML-元素\"><a href=\"#2-10-替换-HTML-元素\" class=\"headerlink\" title=\"2.10   替换 HTML 元素\"></a>2.10   替换 HTML 元素</h3><p>如需替换元素的，请使用 replaceChild() 方法：</p>\n<h2 id=\"三：-BOM-操作\"><a href=\"#三：-BOM-操作\" class=\"headerlink\" title=\"三： BOM 操作\"></a>三： BOM 操作</h2><h3 id=\"3-1-浏览器对象模型（Browser-Object-Model-BOM-）\"><a href=\"#3-1-浏览器对象模型（Browser-Object-Model-BOM-）\" class=\"headerlink\" title=\"3.1     浏览器对象模型（Browser Object Model (BOM)）\"></a>3.1     浏览器对象模型（Browser Object Model (BOM)）</h3><p>不存在浏览器对象模型（BOM）的官方标准。</p>\n<p>现代的浏览器已经（几乎）实现了 JavaScript 交互相同的方法和属性，因此它经常作为 BOM 的方法和属性被提到。</p>\n<p>一些其他方法： </p>\n<ul>\n<li>window.open() - 打开新窗口</li>\n<li>window.close() - 关闭当前窗口</li>\n<li>window.moveTo() -移动当前窗口</li>\n<li>window.resizeTo() -重新调整当前窗口</li>\n</ul>\n<p>setTimeout(<em>function</em>, <em>milliseconds</em>)</p>\n<p>在等待指定的毫秒数后执行函数。</p>\n<p>setInterval(<em>function</em>, <em>milliseconds</em>)</p>\n<p>等同于 setTimeout()，但持续重复执行该函数。</p>\n","categories":["js"],"tags":["js"]},{"title":"JS 基础 学习一","url":"/posts/deb58f8e/","content":"<blockquote>\n<p>每一天都学习一点点，每一天都成长一点点，这都将带来与众不同的变化</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：为何学习-JavaScript？\"><a href=\"#一：为何学习-JavaScript？\" class=\"headerlink\" title=\"一：为何学习 JavaScript？\"></a>一：为何学习 JavaScript？</h2><p>JavaScript 是 web 开发者必学的三种语言之一：</p>\n<ul>\n<li><em>HTML</em> 定义网页的内容</li>\n<li><em>CSS</em> 规定网页的布局</li>\n<li><em>JavaScript</em> 对网页行为进行编程</li>\n</ul>\n<h2 id=\"二：基础知识\"><a href=\"#二：基础知识\" class=\"headerlink\" title=\"二：基础知识\"></a>二：基础知识</h2><h3 id=\"2-1-显示数据\"><a href=\"#2-1-显示数据\" class=\"headerlink\" title=\"2.1 显示数据\"></a>2.1 显示数据</h3><p>JavaScript 能够以不同方式“显示”数据：</p>\n<ul>\n<li>使用 window.alert() 写入警告框</li>\n<li>使用 document.write() 写入 HTML 输出</li>\n<li>使用 innerHTML 写入 HTML 元素</li>\n<li>使用 console.log() 写入浏览器控制台</li>\n</ul>\n<h3 id=\"2-2-注释\"><a href=\"#2-2-注释\" class=\"headerlink\" title=\"2.2 注释\"></a>2.2 注释</h3><p>单行注释以 // 开头。</p>\n<p>多行注释以 /* 开头，以 */ 结尾。</p>\n<h3 id=\"2-3-变量\"><a href=\"#2-3-变量\" class=\"headerlink\" title=\"2.3 变量\"></a>2.3 变量</h3><h4 id=\"2-3-1-命名\"><a href=\"#2-3-1-命名\" class=\"headerlink\" title=\"2.3.1 命名\"></a>2.3.1 命名</h4><ul>\n<li>名称可包含字母、数字、下划线和美元符号</li>\n<li>名称必须以字母开头</li>\n<li>名称也可以 $ 和 _ 开头（但是在本教程中我们不会这么做）</li>\n<li>名称对大小写敏感（y 和 Y 是不同的变量）</li>\n<li>保留字（比如 JavaScript 的关键词）无法用作变量名称</li>\n</ul>\n<h4 id=\"2-3-2-声明变量\"><a href=\"#2-3-2-声明变量\" class=\"headerlink\" title=\"2.3.2 声明变量\"></a>2.3.2 声明变量</h4><p>使用 var 或者 let  来定义变量，无需在意变量类型。</p>\n<p>其中var的作用域为全局，而 let 的作用域只在代码块内。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var x &#x3D; &#39;3&#39; + 2 </span><br><span class=\"line\">&#x2F;&#x2F; 结果是 &#39;32&#39;</span><br><span class=\"line\">var y &#x3D; 3 + 2 + &#39;9&#39;</span><br><span class=\"line\">&#x2F;&#x2F;结果是 &#39;79&#39;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-运算符\"><a href=\"#2-4-运算符\" class=\"headerlink\" title=\"2.4   运算符\"></a>2.4   运算符</h3><h4 id=\"2-4-1-算数运算符\"><a href=\"#2-4-1-算数运算符\" class=\"headerlink\" title=\"2.4.1  算数运算符\"></a>2.4.1  算数运算符</h4><p>‘+ - * /  % ++ – ‘</p>\n<h4 id=\"2-4-2-赋值运算符\"><a href=\"#2-4-2-赋值运算符\" class=\"headerlink\" title=\"2.4.2  赋值运算符\"></a>2.4.2  赋值运算符</h4><p>‘  =  +=  -=  *=  /=  %=  ‘</p>\n<h4 id=\"2-4-3-字符串运算符\"><a href=\"#2-4-3-字符串运算符\" class=\"headerlink\" title=\"2.4.3 字符串运算符\"></a>2.4.3 字符串运算符</h4><p>+ 运算符也可用于对字符串进行相加（concatenate，级联）</p>\n<h4 id=\"2-4-4-比较运算符\"><a href=\"#2-4-4-比较运算符\" class=\"headerlink\" title=\"2.4.4  比较运算符\"></a>2.4.4  比较运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">==</td>\n<td align=\"left\">等于</td>\n</tr>\n<tr>\n<td align=\"left\">===</td>\n<td align=\"left\">等值等型</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">不相等</td>\n</tr>\n<tr>\n<td align=\"left\">!==</td>\n<td align=\"left\">不等值或不等型</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">大于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">小于</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;=</td>\n<td align=\"left\">大于或等于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;=</td>\n<td align=\"left\">小于或等于</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">三元运算符</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-4-5-逻辑运算符\"><a href=\"#2-4-5-逻辑运算符\" class=\"headerlink\" title=\"2.4.5 逻辑运算符\"></a>2.4.5 逻辑运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑与</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑或</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">逻辑非</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-4-6-类型运算符\"><a href=\"#2-4-6-类型运算符\" class=\"headerlink\" title=\"2.4.6  类型运算符\"></a>2.4.6  类型运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">typeof</td>\n<td align=\"left\">返回变量的类型。</td>\n</tr>\n<tr>\n<td align=\"left\">instanceof</td>\n<td align=\"left\">返回 true，如果对象是对象类型的实例。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-5-函数\"><a href=\"#2-5-函数\" class=\"headerlink\" title=\"2.5    函数\"></a>2.5    函数</h3><p>JavaScript 函数通过 function 关键词进行定义，其后是<em>函数名</em>和括号 ()。</p>\n<p>函数名可包含字母、数字、下划线和美元符号（规则与变量名相同）。</p>\n<p>圆括号可包括由逗号分隔的参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(参数 1, 参数 2, ...)</span><br></pre></td></tr></table></figure>\n\n<p>由函数执行的代码被放置在花括号中：<em>{}</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function name(参数 1, 参数 2, 参数 3) &#123;</span><br><span class=\"line\">    要执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>函数参数（Function parameters）</em>是在函数定义中所列的名称。</p>\n<p><em>函数参数（Function arguments）</em>是当调用函数时由函数接收的真实的<em>值</em>。</p>\n<h3 id=\"2-6-事件\"><a href=\"#2-6-事件\" class=\"headerlink\" title=\"2.6 事件\"></a>2.6 事件</h3><p>HTML 事件可以是浏览器或用户做的某些事情。</p>\n<p>下面是 HTML 事件的一些例子：</p>\n<ul>\n<li>HTML 网页完成加载</li>\n<li>HTML 输入字段被修改</li>\n<li>HTML 按钮被点击</li>\n</ul>\n<p>通常，当事件发生时，用户会希望做某件事。</p>\n<p>JavaScript 允许您在事件被侦测到时执行代码。</p>\n<p><em>通过 JavaScript 代码</em>，HTML 允许您向 HTML 元素添加事件处理程序。</p>\n<p><strong>常见的 HTML 事件</strong></p>\n<p>下面是一些常见的 HTML 事件：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">事件</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onchange</td>\n<td align=\"left\">HTML 元素已被改变</td>\n</tr>\n<tr>\n<td align=\"left\">onclick</td>\n<td align=\"left\">用户点击了 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseover</td>\n<td align=\"left\">用户把鼠标移动到 HTML 元素上</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseout</td>\n<td align=\"left\">用户把鼠标移开 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\">onkeydown</td>\n<td align=\"left\">用户按下键盘按键</td>\n</tr>\n<tr>\n<td align=\"left\">onload</td>\n<td align=\"left\">浏览器已经完成页面加载</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-7-字符串\"><a href=\"#2-7-字符串\" class=\"headerlink\" title=\"2.7  字符串\"></a>2.7  字符串</h3><p>通常，JavaScript 字符串是原始值，通过字面方式创建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var firstName &#x3D; &quot;Bill&quot;</span><br></pre></td></tr></table></figure>\n\n<p>但是字符串也可通过关键词 new 定义为对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var firstName &#x3D; new String(&quot;Bill&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-7-1-查找字符串中的字符串\"><a href=\"#2-7-1-查找字符串中的字符串\" class=\"headerlink\" title=\"2.7.1  查找字符串中的字符串\"></a>2.7.1  查找字符串中的字符串</h4><p>indexOf() 方法返回字符串中指定文本<em>首次</em>出现的索引（位置）：如果未找到文本， indexOf() 和 lastIndexOf() 均返回 -1。</p>\n<h4 id=\"2-7-2-lastIndexOf-方法返回指定文本在字符串中最后一次出现的索引：\"><a href=\"#2-7-2-lastIndexOf-方法返回指定文本在字符串中最后一次出现的索引：\" class=\"headerlink\" title=\"2.7.2  lastIndexOf() 方法返回指定文本在字符串中最后一次出现的索引：\"></a>2.7.2  lastIndexOf() 方法返回指定文本在字符串中<em>最后</em>一次出现的索引：</h4><h4 id=\"2-7-3-slice-方法\"><a href=\"#2-7-3-slice-方法\" class=\"headerlink\" title=\"2.7.3  slice() 方法\"></a>2.7.3  slice() 方法</h4><p>slice() 提取字符串的某个部分并在新字符串中返回被提取的部分。</p>\n<p>该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。</p>\n<p>这个例子裁剪字符串中位置 7 到位置 13 的片段：</p>\n<h4 id=\"2-7-4-替换字符串内容\"><a href=\"#2-7-4-替换字符串内容\" class=\"headerlink\" title=\"2.7.4  替换字符串内容\"></a>2.7.4  替换字符串内容</h4><p>replace() 方法用另一个值替换在字符串中指定的值：</p>\n<h4 id=\"2-7-5-转换大小写\"><a href=\"#2-7-5-转换大小写\" class=\"headerlink\" title=\"2.7.5 转换大小写\"></a>2.7.5 转换大小写</h4><p>通过 toUpperCase() 把字符串转换为大写：</p>\n<p>通过 toLowerCase() 把字符串转换为小写：</p>\n<h4 id=\"2-7-6-连接字符串\"><a href=\"#2-7-6-连接字符串\" class=\"headerlink\" title=\"2.7.6 连接字符串\"></a>2.7.6 连接字符串</h4><p>concat() 连接两个或多个字符串：</p>\n<h4 id=\"2-7-7-去两边空格\"><a href=\"#2-7-7-去两边空格\" class=\"headerlink\" title=\"2.7.7 去两边空格\"></a>2.7.7 去两边空格</h4><p>trim() 方法删除字符串两端的空白符：</p>\n<h4 id=\"2-7-8-提取字符\"><a href=\"#2-7-8-提取字符\" class=\"headerlink\" title=\"2.7.8 提取字符\"></a>2.7.8 提取字符</h4><p>charAt() 方法返回字符串中指定下标（位置）的字符串：</p>\n<p>charCodeAt() 方法返回字符串中指定索引的字符 unicode 编码：</p>\n<h4 id=\"2-7-9-把字符串转换为数组\"><a href=\"#2-7-9-把字符串转换为数组\" class=\"headerlink\" title=\"2.7.9  把字符串转换为数组\"></a>2.7.9  把字符串转换为数组</h4><p>可以通过 split() 将字符串转换为数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var txt &#x3D; &quot;a,b,c,d,e&quot;;   &#x2F;&#x2F; 字符串</span><br><span class=\"line\">txt.split(&quot;,&quot;);          &#x2F;&#x2F; 用逗号分隔</span><br><span class=\"line\">txt.split(&quot; &quot;);          &#x2F;&#x2F; 用空格分隔</span><br><span class=\"line\">txt.split(&quot;|&quot;);          &#x2F;&#x2F; 用竖线分隔</span><br><span class=\"line\">txt.split(&quot;&quot;);           &#x2F;&#x2F; 分隔为字符</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-8-数字方法\"><a href=\"#2-8-数字方法\" class=\"headerlink\" title=\"2.8 数字方法\"></a>2.8 数字方法</h3><h4 id=\"2-8-1-转换字符串为数值\"><a href=\"#2-8-1-转换字符串为数值\" class=\"headerlink\" title=\"2.8.1 转换字符串为数值\"></a>2.8.1 转换字符串为数值</h4><p>toString() 以字符串返回数值。</p>\n<h4 id=\"2-8-2-转变量为数值\"><a href=\"#2-8-2-转变量为数值\" class=\"headerlink\" title=\"2.8.2 转变量为数值\"></a>2.8.2 转变量为数值</h4><p>Number() 可用于把 JavaScript 变量转换为数值：</p>\n<p>parseInt() 解析一段字符串并返回数值。允许空格。只返回首个数字：</p>\n<p>parseFloat() 解析一段字符串并返回数值。允许空格。只返回首个数字：</p>\n<h3 id=\"2-9数组方法\"><a href=\"#2-9数组方法\" class=\"headerlink\" title=\"2.9数组方法\"></a>2.9数组方法</h3><h4 id=\"2-8-1-数组遍历\"><a href=\"#2-8-1-数组遍历\" class=\"headerlink\" title=\"2.8.1  数组遍历\"></a>2.8.1  数组遍历</h4><p>遍历数组的最安全方法是使用 “for” 循环：</p>\n<p>您也可以使用 Array.foreach() 函数：</p>\n<h4 id=\"2-8-2-添加数组元素\"><a href=\"#2-8-2-添加数组元素\" class=\"headerlink\" title=\"2.8.2 添加数组元素\"></a>2.8.2 添加数组元素</h4><p>向数组添加新元素的最佳方法是使用 push() 方法：</p>\n<h4 id=\"2-8-3-创建数组\"><a href=\"#2-8-3-创建数组\" class=\"headerlink\" title=\"2.8.3 创建数组\"></a>2.8.3 创建数组</h4><p>没有必要使用 JavaScript 的内建数组构造器 new Array()。</p>\n<p><em>请使用 [] 取而代之！</em></p>\n<h4 id=\"2-8-4-判别数组对象\"><a href=\"#2-8-4-判别数组对象\" class=\"headerlink\" title=\"2.8.4  判别数组对象\"></a>2.8.4  判别数组对象</h4><p>为了解决这个问题，ECMAScript 5 定义了新方法 Array.<code>isArray()</code>：</p>\n<p>假如对象由给定的构造器创建，则 <em>instanceiof</em> 运算符返回 true：</p>\n<h4 id=\"2-8-5-把数组转换为字符串\"><a href=\"#2-8-5-把数组转换为字符串\" class=\"headerlink\" title=\"2.8.5   把数组转换为字符串\"></a>2.8.5   把数组转换为字符串</h4><p>JavaScript 方法 toString() 把数组转换为数组值（逗号分隔）的字符串。</p>\n<p>join() 方法也可将所有数组元素结合为一个字符串。它的行为类似 toString()，但是您还可以规定分隔符：</p>\n<h4 id=\"2-8-6-删除添加元素\"><a href=\"#2-8-6-删除添加元素\" class=\"headerlink\" title=\"2.8.6 删除添加元素\"></a>2.8.6 删除添加元素</h4><p>pop() 方法从数组中删除最后一个元素：</p>\n<p>push() 方法（在数组结尾处）向数组添加一个新的元素：push() 方法返回新数组的长度：</p>\n<p>shift() 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引。shift() 方法返回被“位移出”的字符串：</p>\n<p>unshift() 方法（在开头）向数组添加新元素，并“反向位移”旧元素：unshift() 方法返回新数组的长度。</p>\n<h4 id=\"2-8-7-更改元素\"><a href=\"#2-8-7-更改元素\" class=\"headerlink\" title=\"2.8.7 更改元素\"></a>2.8.7 更改元素</h4><p>通过使用它们的<em>索引号</em>来访问数组元素：length 属性提供了向数组追加新元素的简易方法：</p>\n<h4 id=\"2-8-8-删除元素\"><a href=\"#2-8-8-删除元素\" class=\"headerlink\" title=\"2.8.8  删除元素\"></a>2.8.8  删除元素</h4><p>既然 JavaScript 数组属于对象，其中的元素就可以使用 JavaScript delete 运算符来<em>删除</em>：改为 undefined</p>\n<h4 id=\"2-8-9-拼接数组\"><a href=\"#2-8-9-拼接数组\" class=\"headerlink\" title=\"2.8.9 拼接数组\"></a>2.8.9 拼接数组</h4><p>splice() 方法可用于向数组添加新项：第一个参数（2）定义了应添加新元素的位置（拼接）。</p>\n<p>第二个参数（0）定义应删除多少元素。</p>\n<p>其余参数（“Lemon”，“Kiwi”）定义要添加的新元素。</p>\n<p>splice() 方法返回一个包含已删除项的数组：</p>\n<h4 id=\"2-8-10-合并数组\"><a href=\"#2-8-10-合并数组\" class=\"headerlink\" title=\"2.8.10  合并数组\"></a>2.8.10  合并数组</h4><p>concat() 方法通过合并（连接）现有数组来创建一个新数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [&quot;Cecilie&quot;, &quot;Lone&quot;];</span><br><span class=\"line\">var arr2 &#x3D; [&quot;Emil&quot;, &quot;Tobias&quot;, &quot;Linus&quot;];</span><br><span class=\"line\">var arr3 &#x3D; [&quot;Robin&quot;, &quot;Morgan&quot;];</span><br><span class=\"line\">var myChildren &#x3D; arr1.concat(arr2, arr3);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-11-裁剪数组\"><a href=\"#2-8-11-裁剪数组\" class=\"headerlink\" title=\"2.8.11 裁剪数组\"></a>2.8.11 裁剪数组</h4><p>slice() 可接受两个参数，比如 (1, 3)。</p>\n<p>该方法会从开始参数选取元素，直到结束参数（不包括）为止。</p>\n<h4 id=\"2-8-12-自动-toString\"><a href=\"#2-8-12-自动-toString\" class=\"headerlink\" title=\"2.8.12  自动 toString()\"></a>2.8.12  自动 toString()</h4><p>如果需要原始值，则 JavaScript 会自动把数组转换为字符串。</p>\n<h3 id=\"2-9-数组排序\"><a href=\"#2-9-数组排序\" class=\"headerlink\" title=\"2.9 数组排序\"></a>2.9 数组排序</h3><h4 id=\"2-9-1-sort\"><a href=\"#2-9-1-sort\" class=\"headerlink\" title=\"2.9.1  sort()\"></a>2.9.1  sort()</h4><p>sort() 方法以字母顺序对数组进行排序：</p>\n<h4 id=\"2-9-2-反转数组\"><a href=\"#2-9-2-反转数组\" class=\"headerlink\" title=\"2.9.2  反转数组\"></a>2.9.2  反转数组</h4><p>reverse() 方法反转数组中的元素。</p>\n<h4 id=\"2-9-3-比值函数\"><a href=\"#2-9-3-比值函数\" class=\"headerlink\" title=\"2.9.3  比值函数\"></a>2.9.3  比值函数</h4><p>比较函数的目的是定义另一种排序顺序。</p>\n<p>比较函数应该返回一个负，零或正值，这取决于参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function(a, b)&#123;return a-b&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 sort() 函数比较两个值时，会将值发送到比较函数，并根据所返回的值（负、零或正值）对这些值进行排序。</p>\n<h4 id=\"2-9-4-查找最高（或最低）的数组值\"><a href=\"#2-9-4-查找最高（或最低）的数组值\" class=\"headerlink\" title=\"2.9.4 查找最高（或最低）的数组值\"></a>2.9.4 查找最高（或最低）的数组值</h4><p>JavaScript 不提供查找数组中最大或最小数组值的内建函数。</p>\n<p>不过，在对数组进行排序之后，您能够使用索引来获得最高或最低值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var points &#x3D; [40, 100, 1, 5, 25, 10];</span><br><span class=\"line\">points.sort(function(a, b)&#123;return a - b&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 现在 points[0] 包含最低值</span><br><span class=\"line\">&#x2F;&#x2F; 而 points[points.length-1] 包含最高值</span><br></pre></td></tr></table></figure>\n\n<p>您可以使用 Math.max.apply 来查找数组中的最高值：</p>\n<p>您可以使用 Math.min.apply 来查找数组中的最低值：</p>\n<h3 id=\"2-10-数组迭代\"><a href=\"#2-10-数组迭代\" class=\"headerlink\" title=\"2.10 数组迭代\"></a>2.10 数组迭代</h3><h4 id=\"2-10-1-Array-forEach\"><a href=\"#2-10-1-Array-forEach\" class=\"headerlink\" title=\"2.10.1 Array.forEach()\"></a>2.10.1 Array.forEach()</h4><p>forEach() 方法为每个数组元素调用一次函数（回调函数）。</p>\n<p><strong>注释：</strong>该函数接受 3 个参数：</p>\n<ul>\n<li>项目值</li>\n<li>项目索引</li>\n<li>数组本身</li>\n</ul>\n<h4 id=\"2-10-2-Array-map\"><a href=\"#2-10-2-Array-map\" class=\"headerlink\" title=\"2.10.2  Array.map()\"></a>2.10.2  Array.map()</h4><p>map() 方法通过对每个数组元素执行函数来创建新数组。</p>\n<p>请注意，该函数有 3 个参数：</p>\n<ul>\n<li>项目值</li>\n<li>项目索引</li>\n<li>数组本身</li>\n</ul>\n<h4 id=\"2-10-3-Array-filter\"><a href=\"#2-10-3-Array-filter\" class=\"headerlink\" title=\"2.10.3  Array.filter()\"></a>2.10.3  Array.filter()</h4><p>filter() 方法创建一个包含通过测试的数组元素的新数组。</p>\n<h4 id=\"2-10-4-Array-reduce\"><a href=\"#2-10-4-Array-reduce\" class=\"headerlink\" title=\"2.10.4  Array.reduce()\"></a>2.10.4  Array.reduce()</h4><p>reduce() 方法在每个数组元素上运行函数，以生成（减少它）单个值。</p>\n<h4 id=\"2-10-5-Array-reduceRight\"><a href=\"#2-10-5-Array-reduceRight\" class=\"headerlink\" title=\"2.10.5   Array.reduceRight()\"></a>2.10.5   Array.reduceRight()</h4><p>reduceRight() 方法在每个数组元素上运行函数，以生成（减少它）单个值。</p>\n<h4 id=\"2-10-6-Array-indexOf\"><a href=\"#2-10-6-Array-indexOf\" class=\"headerlink\" title=\"2.10.6   Array.indexOf()\"></a>2.10.6   Array.indexOf()</h4><p>indexOf() 方法在数组中搜索元素值并返回其位置。</p>\n<p><strong>注释：</strong>第一个项目的位置是 0，第二个项目的位置是 1，以此类推。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">array.indexOf(item, start)</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th><em>item</em></th>\n<th>必需。要检索的项目。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>start</em></td>\n<td>可选。从哪里开始搜索。负值将从结尾开始的给定位置开始，并搜索到结尾。</td>\n</tr>\n</tbody></table>\n<p>如果未找到项目，Array.indexOf() 返回 -1。</p>\n<p>如果项目多次出现，则返回第一次出现的位置。</p>\n<h4 id=\"2-10-7-Array-lastIndexOf\"><a href=\"#2-10-7-Array-lastIndexOf\" class=\"headerlink\" title=\"2.10.7   Array.lastIndexOf()\"></a>2.10.7   Array.lastIndexOf()</h4><p> Array.lastIndexOf() 与 Array.indexOf() 类似，但是从数组结尾开始搜索。</p>\n<h4 id=\"2-11-日期\"><a href=\"#2-11-日期\" class=\"headerlink\" title=\"2.11 日期\"></a>2.11 日期</h4><h4 id=\"2-11-1-创建日期\"><a href=\"#2-11-1-创建日期\" class=\"headerlink\" title=\"2.11.1  创建日期\"></a>2.11.1  创建日期</h4><p>Date 对象由新的 Date() 构造函数创建。</p>\n<p>有 4 种方法创建新的日期对象：</p>\n<ul>\n<li>new Date()</li>\n<li>new Date(year, month, day, hours, minutes, seconds, milliseconds)</li>\n<li>new Date(milliseconds)</li>\n<li>new Date(date string)</li>\n</ul>\n<h4 id=\"2-11-2-输入格式\"><a href=\"#2-11-2-输入格式\" class=\"headerlink\" title=\"2.11.2 输入格式\"></a>2.11.2 输入格式</h4><p>有四种 JavaScript 日期输入格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ISO 日期</td>\n<td align=\"left\">“2018-02-19” （国际标准）</td>\n</tr>\n<tr>\n<td align=\"left\">短日期</td>\n<td align=\"left\">“02/19/2018” 或者 “2018/02/19”</td>\n</tr>\n<tr>\n<td align=\"left\">长日期</td>\n<td align=\"left\">“Feb 19 2018” 或者 “19 Feb 2019”</td>\n</tr>\n<tr>\n<td align=\"left\">完整日期</td>\n<td align=\"left\">“Monday February 25 2015”</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-11-3-日期获取方法\"><a href=\"#2-11-3-日期获取方法\" class=\"headerlink\" title=\"2.11.3   日期获取方法\"></a>2.11.3   日期获取方法</h4><p>获取方法用于获取日期的某个部分（来自日期对象的信息）。下面是最常用的方法（以字母顺序排序）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">getDate()</td>\n<td align=\"left\">以数值返回天（1-31）</td>\n</tr>\n<tr>\n<td align=\"left\">getDay()</td>\n<td align=\"left\">以数值获取周名（0-6）</td>\n</tr>\n<tr>\n<td align=\"left\">getFullYear()</td>\n<td align=\"left\">获取四位的年（yyyy）</td>\n</tr>\n<tr>\n<td align=\"left\">getHours()</td>\n<td align=\"left\">获取小时（0-23）</td>\n</tr>\n<tr>\n<td align=\"left\">getMilliseconds()</td>\n<td align=\"left\">获取毫秒（0-999）</td>\n</tr>\n<tr>\n<td align=\"left\">getMinutes()</td>\n<td align=\"left\">获取分（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">getMonth()</td>\n<td align=\"left\">获取月（0-11）</td>\n</tr>\n<tr>\n<td align=\"left\">getSeconds()</td>\n<td align=\"left\">获取秒（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">getTime()</td>\n<td align=\"left\">获取时间（从 1970 年 1 月 1 日至今）</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-11-4-日期设置方法\"><a href=\"#2-11-4-日期设置方法\" class=\"headerlink\" title=\"2.11.4  日期设置方法\"></a>2.11.4  日期设置方法</h4><p>设置方法用于设置日期的某个部分。下面是最常用的方法（按照字母顺序排序）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">setDate()</td>\n<td align=\"left\">以数值（1-31）设置日</td>\n</tr>\n<tr>\n<td align=\"left\">setFullYear()</td>\n<td align=\"left\">设置年（可选月和日）</td>\n</tr>\n<tr>\n<td align=\"left\">setHours()</td>\n<td align=\"left\">设置小时（0-23）</td>\n</tr>\n<tr>\n<td align=\"left\">setMilliseconds()</td>\n<td align=\"left\">设置毫秒（0-999）</td>\n</tr>\n<tr>\n<td align=\"left\">setMinutes()</td>\n<td align=\"left\">设置分（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">setMonth()</td>\n<td align=\"left\">设置月（0-11）</td>\n</tr>\n<tr>\n<td align=\"left\">setSeconds()</td>\n<td align=\"left\">设置秒（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">setTime()</td>\n<td align=\"left\">设置时间（从 1970 年 1 月 1 日至今的毫秒数）</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-12-Math方法\"><a href=\"#2-12-Math方法\" class=\"headerlink\" title=\"2.12 Math方法\"></a>2.12 Math方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">abs(x)</td>\n<td align=\"left\">返回 x 的绝对值</td>\n</tr>\n<tr>\n<td align=\"left\">acos(x)</td>\n<td align=\"left\">返回 x 的反余弦值，以弧度计</td>\n</tr>\n<tr>\n<td align=\"left\">asin(x)</td>\n<td align=\"left\">返回 x 的反正弦值，以弧度计</td>\n</tr>\n<tr>\n<td align=\"left\">atan(x)</td>\n<td align=\"left\">以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。</td>\n</tr>\n<tr>\n<td align=\"left\">atan2(y,x)</td>\n<td align=\"left\">返回从 x 轴到点 (x,y) 的角度</td>\n</tr>\n<tr>\n<td align=\"left\">ceil(x)</td>\n<td align=\"left\">对 x 进行上舍入</td>\n</tr>\n<tr>\n<td align=\"left\">cos(x)</td>\n<td align=\"left\">返回 x 的余弦</td>\n</tr>\n<tr>\n<td align=\"left\">exp(x)</td>\n<td align=\"left\">返回 Ex 的值</td>\n</tr>\n<tr>\n<td align=\"left\">floor(x)</td>\n<td align=\"left\">对 x 进行下舍入</td>\n</tr>\n<tr>\n<td align=\"left\">log(x)</td>\n<td align=\"left\">返回 x 的自然对数（底为e）</td>\n</tr>\n<tr>\n<td align=\"left\">max(x,y,z,…,n)</td>\n<td align=\"left\">返回最高值</td>\n</tr>\n<tr>\n<td align=\"left\">min(x,y,z,…,n)</td>\n<td align=\"left\">返回最低值</td>\n</tr>\n<tr>\n<td align=\"left\">pow(x,y)</td>\n<td align=\"left\">返回 x 的 y 次幂</td>\n</tr>\n<tr>\n<td align=\"left\">random()</td>\n<td align=\"left\">返回 0 ~ 1 之间的随机数</td>\n</tr>\n<tr>\n<td align=\"left\">round(x)</td>\n<td align=\"left\">把 x 四舍五入为最接近的整数</td>\n</tr>\n<tr>\n<td align=\"left\">sin(x)</td>\n<td align=\"left\">返回 x（x 以角度计）的正弦</td>\n</tr>\n<tr>\n<td align=\"left\">sqrt(x)</td>\n<td align=\"left\">返回 x 的平方根</td>\n</tr>\n<tr>\n<td align=\"left\">tan(x)</td>\n<td align=\"left\">返回角的正切</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-13-循环\"><a href=\"#2-13-循环\" class=\"headerlink\" title=\"2.13  循环\"></a>2.13  循环</h3><p>JavaScript 支持不同类型的循环：</p>\n<ul>\n<li>for - 多次遍历代码块</li>\n<li>for/in - 遍历对象属性</li>\n<li>while - 当指定条件为 true 时循环一段代码块</li>\n<li>do/while - 当指定条件为 true 时循环一段代码块</li>\n</ul>\n<h3 id=\"2-14-类型转换\"><a href=\"#2-14-类型转换\" class=\"headerlink\" title=\"2.14  类型转换\"></a>2.14  类型转换</h3><p>JavaScript 中有五种可包含值的数据类型：</p>\n<ul>\n<li>字符串（string）</li>\n<li>数字（number）</li>\n<li>布尔（boolean）</li>\n<li>对象（object）</li>\n<li>函数（function）</li>\n</ul>\n<p>有三种对象类型：</p>\n<ul>\n<li>对象（Object）</li>\n<li>日期（Date）</li>\n<li>数组（Array）</li>\n</ul>\n<p>同时有两种不能包含值的数据类型：</p>\n<ul>\n<li>null</li>\n<li>undefined</li>\n</ul>\n<p>如果 JavaScript 尝试操作一种“错误”的数据类型，它会试图将该值转换为“正确”的类型。</p>\n<p>结果并不总是你所期望的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">5 + null    &#x2F;&#x2F; 返回 5         因为 null 被转换为 0</span><br><span class=\"line\">&quot;5&quot; + null  &#x2F;&#x2F; 返回 &quot;5null&quot;   因为 null 被转换为  &quot;null&quot;</span><br><span class=\"line\">&quot;5&quot; + 2     &#x2F;&#x2F; 返回 52        因为 2 被转换为 &quot;2&quot;</span><br><span class=\"line\">&quot;5&quot; - 2     &#x2F;&#x2F; 返回 3         因为 &quot;5&quot; 被转换为 5</span><br><span class=\"line\">&quot;5&quot; * &quot;2&quot;   &#x2F;&#x2F; 返回 10        因为 &quot;5&quot; 和 &quot;2&quot; 被转换为 5 和 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-15-正则表达式\"><a href=\"#2-15-正则表达式\" class=\"headerlink\" title=\"2.15 正则表达式\"></a>2.15 正则表达式</h3><p><strong>语法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;pattern&#x2F;modifiers;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用字符串方法</strong></p>\n<p>在 JavaScript 中，正则表达式常用于两个<em>字符串方法</em>：search() 和 replace()。</p>\n<p>search() 方法使用表达式来搜索匹配，然后返回匹配的位置。</p>\n<p>replace() 方法返回模式被替换处修改后的字符串。在 JavaScript 中，正则表达式常用于两个<em>字符串方法</em>：search() 和 replace()。</p>\n<p>search() 方法使用表达式来搜索匹配，然后返回匹配的位置。</p>\n<p>replace() 方法返回模式被替换处修改后的字符串。</p>\n<h3 id=\"2-16-错误处理\"><a href=\"#2-16-错误处理\" class=\"headerlink\" title=\"2.16 错误处理\"></a>2.16 错误处理</h3><p>try 语句使您能够测试代码块中的错误。</p>\n<p>catch 语句允许您处理错误。</p>\n<p>throw 语句允许您创建自定义错误。</p>\n<p>finally 使您能够执行代码，在 try 和 catch 之后，无论结果如何。</p>\n","categories":["js"],"tags":["js"]},{"title":"《将博客搬至CSDN》","url":"/posts/24ca3b58/","content":"<p>《将博客搬至CSDN》</p>\n","categories":["csdn"],"tags":["csdn"]},{"title":"OAuth 2.0授权机制","url":"/posts/21699297/","content":"<blockquote>\n<p>静下心来学习，你会发现你曾经使用过的东西的原理，顿时就会恍然一悟，哦！原来就是这个样子啊。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一、快递员问题\"><a href=\"#一、快递员问题\" class=\"headerlink\" title=\"一、快递员问题\"></a>一、快递员问题</h2><p>我住在一个大型的居民小区。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040401.jpg\" alt=\"img\"></p>\n<p>小区有门禁系统。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040402.jpg\" alt=\"img\"></p>\n<p>进入的时候需要输入密码。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040403.jpg\" alt=\"img\"></p>\n<p>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040404.jpg\" alt=\"img\"></p>\n<p>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p>\n<p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p>\n<h2 id=\"二、授权机制的设计\"><a href=\"#二、授权机制的设计\" class=\"headerlink\" title=\"二、授权机制的设计\"></a>二、授权机制的设计</h2><p>于是，我设计了一套授权机制。</p>\n<p>第一步，门禁系统的密码输入器下面，增加一个按钮，叫做”获取授权”。快递员需要首先按这个按钮，去申请授权。</p>\n<p>第二步，他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司。</p>\n<p>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权。</p>\n<p>第三步，门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效。</p>\n<p>第四步，快递员向门禁系统输入令牌，进入小区。</p>\n<p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们。</p>\n<h2 id=\"三、互联网场景\"><a href=\"#三、互联网场景\" class=\"headerlink\" title=\"三、互联网场景\"></a>三、互联网场景</h2><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p>\n<p>首先，居民小区就是储存用户数据的网络服务。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的”门禁系统”。</p>\n<p>其次，快递员（或者说快递公司）就是第三方应用，想要穿过门禁系统，进入小区。</p>\n<p>最后，我就是用户本人，同意授权第三方应用进入小区，获取我的数据。</p>\n<p><strong>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</strong></p>\n<h2 id=\"四、令牌与密码\"><a href=\"#四、令牌与密码\" class=\"headerlink\" title=\"四、令牌与密码\"></a>四、令牌与密码</h2><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p>\n<p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p>\n<p>（2）令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</p>\n<p>（3）令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p>\n<p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p>\n<p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以<strong>令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。</strong> 这也是为什么令牌的有效期，一般都设置得很短的原因。</p>\n<p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。</p>\n<h2 id=\"五：授权方式\"><a href=\"#五：授权方式\" class=\"headerlink\" title=\"五：授权方式\"></a>五：授权方式</h2><h3 id=\"第一种授权方式：授权码\"><a href=\"#第一种授权方式：授权码\" class=\"headerlink\" title=\"第一种授权方式：授权码\"></a>第一种授权方式：授权码</h3><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p>\n<p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p>\n<p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//b.com/oauth/authorize?</span></span><br><span class=\"line\">  response_type=code&amp;</span><br><span class=\"line\">  client_id=CLIENT_ID&amp;</span><br><span class=\"line\">  redirect_uri=CALLBACK_URL&amp;</span><br><span class=\"line\">  scope=read</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>response_type</code>参数表示要求返回授权码（<code>code</code>），<code>client_id</code>参数让 B 知道是谁在请求，<code>redirect_uri</code>参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code>参数表示要求的授权范围（这里是只读）。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040902.jpg\" alt=\"img\"></p>\n<p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//a.com/callback?code=AUTHORIZATION_CODE</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>code</code>参数就是授权码。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040907.jpg\" alt=\"img\"></p>\n<p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//b.com/oauth/token?</span></span><br><span class=\"line\"> client_id=CLIENT_ID&amp;</span><br><span class=\"line\"> client_secret=CLIENT_SECRET&amp;</span><br><span class=\"line\"> grant_type=authorization_code&amp;</span><br><span class=\"line\"> code=AUTHORIZATION_CODE&amp;</span><br><span class=\"line\"> redirect_uri=CALLBACK_URL</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求），<code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code>参数是上一步拿到的授权码，<code>redirect_uri</code>参数是令牌颁发后的回调网址。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040904.jpg\" alt=\"img\"></p>\n<p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;    </span><br><span class=\"line\">  <span class=\"string\">\"access_token\"</span>:<span class=\"string\">\"ACCESS_TOKEN\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"token_type\"</span>:<span class=\"string\">\"bearer\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"expires_in\"</span>:<span class=\"number\">2592000</span>,</span><br><span class=\"line\">  <span class=\"string\">\"refresh_token\"</span>:<span class=\"string\">\"REFRESH_TOKEN\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scope\"</span>:<span class=\"string\">\"read\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"uid\"</span>:<span class=\"number\">100101</span>,</span><br><span class=\"line\">  <span class=\"string\">\"info\"</span>:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040905.jpg\" alt=\"img\"></p>\n<h3 id=\"第二种方式：隐藏式\"><a href=\"#第二种方式：隐藏式\" class=\"headerlink\" title=\"第二种方式：隐藏式\"></a>第二种方式：隐藏式</h3><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）。</strong></p>\n<p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//b.com/oauth/authorize?</span></span><br><span class=\"line\">  response_type=token&amp;</span><br><span class=\"line\">  client_id=CLIENT_ID&amp;</span><br><span class=\"line\">  redirect_uri=CALLBACK_URL&amp;</span><br><span class=\"line\">  scope=read</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌。</p>\n<p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//a.com/callback#token=ACCESS_TOKEN</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌。</p>\n<p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在”中间人攻击”的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p>\n<p><img src=\"https://www.wangbase.com/blogimg/asset/201904/bg2019040906.jpg\" alt=\"img\"></p>\n<p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p>\n<h3 id=\"第三种方式：密码式\"><a href=\"#第三种方式：密码式\" class=\"headerlink\" title=\"第三种方式：密码式\"></a>第三种方式：密码式</h3><p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</strong></p>\n<p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//oauth.b.com/token?</span></span><br><span class=\"line\">  grant_type=password&amp;</span><br><span class=\"line\">  username=USERNAME&amp;</span><br><span class=\"line\">  password=PASSWORD&amp;</span><br><span class=\"line\">  client_id=CLIENT_ID</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示”密码式”，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p>\n<p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p>\n<p>这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p>\n<h3 id=\"第四种方式：凭证式\"><a href=\"#第四种方式：凭证式\" class=\"headerlink\" title=\"第四种方式：凭证式\"></a>第四种方式：凭证式</h3><p><strong>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</strong></p>\n<p>第一步，A 应用在命令行向 B 发出请求。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//oauth.b.com/token?</span></span><br><span class=\"line\">  grant_type=client_credentials&amp;</span><br><span class=\"line\">  client_id=CLIENT_ID&amp;</span><br><span class=\"line\">  client_secret=CLIENT_SECRET</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份。</p>\n<p>第二步，B 网站验证通过以后，直接返回令牌。</p>\n<p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p>\n<h3 id=\"令牌的使用\"><a href=\"#令牌的使用\" class=\"headerlink\" title=\"令牌的使用\"></a>令牌的使用</h3><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p>\n<p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面。</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -H <span class=\"string\">\"Authorization: Bearer ACCESS_TOKEN\"</span> \\</span><br><span class=\"line\"><span class=\"string\">\"https://api.b.com\"</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p>\n<h3 id=\"更新令牌\"><a href=\"#更新令牌\" class=\"headerlink\" title=\"更新令牌\"></a>更新令牌</h3><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p>\n<p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//b.com/oauth/token?</span></span><br><span class=\"line\">  grant_type=refresh_token&amp;</span><br><span class=\"line\">  client_id=CLIENT_ID&amp;</span><br><span class=\"line\">  client_secret=CLIENT_SECRET&amp;</span><br><span class=\"line\">  refresh_token=REFRESH_TOKEN</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>上面 URL 中，<code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，<code>client_id</code>参数和<code>client_secret</code>参数用于确认身份，<code>refresh_token</code>参数就是用于更新令牌的令牌。</p>\n<p>B 网站验证通过以后，就会颁发新的令牌。</p>\n<p>写到这里，颁发令牌的四种方式就介绍完了。<a href=\"http://www.ruanyifeng.com/blog/2019/04/github-oauth.html\" target=\"_blank\" rel=\"noopener\">下一篇文章</a>会编写一个真实的 Demo，演示如何通过 OAuth 2.0 向 GitHub 的 API 申请令牌，然后再用令牌获取数据。</p>\n","categories":["后端"],"tags":["验权","oauth2.0"]},{"title":"node 虚拟环境","url":"/posts/c46c956/","content":"<blockquote>\n<p>众里寻它千百度漠然回首，那人却在灯火阑珊处</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>Taro有个很麻烦的问题，就是Taro的项目工程对Taro的版本要求比较严格，例如使用1.3.25版本开发的项目，就不能使用1.3.33的版本运行，即小版本无法兼容。</p>\n<p>同时，Taro为了能够跟上各端的前进步伐，自己的版本更新也很快。这很容易导致一个现象，如果本地同时开发两个或多个Taro项目，但它们使用的Taro版本又不一致，每次运行一个项目可能就需要先重新安装一次Taro，而且多个项目不能同时运行。</p>\n<p>为了解决这个问题特意搜索一番，发现一个python的包可以利用：nodeenv。是的你没看错，就是python的，但它实现的是创建node的虚拟环境，与python虚拟环境很类似。</p>\n<p>首先要保证本地环境安装了python，mac及linux系统自带2.x版本的python，windows环境需要自己安装，关于python的话题在此不多说。下面我们介绍如何利用nodeenv解决Taro版本冲突问题。</p>\n<ul>\n<li>安装nodeenv</li>\n</ul>\n<blockquote>\n<p>sudo pip install nodeenv</p>\n</blockquote>\n<ul>\n<li>在当前项目路径下创建虚拟nodeenv环境</li>\n</ul>\n<blockquote>\n<p>nodeenv –node=system taro3.0.7</p>\n</blockquote>\n<p><code>--node=system</code>表示利用当前系统中的node创建虚拟环境，即不独立安装node，且在虚拟环境下能访问到系统node安装的全局工具包。</p>\n<p>如果要安装完全独立的环境，可去掉该参数或把system改为具体的node版本号。由于我们只要是解决Taro问题，所以选择使用系统的node来创建。</p>\n<p><code>taro3.0.7</code>是要创建的虚拟环境的文件夹名称</p>\n<ul>\n<li>启动虚拟环境</li>\n</ul>\n<blockquote>\n<p>.  taro3.0.7/bin/activate</p>\n</blockquote>\n<p>启动后命令行提示符变成这样</p>\n<blockquote>\n<p>(taro3.0.7) $</p>\n</blockquote>\n<ul>\n<li>在虚拟环境下安装指定版本的Taro</li>\n</ul>\n<blockquote>\n<p>(taro3.0.7)  $ npm install -g @tarojs/cli@3.0.7</p>\n</blockquote>\n<p><strong><em>注意，一定要用npm做全局安装，yarn不受虚拟环境影响会安装到系统全局\\</em></strong></p>\n<p>安装完成后可查看版本</p>\n<blockquote>\n<p>(taro3.0.7) $ taro -V</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>👽 Taro v3.0.7</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<blockquote>\n<p>3.0.7</p>\n</blockquote>\n<p>查看taro的安装位置</p>\n<blockquote>\n<p>which taro</p>\n</blockquote>\n<blockquote>\n<p>/Users/konghui/Project/Wosai/dbb-merchant-mini/taro3.0.7/bin/taro</p>\n</blockquote>\n<ul>\n<li>正常启动项目就可以了</li>\n</ul>\n<blockquote>\n<p>(taro3.0.7) $  yarn dev:weapp</p>\n</blockquote>\n<p>所有项目本地的操作使用yarn与npm都可以。</p>\n<ul>\n<li>退出虚拟环境</li>\n</ul>\n<p>在不需要虚拟环境时可直接执行如下命令</p>\n<blockquote>\n<p>(taro3.0.7) $ deactivate_node</p>\n</blockquote>\n<h3 id=\"附图\"><a href=\"#附图\" class=\"headerlink\" title=\"附图\"></a>附图</h3><p><strong>下面是两个不同的项目，分别使用taro1.3.25和3.0.7版本</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tarojs1.3.25版本示意图</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/25030467-5071811a114d40b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/358/format/webp\" alt=\"img\"></p>\n<p>1.3.25图片</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/25030467-4bf8887524abf704.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/805/format/webp\" alt=\"img\"></p>\n<p>1.3.25图片</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tarojs3.0.7版本示意图</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/25030467-b0ce11984d4b294c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/358/format/webp\" alt=\"img\"></p>\n<p>3.0.7图片</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https:////upload-images.jianshu.io/upload_images/25030467-20ca9bac115cc873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/865/format/webp\" alt=\"img\"></p>\n<p>3.0.7图片</p>\n</blockquote>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>项目目录下的的虚拟环境目录只在本地保留即刻，<code>切勿</code>上传到gitlab，把你使用的虚拟环境的目录写到<code>.gitignore</code>里面。</p>\n<p>如我是用taro+版本号的虚拟环境目录，可以在gitignore内加入下面一行代码</p>\n<p>作者：辉_31d6<br>链接：<a href=\"https://www.jianshu.com/p/7896ec42d904\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7896ec42d904</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","categories":["node"],"tags":["node"]},{"title":"学习 canvas","url":"/posts/e8300743/","content":"<blockquote>\n<p>万事起头难啊！！！当自己真正放下心去学习的时候，才知道原来一切都是肝就完事了</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：微信小程序的canvas\"><a href=\"#一：微信小程序的canvas\" class=\"headerlink\" title=\"一：微信小程序的canvas\"></a>一：微信小程序的canvas</h2><h3 id=\"1-1-使用微信小程序自带的-组件\"><a href=\"#1-1-使用微信小程序自带的-组件\" class=\"headerlink\" title=\"1.1 使用微信小程序自带的 组件\"></a>1.1 使用微信小程序自带的 组件</h3><p>小程序内通过静态模板和样式绘制 canvas ，导出图片，可用于生成分享图等场景。</p>\n<h5 id=\"1-1-1-npm-安装\"><a href=\"#1-1-1-npm-安装\" class=\"headerlink\" title=\"1.1.1.  npm 安装\"></a>1.1.1.  npm 安装</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save wxml-to-canvas</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"1-1-2-json-组件声明\"><a href=\"#1-1-2-json-组件声明\" class=\"headerlink\" title=\"1.1.2  json 组件声明\"></a>1.1.2  json 组件声明</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;usingComponents&quot;: &#123;</span><br><span class=\"line\">    &quot;wxml-to-canvas&quot;: &quot;wxml-to-canvas&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20201205001119.png\" alt=\"\"></p>\n<h4 id=\"1-1-3-index-wxml-引入组件\"><a href=\"#1-1-3-index-wxml-引入组件\" class=\"headerlink\" title=\"1.1.3  index.wxml 引入组件\"></a>1.1.3  index.wxml 引入组件</h4><p><img src=\"http://photo.jomeswang.top/20201205001232.png\" alt=\"\"></p>\n<h4 id=\"1-1-4-index-js获取实例\"><a href=\"#1-1-4-index-js获取实例\" class=\"headerlink\" title=\"1.1.4 index.js获取实例\"></a>1.1.4 index.js获取实例</h4><p><img src=\"http://photo.jomeswang.top/20201205001638.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201205001836.png\" alt=\"\"></p>\n<h4 id=\"1-1-5-编写-demo-js-既-要-渲染成-canvas-的-wxml-和-styles\"><a href=\"#1-1-5-编写-demo-js-既-要-渲染成-canvas-的-wxml-和-styles\" class=\"headerlink\" title=\"1.1.5  编写 demo,js 既 要 渲染成 canvas 的 wxml 和 styles\"></a>1.1.5  编写 demo,js 既 要 渲染成 canvas 的 wxml 和 styles</h4><p><img src=\"http://photo.jomeswang.top/20201205002105.png\" alt=\"\"></p>\n<h3 id=\"1-2-使用-wxml2canvas-库\"><a href=\"#1-2-使用-wxml2canvas-库\" class=\"headerlink\" title=\"1.2 使用 wxml2canvas 库\"></a>1.2 使用 wxml2canvas 库</h3><p>下载安装库</p>\n<p><img src=\"http://photo.jomeswang.top/20201205003442.png\" alt=\"\"></p>\n<h4 id=\"1-2-1-使用wxml-格式\"><a href=\"#1-2-1-使用wxml-格式\" class=\"headerlink\" title=\"1.2.1 使用wxml 格式\"></a>1.2.1 使用wxml 格式</h4><p><img src=\"http://photo.jomeswang.top/20201205004006.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201205004023.png\" alt=\"\"></p>\n<h4 id=\"1-2-2-使用json-格式绘画\"><a href=\"#1-2-2-使用json-格式绘画\" class=\"headerlink\" title=\"1.2.2  使用json 格式绘画\"></a>1.2.2  使用json 格式绘画</h4><p><img src=\"http://photo.jomeswang.top/20201205004052.png\" alt=\"\"></p>\n<h2 id=\"二：-网页的canvas\"><a href=\"#二：-网页的canvas\" class=\"headerlink\" title=\"二： 网页的canvas\"></a>二： 网页的canvas</h2><h3 id=\"2-1-使用原生的canvas\"><a href=\"#2-1-使用原生的canvas\" class=\"headerlink\" title=\"2.1 使用原生的canvas\"></a>2.1 使用原生的canvas</h3><h4 id=\"2-1-1-使用canvas-标签\"><a href=\"#2-1-1-使用canvas-标签\" class=\"headerlink\" title=\"2.1.1 使用canvas 标签\"></a>2.1.1 使用canvas 标签</h4><p><img src=\"http://photo.jomeswang.top/20201205181250.png\" alt=\"\"></p>\n<h4 id=\"2-2-2-初始化-canvas\"><a href=\"#2-2-2-初始化-canvas\" class=\"headerlink\" title=\"2.2.2 初始化 canvas\"></a>2.2.2 初始化 canvas</h4><p><img src=\"http://photo.jomeswang.top/20201205181312.png\" alt=\"\"></p>\n<h4 id=\"2-2-3-画线\"><a href=\"#2-2-3-画线\" class=\"headerlink\" title=\"2.2.3 画线\"></a>2.2.3 画线</h4><h4 id=\"2-2-4-画圆\"><a href=\"#2-2-4-画圆\" class=\"headerlink\" title=\"2.2.4 画圆\"></a>2.2.4 画圆</h4><h4 id=\"2-2-5-画矩形\"><a href=\"#2-2-5-画矩形\" class=\"headerlink\" title=\"2.2.5 画矩形\"></a>2.2.5 画矩形</h4><h4 id=\"2-2-6-画图\"><a href=\"#2-2-6-画图\" class=\"headerlink\" title=\"2.2.6 画图\"></a>2.2.6 画图</h4>","categories":["canvas"],"tags":["canvas"]},{"title":"软件培训 -- 入门VUE","url":"/posts/bb0e9d2f/","content":"<blockquote>\n<h2 id=\"软件培训-–-VUE\"><a href=\"#软件培训-–-VUE\" class=\"headerlink\" title=\"软件培训 – VUE\"></a>软件培训 – VUE</h2></blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：Vue-的安装与使用\"><a href=\"#一：Vue-的安装与使用\" class=\"headerlink\" title=\"一：Vue 的安装与使用\"></a>一：Vue 的安装与使用</h2><h3 id=\"1-1-script-引入\"><a href=\"#1-1-script-引入\" class=\"headerlink\" title=\"1.1  script 引入\"></a>1.1  script 引入</h3><p>下载 vue.js 文件然后 script 引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用 CDN 来引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-使用-vue-cli-来开发\"><a href=\"#1-2-使用-vue-cli-来开发\" class=\"headerlink\" title=\"1.2 使用   vue-cli 来开发\"></a>1.2 使用   vue-cli 来开发</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn global add vue</span><br><span class=\"line\">vue create test</span><br><span class=\"line\">cd test</span><br><span class=\"line\">yarn serve</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：-指令的学习\"><a href=\"#二：-指令的学习\" class=\"headerlink\" title=\"二： 指令的学习\"></a>二： 指令的学习</h2><h3 id=\"2-1-v-text-和-插值表达式的学习\"><a href=\"#2-1-v-text-和-插值表达式的学习\" class=\"headerlink\" title=\"2.1     v-text  和 插值表达式的学习\"></a>2.1     v-text  和 插值表达式的学习</h3><h4 id=\"2-1-1-插值表达式\"><a href=\"#2-1-1-插值表达式\" class=\"headerlink\" title=\"2.1.1      插值表达式\"></a>2.1.1      插值表达式</h4><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;first&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;second&quot; v-text&#x3D;&quot;message&quot; &gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    message: &quot;Hello Vue!!&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Mustache 标签将会被替代为对应数据对象上 <code>msg</code> property 的值。无论何时，绑定的数据对象上 <code>msg</code> property 发生了改变，插值处的内容都会更新。</p>\n<p>同时可以 在插值表达式中 使用 JavaScript 表达式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + <span class=\"number\">1</span> &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? <span class=\"string\">'YES'</span> : <span class=\"string\">'NO'</span> &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>) &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-2-2-v-text-指令\"><a href=\"#2-2-2-v-text-指令\" class=\"headerlink\" title=\"2.2.2     v-text 指令\"></a>2.2.2     v-text 指令</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;span v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;!-- 和下面的一样 --&gt;</span><br><span class=\"line\">&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-v-bind-的使用\"><a href=\"#2-2-v-bind-的使用\" class=\"headerlink\" title=\"2.2     v-bind 的使用\"></a>2.2     v-bind 的使用</h3><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href=\"https://cn.vuejs.org/v2/api/#v-bind\" target=\"_blank\" rel=\"noopener\"><code>v-bind</code> 指令</a>：</p>\n<p>动态地绑定一个或多个 attribute，或一个组件 prop 到表达式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;blog.szuea.com&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;10&#x2F;%E8%BD%AF%E4%BB%B6%E8%B7%AF%E7%BA%BF-1024x243.png&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">      这里是为img的stc 动态绑定一个 图片URL 可以动态更新</span><br><span class=\"line\">    &lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;!-- 绑定一个 attribute --&gt;</span><br><span class=\"line\">    &lt;img v-bind:src&#x3D;&quot;imageSrc&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 缩写 --&gt;</span><br><span class=\"line\">    &lt;img :src&#x3D;&quot;imageSrc&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      imageSrc: &quot;https:&#x2F;&#x2F;blog.szuea.com&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;10&#x2F;%E8%BD%AF%E4%BB%B6%E8%B7%AF%E7%BA%BF-1024x243.png&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-v-modal-的使用\"><a href=\"#2-3-v-modal-的使用\" class=\"headerlink\" title=\"2.3     v-modal 的使用\"></a>2.3     v-modal 的使用</h3><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"edit me\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">   \tmessage: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-v-if-的学习-（条件渲染）\"><a href=\"#2-4-v-if-的学习-（条件渲染）\" class=\"headerlink\" title=\"2.4     v-if 的学习 （条件渲染）\"></a>2.4     v-if 的学习 （条件渲染）</h3><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- 也可以用 v-else 添加一个“else 块”： --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span> 这里是v-else-if <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>这里是v-else <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      seen: <span class=\"literal\">true</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-5-v-show-的使用\"><a href=\"#2-5-v-show-的使用\" class=\"headerlink\" title=\"2.5     v-show 的使用\"></a>2.5     v-show 的使用</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Hello!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">// 不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS property display。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-6-v-for-的使用（列表渲染）\"><a href=\"#2-6-v-for-的使用（列表渲染）\" class=\"headerlink\" title=\"2.6     v-for 的使用（列表渲染）\"></a>2.6     v-for 的使用（列表渲染）</h3><p>我们可以用 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。</p>\n<p><code>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key attribute：</code> （Very Important）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      这里是v-for 啦</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.name\"</span> &gt;</span></span><br><span class=\"line\">          &#123;&#123; item.name &#125;&#125; --- &#123;&#123;item.number&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      这里是v-for 的 index 啦</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list2\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in list\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"item.name\"</span> &gt;</span></span><br><span class=\"line\">         &#123;&#123;index&#125;&#125; ---  &#123;&#123; item.name &#125;&#125; --- &#123;&#123;item.number&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    el: <span class=\"string\">'#app'</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      list: [</span><br><span class=\"line\"><span class=\"actionscript\">        &#123;name: <span class=\"string\">\"SZUEA1\"</span>, numebr: <span class=\"string\">'dianxing1'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        &#123;name: <span class=\"string\">\"SZUEA2\"</span>, numebr: <span class=\"string\">'dianxing2'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        &#123;name: <span class=\"string\">\"SZUEA3\"</span>, numebr: <span class=\"string\">'dianxing3'</span>&#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">        &#123;name: <span class=\"string\">\"SZUEA4\"</span>, numebr: <span class=\"string\">'dianxing4'</span>&#125;,</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-7-v-on的使用-事件处理\"><a href=\"#2-7-v-on的使用-事件处理\" class=\"headerlink\" title=\"2.7    v-on的使用 (事件处理)\"></a>2.7    v-on的使用 (事件处理)</h3><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>\n<p>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"counter += 1\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"addOneCounter\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">clear</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入点击增加的值\"</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">\"counterValue\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"addCounter(counterValue)\"</span>&gt;</span>Add Input Value<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  v-on 的缩写方式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"addCounter(counterValue)\"</span>&gt;</span>Add 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    el: <span class=\"string\">\"#app\"</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      counter: 0,</span><br><span class=\"line\"><span class=\"actionscript\">      counterValue: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      addCounter(value)&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.counter += value</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      addOneCounter()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.counter += <span class=\"number\">1</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> JS原生事件参考： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/Events</a></p>\n<h3 id=\"2-8-动态绑定-Class\"><a href=\"#2-8-动态绑定-Class\" class=\"headerlink\" title=\"2.8    动态绑定 Class\"></a>2.8    动态绑定 Class</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">//  我们可以传给 v-bind:class 一个对象，以动态地切换 class：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">和如下 data：</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果渲染为：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"static active\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三：-计算属性与-侦听器\"><a href=\"#三：-计算属性与-侦听器\" class=\"headerlink\" title=\"三： 计算属性与 侦听器\"></a>三： 计算属性与 侦听器</h2><p>如果有一个需求是 根据用户输入的值来实时更新 界面上的展示值，这时就引入 计算属性和 侦听器。</p>\n<p><code>计算属性是基于它们的响应式依赖进行缓存的</code></p>\n<p><code>侦听属性。侦听某一个数据，假如这一个数据改变那么就会执行相应的操作</code></p>\n<h3 id=\"3-1-计算属性\"><a href=\"#3-1-计算属性\" class=\"headerlink\" title=\"3.1    计算属性\"></a>3.1    计算属性</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"example\"</span>&gt;</span><br><span class=\"line\">  &lt;p&gt;Original message: <span class=\"string\">\"&#123;&#123; message &#125;&#125;\"</span>&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;p&gt;Computed reversed message: \"&#123;&#123; reversedMessage &#125;&#125;\"&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">var vm = new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  el: '#example',</span></span><br><span class=\"line\"><span class=\"regexp\">  data: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    message: 'Hello'</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">  computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 计算属性的 getter</span></span><br><span class=\"line\"><span class=\"regexp\">    reversedMessage: function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ `this` 指向 vm 实例</span></span><br><span class=\"line\"><span class=\"regexp\">      return this.message.split('').reverse().join('')</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"> /</span><span class=\"regexp\">/ 计算属性默认只有读取操作， 需要人工设置 写入操作</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br><span class=\"line\"><span class=\"regexp\">computed: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  fullName: &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 读取</span></span><br><span class=\"line\"><span class=\"regexp\">    get: function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      return this.firstName + ' ' + this.lastName</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 设置</span></span><br><span class=\"line\"><span class=\"regexp\">    set: function (newValue) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      var names = newValue.split(' ')</span></span><br><span class=\"line\"><span class=\"regexp\">      this.firstName = names[0]</span></span><br><span class=\"line\"><span class=\"regexp\">      this.lastName = names[names.length - 1]</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ ...</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-侦听属性（一般用在侦听数据改变然后查询数据）\"><a href=\"#3-2-侦听属性（一般用在侦听数据改变然后查询数据）\" class=\"headerlink\" title=\"3.2    侦听属性（一般用在侦听数据改变然后查询数据）\"></a>3.2    侦听属性（一般用在侦听数据改变然后查询数据）</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Original message: \"&#123;&#123; message &#125;&#125;\"<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;p&gt;Computed reversed message: \"&#123;&#123; reversedMessage &#125;&#125;\"&lt;/p&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    el: <span class=\"string\">\"#app\"</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      message: <span class=\"string\">\"\"</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//  计算属性</span></span></span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">      reversedMessage()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">\"\"</span>).reverse().join(<span class=\"string\">\"\"</span>)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//侦听器</span></span></span><br><span class=\"line\">    watch:&#123;</span><br><span class=\"line\">      message(newValue, oldValue)&#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(oldValue, newValue)</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 这里是使用的 是 ES6 的 // 模版字符串</span></span></span><br><span class=\"line\"><span class=\"javascript\">        alert(<span class=\"string\">`旧值是<span class=\"subst\">$&#123;oldValue&#125;</span>, 新值是<span class=\"subst\">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"四：-过滤器（v3版本弃用）\"><a href=\"#四：-过滤器（v3版本弃用）\" class=\"headerlink\" title=\"四： 过滤器（v3版本弃用）\"></a>四： 过滤器（v3版本弃用）</h2><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong> (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在 `v-bind` 中 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以在一个组件的选项中定义本地的过滤器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">filters: &#123;</span><br><span class=\"line\"><span class=\"comment\">// 第一个字母 大写  其他变小写</span></span><br><span class=\"line\">  capitalize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    value = value.toString()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一个功能可以用 函数 替换掉</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 在双花括号中 --&gt;</span><br><span class=\"line\">&#123;&#123;  capitalize(message) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  capitalize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    value = value.toString()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"五：-生命周期\"><a href=\"#五：-生命周期\" class=\"headerlink\" title=\"五： 生命周期\"></a>五： 生命周期</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/13119812-5890a846b6efa045.png\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script src=\"https:/</span><span class=\"regexp\">/cdn.jsdelivr.net/</span>npm/vue@<span class=\"number\">2.5</span><span class=\"number\">.16</span>/dist/vue.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;div id=\"</span>app<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input  v-model=\"</span>message<span class=\"string\">\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button @click=\"</span>clickfun<span class=\"string\">\"&gt;按钮&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    var myVue = new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"string\">        el: '#app',</span></span><br><span class=\"line\"><span class=\"string\">        data: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            return &#123;</span></span><br><span class=\"line\"><span class=\"string\">                message: 'XXXX'</span></span><br><span class=\"line\"><span class=\"string\">            &#125;;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        beforeCreate: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('beforeCreate 创建前状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        created: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('created 创建完毕状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        beforeMount: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('beforeMount 挂载前状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(this.$el);</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        mounted: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('mounted 挂载结束状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(this.$el);</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        beforeUpdate: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('beforeUpdate 更新前状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(this.$el);</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">            console.log('beforeUpdate == ' + document.getElementsByTagName('p')[0].innerHTML);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        updated: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('updated 更新完成状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(this.$el);</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">            console.log('updated == ' + document.getElementsByTagName('p')[0].innerHTML);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        beforeDestroy: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('beforeDestroy 销毁前状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(this.$el);</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        destroyed: function () &#123;</span></span><br><span class=\"line\"><span class=\"string\">            console.group('destroyed 销毁完成状态===============》');</span></span><br><span class=\"line\"><span class=\"string\">            var state = &#123;</span></span><br><span class=\"line\"><span class=\"string\">                'el': this.$el,</span></span><br><span class=\"line\"><span class=\"string\">                'data': this.$data,</span></span><br><span class=\"line\"><span class=\"string\">                'message': this.message</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">            console.log(this.$el);</span></span><br><span class=\"line\"><span class=\"string\">            console.log(state);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        methods: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            clickfun() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                myVue.$destroy()</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">    &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上述测试我们可以知道，</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>是否获取dom节点</th>\n<th>是否可以获取data</th>\n<th>是否获取methods</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beforeCreate</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>created</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>以我的个人理解，<strong>vue生命周期</strong>实际上和<strong>浏览器渲染过程</strong>是挂钩的，</p>\n<p>在beforecreate阶段，对浏览器来说，整个渲染流程尚未开始或者说准备开始，对vue来说，实例尚未被初始化，data observer和 event/watcher也还未被调用，在此阶段，对data、methods或文档节点的调用现在无法得到正确的数据。</p>\n<p>在created阶段，对浏览器来说，渲染整个HTML文档时,dom节点、css规则树与js文件被解析后，但是没有进入被浏览器render过程，上述资源是尚未挂载在页面上，也就是在vue生命周期中对应的created<br>阶段，实例已经被初始化，但是还没有挂载至<strong>$el</strong>上，所以我们无法获取到对应的节点，但是此时我们是可以获取到vue中data与methods中的数据的</p>\n<p>在beforeMount阶段，实际上与created阶段类似，节点尚未挂载，但是依旧可以获取到data与methods中的数据。</p>\n<p>在mounted阶段，对浏览器来说，已经完成了dom与css规则树的render，并完成对render tree进行了布局，而浏览器收到这一指令，调用渲染器的paint（）在屏幕上显示，而对于vue来说，在mounted阶段，vue的<strong>template成功挂载在$el中</strong>，此时一个完整的页面已经能够显示在浏览器中，所以在这个阶段，即可以调用节点了（关于这一点，在笔者测试中，在mounted方法中打断点然后run，依旧能够在浏览器中看到整体的页面）。</p>\n<h2 id=\"六：-相关材料\"><a href=\"#六：-相关材料\" class=\"headerlink\" title=\"六： 相关材料\"></a>六： 相关材料</h2><h3 id=\"6-1-Vue2-的开发文档\"><a href=\"#6-1-Vue2-的开发文档\" class=\"headerlink\" title=\"6.1    Vue2 的开发文档\"></a>6.1    Vue2 的开发文档</h3><p><a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/</a></p>\n<h3 id=\"6-2-Vue的原理剖析\"><a href=\"#6-2-Vue的原理剖析\" class=\"headerlink\" title=\"6.2 Vue的原理剖析\"></a>6.2 Vue的原理剖析</h3><p><a href=\"https://wenku.baidu.com/view/ef0160ea7cd184254b3535ff.html?fr=search-1\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/ef0160ea7cd184254b3535ff.html?fr=search-1</a></p>\n<h2 id=\"七：-作业\"><a href=\"#七：-作业\" class=\"headerlink\" title=\"七： 作业\"></a>七： 作业</h2><h3 id=\"7-1-写一个计算器\"><a href=\"#7-1-写一个计算器\" class=\"headerlink\" title=\"7.1    写一个计算器\"></a>7.1    写一个计算器</h3><p><img src=\"http://photo.jomeswang.top/20201120153355.png\" alt=\"\"></p>\n<ol>\n<li>最低要求  写出如图所示 计算器</li>\n<li>拔高一：记录 计算信息 并可以回滚</li>\n<li>拔高二： 有括号的运算 </li>\n<li>拔高三： 有三角函数的运算</li>\n<li>参考Windows 计算器</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20201120153403.png\" alt=\"\"></p>\n","categories":["vue"],"tags":["vue"]},{"title":"Vue 的数据绑定","url":"/posts/95a0012e/","content":"<blockquote>\n<p>vue的数据双向绑定是通过数据劫持和发布-订阅者功能来实现的</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>实现步骤：</p>\n<p>1.实现一个监听者Oberver来劫持并监听所有的属性，一旦有属性发生变化就通知订阅者</p>\n<p>2.实现一个订阅者watcher来接受属性变化的通知并执行相应的方法，从而更新视图</p>\n<p>3.实现一个解析器compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相对应的订阅者</p>\n<p>2、vue是通过Object.defineProperty()来实现数据劫持的。</p>\n<p>实现mvvm主要包含两个方面，数据变化更新视图，视图变化更新数据。 </p>\n<p>关键点在于 data 如何更新view</p>\n<p>因为 view 更新 data 其实可以通过事件监听即可，比如 input 标签监听 ‘input’ 事件就可以实现了。</p>\n<p>而数据更新视图的重点是如何知道数据变了，只要知道数据变了，那么接下去的事都好处理。如何知道数据变了，就是通过Object.defineProperty( )对属性设置一个set函数，当数据改变了就会来触发这个函数，所以我们只要将一些需要更新的方法放在这里面就可以实现data更新view了。</p>\n<p>当 data 有变化的时候，通过ES5 中的 Object.defineProperty() 方法中的 set 方法劫持属性值的设置操作和 get 方法劫持属性值的获取操作，实现数据变化视图 view 跟着变化；</p>\n<p>而视图 view 变化数据跟着变化则是通过底层的 input 事件来进行 data 的响应更改</p>\n<p>Object.defineProperty(参数1，参数2，参数3)   返回值为该对象obj</p>\n<p>参数1为该对象（obj），参数2为要定义或修改的对象的属性名，参数3为属性描述符，属性描述符是一个对象，主要有两种形式：数据描述符和存取描述符。这两种对象只能选择一种使用，不能混合使用。而get和set属于存取描述符对象的属性。</p>\n<p>这个方法会直接在一个对象上定义一个新属性或者修改对象上的现有属性，并返回该对象</p>\n<p>下面代码使用vue中的方法实现的数据劫持：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> placeholder=<span class=\"string\">\"请输入内容\"</span> /&gt;</span><br><span class=\"line\">  &lt;h1&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  var inputEle = document.querySelector('input')</span></span><br><span class=\"line\"><span class=\"regexp\">  var h1Ele = document.querySelector('h1')</span></span><br><span class=\"line\"><span class=\"regexp\"> </span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 设置默认值</span></span><br><span class=\"line\"><span class=\"regexp\">  var obj = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    msg: '默认值'</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">  inputEle.value = obj.msg</span></span><br><span class=\"line\"><span class=\"regexp\">  h1Ele.innerHTML = obj.msg</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/  实现视图变化数据跟着变化</span></span><br><span class=\"line\"><span class=\"regexp\">  inputEle.oninput = function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    obj.msg = inputEle.value</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ 实现数据变化视图跟着变化</span></span><br><span class=\"line\"><span class=\"regexp\">  let temp = obj.msg</span></span><br><span class=\"line\"><span class=\"regexp\">  Object.defineProperty(obj, 'msg', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    get() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ get方法会劫持msg这个属性的获取操作</span></span><br><span class=\"line\"><span class=\"regexp\">      return temp</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    set(value) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ set方法会劫持msg这个属性的设置操作</span></span><br><span class=\"line\"><span class=\"regexp\">      temp = value</span></span><br><span class=\"line\"><span class=\"regexp\">      h1Ele.innerHTML = temp</span></span><br><span class=\"line\"><span class=\"regexp\">      inputEle.value = temp</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">    enumerable: true,</span></span><br><span class=\"line\"><span class=\"regexp\">    configurable: true</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>vue (defineProperty)实现拦截<br>进行数据劫持<br>++Object.defineProperty++ 拦截<br>1、首先会在一个函数内通过 typeof 去判断传进来的是不是一个对象，如果是的话先通过object.keys转一下然后去遍历，拿到 key</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observer</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断如果没有传值，或者传的值不是一个对象，就直接return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!data || <span class=\"keyword\">typeof</span> data !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.keys(data).forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            observerProperty (data, item, data[item])</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observerProperty</span> (<span class=\"params\">target, key, value</span>) </span>&#123;</span><br><span class=\"line\">   observer (value)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> (val) &#123;</span><br><span class=\"line\">            value = val</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这样就会对obj进行一个劫持，一旦改变obj内的属性，就返回相对应的数据，比如对obj的name进行了改变，observer()函数可能会返回一句obj的name已经改变为...</span></span><br><span class=\"line\"><span class=\"comment\">// observer (obj)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    id:<span class=\"number\">1</span>,</span><br><span class=\"line\">    name:zhngsan,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu 挂载硬盘","url":"/posts/b4f7e34f/","content":"<blockquote>\n<p>每天一篇学习记录</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"一：-第一步-使用-df-h-查看磁盘空间占用\"><a href=\"#一：-第一步-使用-df-h-查看磁盘空间占用\" class=\"headerlink\" title=\"一： 第一步  使用   df -h        # 查看磁盘空间占用\"></a>一： 第一步  使用   <code>df -h</code>        # 查看磁盘空间占用</h3><p><img src=\"http://photo.jomeswang.top/20201026224925.png\" alt=\"\"></p>\n<h3 id=\"二：-fdisk-l-查看磁盘设备信息\"><a href=\"#二：-fdisk-l-查看磁盘设备信息\" class=\"headerlink\" title=\"二：  fdisk -l 　　# 查看磁盘设备信息\"></a>二：  fdisk -l 　　# 查看磁盘设备信息</h3><p><img src=\"http://photo.jomeswang.top/20201026224933.png\" alt=\"\"></p>\n<h3 id=\"三：-整理磁盘，并且，新增磁盘分区\"><a href=\"#三：-整理磁盘，并且，新增磁盘分区\" class=\"headerlink\" title=\"三： 整理磁盘，并且，新增磁盘分区\"></a>三： 整理磁盘，并且，新增磁盘分区</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fdisk　 &#x2F;dev&#x2F;sda　＃进行磁盘操作</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20201026225016.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201026225026.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201026225050.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201026225104.png\" alt=\"\"></p>\n<h3 id=\"四：-挂载磁盘\"><a href=\"#四：-挂载磁盘\" class=\"headerlink\" title=\"四： 挂载磁盘\"></a>四： 挂载磁盘</h3><p>使用命令 sudo mkfs.ext4  /dev/sda2    # 设置分区的文件系统类型</p>\n<p>咱们需要做的就是，将这个磁盘 挂载到某个你想要的位置即可。</p>\n<p>例如：在 home 下新建sda2作为这块磁盘挂载点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;home&#x2F;sda2</span><br><span class=\"line\">sudo mount &#x2F;dev&#x2F;sda2 &#x2F;home&#x2F;sda2</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"五：-设置开机磁盘自动挂载\"><a href=\"#五：-设置开机磁盘自动挂载\" class=\"headerlink\" title=\"五： 设置开机磁盘自动挂载\"></a>五： 设置开机磁盘自动挂载</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi &#x2F;etc&#x2F;fstab</span><br><span class=\"line\">添加行  &#x2F;dev&#x2F;sda2     &#x2F;home&#x2F;work   ext4   defaults 0 1</span><br></pre></td></tr></table></figure>\n\n\n","categories":["Linux"],"tags":["Linux","Ubuntu"]},{"title":"1024 这是我的一个 1024 节啊","url":"/posts/7f137610/","content":"<blockquote>\n<p>虽身处黑暗，但仍然向往光明。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20201025103832.png\" alt=\"\"></p>\n<p>多么惨烈的回忆啊！！！！！</p>\n<p>希望有天可以做我想做的事情，不为烦恼的事情而担忧，希望一切都像一开始的那般。</p>\n<p>做我想做，想我所想，希望一切都想一开始想象的那般，</p>\n<p>一切都如我所想。</p>\n<p>希望你能在疲惫的时候也能够这样想啊！！！！！！</p>\n<p>加油啊！！！宝贝！！！！！</p>\n<p>同时这一晚呢！！！！！</p>\n<p>我也想清楚了，当你可以去决定你能做什么的时候，你才能够任性的啊！！！！！</p>\n<p>所以呢！！！！！</p>\n<p>我呢！！！</p>\n<p>加油啊！！！少年！！！！！</p>\n<p>希望一天你可以变成那个想变成的自己啊！！</p>\n<p>不过说真的，做完那场小雨真的来的猝不及防啊！！！！</p>\n<p><img src=\"http://photo.jomeswang.top/20201025104835.jpg\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201025104850.jpg\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201025104909.jpg\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201025105116.jpg\" alt=\"\"></p>\n<p>如果可以的话，要一直当好兄弟的哦！！！！！！！！！</p>\n","categories":["随笔"],"tags":["随笔","1024"]},{"title":"小程序云开发","url":"/posts/cfef4851/","content":"<blockquote>\n<p>小程序我又来入坑啦！！！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：上手\"><a href=\"#一：上手\" class=\"headerlink\" title=\"一：上手\"></a>一：上手</h2><p><img src=\"http://photo.jomeswang.top/20201023194859.png\" alt=\"\"></p>\n<h2 id=\"二：-云数据库操作\"><a href=\"#二：-云数据库操作\" class=\"headerlink\" title=\"二： 云数据库操作\"></a>二： 云数据库操作</h2><h3 id=\"2-1-初始化数据库\"><a href=\"#2-1-初始化数据库\" class=\"headerlink\" title=\"2.1  初始化数据库\"></a>2.1  初始化数据库</h3><p>在开始使用数据库 API 进行增删改查操作之前，需要先获取数据库的引用。以下调用获取默认环境的数据库的引用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> db = wx.cloud.database()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20201023195025.png\" alt=\"\"></p>\n<h3 id=\"2-2-数据库的插入\"><a href=\"#2-2-数据库的插入\" class=\"headerlink\" title=\"2.2   数据库的插入\"></a>2.2   数据库的插入</h3><p><img src=\"http://photo.jomeswang.top/20201023195209.png\" alt=\"\"></p>\n<h3 id=\"2-3-数据库的查询\"><a href=\"#2-3-数据库的查询\" class=\"headerlink\" title=\"2.3  数据库的查询\"></a>2.3  数据库的查询</h3><p><img src=\"http://photo.jomeswang.top/20201023195324.png\" alt=\"\"></p>\n<h3 id=\"2-4-数据库的查询指令\"><a href=\"#2-4-数据库的查询指令\" class=\"headerlink\" title=\"2.4    数据库的查询指令\"></a>2.4    数据库的查询指令</h3><p><img src=\"http://photo.jomeswang.top/20201023195348.png\" alt=\"\"></p>\n<h3 id=\"2-5-数据库的更新，删除操作\"><a href=\"#2-5-数据库的更新，删除操作\" class=\"headerlink\" title=\"2.5 数据库的更新，删除操作\"></a>2.5 数据库的更新，删除操作</h3><p><img src=\"http://photo.jomeswang.top/20201023195455.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201023195535.png\" alt=\"\"></p>\n","categories":["小程序"],"tags":["云开发"]},{"title":"async 和 promise 异步比较","url":"/posts/9c0b1587/","content":"<blockquote>\n<p>新技术每天都在迭代，只有跟上大潮流才能冲浪而上</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>通过之前的几篇文章学习Promise，我们了解到promise是ES6为解决异步回调而生，避免出现这种回调地狱，那么为何又需要Async/Await呢？你是不是和我一样对Async/Await感兴趣以及想知道如何使用，下面一起来看看这篇文章：Async/Await替代Promise的6个理由。</p>\n<h3 id=\"什么是Async-Await\"><a href=\"#什么是Async-Await\" class=\"headerlink\" title=\"什么是Async/Await?\"></a>什么是Async/Await?</h3><ul>\n<li>async/await是写异步代码的新方式，以前的方法有<strong>回调函数</strong>和<strong>Promise</strong>。</li>\n<li>async/await是基于Promise实现的，它不能用于普通的回调函数。</li>\n<li>async/await与Promise一样，是非阻塞的。</li>\n<li>async/await使得异步代码看起来像同步代码，这正是它的魔力所在。</li>\n</ul>\n<h3 id=\"Async-Await语法\"><a href=\"#Async-Await语法\" class=\"headerlink\" title=\"Async/Await语法\"></a>Async/Await语法</h3><p>示例中，getJSON函数返回一个promise，这个promise成功resolve时会返回一个json对象。我们只是调用这个函数，打印返回的JSON对象，然后返回”done”。 使用Promise是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; () &#x3D;&gt;</span><br><span class=\"line\">  getJSON()</span><br><span class=\"line\">    .then(data &#x3D;&gt; &#123;</span><br><span class=\"line\">      console.log(data)</span><br><span class=\"line\">      return &quot;done&quot;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">makeRequest()</span><br></pre></td></tr></table></figure>\n\n<p>使用Async/Await是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; async () &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(await getJSON())</span><br><span class=\"line\">  return &quot;done&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">makeRequest()</span><br></pre></td></tr></table></figure>\n\n<p>它们有一些细微不同:</p>\n<ul>\n<li>函数前面多了一个aync关键字。await关键字只能用在aync定义的函数内。async函数会隐式地返回一个promise，该promise的reosolve值就是函数return的值。(示例中reosolve值就是字符串”done”)</li>\n<li>第1点暗示我们不能在最外层代码中使用await，因为不在async函数内。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 不能在最外层代码中使用await</span><br><span class=\"line\">await makeRequest()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 这是会出事情的 </span><br><span class=\"line\">makeRequest().then((result) &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; 代码</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>await getJSON()表示console.log会等到getJSON的promise成功reosolve之后再执行。</p>\n<h3 id=\"为什么Async-Await更好？\"><a href=\"#为什么Async-Await更好？\" class=\"headerlink\" title=\"为什么Async/Await更好？\"></a>为什么Async/Await更好？</h3><h4 id=\"1-简洁\"><a href=\"#1-简洁\" class=\"headerlink\" title=\"1. 简洁\"></a>1. 简洁</h4><p>由示例可知，使用Async/Await明显节约了不少代码。我们不需要写.then，不需要写匿名函数处理Promise的resolve值，也不需要定义多余的data变量，还避免了嵌套代码。这些小的优点会迅速累计起来，这在之后的代码示例中会更加明显。</p>\n<h4 id=\"2-错误处理\"><a href=\"#2-错误处理\" class=\"headerlink\" title=\"2. 错误处理\"></a>2. 错误处理</h4><p>Async/Await让try/catch可以同时处理同步和异步错误。在下面的promise示例中，try/catch不能处理JSON.parse的错误，因为它在Promise中。我们需要使用.catch，这样错误处理代码非常冗余。并且，在我们的实际生产代码会更加复杂。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    getJSON()</span><br><span class=\"line\">      .then(result &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; JSON.parse可能会出错</span><br><span class=\"line\">        const data &#x3D; JSON.parse(result)</span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      &#x2F;&#x2F; 取消注释，处理异步代码的错误</span><br><span class=\"line\">      &#x2F;&#x2F; .catch((err) &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F;   console.log(err)</span><br><span class=\"line\">      &#x2F;&#x2F; &#125;)</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用aync/await的话，catch能处理JSON.parse错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; async () &#x3D;&gt; &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; this parse may fail</span><br><span class=\"line\">    const data &#x3D; JSON.parse(await getJSON())</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">  &#125; catch (err) &#123;</span><br><span class=\"line\">    console.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-条件语句\"><a href=\"#3-条件语句\" class=\"headerlink\" title=\"3. 条件语句\"></a>3. 条件语句</h4><p>下面示例中，需要获取数据，然后根据返回数据决定是直接返回，还是继续获取更多的数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return getJSON()</span><br><span class=\"line\">    .then(data &#x3D;&gt; &#123;</span><br><span class=\"line\">      if (data.needsAnotherRequest) &#123;</span><br><span class=\"line\">        return makeAnotherRequest(data)</span><br><span class=\"line\">          .then(moreData &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(moreData)</span><br><span class=\"line\">            return moreData</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">        return data</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些代码看着就头痛。嵌套（6层），括号，return语句很容易让人感到迷茫，而它们只是需要将最终结果传递到最外层的Promise。 上面的代码使用async/await编写可以大大地提高可读性:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; async () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const data &#x3D; await getJSON()</span><br><span class=\"line\">  if (data.needsAnotherRequest) &#123;</span><br><span class=\"line\">    const moreData &#x3D; await makeAnotherRequest(data);</span><br><span class=\"line\">    console.log(moreData)</span><br><span class=\"line\">    return moreData</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">    return data    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-中间值\"><a href=\"#4-中间值\" class=\"headerlink\" title=\"4. 中间值\"></a>4. 中间值</h4><p>你很可能遇到过这样的场景，调用promise1，使用promise1返回的结果去调用promise2，然后使用两者的结果去调用promise3。你的代码很可能是这样的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return promise1()</span><br><span class=\"line\">    .then(value1 &#x3D;&gt; &#123;</span><br><span class=\"line\">      return promise2(value1)</span><br><span class=\"line\">        .then(value2 &#x3D;&gt; &#123;        </span><br><span class=\"line\">          return promise3(value1, value2)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果promise3不需要value1，可以很简单地将promise嵌套铺平。如果你忍受不了嵌套，你可以将value 1 &amp; 2 放进Promise.all来避免深层嵌套：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return promise1()</span><br><span class=\"line\">    .then(value1 &#x3D;&gt; &#123;</span><br><span class=\"line\">      return Promise.all([value1, promise2(value1)])</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(([value1, value2]) &#x3D;&gt; &#123;      </span><br><span class=\"line\">      return promise3(value1, value2)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方法为了可读性牺牲了语义。除了避免嵌套，并没有其他理由将value1和value2放在一个数组中。 使用async/await的话，代码会变得异常简单和直观。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; async () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const value1 &#x3D; await promise1()</span><br><span class=\"line\">  const value2 &#x3D; await promise2(value1)</span><br><span class=\"line\">  return promise3(value1, value2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-错误栈\"><a href=\"#5-错误栈\" class=\"headerlink\" title=\"5. 错误栈\"></a>5. 错误栈</h4><p>下面示例中调用了多个Promise，假设Promise链中某个地方抛出了一个错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return callAPromise()</span><br><span class=\"line\">    .then(() &#x3D;&gt; callAPromise())</span><br><span class=\"line\">    .then(() &#x3D;&gt; callAPromise())</span><br><span class=\"line\">    .then(() &#x3D;&gt; callAPromise())</span><br><span class=\"line\">    .then(() &#x3D;&gt; callAPromise())</span><br><span class=\"line\">    .then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      throw new Error(&quot;oops&quot;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">makeRequest()</span><br><span class=\"line\">  .catch(err &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">    &#x2F;&#x2F; output</span><br><span class=\"line\">    &#x2F;&#x2F; Error: oops at callAPromise.then.then.then.then.then (index.js:8:13)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Promise链中返回的错误栈没有给出错误发生位置的线索。更糟糕的是，它会误导我们；错误栈中唯一的函数名为callAPromise，然而它和错误没有关系。(文件名和行号还是有用的)。 然而，async/await中的错误栈会指向错误所在的函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const makeRequest &#x3D; async () &#x3D;&gt; &#123;</span><br><span class=\"line\">  await callAPromise()</span><br><span class=\"line\">  await callAPromise()</span><br><span class=\"line\">  await callAPromise()</span><br><span class=\"line\">  await callAPromise()</span><br><span class=\"line\">  await callAPromise()</span><br><span class=\"line\">  throw new Error(&quot;oops&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">makeRequest()</span><br><span class=\"line\">  .catch(err &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">    &#x2F;&#x2F; output</span><br><span class=\"line\">    &#x2F;&#x2F; Error: oops at makeRequest (index.js:7:9)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在开发环境中，这一点优势并不大。但是，当你分析生产环境的错误日志时，它将非常有用。这时，知道错误发生在makeRequest比知道错误发生在then链中要好。</p>\n<h4 id=\"6-调试\"><a href=\"#6-调试\" class=\"headerlink\" title=\"6. 调试\"></a>6. 调试</h4><p>最后一点，也是非常重要的一点在于，async/await能够使得代码调试更简单。2个理由使得调试Promise变得非常痛苦:</p>\n<ul>\n<li>不能在返回表达式的箭头函数中设置断点 <img src=\"http://pic.caibaojian.com/uploads/2018/09/Fqbv84viF2A97r63UA6F_HbidrxB\" alt=\"Fqbv84viF2A97r63UA6F_Hbidrx\"></li>\n<li>如果你在.then代码块中设置断点，使用Step Over快捷键，调试器不会跳到下一个.then，因为它只会跳过异步代码。</li>\n</ul>\n<p>使用await/async时，你不再需要那么多箭头函数，这样你就可以像调试同步代码一样跳过await语句。 <img src=\"http://pic.caibaojian.com/uploads/2018/09/FpySmuLIUmlxWDaaSIe4JY3tTjhO\" alt=\"FpySmuLIUmlxWDaaSIe4JY3tTjh\"></p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>Async/Await是近年来JavaScript添加的最革命性的的特性之一。它会让你发现Promise的语法有多糟糕，而且提供了一个直观的替代方法。</p>\n","categories":["前端"],"tags":["异步方法比较"]},{"title":"小程序入门","url":"/posts/62c904c0/","content":"<blockquote>\n<p>微信小程序来啦！！！！！！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-小程序的目录\"><a href=\"#一：-小程序的目录\" class=\"headerlink\" title=\"一： 小程序的目录\"></a>一： 小程序的目录</h2><h3 id=\"1-1-目录框架\"><a href=\"#1-1-目录框架\" class=\"headerlink\" title=\"1.1    目录框架\"></a>1.1    目录框架</h3><p><img src=\"http://photo.jomeswang.top/20201021200018.png\" alt=\"\"></p>\n<h3 id=\"1-2-app-js-文件解析\"><a href=\"#1-2-app-js-文件解析\" class=\"headerlink\" title=\"1.2    app.js 文件解析\"></a>1.2    app.js 文件解析</h3><p>每个小程序都需要在 app.js （名称不可改）中调用 App 方法来注册小程序实例，可以说该文件是小程序的入口文件。同时该文件也是用来定义小程序的全局数据和函数，控制、监听小程序的全生命周期。定义的函数及数据都是全局共享的，其他页面可以直接使用全局函数和数据。而生命周期函数可以针对不同场景可以调用不同的生命周期函数，如onlaunch(监听小程序初始化)，onshow(监听小程序显示)，onhide(监听小程序隐藏)等。这里需要注意的是App() 必须在 app.js 中注册且只有一个 App 实例，通过 getApp 方法可以获取到全局唯一的 App 实例，但不要在 App() 函数中调用 getApp() 方法，使用 this 就可以拿到 App 实例。</p>\n<p><img src=\"http://photo.jomeswang.top/20201021221855.png\" alt=\"\"></p>\n<h3 id=\"1-3-app-json文件\"><a href=\"#1-3-app-json文件\" class=\"headerlink\" title=\"1.3  app.json文件\"></a>1.3  app.json文件</h3><p>该文件是一个json对象，用于对小程序进行全局配置（该文件中不能有注释）。它可以配置页面路径，窗口表现，tabBar标签导航，网络超时，debug模式，其中pages对象用来配置小程序的里面所有的页面路径（该对象是个数组且第一个是小程序的首页），页面路径不需要写任何后缀，系统会自动去加载同名的 .json、.js、.wxml、.wxss 文件。window对象用于设置小程序的窗口表现，包括状态栏、导航条、标题、窗口背景色等。tabBar对象用于设置标签导航，就是小程序窗口底部的菜单栏，可以实现快速切换页面。</p>\n<p><img src=\"http://photo.jomeswang.top/20201021221955.png\" alt=\"\"></p>\n<h3 id=\"1-4-WXML文件\"><a href=\"#1-4-WXML文件\" class=\"headerlink\" title=\"1.4     WXML文件\"></a>1.4     WXML文件</h3><p>WXML是一套类似HTML的标签语言，是用来构建页面结构的。标签虽然与HTML有点不同但用法基本一致，同时还具备了类似Vue框架的特性，支持列表循环、条件渲染、模板引用及数据绑定等功能。一段完整的WXML语句由一个开始标签和一个结束标签组成，在标签中可以是内容也可以是其它WXML标签。这里需要注意的是WXML要求标签必需是严格闭合的，没有闭合将会导致编译错误。</p>\n<p><img src=\"http://photo.jomeswang.top/20201021222052.png\" alt=\"\"></p>\n<h3 id=\"1-5-WXSS文件\"><a href=\"#1-5-WXSS文件\" class=\"headerlink\" title=\"1.5     WXSS文件\"></a>1.5     WXSS文件</h3><p>WXSS是一套样式语言，用于描述 WXML 的组件样式。通过定义WXSS来控制页面的呈现样式的，这个跟HTML中的CSS功能差不多（WXSS 具有 CSS 大部分特性并在CSS基础上进行了扩充以及修改）。app.wxss与页面中的.wxss文件不同之处在于它的作用域是全局，而页面中的.wxss文件只能作用于当前页面。</p>\n<p><img src=\"http://photo.jomeswang.top/20201021222124.png\" alt=\"\"></p>\n<h2 id=\"二：-逻辑层\"><a href=\"#二：-逻辑层\" class=\"headerlink\" title=\"二： 逻辑层\"></a>二： 逻辑层</h2><h3 id=\"2-1-注册小程序\"><a href=\"#2-1-注册小程序\" class=\"headerlink\" title=\"2.1    注册小程序\"></a>2.1    注册小程序</h3><p>每个小程序都需要在 <code>app.js</code> 中调用 <code>App</code> 方法注册小程序实例，绑定生命周期回调函数、错误监听和页面不存在监听函数等。</p>\n<p><img src=\"http://photo.jomeswang.top/20201021224257.png\" alt=\"\"></p>\n<p>整个小程序只有一个 App 实例，是全部页面共享的。开发者可以通过 <code>getApp</code> 方法获取到全局唯一的 App 实例，获取App上的数据或调用开发者注册在 <code>App</code> 上的函数。</p>\n<p><img src=\"http://photo.jomeswang.top/20201021224321.png\" alt=\"\"></p>\n<h3 id=\"2-2-注册页面\"><a href=\"#2-2-注册页面\" class=\"headerlink\" title=\"2.2 注册页面\"></a>2.2 注册页面</h3><p>对于小程序中的每个页面，都需要在页面对应的 <code>js</code> 文件中进行注册，指定页面的初始数据、生命周期回调、事件处理函数等。</p>\n<h4 id=\"2-2-1-使用-Page-构造器注册页面\"><a href=\"#2-2-1-使用-Page-构造器注册页面\" class=\"headerlink\" title=\"2.2.1  使用 Page 构造器注册页面\"></a>2.2.1  使用 Page 构造器注册页面</h4><p><img src=\"http://photo.jomeswang.top/20201021224602.png\" alt=\"\"></p>\n<h4 id=\"2-2-2-在页面中使用-behaviors\"><a href=\"#2-2-2-在页面中使用-behaviors\" class=\"headerlink\" title=\"2.2.2   在页面中使用 behaviors\"></a>2.2.2   在页面中使用 behaviors</h4><p>页面可以引用 behaviors 。 behaviors 可以用来让多个页面有相同的数据字段和方法。</p>\n<h4 id=\"2-2-3-页面可以引用-behaviors-。-behaviors-可以用来让多个页面有相同的数据字段和方法。\"><a href=\"#2-2-3-页面可以引用-behaviors-。-behaviors-可以用来让多个页面有相同的数据字段和方法。\" class=\"headerlink\" title=\"2.2.3    页面可以引用 behaviors 。 behaviors 可以用来让多个页面有相同的数据字段和方法。\"></a>2.2.3    页面可以引用 behaviors 。 behaviors 可以用来让多个页面有相同的数据字段和方法。</h4><h3 id=\"2-3-页面路由\"><a href=\"#2-3-页面路由\" class=\"headerlink\" title=\"2.3  页面路由\"></a>2.3  页面路由</h3><p>在小程序中所有页面的路由全部由框架进行管理。</p>\n<h3 id=\"2-4-生命周期\"><a href=\"#2-4-生命周期\" class=\"headerlink\" title=\"2.4  生命周期\"></a>2.4  生命周期</h3><p><img src=\"http://photo.jomeswang.top/20201022222530.png\" alt=\"\"></p>\n<h2 id=\"三：-视图层\"><a href=\"#三：-视图层\" class=\"headerlink\" title=\"三： 视图层\"></a>三： 视图层</h2><h3 id=\"3-1-WXML-配置\"><a href=\"#3-1-WXML-配置\" class=\"headerlink\" title=\"3.1  WXML 配置\"></a>3.1  WXML 配置</h3><h4 id=\"3-1-1-数据绑定\"><a href=\"#3-1-1-数据绑定\" class=\"headerlink\" title=\"3.1.1  数据绑定\"></a>3.1.1  数据绑定</h4><p><img src=\"http://photo.jomeswang.top/20201021225347.png\" alt=\"\"></p>\n<h4 id=\"3-1-2-列表渲染\"><a href=\"#3-1-2-列表渲染\" class=\"headerlink\" title=\"3.1.2  列表渲染\"></a>3.1.2  列表渲染</h4><p>在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</p>\n<p>默认数组的当前项的下标变量名默认为 <code>index</code>，数组当前项的变量名默认为 <code>item</code></p>\n<p>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名，</p>\n<p>使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名：</p>\n<p><img src=\"http://photo.jomeswang.top/20201021225518.png\" alt=\"\"></p>\n<p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/input.html\" target=\"_blank\" rel=\"noopener\">input</a> 中的输入内容，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/switch.html\" target=\"_blank\" rel=\"noopener\">switch</a> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。</p>\n<p><img src=\"http://photo.jomeswang.top/20201021225531.png\" alt=\"\"></p>\n<h4 id=\"3-1-3-条件渲染\"><a href=\"#3-1-3-条件渲染\" class=\"headerlink\" title=\"3.1.3  条件渲染\"></a>3.1.3  条件渲染</h4><p><img src=\"http://photo.jomeswang.top/20201021225553.png\" alt=\"\"></p>\n<h4 id=\"3-1-4-模板\"><a href=\"#3-1-4-模板\" class=\"headerlink\" title=\"3.1.4  模板\"></a>3.1.4  模板</h4><p><img src=\"http://photo.jomeswang.top/20201021225655.png\" alt=\"\"></p>\n<h4 id=\"3-1-5-引用\"><a href=\"#3-1-5-引用\" class=\"headerlink\" title=\"3.1.5  引用\"></a>3.1.5  引用</h4><p>WXML 提供两种文件引用方式<code>import</code>和<code>include</code></p>\n<p><img src=\"http://photo.jomeswang.top/20201021230138.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20201021230148.png\" alt=\"\"></p>\n<h3 id=\"3-2-WXSS-配置\"><a href=\"#3-2-WXSS-配置\" class=\"headerlink\" title=\"3.2    WXSS 配置\"></a>3.2    WXSS 配置</h3><p><img src=\"http://photo.jomeswang.top/20201022182537.png\" alt=\"\"></p>\n<h2 id=\"四：-组件开发\"><a href=\"#四：-组件开发\" class=\"headerlink\" title=\"四： 组件开发\"></a>四： 组件开发</h2>","categories":["小程序"],"tags":["微信小程序"]},{"title":"区块链入门","url":"/posts/7f31b34d/","content":"<blockquote>\n<p>我相信区块链的未来，相信技术，相信分布式。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>简介</p>\n<p>正在看这篇文章的你，应该是一名被区块链技术所吸引的开发者或者极客。我相信你已经理解了区块链的技术原理，并急切地想要搞清楚这项技术将为你和你的开发技术栈带来怎样的影响。</p>\n<p>如果你需要更基础的区块链技术介绍，可以阅读比特币和以太坊的白皮书。</p>\n<p>这篇文章的目标是：</p>\n<p>解释区块链项目的开发和现有软件开发模式的区别。<br>提供上下文，帮助你更好地思考该领域的机遇和挑战。<br>提供区块链领域的基础资源和资料，便于开发区块链项目。</p>\n<p>开发模式的转变</p>\n<p>互联网的网络效应产生了大量的中心化的数据，这些数据促进了互联网应用的发展。受惠于共享开放的网络协议（比如 TCP/IP,HTTP），诸如 Yelp，Facebook 和 Amazon 这样的公司得以把自己的用户——当然也包括用户产生的数据——集中存储在自己的服务器上。这样一来，这些互联网巨头们除了比用户量小的企业更有优势之外，他们还对自己所拥有的海量用户数据如何变现有着 100% 的控制权。用数字货币投资者 Joel Monegro 的话说就是，现有的互联网模式使得绝大部分的价值被应用层所攫取，而应用层的基础，也就是底层的协议层则获利很少（即，“胖”应用层，“瘦”协议层模式）。</p>\n<p>相反，区块链技术带来的价值分布模式，可以被理解为是一种“胖”协议层，“瘦”应用层的模式。正是密码学货币的创新，使得这种模式成为可能。正如 USV 的 Albert Wagner 所说：</p>\n<p>“一直以来，靠协议赚钱的方式只有一种，那就是基于该协议开发软件并出售（当然最近都转为出租了）… 然而密码学货币则提供了一种直接在协议层变现的可能，并且随着基于该协议的应用越来越丰富，底层协议的变现能力也会随之越来越强，反映在数字货币上就是价格越来越高。”<br>从前那些互联网开放协议的开发者们，也就是 DARPA 网的研究员们或者那些无偿的贡献者们，并不会因为开放协议的发展或基于其上的应用越来越多，而获得直接的经济回报。不同的是，现在的协议开发者们可以直接发行数字货币了，比如比特币或以太币，而这些数字货币则直接代表了去中心化协议的价值。</p>\n<p>Joel Monegro 相信，区块链技术所带来的这种模式上的转变，将促使开发者重新审视自己的应用。“数据的开放共享和内生激励机制的结合，最终会终结“赢者通吃”的市场现象。这将改变应用层的游戏规则，并且催生一批有着全新业务模型的公司。而这些公司业务模型的不同将主要集中在协议层。”</p>\n<p>以太坊</p>\n<p>前面的讨论带给我们的结论是：区块链技术带来的创新让开发者们可以直接在协议层获得价值。接下来我们将继续讨论，区块链技术是如何朝着开发者友好的方向演进的。8 年前，一种无需中心化金融机构背书的数字货币出现了，它就是现在人们耳熟能详的比特币。一开始，开发者们试图将数据直接存储在比特币的区块链上来开发应用，结果表明，这种方式非常低效（Joel 的这篇文章是个很好的例子）。其中一位开发者 Vitalik Buterin 实在是受够了比特币对于新特性极端谨慎和保守的态度，于是他开发了一个新的区块链平台以太坊（Ethereum）。</p>\n<p>比特币的初衷是创造一种新的价值存储的媒介。以太坊则是为了实现一个图灵完备的区块链开发平台。在以太坊网络中，开发者们可以使用 Solidity 这门编程语言编写智能合约，这些合约则由以太坊虚拟机（EVM）来运行。从 Vitalik Buterin 的例子中我们不难看出，开发者们完全可以开发一个全新的区块链网络，以此来满足自己多样的需求。当然，从头开发新的区块链网络也有缺点，比如你要从头开始构建开发者社区。但直接在类似以太坊这类成熟的网络上开发，则没有这样的问题。而且一个显著的不同是，开发基于区块链网络的应用，开发者不仅会是这个应用的所有者，也会成为因此而繁荣的底层协议的直接受益人。</p>\n<p>去中心化应用（Dapps），代币和智能合约</p>\n<p>现在的开发者们基于现有的区块链协议（比如以太坊）开发出了满足不同用户需求的去中心化应用（dapp）。开发者一般会在 dapp 中发行自己的代币（token），用户可以通过消耗代币来让 dapp “执行”相应的操作来实现某个“功能”。代币其实并不神秘，你可以把它想象成人们在商场的电玩世界里买的游戏币。这些通过“智能合约”实现的“功能”通过收取一定的费用（代币），使得 dapp 可以在不依赖第三方的情况下对外提供可靠的服务。用游戏币来类比就是，只要有足够的游戏币，你随时都可以把游戏币塞到篮球机里玩一局！</p>\n<p>一般情况下，代币的总量是固定的，因此随着某个 dapp 提供的服务越来越流行，基于简单的供需原理，代币的价格肯定会水涨船高。基于这个逻辑，dapp 的开发者们往往通过发售代币的方式来募集开发资金（而不是通过传统的融资渠道），这一过程的另一个众所周知的名字就是 ICO（初始代币销售）。</p>\n<p>看到这里你可能会问，“为什么每个 dapp 都要发行专用的代币，而不是用现成的，比如以太币（eth）呢？”。这个不难解释，因为专用的代币利于特定应用生态里的小微经济。换句话说，专用的代币可以针对应用的特定功能和需求作出灵活的调整，如此一来，这个代币就能更好地服务于这款 dapp。说到这里，我们不得不提到以太坊（Ethereum）。以太坊正是这么一个让 dapp 开发者们可以方便地发行代币的平台。</p>\n<p>早期机会</p>\n<p>有了上述这些对于 dapp 底层机制的理解，接下来你应该思考这么一个问题了：去中心化到底会给你的用户带来什么价值？我们希望你可以先想清楚上面这个问题，而不是一上来就开始急着“去中心化”现有的产品。举个例子，Augur 这款产品依靠区块链技术实现了一个预测市场。为什么要用区块链技术实现？正是因为这项技术带来的鼓励诚实的经济激励机制，使得散布在世界各地的参与者因此而能够作出更准确的预测。</p>\n<p>在开发者层面，区块链技术也带来了一次技术栈的创新机会。现有区块链的开发者们很喜欢把现在的情形跟互联网早期做类比，那个时候各种开发工具和框架都还不够完善，而现在的区块链开发领域正是如此。来自 Stream 的 Ben Yu 认为这是开发者的新机会：“很多看起来是举手之劳的基础工作亟待完成，如果说区块链技术社区的现状很像 1994 年的互联网的话，那么，为了将其演进到 2017 年的互联网，还要完成很多基础架构工作”。</p>\n<p>由于区块链技术的创新，很多人已经看到了创建全新的、去中心化的网络栈的机会。这种全新的网络栈将不再依赖中心化的政府或公司。传统的网络栈由 TCP/IP，DNS，数据库，网络服务器，鉴权系统和 CDN 这些基础组件构成，而现在，我们有机会通过类似于以太坊这样的平台，用去中心化的方式，重新实现传统网络栈中的各个组件。</p>\n<p>“不可篡改”带来的挑战</p>\n<p>就像早期的 Javascript 技术一样，区块链技术演进的过程必然伴随着各式各样的挑战。其中最大的挑战之一，也是区块链技术最突出的特性，那就是“不可篡改”。由于这个特性，开发者们无法更改底层的区块链，也无法更改顶层的智能合约，对基础库和合约进行版本控制也非常困难。最近 Parity 的一个 bug 直接导致了价值 1.5 亿美金的以太币被锁。诸如此类的事故不断地提醒我们，构建经得住未来考验的架构是非常重要的。</p>\n<p>关于这种不可篡改性对业务安全所带来的影响，来自 0x 项目的开发者 Brandon Millman 跟我们分享了他的看法：“跟传统项目相比，在这个领域做开发意味着你要加倍小心，因为任何问题都将直接影响用户数字资产的安全。一直以来，区块链技术对于私有财产的有力保护广为人知，也就是说，只要你安全地控制着私钥，理论上没有人可以偷走你的资产。但这个领域更多的偷窃行为并不是通过直接盗取用户的私钥来实施的。骗子们更多地是通过诱骗的方式，让用户将数字资产转移到他们的钱包，最终达成行窃的目的。”</p>\n<p>开发者们，尤其是那些来自创业公司习惯了快节奏开发的开发者们，不得不停下来思考如何在速度和安全性之间找到平衡。就像来自 Stream 的 Ben Yu 说的那样：“开发者们普遍推崇的一个原则是：move fast and break things. 这句话在区块链领域只有前半句成立。这个领域的发展日新月异，所以你必须 move fast 才不至于被竞争对手超越，但 break things 则意味着成千上万的金钱损失。”</p>\n<p>区块链领域的开发需要更加周密的计划。由于开发者对于整个系统缺少中心化的控制，因此 dapp 是很难像传统应用那样做快速热修复的。相反的，在区块链世界要想做系统级别的变更，则往往意味着整个协议的硬分叉。</p>\n<p>以太坊的局限性</p>\n<p>除了上面讲到的“不可篡改”带来的挑战，开发者在以太坊网络上还可能碰到一些其他限制。比如，以太坊网络不支持通过外部调用的方式获取自身区块链以外的数据。开发者们需要依赖第三方数据提供商来向智能合约注入外部数据，这类数据提供商也常常被称作预言机（Oracle）。</p>\n<p>除此之外，以太坊的性能不足以支持实时计算。以太坊网络中区块的处理时间长达 15 秒（跟比特币网络的 10 分钟比起来已经很快了）。因此，开发者们需要写一些异步代码来进行状态的更新（这一点跟 React 很像）。</p>\n<p>同时，在以太坊网络中，合约执行的每一步都需要消耗 gas，而 gas 最终会以以太币（eth）进行结算。因此，开发者们可能经常会碰到由于 gas 设置过低，导致计算无法完成的情况（比如这款象棋游戏）。也就是说，以太坊的“链上计算”是非常昂贵的，同时也非常消耗带宽。因此，市面上也产生了一些像 Truebit 这类旨在降低计算成本的“链下计算”服务。</p>\n<p>如何开始</p>\n<p>简单来说，这是一个令人叹为观止的领域。区块链技术是交叉学科的典型代表，这一技术涉及了经济学、博弈论、金融学、计算机科学、数学、密码学等众多学科领域。而交叉学科往往也意味着，有很多基础工作需要完成。</p>\n<p>对于区块链领域的新人，来自 0x 项目团队的 Brandon 给的建议是，选择自己感兴趣或跟自身经历相关的领域为切入点，而不是一上来就想吃成大胖子：“如果你之前做的是 JS 开发工作，那么这个领域有非常多的 JS 库需要你这样的人来完善。假以时日，在开发过程中，你就会逐渐理解并熟悉这一领域。你无须有完成一门课程才能入门的负担。”</p>\n<p>正如区块链技术所宣扬的“去中心化”思想那样，这一领域的绝大多数项目的代码都是开源的。下面就列出了一些可以让你快速上手的资源：</p>\n<p>• <a href=\"https://solidity.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">Solidity</a>  官方文档 是学习这门语言的很好的开始。</p>\n<p>• <a href=\"https://www.trufflesuite.com/\" target=\"_blank\" rel=\"noopener\">Truffle</a> 框架 是 solidity 最好的开发框架之一。</p>\n<p>• 在 <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts\" target=\"_blank\" rel=\"noopener\">zeppelinOS 代码库</a> 里可以看到很多知名的开源库。</p>\n<p>• Blockgeeks 提供了一个详细的 <a href=\"https://blockgeeks.com/guides/ethereum-token/\" target=\"_blank\" rel=\"noopener\">以太坊代币开发指引</a>，并附有一些代码示例和抽象概念。</p>\n<p>• 你也可以从火爆全网的 Crypto Kitties 那里学习 <a href=\"https://medium.com/loom-network/how-to-code-your-own-cryptokitties-style-game-on-ethereum-7c8ac86a4eb3\" target=\"_blank\" rel=\"noopener\">如何在区块链上创建自己的游戏</a>。</p>\n<p>除此之外，下面是一些高质量的开发者社区：</p>\n<p>• <a href=\"https://www.reddit.com/r/ethereum/\" target=\"_blank\" rel=\"noopener\">https://www.reddit.com/r/ethereum/</a></p>\n<p>• <a href=\"https://www.reddit.com/r/ethdev/\" target=\"_blank\" rel=\"noopener\">https://www.reddit.com/r/ethdev/</a></p>\n<p>• <a href=\"https://blockgeeks.com/\" target=\"_blank\" rel=\"noopener\">https://blockgeeks.com/</a></p>\n<p>如果你想做一些项目练手，也许下面这些主意不错：</p>\n<p>• 创建自己的钱包应用。可以是网页版，移动版或桌面版</p>\n<p>• 发行自己的 ERC-20 代币，并部署在测试网络上。</p>\n<p>• 改一改 crypto kitties 的代码（比如改成狗，坦克，僵尸）并部署在测试网络上。</p>\n<p>展望未来</p>\n<p>目前看来，我们必须承认，围绕区块链的开发一团乱麻。跟现有成熟的网络开发相比，区块链领域还没有好用的框架和工具。但换个角度想，这种早期的混乱，正是一个机会，更重要的是，这是一个极有可能带来开发模式巨变的机会。</p>\n<p>在区块链上，你不需要部署任何中心化的服务器，这就意味着单点失败的风险为零。如果你的整个技术栈都是去中心化的，那么就不需要引入“可信”的第三方，而没有第三方则意味着可以 100% 对抗审查。区块链技术带来了数据开放的新机会，基于区块链的去中心化数据库未来可期。</p>\n<p>有了区块链技术，我们可以预见这样一个未来世界：一个没有中间人，并且信息和权利被系统性地分散开来的世界。</p>\n","categories":["区块链"],"tags":["区块链"]},{"title":"Vue3 的深入学习","url":"/posts/83b6388e/","content":"<blockquote>\n<p>继续学习，冲冲冲</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-项目搭建\"><a href=\"#一：-项目搭建\" class=\"headerlink\" title=\"一： 项目搭建\"></a>一： 项目搭建</h2><p>以前我们搭建项目直接就vue-cli生成了,但是现在不同了，现在有两种方式：</p>\n<h3 id=\"1-1-尤大大推荐的vite\"><a href=\"#1-1-尤大大推荐的vite\" class=\"headerlink\" title=\"1.1.尤大大推荐的vite\"></a>1.1.尤大大推荐的vite</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/204851c7c93a4ab2930ae2fd228676df~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\"></p>\n<p>优点：总结一个字，就是快！</p>\n<ul>\n<li>不需要打包，冷启动服务器</li>\n<li>即时热模块更换</li>\n<li>按需编译,不会出现模块变多而热更新变慢的问题</li>\n</ul>\n<p>缺点：安装插件的时候有时候会出现莫名其妙的报错…</p>\n<blockquote>\n<p>提示：这里vue-router、vuex 都要自己安装，而且必须是4.0+，vite暂时自己玩玩就好，别用于公司项目，不然直接原地爆炸</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$  npm init vite-app &lt;project-name&gt;</span><br><span class=\"line\">$  cd &lt;project-name&gt;</span><br><span class=\"line\">$  npm install</span><br><span class=\"line\">$  npm run dev</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-传统的webpack\"><a href=\"#2-1-传统的webpack\" class=\"headerlink\" title=\"2.1.传统的webpack\"></a>2.1.传统的webpack</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0fd35b2f48c47d197b3097680533712~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<p>优缺点相信大家都知道，热更新是诟病，这里就不说了…</p>\n<blockquote>\n<p>这里你要先看看你的vue-cli是不是最新版本</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$  vue create &lt;project-name&gt;</span><br><span class=\"line\">$  vue add vue-next </span><br><span class=\"line\">$  cd &lt;project-name&gt;</span><br><span class=\"line\">$  npm run serve</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二：结构变化\"><a href=\"#二：结构变化\" class=\"headerlink\" title=\"二：结构变化\"></a>二：结构变化</h2><blockquote>\n<p>其实目录结构没什么变化，只要是一些方法改变了，默认给你安装了ts</p>\n</blockquote>\n<h3 id=\"2-1-main-js\"><a href=\"#2-1-main-js\" class=\"headerlink\" title=\"2.1      main.js\"></a>2.1      main.js</h3><p>基本上没什么变化 ，只是<code>import vue from &quot;vue&quot;</code> 变成了 <code>createApp</code> ,2.x使用 <code>new Vue()</code> 来创建实例，3.0则使用 <code>createApp()</code> 来创建，这也导致很多插件和UI库用不了，比如 <code>element-ui</code></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e6e45a77b2a47ce9f204a8378562444~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\"></p>\n<h3 id=\"2-2-router-js\"><a href=\"#2-2-router-js\" class=\"headerlink\" title=\"2.2    router.js\"></a>2.2    router.js</h3><p>需要引入<code>createRouter</code> 来创建路由, <code>createWebHashHistory</code> 对应以前的 <code>hash</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">createWebHistory&#96; 对应以前的 &#96;histtory</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60ce97ee1e9f4a48b4fa145bb87d9904~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"2-3-vuex\"><a href=\"#2-3-vuex\" class=\"headerlink\" title=\"2.3    vuex\"></a>2.3    vuex</h3><p>创建方式变成了 以 <code>createStore</code> 来创建</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b1f639f5cfc4653ad23d514433efdba~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\"></p>\n<h3 id=\"2-4-template模板\"><a href=\"#2-4-template模板\" class=\"headerlink\" title=\"2.4    template模板\"></a>2.4    template模板</h3><p>可以存在多个根节点</p>\n<ul>\n<li><h3 id=\"Composition-API\"><a href=\"#Composition-API\" class=\"headerlink\" title=\"Composition API\"></a>Composition API</h3></li>\n</ul>\n<p>这是vue3.0变化最大的地方，2.x 数据存放在<code>data</code>，方法在<code>methods</code>，通过<code>this</code>去调用</p>\n<p>但是，在3.0这些都没有了，所有的代码全部都在 <code>setup</code> 里面实现，而且不会再有<code>this</code></p>\n<p>你页面需要哪些方法，就要在当前页引入。</p>\n<blockquote>\n<p>看到这里，你是不是有点头大？不过没关系，现在开始一步步梳理 如何在项目中使用这些方法，还有就是，3.0 由于没有了data,computed,methods分区，全部代码写在一起，所以对项目代码的组织能力有很大要求，所以公司内部要对代码结构有严格规定</p>\n</blockquote>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b614331eefa47cb9bc6332322cd550a~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"2-5-其他变化\"><a href=\"#2-5-其他变化\" class=\"headerlink\" title=\"2.5 其他变化\"></a>2.5 其他变化</h3><ol>\n<li><p>vue源码体积的优化和监听机制的优化</p>\n</li>\n<li><p>更好的支持typescript</p>\n</li>\n<li><p>等等…</p>\n</li>\n</ol>\n<h2 id=\"三：-生命周期\"><a href=\"#三：-生命周期\" class=\"headerlink\" title=\"三： 生命周期\"></a>三： 生命周期</h2><h3 id=\"3-0-的生命周期也发生了点改变，这里借用一张从网上找的图\"><a href=\"#3-0-的生命周期也发生了点改变，这里借用一张从网上找的图\" class=\"headerlink\" title=\"3.0    的生命周期也发生了点改变，这里借用一张从网上找的图\"></a>3.0    的生命周期也发生了点改变，这里借用一张从网上找的图</h3><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c60b32d80443ca9d4173cdfdd20898~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\"></p>\n<h3 id=\"3-1-具体使用\"><a href=\"#3-1-具体使用\" class=\"headerlink\" title=\"3.1    具体使用\"></a>3.1    具体使用</h3><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a64e3f68528a4a6d8885c31625b9b326~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h2 id=\"四：-详细使用\"><a href=\"#四：-详细使用\" class=\"headerlink\" title=\"四： 详细使用\"></a>四： 详细使用</h2><h3 id=\"4-1-setup\"><a href=\"#4-1-setup\" class=\"headerlink\" title=\"4.1    setup\"></a>4.1    setup</h3><p>setup有两个参数 <code>props</code> 和 <code>context</code></p>\n<ul>\n<li><code>props</code> 顾名思义就是接受父组件传的值</li>\n<li><code>context</code>：由于3.0里面没有 <code>this</code>，所有就有了一个 <code>context</code>上下文属性，你可以通过这个属性去获取进行 一些 vue2.x 用<code>this</code>实现的操作</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20201018135021.png\" alt=\"\"></p>\n<h3 id=\"4-2-数据赋值\"><a href=\"#4-2-数据赋值\" class=\"headerlink\" title=\"4.2    数据赋值\"></a>4.2    数据赋值</h3><p>不同于vue2.x，直接在return里面 <code>aa：123</code>，3.0里面赋值只能通过<code>ref</code> 和 <code>reactive</code> 去声明一个响应式的值</p>\n<blockquote>\n<p>无论是<code>ref</code> 还是<code>reactive</code>声明的值，还有后面会说到的函数方法，都要<code>return</code>出来，不然<code>template</code>里面会拿不到这个值，而且reurn必须放在最后，return后面的创建值和函数不会执行</p>\n</blockquote>\n<ul>\n<li><strong>ref 用于声明基础数据类型</strong></li>\n</ul>\n<p>创建一个响应式的基础类型，只能监听number、String、boolean等简单的类型，该属性一旦发生更改，都会被追踪到，js里面修改或者获取这个值的时候，要写成 <code>count.value</code>这种形式，但在<code>template</code>里面你可以直接写 <code></code>，不用去加.value</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">   &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;div&gt;             &#x2F;&#x2F; 1</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">import &#123;ref&#125; from &quot;vue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">setup()&#123;</span><br><span class=\"line\">   const count &#x3D;ref(0)</span><br><span class=\"line\">   count.value++    &#x2F;&#x2F;必须要加.value</span><br><span class=\"line\">   return&#123;</span><br><span class=\"line\">       count        &#x2F;&#x2F;一定要return 出去</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>isRef 检查值是否是 ref创建的类型</strong>  </p>\n<p>import {ref,isRef} from “vue”</p>\n<p>setup(){ const count =ref(0) console.log(isRef(count)) }</p>\n</li>\n<li><p><strong>reactive 用于声明响应式数据对象</strong></p>\n</li>\n</ul>\n<p>在vue2.x里面，如果我们想修改一个对象里面的某个属性的时候，经常会遇到值更新了但是视图没更新，只能用<code>$set</code> 来强制更新，在3.0里面，我们可以使用<code>reactive</code>来创建一个响应式对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">   &lt;div&gt;&#123;&#123;count.name&#125;&#125;&lt;&#x2F;div&gt;             &#x2F;&#x2F; 857</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">import &#123;reactive&#125; from &quot;vue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">setup()&#123;</span><br><span class=\"line\">   const count &#x3D;reactive(&#123;</span><br><span class=\"line\">      name:&#39;369&#39;</span><br><span class=\"line\">   &#125;)   count.name&#x3D;&#39;857&#39;</span><br><span class=\"line\">   return&#123;</span><br><span class=\"line\">      count </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>其实这两个的区别就是：</strong></p>\n<p>声明值的时候，有人喜欢这样写： let count=5; let name=8;</p>\n<p>有的人喜欢这样写： let obj={ name:8, value:10 }</p>\n<p>所以就出现了这两种声明值的方法</p>\n</li>\n<li><p><strong>toRefs 把一个响应式对象转成成普通 ref</strong></p>\n</li>\n</ul>\n<p>这个属性我是这样理解的，当我们创建了一个<code>reactive</code>对象的时候，我们如果只想要其中的部 分属性，觉得在模板里面 <code></code>，<code></code> 太繁琐，我们可以使用这个属性，在<code>return</code> 里面 <code>...toRefs(count)</code>,解构对象,将里面的属性转换成<code>ref</code>，而不丢失响应式</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/047e8aff0a6b482f9b96814558cf884d~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"4-3-readonly只读\"><a href=\"#4-3-readonly只读\" class=\"headerlink\" title=\"4.3    readonly只读\"></a>4.3    readonly只读</h3><p>将对象或者基础类型转换成只读的属性，如果修改这个值会发出警告</p>\n<blockquote>\n<p>这里顺带说一下，不知道目前的vue3.0的版本问题还是啥情况，基本上不会有报错，哪怕是你引入模块路径错误，他也只会在console里面发出 warning警告，不会有报错</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123;ref,readonly&#125; from &quot;vue&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">   setup()&#123;</span><br><span class=\"line\">      const count&#x3D;ref(0)</span><br><span class=\"line\">      const copy&#x3D;readonlu(count)</span><br><span class=\"line\">      copy.count++    &#x2F;&#x2F;会发出warning警告</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-computed-计算\"><a href=\"#4-4-computed-计算\" class=\"headerlink\" title=\"4.4    computed 计算\"></a>4.4    computed 计算</h3><p>computed 和2.x差不多，基本上没变化，只是使用前要先引入，还是可以创建<code>get</code> 和 <code>set</code>  </p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d9e4d1764f742e48598a50440cfa5dc~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"4-5-watchEffect-监听\"><a href=\"#4-5-watchEffect-监听\" class=\"headerlink\" title=\"4.5    watchEffect 监听\"></a>4.5    watchEffect 监听</h3><p>这是vue3.0的新方法，接受一个函数，当依赖值发生改变时，立即执行这个函数，我是这样理解的，假如你通过<code>ref</code>或者<code>reactive</code>去创建多个响应式的值，当任何一个值发生改变的时候，就会立即执行这个<strong><code>watchEffect</code></strong>里面的函数</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1fa9e0f4cc864a09bd13d04f861f387b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<p><strong>这个方法一旦调用就会一直存在，直到组件</strong> <code>**unmount**</code><strong>，有时候我们不想让他一直继续监听，</strong><code>**watchEffect**</code> <strong>返回一个</strong><code>**stop handler**</code> <strong>调用这个方法即可停止监听</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b10b195f6bef43f387027c5431ef3f85~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"4-6-watch\"><a href=\"#4-6-watch\" class=\"headerlink\" title=\"4.6    watch\"></a>4.6    watch</h3><p>3.0的watch和2.0基本上一样，只是需要引入watch，最大的不同就是vue3.0 watch会在创建的时候执行一次，类似于2.x里面的 <code>immediate: true</code>，不过也有个新属性<code>lazy,</code>默认值为<code>false</code>,将这个值设置为true，第一次创建的时候就不会执行了</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54b13dda2f014a51ad737faa0b1bbbf8~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"4-7-router\"><a href=\"#4-7-router\" class=\"headerlink\" title=\"4.7    router\"></a>4.7    router</h3><p>3.0的<code>router</code>和<code>route</code>属性也有了很大的变化，在2.0里面我们用<code>this.$router</code> 路由跳转，<code>this.$route</code>获取当前页面路由信息，在3.0中有了点改动。</p>\n<p>路由跳转：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; useRouter&#125; from &quot;vue-router&quot;; </span><br><span class=\"line\"></span><br><span class=\"line\">setup()&#123;</span><br><span class=\"line\">  const router&#x3D;useRouter()</span><br><span class=\"line\">  router.push(&#39;&#x2F;path&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>获取当前页面路由信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; useRoute&#125; from &quot;vue-router&quot;; </span><br><span class=\"line\"></span><br><span class=\"line\">setup()&#123;</span><br><span class=\"line\">  const route&#x3D;useRoute()</span><br><span class=\"line\">  console.log(route)    &#x2F;&#x2F;这里的route&#x3D;&#x3D;2.x中的this.$route</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>或者通过 <code>ctx</code> 获取当前路由信息，ctx就是当前组件的实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; getCurrentInstance &#125; from &#39;vue&#39;</span><br><span class=\"line\">setup()&#123;</span><br><span class=\"line\">   const &#123; ctx &#125; &#x3D; getCurrentInstance()</span><br><span class=\"line\">   console.log(ctx.$router.currentRoute.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-8-vuex\"><a href=\"#4-8-vuex\" class=\"headerlink\" title=\"4.8    vuex\"></a>4.8    vuex</h3><p>vuex使用方法也有了小小的改变</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b849fc3b37b94315a7d2584a541f37f1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<p>或者还是使用<code>ctx</code>上下文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; getCurrentInstance &#125; from &quot;vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">   setup()&#123;</span><br><span class=\"line\">       const &#123; ctx &#125; &#x3D; getCurrentInstance()</span><br><span class=\"line\">       const count &#x3D; computed(() &#x3D;&gt; ctx.$store.state.count)</span><br><span class=\"line\">       const update &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">           ctx.$store.commit(&#39;SET_COUNT&#39;, 75)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-9-ref节点\"><a href=\"#4-9-ref节点\" class=\"headerlink\" title=\"4.9    ref节点\"></a>4.9    ref节点</h3><p>在vue2.x里面我们获取节点使用 this.$refs.xxx来获取这个节点，在3.0里面我们要用这样获取</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b653e7f102e4162861ea69bc0250dca~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"4-10-mixins\"><a href=\"#4-10-mixins\" class=\"headerlink\" title=\"4.10    mixins\"></a>4.10    mixins</h3><blockquote>\n<p>早在2016年年年中，Dan Abramov写了《Mixins被认为是有害的》一文，他在文中认为，在<a href=\"http://caibaojian.com/react/\" target=\"_blank\" rel=\"noopener\">React</a>组件中使用mixins来重用逻辑是一种反模式，主张远离mixins。</p>\n</blockquote>\n<p>现在vue里面好像没有了mixins这个属性，看网上的评论说minxins被 Composition API干掉了，关于这个的详细解释，可以看看这个 <a href=\"http://caibaojian.com/vue3-composition-api.html\" target=\"_blank\" rel=\"noopener\">Vue3 Composition API 是如何取代 Vue Mixins 的？</a></p>\n<h3 id=\"4-11-keep-alive\"><a href=\"#4-11-keep-alive\" class=\"headerlink\" title=\"4.11    keep-alive\"></a>4.11    keep-alive</h3><p>keep-alive和2.0差距不大，就是使用方式变了。</p>\n<blockquote>\n<p>3.0 router-view 和route-link 标签不能用keep-alive 和 transtion标签包裹，不然会发出警告</p>\n</blockquote>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c81cdbd337b340a79399dbb47274d386~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"img\">  </p>\n<h3 id=\"未实现的功能\"><a href=\"#未实现的功能\" class=\"headerlink\" title=\"未实现的功能\"></a>未实现的功能</h3><ul>\n<li><strong>全局注册组件</strong></li>\n<li><strong>bus</strong></li>\n<li>……</li>\n</ul>\n","categories":["Vue3"],"tags":["Vue3"]},{"title":"Vue3 的初次学习","url":"/posts/3120d751/","content":"<blockquote>\n<p>Vue3 出来了，真是一个激动人心的时刻，可是我又要学习了，开心（bushi</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-项目创建\"><a href=\"#一：-项目创建\" class=\"headerlink\" title=\"一： 项目创建\"></a>一： 项目创建</h2><h3 id=\"1-1-CDN-方法\"><a href=\"#1-1-CDN-方法\" class=\"headerlink\" title=\"1.1 CDN 方法\"></a>1.1 CDN 方法</h3><p>对于制作原型或学习，你可以这样使用最新版本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：</p>\n<h3 id=\"1-2-命令行工具-CLI\"><a href=\"#1-2-命令行工具-CLI\" class=\"headerlink\" title=\"1.2 命令行工具 (CLI)\"></a>1.2 命令行工具 (CLI)</h3><p>Vue 提供了一个<a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"noopener\">官方的 CLI</a>，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了 batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅 <a href=\"https://cli.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue CLI 的文档</a>。</p>\n<p>TIP</p>\n<p>CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解。如果你是新手，我们强烈建议先在不用构建工具的情况下通读<a href=\"https://vue3js.cn/docs/zh/guide/\" target=\"_blank\" rel=\"noopener\">指南</a>，在熟悉 Vue 本身之后再使用 CLI。</p>\n<p>对于 Vue 3，你应该使用 <code>npm</code> 上可用的 Vue CLI v4.5 作为 <code>@vue/cli@next</code>。要升级，你应该需要全局重新安装最新版本的 <code>@vue/cli</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn global add @vue/cli@next</span><br><span class=\"line\"><span class=\"comment\"># OR</span></span><br><span class=\"line\">npm install -g @vue/cli@next</span><br></pre></td></tr></table></figure>\n\n<p>Then in the Vue projects，run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue upgrade --next</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-Vite\"><a href=\"#1-3-Vite\" class=\"headerlink\" title=\"1.3  Vite\"></a>1.3  Vite</h3><p><a href=\"https://github.com/vitejs/vite\" target=\"_blank\" rel=\"noopener\">Vite</a> 是一个 web 开发构建工具，由于其原生 ES 模块导入方法，它允许快速提供代码。</p>\n<p>通过在终端中运行以下命令，可以使用 Vite 快速设置 Vue 项目。</p>\n<p>使用 NPM：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm init vite-app &lt;project-name&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>或者 yarn：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ yarn create vite-app &lt;project-name&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\">$ yarn</span><br><span class=\"line\">$ yarn dev</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：-一些与VUE2的区别\"><a href=\"#二：-一些与VUE2的区别\" class=\"headerlink\" title=\"二： 一些与VUE2的区别\"></a>二： 一些与VUE2的区别</h2><h3 id=\"2-1-、template不再需要根元素\"><a href=\"#2-1-、template不再需要根元素\" class=\"headerlink\" title=\"2.1 、template不再需要根元素\"></a>2.1 、template不再需要根元素</h3><p>显然在vue3中template不再一定需要一个父元素才能编译通过了。</p>\n<h3 id=\"2-2、setup函数初识\"><a href=\"#2-2、setup函数初识\" class=\"headerlink\" title=\"2.2、setup函数初识\"></a>2.2、setup函数初识</h3><h4 id=\"2-2-1、关于setup\"><a href=\"#2-2-1、关于setup\" class=\"headerlink\" title=\"2.2.1、关于setup\"></a>2.2.1、关于setup</h4><p> setup函数其实是一个生命周期钩子，它对应的其实就是Vue2中的 beforeCreate 和 create<br>在vue3中我们通过这个函数来定义vue2中的 data,methods,watch,computed 属性（数据定义与处理相关）</p>\n<h4 id=\"2-2-2、setup使用\"><a href=\"#2-2-2、setup使用\" class=\"headerlink\" title=\"2.2.2、setup使用\"></a>2.2.2、setup使用</h4><p> setup函数必须有返回值，必须返回一个对象，对象里包含所有在template模板中需要使用到的属性（包含data,methods等）</p>\n<p> setup函数有一个props参数，用于接收props，也就是定义在组件上的属性（同vue2),但是接收的props必须先在props属性中定义，否则是不会被接收到的</p>\n<p>下面是一个setup的使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">  &lt;button @click&#x3D;&quot;count++&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup(props) &#123;</span><br><span class=\"line\">    console.log(props); &#x2F;&#x2F; Proxy&#123;msg:...&#125;</span><br><span class=\"line\">    const count &#x3D; ref(0);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      count,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 我们在这里通过ref函数定义了一个变量count,ref函数是一个把普通变量变成Proxy响应式变量的函数。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3、使用-ref-amp-reactive-使得数据经过变成Proxy响应式数据\"><a href=\"#2-3、使用-ref-amp-reactive-使得数据经过变成Proxy响应式数据\" class=\"headerlink\" title=\"2.3、使用 ref &amp; reactive 使得数据经过变成Proxy响应式数据\"></a>2.3、使用 ref &amp; reactive 使得数据经过变成Proxy响应式数据</h3><h4 id=\"2-3-1、ref函数\"><a href=\"#2-3-1、ref函数\" class=\"headerlink\" title=\"2.3.1、ref函数\"></a>2.3.1、ref函数</h4><p>使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">setup(props) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 使用示例</span><br><span class=\"line\">    const count &#x3D; ref(0);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      count,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#x2F;&#x2F; 用ref定义的变量，如果需要取到其变量值，需要使用.value属性</span><br><span class=\"line\"></span><br><span class=\"line\">比如：</span><br><span class=\"line\">setup(props) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 使用示例</span><br><span class=\"line\">    const count &#x3D; ref(0);</span><br><span class=\"line\">    const changeCount &#x3D; ()&#x3D;&gt;&#123;</span><br><span class=\"line\">        count.value++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      count,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> 我们用changeCount替代上述setup示例模板的count++</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">  &lt;button @click&#x3D;&quot;changeCount&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>有着相似的作用   ref的另一个用法：  调用原生DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref&#x3D;&quot;divBox&quot;&gt;ref的调用用法&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; onMounted, reactive, ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup(props) &#123;</span><br><span class=\"line\">    let divBox &#x3D; ref(null);</span><br><span class=\"line\">    onMounted(()&#x3D;&gt;&#123;</span><br><span class=\"line\">      console.log(divBox.value) &#x2F;&#x2F;&lt;div ref&#x3D;&quot;divBox&quot;&gt;ref的调用用法&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      divBox</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">这里的onMounted与vue2中的mounted是一样的，是vue3的生命周期新用法</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2、reactive函数\"><a href=\"#2-3-2、reactive函数\" class=\"headerlink\" title=\"2.3.2、reactive函数\"></a>2.3.2、reactive函数</h4><p> reactive函数和ref作用非常接近，但是它的参数是一个对象，我们可以在对象中定义其方法，而通过这个形式，就不需要再对其进行进行.value调用了</p>\n<p> 使用示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">  &lt;button @click&#x3D;&quot;data.changeCount&quot;&gt;count is: &#123;&#123; data.count &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; reactive, ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup(props) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 定义一个data对象 </span><br><span class=\"line\">    const data &#x3D; reactive(&#123;</span><br><span class=\"line\">      count: 0,</span><br><span class=\"line\">      changeCount: () &#x3D;&gt; &#123;</span><br><span class=\"line\">        data.count++;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      data,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p> 使用reactive生成的对象也是响应式的，而且调用的时候内部不再需要通过value拿到并且更改属性，但是由于外部封装了一层对象，所以在模板中使用的时候必须要使用data.xxx进行相关的调用。</p>\n<p> PS：由于reactive返回的对象本质上已经是一个Proxy对象，所以通过…扩展符号展开的属性，是无法进行响应式的，也就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">return&#123;</span><br><span class=\"line\">\t...data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>并不能如同预期结果般起效</p>\n<p>并不能如同预期结果般起效</p>\n<p>如果实在需要使用拓展符号，需要使用toRefs这个API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;button @click&#x3D;&quot;changeCount&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123;  reactive,toRefs &#125; from &quot;vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  setup(props) &#123;</span><br><span class=\"line\">    const data &#x3D; reactive(&#123;</span><br><span class=\"line\">      count: 0,</span><br><span class=\"line\">      changeCount: () &#x3D;&gt; &#123;</span><br><span class=\"line\">        data.count++;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    const refData &#x3D; toRefs(data);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      ...refData,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-、Vue3的生命周期\"><a href=\"#2-4-、Vue3的生命周期\" class=\"headerlink\" title=\"2.4 、Vue3的生命周期\"></a>2.4 、Vue3的生命周期</h3><p>vue2的所有生命周期写法与vue3兼容</p>\n<p>而在vue3中，生命周期添加了on前缀，需要导入并写在setup()函数中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; onMounted &#125; from &quot;vue&quot;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;HelloWorld&quot;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    msg: String,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    console.log(&quot;mounted outside setup &lt;vue2&gt;&quot;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup(props) &#123;</span><br><span class=\"line\">    onMounted(() &#x3D;&gt; &#123;</span><br><span class=\"line\">\t\tconsole.log(&quot;onMounted in setup &lt;vue3&gt;&quot;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20201018134135.png\" alt=\"\"></p>\n","categories":["Vue3"],"tags":["Vue3"]},{"title":"Vue2 组件之间传值","url":"/posts/66b1cc04/","content":"<blockquote>\n<p>组件件的传值有点复杂，我在这里记录一下哈</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>Vue2.0 传值方式：</p>\n<p>在Vue的框架开发的项目过程中，经常会用到组件来管理不同的功能，有一些公共的组件会被提取出来。这时必然会产生一些疑问和需求？比如一个组件调用另一个组件作为自己的子组件，那么我们如何进行给子组件进行传值呢？如果是电商网站系统的开发，还会涉及到购物车的选项，这时候就会涉及到非父子组件传值的情况。当然你也可以用Vuex状态管理工具来实现，这部分我们后续会单独介绍。</p>\n<p>引用官网的一句话：父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息，如下图所示：</p>\n<p>接下来，我们通过实例来看可能会更明白一些：</p>\n<ol>\n<li>父组件向子组件进行传值props</li>\n</ol>\n<p>父组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    父组件:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入子组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:inputName</span>=<span class=\"string\">\"name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> child <span class=\"keyword\">from</span> <span class=\"string\">'./child'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      child</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        name: <span class=\"string\">''</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    子组件:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;inputName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 接受父组件的值</span></span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      inputName: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      required: <span class=\"literal\">true</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>子组件向父组件传值$emit,父组件通过子组件的ref属性获取值</li>\n</ol>\n<p>子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    子组件:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;childValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 定义一个子组件传值的方法 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"点击触发\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"childClick\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        childValue: <span class=\"string\">'我是子组件的数据'</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      childClick () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// childByValue是在父组件on监听的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 第二个参数this.childValue是需要传的值</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'childByValue'</span>, <span class=\"keyword\">this</span>.childValue)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    父组件:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入子组件 定义一个on的方法监听子组件的状态--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-on:childByValue</span>=<span class=\"string\">\"childByValue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> child <span class=\"keyword\">from</span> <span class=\"string\">'./child'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      child</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        name: <span class=\"string\">''</span></span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      childByValue: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(childValue)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// childValue就是子组件传过来的值</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.name = childValue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>尽管有 prop 和事件，但是有时仍然需要在 JavaScript 中直接访问子组件。<br>为此可以使用 ref 为子组件指定一个引用 ID。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">user-profile</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"profile\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user-profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">var parent = new Vue(&#123; el: '#parent' &#125;)</span><br><span class=\"line\">// 访问子组件实例</span><br><span class=\"line\">var child = parent.$refs.profile</span><br></pre></td></tr></table></figure>\n\n<p>当 ref 和 v-for 一起使用时，获取到的引用会是一个数组，包含和循环数据源对<br>应的子组件。<br>$refs 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅是一个直接<br>操作子组件的<br>应急方案——应当避免在模板或计算属性中使用 $refs。</p>\n<p>具体使用方法：</p>\n<p>父组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; a &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"getchild\"</span>&gt;</span>通过ref得到子组件的值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">three</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"mesage\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> three <span class=\"keyword\">from</span> <span class=\"string\">'./components/three'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    three,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      a:<span class=\"string\">'我是父组件'</span>,</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    getchild()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t   <span class=\"comment\">// 通过this.$refs调用</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$refs.mesage.mes)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<p>子组件： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three\"</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;mes&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">\t  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">\t    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t        mes:<span class=\"string\">'666'</span></span></span><br><span class=\"line\">\t    &#125;;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<ol start=\"3\">\n<li>事件总线 $emit　/ $on</li>\n</ol>\n<p>非父子组件之间传值，需要定义个公共的公共实例文件bus.js，作为中间仓库来传值，不然路由组件之间达不到传值的效果。这种方法通过一个空的Vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件,巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。当我们的项目比较大时，可以选择更好的状态管理解决方案vuex。</p>\n<p>公共bus.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;bus.js</span><br><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">export default new Vue()</span><br></pre></td></tr></table></figure>\n\n<p>组件A：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    A组件:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;elementValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"点击触发\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"elementByValue\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 引入公共的bug，来做为中间传达的工具</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> Bus <span class=\"keyword\">from</span> <span class=\"string\">'./bus.js'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        elementValue: 4</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      elementByValue: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        Bus.$emit(<span class=\"string\">'val'</span>, <span class=\"keyword\">this</span>.elementValue)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>组件B：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    B组件:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"点击触发\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"getData\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> Bus <span class=\"keyword\">from</span> <span class=\"string\">'./bus.js'</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">        name: 0</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">    mounted: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// 用$on事件来接收参数</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      Bus.$on(<span class=\"string\">'val'</span>, (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(data)</span></span><br><span class=\"line\">        vm.name = data</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">      getData: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">this</span>.name++</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>利用vuex</li>\n</ol>\n<p>（1）简要介绍Vuex原理</p>\n<p>Vuex实现了一个单向数据流，在全局拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过Mutation来修改State的数据。最后，根据State的变化，渲染到视图上。</p>\n<p>（2）简要介绍各模块在流程中的功能：</p>\n<p>Vue Components：Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。</p>\n<p>dispatch：操作行为触发方法，是唯一能执行action的方法。</p>\n<p>actions：操作行为处理模块,由组件中的 $store.dispatch(‘action 名称’,data1)来触发。然后由commit()来触发mutation的调用 , 间接更新 state。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。</p>\n<p>commit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。</p>\n<p>mutations：状态改变操作方法，由actions中的 commit(‘mutation 名称’)来触发。是Vuex修改state的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。</p>\n<p>state：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。</p>\n<p>getters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。</p>\n<p>5.Vuex与localStorage<br>vuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，具体做法应该在vuex里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来再替换store里的state。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">let defaultCity = \"北京\"</span><br><span class=\"line\">try &#123;   </span><br><span class=\"line\">// 用户关闭了本地存储功能，此时在外层加个try...catch</span><br><span class=\"line\">if(!defaultCity)&#123;</span><br><span class=\"line\">    defaultCity = JSON.parse(window.localStorage.getItem('defaultCity'))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;catch(e)&#123;&#125;</span><br><span class=\"line\">export default</span><br><span class=\"line\"> new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    city: defaultCity</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    changeCity(state, city) &#123;</span><br><span class=\"line\">      state.city = city</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        window.localStorage.setItem('defaultCity', JSON.stringify(state.city));   </span><br><span class=\"line\">        // 数据改变的时候把数据拷贝一份保存到localStorage里面</span><br><span class=\"line\">     &#125; catch(e) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<p>这里需要注意的是：由于vuex里，我们保存的状态，都是数组，而localStorage只支持字符串，所以需要用JSON转换：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">JSON.stringify(state.subscribeList);   </span><br><span class=\"line\">// array -&gt; string</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.parse(window.localStorage.getItem(\"subscribeList\"));    </span><br><span class=\"line\">// string -&gt; array</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"6\">\n<li>$attrs　/ $listeners</li>\n<li>简介</li>\n</ol>\n<p>多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此Vue2.4 版本提供了另一种方法—- $attrs/ $listeners</p>\n<p>$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 interitAttrs 选项一起使用。</p>\n<p>$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件接下来我们看个跨级通信的例子：</p>\n<p>//index.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>浪里行舟<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-com1</span> <span class=\"attr\">:foo</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">:boo</span>=<span class=\"string\">\"boo\"</span> <span class=\"attr\">:coo</span>=<span class=\"string\">\"coo\"</span> <span class=\"attr\">:doo</span>=<span class=\"string\">\"doo\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"前端工匠\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-com1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> childCom1 <span class=\"keyword\">from</span> <span class=\"string\">\"./childCom1.vue\"</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components: &#123;childCom1&#125;,</span><br><span class=\"line\">    data ()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            foo：<span class=\"string\">\"javascript\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            boo: <span class=\"string\">\"Html\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            coo: <span class=\"string\">\"Css\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            doo: <span class=\"string\">\"Vue\"</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>//childCom1.vue</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>foo:&#123;&#123;foo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>childCom1的$attrs:&#123;&#123;$attrs&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-com2</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-com2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> childCom2 <span class=\"keyword\">from</span> <span class=\"string\">\"./childCom2.vue\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components:&#123; childCom2 &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">    inheritAttrs:<span class=\"literal\">false</span>,<span class=\"comment\">//可以关闭自动挂载到组件跟元素上的没有在props声明的属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">    props: &#123; <span class=\"attr\">foo</span>: <span class=\"built_in\">String</span> &#125;,<span class=\"comment\">// foo作为props属性绑定</span></span></span><br><span class=\"line\"><span class=\"javascript\">    created() &#123; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$attrs); <span class=\"comment\">// &#123; \"boo\": \"Html\", \"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" &#125;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>//childCom2.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>boo:&#123;&#123;boo&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>childCom2的$attrs:&#123;&#123;$attrs&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">child-com3</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">\"$attrs\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child-com3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> childCom3 <span class=\"keyword\">from</span> <span class=\"string\">\"./childCom3.vue\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">    components:&#123; childCom3 &#125;,</span><br><span class=\"line\"><span class=\"actionscript\">    inheritAttrs:<span class=\"literal\">false</span>,<span class=\"comment\">//可以关闭自动挂载到组件跟元素上的没有在props声明的属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">    props: &#123; <span class=\"attr\">foo</span>: <span class=\"built_in\">String</span> &#125;,<span class=\"comment\">// foo作为props属性绑定</span></span></span><br><span class=\"line\"><span class=\"javascript\">    created() &#123; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.$attrs); <span class=\"comment\">// &#123; \"boo\": \"Html\", \"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" &#125;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>// childCom3.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>childCom3: &#123;&#123; $attrs &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</span></span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\"><span class=\"javascript\">    coo: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    title: <span class=\"built_in\">String</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如上图所示 $attrs表示没有继承数据的对象，格式为{属性名：属性值}。Vue2.4提供了 $attrs ,$listeners 来传递数据与事件，跨级组件之间的通讯变得更简单。</p>\n<p>简单来说： $attrs与 $listeners 是两个对象， $attrs 里存放的是父组件中绑定的非 Props 属性， $listeners里存放的是父组件中绑定的非原生事件。</p>\n<p>7.provide/inject<br>1.简介</p>\n<p>Vue2.2.0新增API,这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。一言而蔽之：祖先组件中通过provider来提供变量，然后在子孙组件中通过inject来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p>\n<p>2.举个例子</p>\n<p>假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; A.vue</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">  provide: &#123;    name: &#39;浪里行舟&#39;  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; B.vue</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  inject: [&#39;name&#39;],</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    console.log(this.name); &#x2F;&#x2F; 浪里行舟</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>可以看到，在 A.vue 里，我们设置了一个 provide: name，值为 浪里行舟，它的作用就是将 name 这个变量提供给它的所有子组件。而在 B.vue 中，通过 inject 注入了从 A 组件中提供的 name 变量，那么在组件 B 中，就可以直接通过 this.name 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。</p>\n<p>需要注意的是：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的—-vue官方文档 所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 浪里行舟。</p>\n<p>3.provide与inject 怎么实现数据响应式</p>\n<p>一般来说，有两种办法：</p>\n<p>provide祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如props，methods</p>\n<p>使用2.6最新API Vue.observable 优化响应式 provide(推荐)</p>\n<p>我们来看个例子：孙组件D、E和F获取A组件传递过来的color值，并能实现数据响应式变化，即A组件的color变化后，组件D、E、F不会跟着变（核心代码如下：）</p>\n<p>// A 组件 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">      &lt;h1&gt;A 组件&lt;&#x2F;h1&gt;</span><br><span class=\"line\">      &lt;button @click&#x3D;&quot;() &#x3D;&gt; changeColor()&quot;&gt;改变color&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;ChildrenB&#x2F;&gt;&lt;ChildrenC&#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">  data() &#123;   </span><br><span class=\"line\">    return</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        color: &quot;blue&quot;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; provide() &#123;</span><br><span class=\"line\">&#x2F;&#x2F;   return &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     theme: &#123;</span><br><span class=\"line\">&#x2F;&#x2F;       color: this.color &#x2F;&#x2F;这种方式绑定的数据并不是可响应的</span><br><span class=\"line\">&#x2F;&#x2F;     &#125; &#x2F;&#x2F; 即A组件的color变化后，组件D、E、F不会跟着变 </span><br><span class=\"line\">&#x2F;&#x2F;   &#125;;</span><br><span class=\"line\">&#x2F;&#x2F; &#125;,</span><br><span class=\"line\">  provide() &#123; </span><br><span class=\"line\">    return&#123;</span><br><span class=\"line\">      theme: this&#x2F;&#x2F;方法一：提供祖先组件的实例</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    changeColor(color) &#123;  </span><br><span class=\"line\">    if(color) &#123;     </span><br><span class=\"line\">        this.color &#x3D; color;</span><br><span class=\"line\">    &#125; else&#123;      </span><br><span class=\"line\">        this.color &#x3D; this.color &#x3D;&#x3D;&#x3D; &quot;blue&quot;? &quot;red&quot;: &quot;blue&quot;;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#x2F;&#x2F; 方法二:使用vue2.6最新API Vue.observable 优化响应式 provide</span><br><span class=\"line\">&#x2F;&#x2F; provide() &#123;</span><br><span class=\"line\">&#x2F;&#x2F;   this.theme &#x3D; Vue.observable(&#123;</span><br><span class=\"line\">&#x2F;&#x2F;     color: &quot;blue&quot;</span><br><span class=\"line\">&#x2F;&#x2F;   &#125;);</span><br><span class=\"line\">&#x2F;&#x2F;   return &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     theme: this.theme</span><br><span class=\"line\">&#x2F;&#x2F;   &#125;;</span><br><span class=\"line\">&#x2F;&#x2F; &#125;,</span><br><span class=\"line\">&#x2F;&#x2F; methods: &#123;</span><br><span class=\"line\">&#x2F;&#x2F;   changeColor(color) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     if (color) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;       this.theme.color &#x3D; color;</span><br><span class=\"line\">&#x2F;&#x2F;     &#125; else &#123;</span><br><span class=\"line\">&#x2F;&#x2F;       this.theme.color &#x3D; this.theme.color &#x3D;&#x3D;&#x3D; &quot;blue&quot; ? &quot;red&quot; : &quot;blue&quot;;</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;</span><br><span class=\"line\">&#x2F;&#x2F;   &#125;  </span><br><span class=\"line\">&#x2F;&#x2F; &#125;</span><br><span class=\"line\">&#x2F;&#x2F; F 组件 </span><br><span class=\"line\">&lt;template functional&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;border2&quot;&gt;</span><br><span class=\"line\">    &lt;h3 :style&#x3D;&quot;&#123; color: injections.theme.color &#125;&quot;&gt;F 组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  inject: &#123;</span><br><span class=\"line\">  theme: &#123;   </span><br><span class=\"line\"> &#x2F;&#x2F;函数式组件取值不一样     </span><br><span class=\"line\">    default: () &#x3D;&gt; (&#123;&#125;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>虽说provide 和 inject 主要为高阶插件/组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！</p>\n<ol start=\"8\">\n<li>$parent / $children　＆ ref<br>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li>\n</ol>\n<p>$parent / $children：访问父 / 子实例</p>\n<p>需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 ref来访问组件的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">// component-a 子组件</span><br><span class=\"line\">export default</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  data () &#123;   </span><br><span class=\"line\">    return</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         title: 'Vue.js'</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    sayHello () &#123;</span><br><span class=\"line\">      window.alert('Hello');</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 父组件</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component-a</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"comA\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span></span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">    mounted () &#123;    </span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> comA = <span class=\"keyword\">this</span>.$refs.comA;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(comA.title);  <span class=\"comment\">// Vue.js</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        comA.sayHello();  <span class=\"comment\">// 弹窗</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不过，这两种方法的弊端是，无法在跨级或兄弟间通信。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">// parent.vue</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component-a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component-b</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component-b</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。</p>\n<p>总结<br>常见使用场景可以分为三类：</p>\n<p>父子通信： 父向子传递数据是通过 props，子向父是通过 events（ $emit）；通过父链 / 子链也可以通信（ $parent / $children）；ref 也可以访问组件实例；provide / inject API； $attrs/$listeners</p>\n<p>兄弟通信： Bus；Vuex</p>\n<p>跨级通信： Bus；Vuex；provide / inject API、 $attrs/$listeners</p>\n","categories":["Vue"],"tags":["Vue"]},{"title":"告白气球","url":"/posts/26c2708e/","content":"<blockquote>\n<p>我之所以这么待你，是因为我愿意。若能以此换回同样的诚心，固然可喜。若是没有，我也没有什么可后悔的。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>我以为我可以表完白之后可以轻松地放下，没想到所有地一切都只是我的单相思。</p>\n<p>哼哼哼</p>\n<p>原来伤心事这一种感觉，，，，，，，，，</p>\n<p>既然一切都透明了， 那我也没必要了！！！！！</p>\n<p>再见吧！黄李雪！！！！</p>\n<p>我发现可能只有时间才能够磨灭这一切吧！！！！！</p>\n<p>再见了！！！！</p>\n<p>既然说出来了，那分离也就彻底一点吧！</p>\n<p>我不想了！！！</p>\n<p>TMD！！！现在被这种乱七八杂地事情搞得心很乱。</p>\n<p>虽然说明面上说我不在意，但只有我一个人知道是不是不在意啊。。。。。。。</p>\n<p>既然下定决心了，那就拜拜吧！！！！！</p>\n<p>绝交吧，我不想了，好烦的，你知道嘛？？？？？？/</p>\n","categories":["随笔"],"tags":["随笔"]},{"title":"量化交易之指数增强策略","url":"/posts/12250db1/","content":"<blockquote>\n<p>不断地学习，才能使我们变得更加强大</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>指数增强策略概念：指数增强策略是以对标的股市基准指数（如沪深300、中证500、中证1000）作为参考，在追踪对标股市基准指数的前提下，利用量化投资的方式进行主动管理，以获得市场收益（Beta）的同时获取超越市场超额收益（Alpha）的一种资产组合策略。还是看不懂吧？那就认真看。</p>\n<p>指数增强的收益来源主要有两方面：</p>\n<p>1.通过量化选股模型构造追踪标的指数的股票组合，以追踪市场指数获得市场收益。（结果便是保持与市场同涨同跌）</p>\n<p>2.通过利用多因子选股、打新、择时、日内高频交易等增强操作获得超越市场收益的超额收益。（结果是在保持与市场同涨同跌的基础上，涨的时候比市场涨得多一些，跌的时候跌的时候比市场跌得少一些）以上为指数增强策略的相关概念，通俗地一句话总结指数增强策略基金就是追踪指数，指数涨它也涨且比指数涨得多，指数跌它也跌，但比指数跌得少的基金。</p>\n<p>如何挑选合适自己风险偏好的指数增强基金，这次会做一个全面的分享。</p>\n<p><strong>一、指数概念及相关回顾</strong>（本段落以科普为主，资深投资者可跳过至下一段）</p>\n<p> 首先在搞清楚指数增强基金是什么之前，选择指数增强基金时，投资者需要搞清楚什么是指数？平常新闻里常说的沪深300指数/中证500指数/中证1000指数是什么？这是首要了解。</p>\n<p>以二级市场股票为例，经常听说有个词叫“行情”，A股为例3000多支票，再差的行情也会有涨停的票，再好的行情也有跌停的票。那么如何客观地衡量在某一时段行情“好”还是“坏”，如何衡量我国股市当天各个板块是上涨的还是下跌的呢，这很简单，我们需要一些指标，用这些不同的指标来代表不同类型、不同板块的股票，来总结当日行情，这就是指数。</p>\n<p>以下仅列举几个最常见、最常被指数增强基金选择作为追踪标的的指数，并作简要解析：</p>\n<p><strong>1.沪深300</strong></p>\n<p>沪深300指数由上海和深圳证券市场中市值大、流动性好的300只股票组成，综合反映中国A股市场上市股票价格的整体表现。通俗地理解，沪深300指数就是我国A股3000多支股票中，综合排名前300支股票。也就是我们所说的大蓝筹、大票。在沪深300指数成分中，成分占比排在前列的行业板块为：金融、食品饮料、家用电器、工业。目前（2018.8）排在前列的权重股有中国平安、招商银行、贵州茅台等，都是各领域中的龙头企业。目前沪深300总市值约35万亿人民币。从2005年至2018年5月沪深300涨幅年均13.55% 如图所示，沪深300指数前十大权重股权重占沪深300整体权重23.86%，集中度较高。</p>\n<p><strong>2.中证500</strong></p>\n<p>中证500指数由全部A股中剔除沪深300指数成份股及总市值排名前300名的股票后，总市值排名靠前的500只股票组成，综合反映中国A股市场中一批中小市值公司的股票价格表现。中证500指数就是我国3000多支股票中，除去上面沪深300那300支股票，综合排名在第301~800名的500支股票。在中证500指数里的股票大多是次蓝筹，也就是所谓的行业老二，或某些新兴产业、化工、医药的龙头。特点是成长性强，更有上升空间，更有活力。所以股价波动也会较沪深300更大一些。在中证500指数成分中，成分占比排在前列的行业板块为：医药、计算机、化工。目前（2018.8）排在前列的权重股有科伦医药、方大炭素、中国巨石等。目前中证500总市值约8.1万亿人民币。从2005年至2018年5月中证500涨幅年均21% 如图所示，中证500指数前十大权重股权重占中证500整体权重6.29%，相对沪深300十大权重，中证500十大权重集中度较分散。</p>\n<p><strong>3.中证1000</strong></p>\n<p>中证1000指数由全部A股中剔除沪深300 中证500指数成份股后，选取规模偏小且流动性好的1000只股票组成，综合反映中国A股市场中一批小市值公司的股票价格表现。中证1000指数就是我国3000多支股票中，除去上面沪深300 中证500那800支票，综合排名在第801~1800名的1000支股票。在中证1000指数里的股票大多是极具成长性的潜力股，成长性强，空间大，股价波动也较大。在中证1000指数成分中，成分占比排在前列的行业板块与中证500相似，成分占比排在前列的行业也是医药、计算机、化工等，但中证1000成分行业更加分散。（2018.8）排在前列的权重股有万达信息、水井坊、华帝股份等。</p>\n<p>目前中证1000总市值约8.3万亿人民币。从2005年至2018年5月中证1000涨幅年均23% 如图所示，中证1000指数前十大权重股权重占中证1000整体权重3.65%，相对沪深300和中证500十大权重，中证1000十大权重集中度最为分散。</p>\n<p>以上就是几个国内指数增强策略基金最常用作追踪基准的指数，这些指数起着风向标的作用。如果是一个初入门的投资者，那么可以简单这么理解，沪深300代表蓝筹股（大票），中证500代表成长股（中小票），中证1000代表潜力股（小票）。</p>\n<p><strong>二、指数增强基金配置**</strong>建议**</p>\n<p>在明晰了指数增强策略的概念和各指数的概念及情况后，投资者接下来需要考虑的是选择哪个指数为追踪基准？</p>\n<p>（1）如果资金允许的情况下，目前当以1:2:1的比例配置沪深300、中证500、中证1000。</p>\n<p>（2）而如果资金有限，只能配置1支指数增强策略基金。在那支指数增强策略基金超额收益有20%以上的情况下，那么目前我首推在5800-6100点位置大方配置中证500；对于流动性能接受2年以上且风格上还是比较偏保守的投资人，可能沪深300是最好的选择；对于流动性完全没有要求，就纯粹看收益的高风险偏好投资人，则应在当前时点布局中证1000。</p>\n<p>如此配置的原因，总结为一句话便是：“白马基本面不差，成长创业估值不高。”以下便分别说明各指数的配置逻辑。</p>\n<p><strong>1.中证500</strong></p>\n<p>首推的中证500，首先从中证500成分股来看，中证500指数成分股集中了多数新兴行业细分领域中的头部企业，从基本面上获得一定支撑。其中小市值和成长特性使得中证500在遇到行情时，上涨空间通常也更大。</p>\n<p> 而且另外一个比较关键点在于目前中证500PE处于历史相对低位，具有较高投资性价比。可以了解在15年行情到来时，以中证500为代表的中小盘估值弹性都得到抬升，中证500PE/沪深300PE的比值也将得到明显的抬升，通常在3.5~4区间。而目前该比值在相对较低的2位置左右徘徊，中证500市盈率也在相对历史较低位置，故当前时点配置中证500有较高配置价值。</p>\n<p><strong>2.沪深300</strong></p>\n<p>沪深300全部成分股市值便占A股全股市的55%以上，选择沪深300本质便是选择未来中国经济的良好发展预期。沪深300相对中证500、中证1000而言波动率最低。2017年以来，沪深300稳步上涨，直到2018年春节前一波杀跌，随后迎来宽幅震荡。而目前沪深300PE已经回到16年年初阶段，当前宏观增长平稳，白马们基本面不差，盈利增长保持平稳的情况下，沪深300实质的性价比至少要比此前更高。故长期来看，沪深300在目前出清落后产能，集聚龙头效应的大背景下，会获得真正意义上的优质企业价值的回报。</p>\n<p><strong>3.中证1000</strong></p>\n<p>当前时点布局中证1000是较为典型的左侧交易行为，目前中证1000市盈率在31~33倍左右，仅比历史最低值31倍高一点点，是历史均值69倍的49%，也低于创业板指45倍水平。而市净率在2.6倍左右，也仅比历史最低值2.5倍高一点点，是历史均值4倍的68%所以总得来说中证1000指数进入了历史上的相对低估区间（中证1000市盈率历史上仅有6%不到的时间低于当前市盈率），所以是极好的建仓时点。中证1000目前处于估值洼地，继续下行空间有限，而又因为其小盘指数高波动的特征，再加上中证1000指数权重行业较分散，多为计算机、医药、电子、化工、机械设备、传媒、有色金属等，当中孕包含了不少新技术、新产业如人工智能、生物技术、高端制造和云计算等潜力股。因此在处于历史底部的时候布局，可获得极为广阔的上涨获利空间。</p>\n<p><strong>三、指数增强策略基金的市场收益（Beta收益）与超额收益（Alpha收益）</strong></p>\n<p>依据自己的风险偏好及收益需求，选择了合适自己的指数作追踪基准指数后，那么接下来投资人只需要跟据：</p>\n<p>①备选基金的超额收益（Alpha收益） </p>\n<p>②备选基金的流动性</p>\n<p>两个综合衡量，选择出最令自己满意的指数增强基金。</p>\n<p>总得来说一句话便是,投资人要衡量最终选择一支：超额收益尽量高且稳定，流动性尽量好，且业绩报酬等相关费用相对较低的指数增强基金。几乎不可能存在这种三方面都绝对优势的基金，例如通常流动性极好的指数增强基金可能在超额收益上会略低一些，这时投资人要考量的便是是否愿意为那几个点的超额收益去换取一个相对较为灵活的加仓时点和自我择时空间自由度的问题。</p>\n<p>1.超额收益（Alpha收益）</p>\n<p>超额收益（Alpha收益）概念：所持仓股票收益与大盘指数收益的差值。</p>\n<p>超额收益是衡量一支指数增强基金优劣的关键所在，如果一支指数增强基金没有超额收益，那它则只是普通的一支指数基金。</p>\n<p>举个例子 </p>\n<p>如果你有一位朋友，在2017年炒股，而他挑选的股票均为沪深300里面的成分股，他在里面挑选出自己的股票组合，一年后获得30%的收益。假设他100万入市，而一年后则赚了30万。这时问题来了，你觉得这30%的收益里面有多少是这位朋友的真正实力呢？虽然不是特别地严谨，但确实可以简单地理解为6%</p>\n<p>2017年由于白马蓝筹行情，沪深300指数上涨了约24%，以上这位朋友在2017年在沪深300中选择投资标的，这24%便可以理解为市场收益，而30%-24%=6%则是他的超额收益。</p>\n<p>在像美国这种以机构资金为主的成熟市场，其实他们量化机构的超额收益在3%左右的范围，每年能够获得3%的超额收益已经不错了。但在中国市场，目前顶级的量化私募机构每年平均下来仍能获得20%~30%的超额收益（股指期货受限前其实更高）。这种现象主要来自于中国虽也慢慢朝机构化发展，但目前仍是散户式的股市参与者构成。中国市场和成熟市场最大的区别就是会以散户、部分大客户为主来驱动，这意味着市场具有较强的羊群效应，会形成一些非理性波动。这些非理性波动就很容易被量化模型捕捉，从而获得可观的超额收益。</p>\n<p>超额收益来源：</p>\n<p>①量化选股</p>\n<p>收集极大量的历史数据，筛选股价变动的影响作为各个因子，通过数据挖掘等方法分析股价波动的逻辑和数据相印证后引入量化模型，并在一系列标准化和中性化处理后，尽力最小化市场整体变动给股票组合带来的回撤风险。同时，还会从投资者行为、事件等处罚，通过监控市场价格暂时偏离信号或历史回测，寻求同类股票中的统计套利机会和事件驱动出现的超额收益机会。</p>\n<p>②线下打新</p>\n<p>指数增强基金由于追踪指数，所以基本都是满仓运作。而其市值满足线下打新的门槛（目前是6000万），直接递材料线下打新流程（线下打新概率比线上高的），便能赚取这一部分收益。而量化投顾通常都有盘子比较小的特点，所以本来一年15%收益能附加上3-5%一年的打新部分贡献的增强收益，那么是十分可观的。而往往盘子比较大的主观股票多头策略私募，虽然也做线下打新，但由于盘子比较大，也即分母比较大，收益对产品本身体现不明显，所以线下打新主要做辅助手段。故量化投顾对线下打新更有动力。</p>\n<p>③日内交易</p>\n<p>在量化选股底仓上，进行日内交易操作，利用大概率统计高频套利，顶级的量化投顾可以做到接近于0的回撤。另外做个补充，量化机构的抢单的速度是以“微秒”（1,000,000 微秒 = 1秒）、“毫秒”（1,000豪秒 = 1秒）来计算的，远高于散户甚至一些机构，也就是说平常我们炒股软件上看到的价已经是这些量化机构“收割”完的价格了，真正意义上的收割机。</p>\n<p>2.流动性</p>\n<p>流动性对于主观股票多头策略来说实质上重要性并不高，资深的投资人都应该明白持有一支主观股票多头策略的基金，怎么也要半年才好评论该基金近期运作的情况，至少也要2年才能说得上较为客观地评论该基金的整体综合实力。</p>\n<p>但对于指数增强基金而言，由于基础在于追踪指数，所以流动性也是较为重要的考察指标。因为如果流动性能做到每天或每周，那么投资者就能获得较大操作空间。例如在市场突然出现因情绪面导致的下行行情时，投资者可以及时在低位补仓而抹平亏损；在高位时也可以主动择时，使得投资者逃顶变为可能。当然，一般流动性极好的基金在超额收益上通常会略低于流动性没那么好的基金，因为他们通常需要留出一部分仓位来应对开放日投资者赎回所用。这时便像上文提到的，投资者是否愿意为那几个点的超额收益去换取一个相对较为灵活的加仓时点和自我择时空间自由度的问题了。市场也不可能存在一个绝对十全十美的基金。</p>\n<p> <strong>一些建议</strong></p>\n<p>对于初入门做证券市场投资或者新尝试买基金的朋友来说，或许都遇到过“买前明明都在涨，买进就跌得一塌糊涂。”之类的迷局，甚至会怀疑证券市场是否是一场骗局。但这是一种错觉，之所以会使得初进入市场产生这种错觉的原因，我认为至少有四点：</p>\n<p>（一）市场信息的不对称</p>\n<p>（二）绝大部分的初入门投资者起初做的都是右侧交易</p>\n<p>（三）预期收益不合理</p>\n<p>（四）频繁操作</p>\n<p>信息不对称是证券交易市场特点之一，同时也是投资者回报来源之一，各大机构也是赚着信息不对称的钱。但也正因如此，大部分投资者的心理都会存在于一个相对被动、紧张的环境中，因为就算一个资产量很大的实体企业家，都很难说对金融市场十分了解、熟悉，而在这么一个环境中，再加上因为监管的要求不可能投顾对每个投资者都能做到极其详尽的汇报和披露，这便更加加剧了初入门投资者的不安感。</p>\n<p>就以2018年春节前的杀跌为例，大盘跌了约12%。此时如果你持有一支股票多头基金，他的净值回撤在15%-20%，那你是完全接受不了的，因为你会认为他完全没跑赢大盘，还不如买指数。如果净值回撤在10%，相信你是能接受的，但并不满意；只有净值回撤在5%-7%甚至更少，那你才会比较满意。同理，在上涨行情中，若大盘涨了10%，而你选择的基金只涨了2%、横盘不动或继续回撤，那相信你也不能接受。在这种时候你心中肯定有很多疑问，是否基金经理水平有限，是否投顾本身出了什么变动影响了他决策，你会推翻以往你对该基金的所有好感和认可，甚至你还会怀疑当中是否存在一些猫腻和台下交易。</p>\n<p>但在此希望告诉各位基金没能跑赢大盘，实质没有那么多“心理戏”，是常见、正常的事情。大家常用大盘指数来作为指标对比基金，但指数相当于是永恒满仓运作的，而主观股票多头策略基金的仓位则会随基金经理的主观判断动态变化。例如在极端行情中，基金净值以满仓随市场下行而回撤，而此时基金经理为了控制基金最大回撤，采取了风控及时止损，这会使得基金仓位降低（例如从原来的满仓降低至4成），而若未来行情反弹，那么基金便只有4成仓位反弹了，但指数则相当于一直满仓，这便会出现基金跑不赢指数的情况。所以此时投资者更多要客观考察的是该投顾是否正确采取风控措施，或是已风格漂移，而绝非仅以指数一个指标去衡量批判，这也有失公允。</p>\n<p>除了市场信息不对称使得投资者安全感缺失外，习惯右侧交易也是初入门的投资者在做证券市场投资后遇到迷局的原因。在普通投资者中做右侧交易的绝对是比左侧交易要多得多的，本文并非讨论右侧交易和左侧交易孰优孰劣的问题，只是若初入门的投资人做右侧交易时天然便会缺失一定的安全边际，当然也会有朋友说点位高低是相对的，例如在5000点的时候看3500点那便低了，在2800点的时候看3500点便是高点，进入时的点位高还是低根本很难有一个明确的评判标准。这点我是认同的，哪怕像上面用市盈率、历史分位去衡量都不能说这是一个绝对明确的指标，都只是“仅供参考”。以中证1000为例，当历史上仅有5%的时间是低于当前时，做一笔长期来看有95%胜率的投资，至少我认为相对而言，这笔投资性价比极高。</p>\n<p>而关于“预期收益过高”和“频繁操作”这两点，也能就我这些年的经验给大家一个分享，供大家做一个参考。以长期10年甚至20年来看，如果你手上持有不算太差的股票，或者选择了一个靠谱的一二级市场投顾的话，你的收益并不会比房地产差的，甚至超过房地产投资，例如你十年前买了腾讯、茅台，又或者你十年前股票多头策略的投顾选了景林、源乐晟、保银等等。通常顶级的二级市场主观股票多头策略投顾以十年来看，算回来年化收益大约在20~25%左右，算上复利差不多就十年十倍。而有趣的是，顶级的一级市场投顾，收益也差不多在十年十倍左右。<em>所以只要坚守价值投资，长期掌握核心资产，做一个真正价值投资者而非“价值投机者”</em>，其实一二级市场长期来看总会给出不错的回报。而对于那些号称“一年翻倍”的收益预期（当然，主观期货策略是可以达到的）或是快进快出的投资人，可能更多的便需要运气之神的眷顾了。</p>\n<p>写在最后</p>\n<p>《聪明的投资者》巴菲特序言有写：“巴菲特从来不推荐买入任何股票，过去的20年却10次推荐指数基金，对于绝大数投资者来说，成本费率低的指数基金就是股票投资的最佳选择，导师格雷厄姆在很多年前就坚持这样的立场，而此后巴菲特的经历进一步的证实了这一看法的真实可靠性”看完有感，几乎所有的骨灰级投资家都建议投资者，最简单的跑赢指数通胀或者享受复利的方法，就是买指数基金，但是很少有人真的遵循这个建议，投资者更喜欢每天看盘、操作、买进卖出看上去很勤奋，其实这种勤快的做法是在增加对陌生系统的接触频率，目的是消除焦虑。</p>\n","categories":["量化交易"],"tags":["量化交易"]},{"title":"量化交易之双均线策略","url":"/posts/47dacea4/","content":"<blockquote>\n<p>在恐慌中买入，在开心中卖出</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>　　双均线策略，通过建立m天移动平均线，n天移动平均线，则这两条均线必有交点。若m&gt;n，n天平均线“上穿越”m天均线则为买入点，反之为卖点。该策略基于不同天数均线的交叉点，抓住股票的强势和弱势时刻，进行交易。</p>\n<p>　　对于每一个交易日，都可以计算出前N天的移动平均值，然后把这些移动平均值连起来，成为一条线，就叫做N日移动平均线。一般由5日均线（MA5），10日均线（MA10）</p>\n<p>　　比如前5个交易日的收盘价分别为10,9,9,10,11元，那么，5日的移动平均股价为9.8元。同理，如果下一个交易日的收盘价为12，那么在下一次计算移动平均值的时候，需要计算9,9,10,11,12元的平均值，也就是10.2元。将这平均值连起来，就是均线。</p>\n<p>　　如下图，收盘价是蓝线，橙色的线表示5日的移动平均线。</p>\n<p><img src=\"https://img2020.cnblogs.com/i-beta/1059417/202003/1059417-20200305124251746-1394085995.png\" alt=\"img\"></p>\n<p> 　可以看到股票价格的波动比5天均线的波动要大，这是因为5天均线取的是前5个交易日的均值，相当于做了一个平滑</p>\n<h3 id=\"双均线\"><a href=\"#双均线\" class=\"headerlink\" title=\"双均线\"></a>双均线</h3><p>　　股名思义，就是两条天数不同的移动平均线，比如，一天是5日的移动平均线，另一条是10日的移动平均线。如图，蓝色是5天均线，黄色为10日均线</p>\n<p><img src=\"https://img2020.cnblogs.com/i-beta/1059417/202003/1059417-20200305124638651-1738032357.png\" alt=\"img\"></p>\n<h3 id=\"金叉和死叉\"><a href=\"#金叉和死叉\" class=\"headerlink\" title=\"金叉和死叉\"></a>金叉和死叉</h3><p>　　由时间短的均线（如上图蓝色的线）在下方向上穿越时间长一点的均线（如上图黄色的线），为金叉，反之为死叉</p>\n<h3 id=\"双均线策略\"><a href=\"#双均线策略\" class=\"headerlink\" title=\"双均线策略\"></a>双均线策略</h3><p>　　构建一个简单的策略：认为双均线金叉的时候，表示股票很强势，反之很弱势，那么我们就在强势的时候买入，弱势的时候卖出即可</p>\n","categories":["量化交易"],"tags":["量化交易","交易策略"]},{"title":"国庆假日","url":"/posts/79de6f34/","content":"<blockquote>\n<p>山河远阔，人间星河，无一是你，无一不是你。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<img src=\"http://photo.jomeswang.top/20201005154831.jpg\" style=\"zoom:33%;\" />\n\n<p>我突然发现我喜欢上你了哎，怎么办啊！！！心好乱啊！！！</p>\n<p>怎么办 啊啊 怎么办啊 啊   我不知道什么时候那颗心因你而悸动。</p>\n<p>我害怕我将这个窗户纸搓破，我害怕你以后都不理我啊！！！！</p>\n<p>我好怂啊    </p>\n<p>怎么办啊</p>\n<p>我想起当时你和我聊天的时候，说有一个xgg问你拿微信， 我当时真的非常害怕啊。害怕你在我做出决定前就被别人抢走了啊！！！</p>\n<p>那时我的心好乱啊</p>\n<p>不知道怎么和你说啊！！！！！！！</p>\n<p>好烦啊不管了  如果下次我认为你也对我有意思，我直接表白好嘛？？？？？？？？？？？？？？？？？？？</p>\n<p>不管结果怎么样，我希望我人生不会后悔！！！！！！！！！！</p>\n<p>好的，就决定了哈！！！</p>\n<p>那我们继续努力学习，共同成长吧！！！！</p>\n<p><img src=\"http://photo.jomeswang.top/20201005171033.jpg\" alt=\"\"></p>\n<p>我不知道你是什么心情啊！！！！</p>\n<p>希望岁月静好，你我相聚一日。</p>\n","categories":["随笔"]},{"title":"git 初步使用","url":"/posts/595a2712/","content":"<blockquote>\n<p>团队协作使用Git   !!!!</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：配置SSH\"><a href=\"#一：配置SSH\" class=\"headerlink\" title=\"一：配置SSH\"></a>一：配置SSH</h2><p>一、登录GitHub，新建一个仓库，进入仓库，我们会注意到，GitHub给出的地址不止一个，还可以用https这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。但是使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。</p>\n<p><img src=\"http://photo.jomeswang.top/20200922222529.png\" alt=\"\"></p>\n<p>二、复制SSH链接，在git bash输入：git clone SSH链接，显示如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20200922222553.png\" alt=\"\"></p>\n<p>显示没有权限（无公钥）</p>\n<p>三、输入：<code>ssh-keygen -t rsa</code> ，连续三次回车（即不做任何输入），结果如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20200922222602.png\" alt=\"\"></p>\n<p>通过结果显示及cat命令查看可知public key存放于id_rsa.pub中</p>\n<p>四、输入：<code>cat id_rsa.pub</code>  （去指定目录下）(  一般在)C盘下的用户文件下的.ssh 文件下的  <code>id_rsa.pub</code>  复制所有内容</p>\n<p><img src=\"http://photo.jomeswang.top/20200922222620.png\" alt=\"\"></p>\n<p>五、到github右上角账户管理-Setting下面找到左侧“SSH and GPG keys”菜单，接着点击“Add SSH key”，在”title”栏输入一个自己喜欢的标题，“key”栏中粘贴刚刚复制的公钥内容，最后点击“Add key”按钮。（粘贴时选择为纯文本），最后生成的结果</p>\n<p><img src=\"http://photo.jomeswang.top/20200922222823.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200922222839.png\" alt=\"\"></p>\n<p>输入：ssh -vT <a href=\"mailto:git@github.com\">git@github.com</a> ，显示如图则成功</p>\n<p><img src=\"http://photo.jomeswang.top/20200922222939.png\" alt=\"\"></p>\n<p>六、再次clone远程库，成功！我们可以在远程库修改文件，本地通过git pull同步远程库或者git push推送本地文件！</p>\n<p><img src=\"http://photo.jomeswang.top/20200922222956.png\" alt=\"\"></p>\n<h2 id=\"二：仓库管理\"><a href=\"#二：仓库管理\" class=\"headerlink\" title=\"二：仓库管理\"></a>二：仓库管理</h2><p>如果想直接在别人的仓库进行操作需要先向管理员拿到管理员权限。才可以直接操作。不然的话就fork到自己的仓库中，然后push  然后再让管理员进行分支的合并。</p>\n<p>如果没有管理员权限就直接push的话会有如下的报错。</p>\n<p><img src=\"http://photo.jomeswang.top/20200922223238.png\" alt=\"\"></p>\n","categories":["git"],"tags":["git"]},{"title":"Clion 解决多个main函数问题的方法","url":"/posts/5a256d9b/","content":"<blockquote>\n<p>开始可以愉快的刷题喽</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>使用CLion 刷题解决多个main函数问题的终极方法<br>在写 C++ 的题目的时候经常会遇到这样的问题，写了多个 cpp 文件，在 clion 中编译报错不能同时存在多 main 函数。</p>\n<p>方法3:在CMake文件中编写自动生成程序<br>在Cmake文件中编写程序，自动生成编译后的文件名！</p>\n<p>基础版：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 遍历项目根目录下所有的 .cpp 文件</span><br><span class=\"line\">file (GLOB files *.cpp)</span><br><span class=\"line\">foreach (file $&#123;files&#125;)</span><br><span class=\"line\">string(REGEX REPLACE &quot;.+&#x2F;(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;file&#125;)</span><br><span class=\"line\">add_executable ($&#123;exe&#125; $&#123;file&#125;)</span><br><span class=\"line\">message (\\ \\ \\ \\ --\\ src&#x2F;$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin&#x2F;$&#123;exe&#125;)</span><br><span class=\"line\">endforeach ()</span><br></pre></td></tr></table></figure>\n\n<p>上边儿这段代码，只会遍历根目录下的cpp文件，不会遍历根目录下的二级目录。</p>\n<p>进阶版：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 遍历项目根目录及二级目录下所有的 .cpp 文件</span><br><span class=\"line\">file (GLOB files *.cpp *&#x2F;*cpp)</span><br><span class=\"line\">foreach (file $&#123;files&#125;)</span><br><span class=\"line\">string(REGEX REPLACE &quot;.+&#x2F;(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;file&#125;)</span><br><span class=\"line\">add_executable ($&#123;exe&#125; $&#123;file&#125;)</span><br><span class=\"line\">message (\\ \\ \\ \\ --\\ src&#x2F;$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin&#x2F;$&#123;exe&#125;)</span><br><span class=\"line\">endforeach ()</span><br></pre></td></tr></table></figure>\n\n<p>进阶版就是手动添加访问二级目录的规则，同样要访问三级目录就是再添加一个<em>/</em>/*.cpp</p>\n<p>最优版：<br>官方文档提供一个解决方法GLOB_RECURSE，它会自动遍历工程文件根目录下的所有文件目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 遍历项目根目录下所有的 .cpp 文件</span><br><span class=\"line\"></span><br><span class=\"line\">file (GLOB_RECURSE files *.cpp)</span><br><span class=\"line\">foreach (file $&#123;files&#125;)</span><br><span class=\"line\">string(REGEX REPLACE &quot;.+&#x2F;(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;file&#125;)</span><br><span class=\"line\">add_executable ($&#123;exe&#125; $&#123;file&#125;)</span><br><span class=\"line\">message (\\ \\ \\ \\ --\\ src&#x2F;$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin&#x2F;$&#123;exe&#125;)</span><br><span class=\"line\">endforeach ()</span><br></pre></td></tr></table></figure>\n\n<p>优点：方便省时</p>\n<p>缺点：这种方法要求所有cpp文件命名不重复，不能含有中文，不能含有‘/’等字符！因为它就是直接Copy你的源码文件名的。</p>\n","categories":["C++"],"tags":["C++"]},{"title":"图书馆一游","url":"/posts/c1713fcd/","content":"<blockquote>\n<p>难得放松</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>今天是陪 xqx  去图书馆 学习的一天   不知道什么  感受 感觉心里怪怪的  害  肯定是我又想  谈女朋友了   </p>\n<p>害 长大了啊    </p>\n<p>但我发现  我还有很多 需要去改进的地方  啊 </p>\n<p>这一年 我想  走出去  不断的去锻炼自己  走出自己的舒适圈   不断的去挑战自己    加油  相信 自己 是最棒的   </p>\n<p><img src=\"http://photo.jomeswang.top/20200821212334.jpg\" alt=\"\"></p>\n<p>相信自己 啊   ！！！！！   你有勇气和实力 去挑战 更好的将来     遇见更好的人 与更优秀的人一起生活  一起奋斗  一起嘻哈   </p>\n<p>希望以后再见之时 你我  还能嘻哈如 少年   </p>\n<p><img src=\"http://photo.jomeswang.top/20200821212343.jpg\" alt=\"\"></p>\n","categories":["随笔"]},{"title":"vue 兄弟组件传值","url":"/posts/90831fd6/","content":"<p>在vue开发中总会遇到组件传值问题，今天总结一下兄弟组件之间的传值方法。</p>\n<a id=\"more\"></a>\n\n<p>1、子传父，父传子</p>\n<p>2、vuex</p>\n<p>3、eventBus</p>\n<p>接下来介绍如何使用eventBus实现兄弟组件传值</p>\n<p>首先我的需求是这样的，页面上由top，left，main，bottom四个组件构成。需要将top中的值传到left中。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1630583/201908/1630583-20190812154020531-1961842869.png\" alt=\"img\"></p>\n<p>第一步：创建一个js文件，eventBus.js，位置随便放，我是放在了src目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">export default new Vue()</span><br></pre></td></tr></table></figure>\n\n<p>第二步：在top组件中，引入刚才的js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#39;@&#x2F;eventBus.js&#39;</span><br></pre></td></tr></table></figure>\n\n<p>然后在methods里边定义一个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    changesize()&#123;</span><br><span class=\"line\">        eventBus.$emit(&#39;add&#39;,this.arg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我测试用的是button点击触发changesize函数，然后将arg传出去</p>\n<p>第三步：在left组件中也先让引入eventBus.js，然后使用created生命周期函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">created()&#123;</span><br><span class=\"line\">    eventBus.$on(&#39;add&#39;,(message)&#x3D;&gt;&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;一些操作，message就是从top组件传过来的值</span><br><span class=\"line\">        console.log(message)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n","categories":["vue"],"tags":["vue"]},{"title":"Django REST framework 学习","url":"/posts/bf8f345a/","content":"<blockquote>\n<p>不要重复造轮子</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>DRF模式就是高度集成化的 后端模式   可以将 工作简单化。</p>\n<p>比较大的区别就是  有 序列化  有视图集可以简单化工作。</p>\n<p>举一个例子。</p>\n<p>我们将创建一个简单的允许管理员用户查看和编辑系统中的用户和组的API。</p>\n<h2 id=\"项目设置\"><a href=\"#项目设置\" class=\"headerlink\" title=\"项目设置\"></a>项目设置</h2><p>创建一个名为 <code>tutorial</code> 的新django项目，然后启动一个名为 <code>quickstart</code> 的新app。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 创建项目目录</span><br><span class=\"line\">mkdir tutorial</span><br><span class=\"line\">cd tutorial</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个virtualenv来隔离我们本地的包依赖关系</span><br><span class=\"line\">virtualenv env</span><br><span class=\"line\">source env&#x2F;bin&#x2F;activate  # 在Windows下使用 &#96;env\\Scripts\\activate&#96;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在创建的虚拟环境中安装 Django 和 Django REST framework</span><br><span class=\"line\">pip install django</span><br><span class=\"line\">pip install djangorestframework</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个新项目和一个单个应用</span><br><span class=\"line\">django-admin.py startproject tutorial .  # 注意结尾的&#39;.&#39;符号</span><br><span class=\"line\">cd tutorial</span><br><span class=\"line\">django-admin.py startapp quickstart</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n<p>现在第一次同步你的数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n\n<p>我们还要创建一个名为 <code>admin</code> 的初始用户，密码为 <code>password123</code>。我们稍后将在该示例中验证该用户。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n\n<p>等你建立好一个数据库和初始用户，并准备好开始。打开应用程序的目录，我们就要开始编码了…</p>\n<h2 id=\"Serializers\"><a href=\"#Serializers\" class=\"headerlink\" title=\"Serializers\"></a>Serializers</h2><p>首先我们要定义一些序列化程序。我们创建一个名为 <code>tutorial/quickstart/serializers.py</code>的文件，来用作我们的数据表示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.contrib.auth.models import User, Group</span><br><span class=\"line\">from rest_framework import serializers</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserSerializer(serializers.HyperlinkedModelSerializer):</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model &#x3D; User</span><br><span class=\"line\">        fields &#x3D; (&#39;url&#39;, &#39;username&#39;, &#39;email&#39;, &#39;groups&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class GroupSerializer(serializers.HyperlinkedModelSerializer):</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        model &#x3D; Group</span><br><span class=\"line\">        fields &#x3D; (&#39;url&#39;, &#39;name&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>请注意，在这个例子中我们用到了超链接关系，使用 <code>HyperlinkedModelSerializer</code>。你还可以使用主键和各种其他关系，但超链接是好的RESTful设计。</p>\n<h2 id=\"Views\"><a href=\"#Views\" class=\"headerlink\" title=\"Views\"></a>Views</h2><p>好了，我们接下来再写一些视图。打开 <code>tutorial/quickstart/views.py</code> 文件开始写代码了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.contrib.auth.models import User, Group</span><br><span class=\"line\">from rest_framework import viewsets</span><br><span class=\"line\">from tutorial.quickstart.serializers import UserSerializer, GroupSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class UserViewSet(viewsets.ModelViewSet):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    允许用户查看或编辑的API路径。</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    queryset &#x3D; User.objects.all().order_by(&#39;-date_joined&#39;)</span><br><span class=\"line\">    serializer_class &#x3D; UserSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class GroupViewSet(viewsets.ModelViewSet):</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    允许组查看或编辑的API路径。</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    queryset &#x3D; Group.objects.all()</span><br><span class=\"line\">    serializer_class &#x3D; GroupSerializer</span><br></pre></td></tr></table></figure>\n\n<p>不再写多个视图，我们将所有常见行为分组写到叫 <code>ViewSets</code> 的类中。</p>\n<p>如果我们需要，我们可以轻松地将这些细节分解为单个视图，但是使用viewsets可以使视图逻辑组织良好，并且非常简洁。</p>\n<h2 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h2><p>好的，现在我们在<code>tutorial/urls.py</code>中开始写连接API的URLs。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import url, include</span><br><span class=\"line\">from rest_framework import routers</span><br><span class=\"line\">from tutorial.quickstart import views</span><br><span class=\"line\"></span><br><span class=\"line\">router &#x3D; routers.DefaultRouter()</span><br><span class=\"line\">router.register(r&#39;users&#39;, views.UserViewSet)</span><br><span class=\"line\">router.register(r&#39;groups&#39;, views.GroupViewSet)</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用自动URL路由连接我们的API。</span><br><span class=\"line\"># 另外，我们还包括支持浏览器浏览API的登录URL。</span><br><span class=\"line\">urlpatterns &#x3D; [</span><br><span class=\"line\">    url(r&#39;^&#39;, include(router.urls)),</span><br><span class=\"line\">    url(r&#39;^api-auth&#x2F;&#39;, include(&#39;rest_framework.urls&#39;, namespace&#x3D;&#39;rest_framework&#39;))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>因为我们使用的是viewsets而不是views，所以我们可以通过简单地使用路由器类注册视图来自动生成API的URL conf。</p>\n<p>再次，如果我们需要对API URL进行更多的控制，我们可以简单地将其拉出来使用常规基于类的视图，并明确地编写URL conf。</p>\n<p>最后，我们将包括用于支持浏览器浏览的API的默认登录和注销视图。这是可选的，但如果您的API需要身份验证，并且你想要使用支持浏览器浏览的API，那么它们很有用。</p>\n<h2 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h2><p>我们也想设置一些全局设置。我们想打开分页，我们希望我们的API只能由管理员使用。设置模块都在 <code>tutorial/settings.py</code> 中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS &#x3D; (</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#39;rest_framework&#39;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">REST_FRAMEWORK &#x3D; &#123;</span><br><span class=\"line\">    &#39;DEFAULT_PERMISSION_CLASSES&#39;: [</span><br><span class=\"line\">        &#39;rest_framework.permissions.IsAdminUser&#39;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#39;PAGE_SIZE&#39;: 10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，我们完成了。</p>\n<p>Django REST framework 中文网 :<a href=\"https://q1mi.github.io/Django-REST-framework-documentation/tutorial/quickstart_zh/\" target=\"_blank\" rel=\"noopener\">https://q1mi.github.io/Django-REST-framework-documentation/tutorial/quickstart_zh/</a></p>\n<p> Django REST framework的使用总结：<a href=\"https://juejin.im/post/6844903869336518664#heading-30\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/6844903869336518664#heading-30</a></p>\n<p>总结：<a href=\"https://www.atjiang.com/django-rest-tut5-relationships-and-hyperlinked-apis/\" target=\"_blank\" rel=\"noopener\">https://www.atjiang.com/django-rest-tut5-relationships-and-hyperlinked-apis/</a></p>\n","categories":["Django"],"tags":["python","Django","DRF"]},{"title":"Python 多线程","url":"/posts/55e6fd87/","content":"<blockquote>\n<p>使用多线程，减少运行时间</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-线程模块\"><a href=\"#一：-线程模块\" class=\"headerlink\" title=\"一： 线程模块\"></a>一： 线程模块</h2><p>Python3 通过两个标准库 _thread 和 threading 提供对线程的支持。</p>\n<p>_thread 提供了低级别的、原始的线程以及一个简单的锁，它相比于 threading 模块的功能还是比较有限的。</p>\n<p>threading 模块除了包含 _thread 模块中的所有方法外，还提供的其他方法：</p>\n<ul>\n<li>threading.currentThread(): 返回当前的线程变量。</li>\n<li>threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>\n<li>threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</li>\n</ul>\n<p>除了使用方法外，线程模块同样提供了Thread类来处理线程，Thread类提供了以下方法:</p>\n<ul>\n<li><p><strong>run():</strong> 用以表示线程活动的方法。</p>\n</li>\n<li><p>start():</p>\n<p>启动线程活动。</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>join([time]):</strong> 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。</p>\n</li>\n<li><p><strong>isAlive():</strong> 返回线程是否活动的。</p>\n</li>\n<li><p><strong>getName():</strong> 返回线程名。</p>\n</li>\n<li><p><strong>setName():</strong> 设置线程名。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"二：-使用-threading-模块创建线程\"><a href=\"#二：-使用-threading-模块创建线程\" class=\"headerlink\" title=\"二： 使用 threading 模块创建线程\"></a>二： 使用 threading 模块创建线程</h2><p>我们可以通过直接从 threading.Thread 继承创建一个新的子类，并实例化后调用 start() 方法启动新线程，即它调用了线程的 run() 方法：</p>\n<h3 id=\"2-1-实例\"><a href=\"#2-1-实例\" class=\"headerlink\" title=\"2.1  实例\"></a>2.1  实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class=\"line\"></span><br><span class=\"line\">**import** threading</span><br><span class=\"line\">**import** time</span><br><span class=\"line\"></span><br><span class=\"line\">exitFlag &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">**class** myThread (threading.Thread):</span><br><span class=\"line\">  **def** __init__(self, threadID, name, counter):</span><br><span class=\"line\">    threading.Thread.__init__(self)</span><br><span class=\"line\">    self.threadID &#x3D; threadID</span><br><span class=\"line\">    self.name &#x3D; name</span><br><span class=\"line\">    self.counter &#x3D; counter</span><br><span class=\"line\">  **def** run(self):</span><br><span class=\"line\">    **print** (&quot;开始线程：&quot; + self.name)</span><br><span class=\"line\">    print_time(self.name, self.counter, 5)</span><br><span class=\"line\">    **print** (&quot;退出线程：&quot; + self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">**def** print_time(threadName, delay, counter):</span><br><span class=\"line\">  **while** counter:</span><br><span class=\"line\">    **if** exitFlag:</span><br><span class=\"line\">      threadName.exit()</span><br><span class=\"line\">    time.sleep(delay)</span><br><span class=\"line\">    **print** (&quot;%s: %s&quot; % (threadName, time.ctime(time.time())))</span><br><span class=\"line\">    counter -&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 创建新线程</span><br><span class=\"line\">thread1 &#x3D; myThread(1, &quot;Thread-1&quot;, 1)</span><br><span class=\"line\">thread2 &#x3D; myThread(2, &quot;Thread-2&quot;, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 开启新线程</span><br><span class=\"line\">thread1.start()</span><br><span class=\"line\">thread2.start()</span><br><span class=\"line\">thread1.join()</span><br><span class=\"line\">thread2.join()</span><br><span class=\"line\">**print** (&quot;退出主线程&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>以上程序执行结果如下；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">开始线程：Thread-1</span><br><span class=\"line\">开始线程：Thread-2</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:46:46 2016</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:46:47 2016</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:46:47 2016</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:46:48 2016</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:46:49 2016</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:46:49 2016</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:46:50 2016</span><br><span class=\"line\">退出线程：Thread-1</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:46:51 2016</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:46:53 2016</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:46:55 2016</span><br><span class=\"line\">退出线程：Thread-2</span><br><span class=\"line\">退出主线程</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"三：-线程同步\"><a href=\"#三：-线程同步\" class=\"headerlink\" title=\"三：  线程同步\"></a>三：  线程同步</h2><p>如果多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。</p>\n<p>使用 Thread 对象的 Lock 和 Rlock 可以实现简单的线程同步，这两个对象都有 acquire 方法和 release 方法，对于那些需要每次只允许一个线程操作的数据，可以将其操作放到 acquire 和 release 方法之间。如下：</p>\n<p>多线程的优势在于可以同时运行多个任务（至少感觉起来是这样）。但是当线程需要共享数据时，可能存在数据不同步的问题。</p>\n<p>考虑这样一种情况：一个列表里所有元素都是0，线程”set”从后向前把所有元素改成1，而线程”print”负责从前往后读取列表并打印。</p>\n<p>那么，可能线程”set”开始改的时候，线程”print”便来打印列表了，输出就成了一半0一半1，这就是数据的不同步。为了避免这种情况，引入了锁的概念。</p>\n<p>锁有两种状态——锁定和未锁定。每当一个线程比如”set”要访问共享数据时，必须先获得锁定；如果已经有别的线程比如”print”获得锁定了，那么就让线程”set”暂停，也就是同步阻塞；等到线程”print”访问完毕，释放锁以后，再让线程”set”继续。</p>\n<p>经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。</p>\n<h3 id=\"3-1-实例\"><a href=\"#3-1-实例\" class=\"headerlink\" title=\"3.1   实例\"></a>3.1   实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class=\"line\"></span><br><span class=\"line\">**import** threading</span><br><span class=\"line\">**import** time</span><br><span class=\"line\"></span><br><span class=\"line\">**class** myThread (threading.Thread):</span><br><span class=\"line\">  **def** __init__(self, threadID, name, counter):</span><br><span class=\"line\">    threading.Thread.__init__(self)</span><br><span class=\"line\">    self.threadID &#x3D; threadID</span><br><span class=\"line\">    self.name &#x3D; name</span><br><span class=\"line\">    self.counter &#x3D; counter</span><br><span class=\"line\">  **def** run(self):</span><br><span class=\"line\">    **print** (&quot;开启线程： &quot; + self.name)</span><br><span class=\"line\">    \\# 获取锁，用于线程同步</span><br><span class=\"line\">    threadLock.acquire()</span><br><span class=\"line\">    print_time(self.name, self.counter, 3)</span><br><span class=\"line\">    \\# 释放锁，开启下一个线程</span><br><span class=\"line\">    threadLock.release()</span><br><span class=\"line\"></span><br><span class=\"line\">**def** print_time(threadName, delay, counter):</span><br><span class=\"line\">  **while** counter:</span><br><span class=\"line\">    time.sleep(delay)</span><br><span class=\"line\">    **print** (&quot;%s: %s&quot; % (threadName, time.ctime(time.time())))</span><br><span class=\"line\">    counter -&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">threadLock &#x3D; threading.Lock()</span><br><span class=\"line\">threads &#x3D; []</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 创建新线程</span><br><span class=\"line\">thread1 &#x3D; myThread(1, &quot;Thread-1&quot;, 1)</span><br><span class=\"line\">thread2 &#x3D; myThread(2, &quot;Thread-2&quot;, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 开启新线程</span><br><span class=\"line\">thread1.start()</span><br><span class=\"line\">thread2.start()</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 添加线程到线程列表</span><br><span class=\"line\">threads.append(thread1)</span><br><span class=\"line\">threads.append(thread2)</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 等待所有线程完成</span><br><span class=\"line\">**for** t **in** threads:</span><br><span class=\"line\">  t.join()</span><br><span class=\"line\">**print** (&quot;退出主线程&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序，输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">开启线程： Thread-1</span><br><span class=\"line\">开启线程： Thread-2</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:52:57 2016</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:52:58 2016</span><br><span class=\"line\">Thread-1: Wed Apr  6 11:52:59 2016</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:53:01 2016</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:53:03 2016</span><br><span class=\"line\">Thread-2: Wed Apr  6 11:53:05 2016</span><br><span class=\"line\">退出主线程</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"四：-线程优先级队列（-Queue）\"><a href=\"#四：-线程优先级队列（-Queue）\" class=\"headerlink\" title=\"四： 线程优先级队列（ Queue）\"></a>四： 线程优先级队列（ Queue）</h2><p>Python 的 Queue 模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列Queue，LIFO（后入先出）队列LifoQueue，和优先级队列 PriorityQueue。</p>\n<p>这些队列都实现了锁原语，能够在多线程中直接使用，可以使用队列来实现线程间的同步。</p>\n<p>Queue 模块中的常用方法:</p>\n<ul>\n<li>Queue.qsize() 返回队列的大小</li>\n<li>Queue.empty() 如果队列为空，返回True,反之False</li>\n<li>Queue.full() 如果队列满了，返回True,反之False</li>\n<li>Queue.full 与 maxsize 大小对应</li>\n<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>\n<li>Queue.get_nowait() 相当Queue.get(False)</li>\n<li>Queue.put(item) 写入队列，timeout等待时间</li>\n<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>\n<li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li>\n<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>\n</ul>\n<h3 id=\"4-1-实例\"><a href=\"#4-1-实例\" class=\"headerlink\" title=\"4.1  实例\"></a>4.1  实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class=\"line\"></span><br><span class=\"line\">**import** queue</span><br><span class=\"line\">**import** threading</span><br><span class=\"line\">**import** time</span><br><span class=\"line\"></span><br><span class=\"line\">exitFlag &#x3D; 0</span><br><span class=\"line\"></span><br><span class=\"line\">**class** myThread (threading.Thread):</span><br><span class=\"line\">  **def** __init__(self, threadID, name, q):</span><br><span class=\"line\">    threading.Thread.__init__(self)</span><br><span class=\"line\">    self.threadID &#x3D; threadID</span><br><span class=\"line\">    self.name &#x3D; name</span><br><span class=\"line\">    self.q &#x3D; q</span><br><span class=\"line\">  **def** run(self):</span><br><span class=\"line\">    **print** (&quot;开启线程：&quot; + self.name)</span><br><span class=\"line\">    process_data(self.name, self.q)</span><br><span class=\"line\">    **print** (&quot;退出线程：&quot; + self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">**def** process_data(threadName, q):</span><br><span class=\"line\">  **while** **not** exitFlag:</span><br><span class=\"line\">    queueLock.acquire()</span><br><span class=\"line\">    **if** **not** workQueue.empty():</span><br><span class=\"line\">      data &#x3D; q.get()</span><br><span class=\"line\">      queueLock.release()</span><br><span class=\"line\">      **print** (&quot;%s processing %s&quot; % (threadName, data))</span><br><span class=\"line\">    **else**:</span><br><span class=\"line\">      queueLock.release()</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\">threadList &#x3D; [&quot;Thread-1&quot;, &quot;Thread-2&quot;, &quot;Thread-3&quot;]</span><br><span class=\"line\">nameList &#x3D; [&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;]</span><br><span class=\"line\">queueLock &#x3D; threading.Lock()</span><br><span class=\"line\">workQueue &#x3D; queue.Queue(10)</span><br><span class=\"line\">threads &#x3D; []</span><br><span class=\"line\">threadID &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 创建新线程</span><br><span class=\"line\">**for** tName **in** threadList:</span><br><span class=\"line\">  thread &#x3D; myThread(threadID, tName, workQueue)</span><br><span class=\"line\">  thread.start()</span><br><span class=\"line\">  threads.append(thread)</span><br><span class=\"line\">  threadID +&#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 填充队列</span><br><span class=\"line\">queueLock.acquire()</span><br><span class=\"line\">**for** word **in** nameList:</span><br><span class=\"line\">  workQueue.put(word)</span><br><span class=\"line\">queueLock.release()</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 等待队列清空</span><br><span class=\"line\">**while** **not** workQueue.empty():</span><br><span class=\"line\">  **pass**</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 通知线程是时候退出</span><br><span class=\"line\">exitFlag &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\">\\# 等待所有线程完成</span><br><span class=\"line\">**for** t **in** threads:</span><br><span class=\"line\">  t.join()</span><br><span class=\"line\">**print** (&quot;退出主线程&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>以上程序执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">开启线程：Thread-1</span><br><span class=\"line\">开启线程：Thread-2</span><br><span class=\"line\">开启线程：Thread-3</span><br><span class=\"line\">Thread-3 processing One</span><br><span class=\"line\">Thread-1 processing Two</span><br><span class=\"line\">Thread-2 processing Three</span><br><span class=\"line\">Thread-3 processing Four</span><br><span class=\"line\">Thread-1 processing Five</span><br><span class=\"line\">退出线程：Thread-3</span><br><span class=\"line\">退出线程：Thread-2</span><br><span class=\"line\">退出线程：Thread-1</span><br><span class=\"line\">退出主线程</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五：总结\"><a href=\"#五：总结\" class=\"headerlink\" title=\"五：总结\"></a>五：总结</h2><p>在线程里，传递参数有三种方法：</p>\n<ol>\n<li>使用元组传递 threading.Thread(target=方法名，args=（参数1,参数2, …）)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def song(a,b,c):</span><br><span class=\"line\">    print(a, b, c)</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        print(&quot;song&quot;)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    threading.Thread(target&#x3D;song,args&#x3D;(1,2,3)).start()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用字典传递 threading.Thread(target=方法名, kwargs={“参数名”: 参数1, “参数名”: 参数2, …})</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">threading.Thread(target&#x3D;song,kwargs&#x3D;&#123;&quot;a&quot;:1,&quot;c&quot;:3,&quot;b&quot;:2&#125;).start() #参数顺序可以变</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>混合使用元组和字典 threading.Thread(target=方法名，args=（参数1, 参数2, …）, kwargs={“参数名”: 参数1,”参数名”: 参数2, …})</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">threading.Thread(target&#x3D;song,args&#x3D;(1,),kwargs&#x3D;&#123;&quot;c&quot;:3,&quot;b&quot;:2&#125;).start()</span><br></pre></td></tr></table></figure>","categories":["Python"],"tags":["多线程"]},{"title":"Scrapy 框架 学习","url":"/posts/99bbd8d6/","content":"<blockquote>\n<p>Scrapy是用纯Python实现一个为了爬取网站数据、提取结构性数据而编写的应用框架，用途非常广泛。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200713205713.png\" alt=\"\"></p>\n<ul>\n<li><code>Scrapy Engine(引擎)</code>: 负责<code>Spider</code>、<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>中间的通讯，信号、数据传递等。</li>\n<li><code>Scheduler(调度器)</code>: 它负责接受<code>引擎</code>发送过来的Request请求，并按照一定的方式进行整理排列，入队，当<code>引擎</code>需要时，交还给<code>引擎</code>。</li>\n<li><code>Downloader（下载器）</code>：负责下载<code>Scrapy Engine(引擎)</code>发送的所有Requests请求，并将其获取到的Responses交还给<code>Scrapy Engine(引擎)</code>，由<code>引擎</code>交给<code>Spider</code>来处理，</li>\n<li><code>Spider（爬虫）</code>：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给<code>引擎</code>，再次进入<code>Scheduler(调度器)</code>，</li>\n<li><code>Item Pipeline(管道)</code>：它负责处理<code>Spider</code>中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方.</li>\n<li><code>Downloader Middlewares（下载中间件）</code>：你可以当作是一个可以自定义扩展下载功能的组件。</li>\n<li><code>Spider Middlewares（Spider中间件）</code>：你可以理解为是一个可以自定扩展和操作<code>引擎</code>和<code>Spider</code>中间<code>通信</code>的功能组件（比如进入<code>Spider</code>的Responses;和从<code>Spider</code>出去的Requests）</li>\n</ul>\n<h2 id=\"一：爬虫步骤\"><a href=\"#一：爬虫步骤\" class=\"headerlink\" title=\"一：爬虫步骤\"></a>一：爬虫步骤</h2><p>制作 Scrapy 爬虫 一共需要4步：</p>\n<ul>\n<li>新建项目 (scrapy startproject xxx)：新建一个新的爬虫项目</li>\n<li>明确目标 （编写items.py）：明确你想要抓取的目标</li>\n<li>制作爬虫 （spiders/xxspider.py）：制作爬虫开始爬取网页</li>\n<li>存储内容 （pipelines.py）：设计管道存储爬取内容</li>\n</ul>\n<ol>\n<li><p>scrapy startproject test</p>\n</li>\n<li><p>scrapy genspider 爬虫名 爬虫域名</p>\n<p><img src=\"http://photo.jomeswang.top/20200714133339.png\" alt=\"\"></p>\n</li>\n</ol>\n<h2 id=\"二：Scrapy项目基本流程\"><a href=\"#二：Scrapy项目基本流程\" class=\"headerlink\" title=\"二：Scrapy项目基本流程\"></a>二：Scrapy项目基本流程</h2><h3 id=\"2-1-默认的Scrapy项目结构\"><a href=\"#2-1-默认的Scrapy项目结构\" class=\"headerlink\" title=\"2.1 默认的Scrapy项目结构\"></a>2.1 默认的Scrapy项目结构</h3><p>使用全局命令startproject创建项目，在project_name文件夹下创建一个名为project_name的Scrapy项目。</p>\n<blockquote>\n<p>scrapy startproject myproject</p>\n</blockquote>\n<p>虽然可以被修改，但所有的Scrapy项目默认有类似于下边的文件结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">scrapy.cfg</span><br><span class=\"line\">myproject&#x2F;</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    items.py</span><br><span class=\"line\">    pipelines.py</span><br><span class=\"line\">    settings.py</span><br><span class=\"line\">    spiders&#x2F;</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        spider1.py</span><br><span class=\"line\">        spider2.py</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n\n<p>scrapy.cfg 存放的目录被认为是 项目的根目录 。该文件中包含python模块名的字段定义了项目的设置。</p>\n<h3 id=\"2-2-定义要抓取的数据\"><a href=\"#2-2-定义要抓取的数据\" class=\"headerlink\" title=\"2.2  定义要抓取的数据\"></a>2.2  定义要抓取的数据</h3><p>Item 是保存爬取到的数据的容器；其使用方法和python字典类似， 并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。<br> 类似在ORM中做的一样，您可以通过创建一个 scrapy.Item 类， 并且定义类型为 scrapy.Field 的类属性来定义一个Item。<br> 首先根据需要从dmoz.org（DMOZ网站是一个著名的开放式分类目录（Open DirectoryProject），由来自世界各地的志愿者共同维护与建设的最大的全球目录社区）获取到的数据对item进行建模。 我们需要从dmoz中获取名字，url，以及网站的描述。 对此，在item中定义相应的字段。编辑items.py 文件:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozItem</span><span class=\"params\">(scrapy.Item)</span>:</span></span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    link = scrapy.Field()</span><br><span class=\"line\">    desc = scrapy.Field()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-使用项目命令genspider创建Spider\"><a href=\"#2-3-使用项目命令genspider创建Spider\" class=\"headerlink\" title=\"2.3  使用项目命令genspider创建Spider\"></a>2.3  使用项目命令genspider创建Spider</h3><blockquote>\n<p>scrapy genspider [-t template] <name> <domain></p>\n</blockquote>\n<p>在当前项目中创建spider。<br> 这仅仅是创建spider的一种快捷方法。该方法可以使用提前定义好的模板来生成spider。您也可以自己创建spider的源码文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ scrapy genspider -l</span><br><span class=\"line\">Available templates:</span><br><span class=\"line\">  basic</span><br><span class=\"line\">  crawl</span><br><span class=\"line\">  csvfeed</span><br><span class=\"line\">  xmlfeed</span><br><span class=\"line\"></span><br><span class=\"line\">$ scrapy genspider -d basic</span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\">class $classname(scrapy.Spider):</span><br><span class=\"line\">    name = <span class=\"string\">\"$name\"</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">\"$domain\"</span>]</span><br><span class=\"line\">    start_urls = (</span><br><span class=\"line\">        <span class=\"string\">'http://www.$domain/'</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ scrapy genspider -t basic example example.com</span><br><span class=\"line\">Created spider <span class=\"string\">'example'</span> using template <span class=\"string\">'basic'</span> <span class=\"keyword\">in</span> module:</span><br><span class=\"line\">  mybot.spiders.example</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-编写提取item数据的Spider\"><a href=\"#2-4-编写提取item数据的Spider\" class=\"headerlink\" title=\"2.4  编写提取item数据的Spider\"></a>2.4  编写提取item数据的Spider</h3><p>Spider是用户编写用于从单个网站(或者一些网站)爬取数据的类。<br> 其包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容， 提取生成 item 的方法。<br> 为了创建一个Spider，您必须继承 scrapy.Spider 类，且定义以下三个属性:</p>\n<blockquote>\n<ul>\n<li>name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</li>\n<li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li>\n<li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.spider.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"dmoz\"</span>   <span class=\"comment\">#唯一标识，启动spider时即指定该名称</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</span><br><span class=\"line\">    start_urls = [</span><br><span class=\"line\">        <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        filename = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(response.body)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-进行爬取\"><a href=\"#2-5-进行爬取\" class=\"headerlink\" title=\"2.5  进行爬取\"></a>2.5  进行爬取</h3><p>执行项目命令crawl，启动Spider：</p>\n<blockquote>\n<p>scrapy crawl dmoz</p>\n</blockquote>\n<p>在这个过程中：<br> <strong>Scrapy为Spider的 start_urls 属性中的每个URL创建了 scrapy.Request 对象，并将 parse 方法作为回调函数(callback)赋值给了Request。</strong><br> <strong>Request对象经过调度，执行生成 scrapy.http.Response 对象并送回给spider parse() 方法。</strong></p>\n<h3 id=\"2-6-通过选择器提取数据\"><a href=\"#2-6-通过选择器提取数据\" class=\"headerlink\" title=\"2.6  通过选择器提取数据\"></a>2.6  通过选择器提取数据</h3><p><strong>Selectors选择器简介：</strong><br> Scrapy提取数据有自己的一套机制。它们被称作选择器(seletors)，因为他们通过特定的 XPath 或者 CSS 表达式来“选择” HTML文件中的某个部分。<br> XPath 是一门用来在XML文件中选择节点的语言，也可以用在HTML上。 CSS 是一门将HTML文档样式化的语言。选择器由它定义，并与特定的HTML元素的样式相关连。</p>\n<p><strong>XPath表达式的例子和含义：</strong></p>\n<blockquote>\n<ul>\n<li>/html/head/title: 选择HTML文档中 <head> 标签内的 <title> 元素</li>\n<li>/html/head/title/text(): 选择上面提到的 <title> 元素的文字</li>\n<li>//td: 选择所有的 <td> 元素</li>\n<li>//div[@class=”mine”]: 选择所有具有 class=”mine” 属性的 div 元素</li>\n</ul>\n</blockquote>\n<p><strong>提取数据：</strong><br> 观察HTML源码并确定合适的XPath表达式。<br> 在查看了网页的源码后，您会发现网站的信息是被包含在 第二个 <ul> 元素中。<br> 我们可以通过这段代码选择该页面中网站列表里所有 <li> 元素:<br> response.xpath(‘//ul/li’)</p>\n<p>Item 对象是自定义的python字典。 您可以使用标准的字典语法来获取到其每个字段的值。<br> 一般来说，Spider将会将爬取到的数据以 Item 对象返回。所以为了将爬取的数据返回，我们最终的代码将是:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tutorial.items <span class=\"keyword\">import</span> DmozItem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"dmoz\"</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</span><br><span class=\"line\">    start_urls = [</span><br><span class=\"line\">        <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> sel <span class=\"keyword\">in</span> response.xpath(<span class=\"string\">'//ul/li'</span>):</span><br><span class=\"line\">            item = DmozItem()</span><br><span class=\"line\">            item[<span class=\"string\">'title'</span>] = sel.xpath(<span class=\"string\">'a/text()'</span>).extract()</span><br><span class=\"line\">            item[<span class=\"string\">'link'</span>] = sel.xpath(<span class=\"string\">'a/@href'</span>).extract()</span><br><span class=\"line\">            item[<span class=\"string\">'desc'</span>] = sel.xpath(<span class=\"string\">'text()'</span>).extract()</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br></pre></td></tr></table></figure>\n\n<p>现在对dmoz.org进行爬取将会产生 DmozItem 对象。</p>\n","categories":["爬虫"],"tags":["Scrapy"]},{"title":"Jquery 总结","url":"/posts/5417e75b/","content":"<blockquote>\n<p>Jquery  总结</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200713093105.png\" alt=\"\"></p>\n","categories":["前端"],"tags":["Jquery"]},{"title":"Jquery  学习","url":"/posts/cb4e1f79/","content":"","categories":["前端"],"tags":["Jquery"]},{"title":"科二崩溃","url":"/posts/8af4b0ca/","content":"<blockquote>\n<p>高考崩，没想到 我的 科二也崩了。。。。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>今天 2020 - 07 - 08</p>\n<p>啊啊啊啊啊啊啊啊啊</p>\n<p>科二崩了，我好不开心啊。</p>\n<p>这下我来总结一下为什么会崩溃 然后说一下整一个 行车 过程。</p>\n<ol>\n<li>开头错误：座位没有调好，主要是想看到前面地骨  然后不断向前，最后因为太前了，整个脚并没有发挥很好，一个问题，最后是因为紧张，导致脚松了吗。切忌啊。    方法：学会调凳子，如何调高  很重要 。</li>\n<li>起坡错误，是不是距离边距30cm？？？？？，最后溜坡   这不应该归结于 单单地失误，还是心态问题   在前一次 熄火后  ，我就特别怕熄火了，然后我就在 还没达到 半联动点， 就放开了！！！！！这非常不好啊。</li>\n</ol>\n<p>方法总结：</p>\n<ol>\n<li>做好准备：调凳子，调后视镜，测试离合位置，刹车位置</li>\n<li>熟练  整一个  流程 ， 调整好心态 </li>\n<li>调整好心态：  将 训练当  考试    </li>\n</ol>\n<ol>\n<li>点位没有抓好   所以每一次定好位后，要自己下车看一看  点位是否正确</li>\n</ol>\n<ol>\n<li>坡道定点停车  和起步  </li>\n<li>侧方位停车</li>\n<li>直角转弯</li>\n<li>倒车入库</li>\n<li>S弯道   </li>\n</ol>\n","categories":["随笔"],"tags":["随笔"]},{"title":"大一回顾总结","url":"/posts/aa46dcc5/","content":"<blockquote>\n<p>今天的努力是为了以后美好的将来</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：面对爱情\"><a href=\"#一：面对爱情\" class=\"headerlink\" title=\"一：面对爱情\"></a>一：面对爱情</h2><h3 id=\"1-1-面对-chy\"><a href=\"#1-1-面对-chy\" class=\"headerlink\" title=\"1.1   面对 chy\"></a>1.1   面对 chy</h3><p>现在也过去三年多了，曾经虚晃的青少年，现在也变成了现在的这个样子了。我不知道现在的你在哪里，但是我希望你能找到一个可以陪你度过一生的人，不再活在活在过去，做一个自己喜欢的一个人。</p>\n<h3 id=\"1-2-面对-黄李雪\"><a href=\"#1-2-面对-黄李雪\" class=\"headerlink\" title=\"1.2  面对 黄李雪\"></a>1.2  面对 黄李雪</h3><p>我现在也能够正视了，我希望我能够把你当成一个很好很好的一个好朋友，也非常感谢你一年的陪伴，在这一年内，我们聊了很多，关系也好像变得更加亲密了，但是我还是希望我们能够最后成为很好很好的朋友，可以尽情的分享不开心与快乐。   </p>\n<p>我希望我们能够保持这样的一个关系，再逾越的话，我不知道将来会是怎么样的，努力的过好每一天。</p>\n<h2 id=\"二：面对技术\"><a href=\"#二：面对技术\" class=\"headerlink\" title=\"二：面对技术\"></a>二：面对技术</h2><h3 id=\"2-1-课内课程安排\"><a href=\"#2-1-课内课程安排\" class=\"headerlink\" title=\"2.1  课内课程安排\"></a>2.1  课内课程安排</h3><p>我的一个行事标准以课内为基础，疯狂学习课外，所以我的做法是什么呢？</p>\n<p>课内保持120%的学习效率，课外快速过一遍书然后做习题，最后期末进行冲刺。这样大概就是我的一个课内课程安排。</p>\n<h3 id=\"2-2-课外学习安排\"><a href=\"#2-2-课外学习安排\" class=\"headerlink\" title=\"2.2 课外学习安排\"></a>2.2 课外学习安排</h3><p>在这一个一年内，我主要接触了 </p>\n<ul>\n<li>前端（html,css, js,vue, uni-app,微信小程序）, </li>\n<li>后端（django , linux, docker ,微服务），</li>\n<li>数据分析（python np，pd, excel, pyechars, matlpotlib，爬虫技术;    matlab）, </li>\n<li>人工智能（matlab  的计算机视觉， 深度学习框架（传统学习方法，迁移学习，cnn，transfer_learning）） </li>\n</ul>\n<h2 id=\"三：心路历程\"><a href=\"#三：心路历程\" class=\"headerlink\" title=\"三：心路历程\"></a>三：心路历程</h2><p>在这一年内，遇到很多很多的人，碰到了很多很多的事情，这些人这些事逐渐让我学会成长，学会独立，学会思考。</p>\n<p>这一年里我改变了许多，我开始去思考每一件事的原因，然后逐渐地受挫，逐渐地反思，逐渐地去学习。</p>\n<p>在这一年内，我也做了很多义工类地活动，我认为这就是生活地一个常态。</p>\n<h2 id=\"四：前途规划\"><a href=\"#四：前途规划\" class=\"headerlink\" title=\"四：前途规划\"></a>四：前途规划</h2><p>这一个方向又是怎么样地呢？？？？？？</p>\n<p>不懂啊，</p>\n<p>接下来的方向我可能  搞搞金融     看看有没有资格去混数学领域    硬件方向 计软方向   芯片方向  机器学习方向   数据分析  不行的话我就去当门卫吧    </p>\n","categories":["随笔"],"tags":["随笔"]},{"title":"Mysql 入门","url":"/posts/e72df9ae/","content":"<blockquote>\n<h3 id=\"数据库就是一种特殊的文件，其中存储着需要的数据\"><a href=\"#数据库就是一种特殊的文件，其中存储着需要的数据\" class=\"headerlink\" title=\"数据库就是一种特殊的文件，其中存储着需要的数据\"></a>数据库就是一种特殊的文件，其中存储着需要的数据</h3></blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：操作数据库\"><a href=\"#一：操作数据库\" class=\"headerlink\" title=\"一：操作数据库\"></a>一：操作数据库</h2><h3 id=\"1-1-命令行-连接\"><a href=\"#1-1-命令行-连接\" class=\"headerlink\" title=\"1.1   命令行  连接\"></a>1.1   命令行  连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">回车后输入密码，当前设置的密码为mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-查看所有数据库\"><a href=\"#1-2-查看所有数据库\" class=\"headerlink\" title=\"1.2  查看所有数据库\"></a>1.2  查看所有数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">show databases;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-3-使用数据库\"><a href=\"#1-3-使用数据库\" class=\"headerlink\" title=\"1.3 使用数据库\"></a>1.3 使用数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use 数据库名;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-4-查看当前使用的数据库\"><a href=\"#1-4-查看当前使用的数据库\" class=\"headerlink\" title=\"1.4 查看当前使用的数据库\"></a>1.4 查看当前使用的数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select database();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-5-创建数据库\"><a href=\"#1-5-创建数据库\" class=\"headerlink\" title=\"1.5   创建数据库\"></a>1.5   创建数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database 数据库名 charset&#x3D;utf8;</span><br><span class=\"line\">例：</span><br><span class=\"line\">create database python charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-6-删除数据库\"><a href=\"#1-6-删除数据库\" class=\"headerlink\" title=\"1.6   删除数据库\"></a>1.6   删除数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop database 数据库名;</span><br><span class=\"line\">例：</span><br><span class=\"line\">drop database python;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：数据表操作\"><a href=\"#二：数据表操作\" class=\"headerlink\" title=\"二：数据表操作\"></a>二：数据表操作</h2><h3 id=\"2-1-查看当前数据库中所有表\"><a href=\"#2-1-查看当前数据库中所有表\" class=\"headerlink\" title=\"2.1  查看当前数据库中所有表\"></a>2.1  查看当前数据库中所有表</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">show tables;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-查看表结构\"><a href=\"#2-2-查看表结构\" class=\"headerlink\" title=\"2.2  查看表结构\"></a>2.2  查看表结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">desc 表名;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-创建表\"><a href=\"#2-3-创建表\" class=\"headerlink\" title=\"2.3 创建表\"></a>2.3 创建表</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例：创建班级表</span><br><span class=\"line\"></span><br><span class=\"line\">create table classes(</span><br><span class=\"line\">    id int unsigned auto_increment primary key not null,</span><br><span class=\"line\">    name varchar(10)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-修改表-添加字段\"><a href=\"#2-4-修改表-添加字段\" class=\"headerlink\" title=\"2.4  修改表-添加字段\"></a>2.4  修改表-添加字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter table 表名 add 列名 类型;</span><br><span class=\"line\">例：</span><br><span class=\"line\">alter table students add birthday datetime;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-5-修改表-修改字段：重命名版\"><a href=\"#2-5-修改表-修改字段：重命名版\" class=\"headerlink\" title=\"2.5  修改表-修改字段：重命名版\"></a>2.5  修改表-修改字段：重命名版</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter table 表名 change 原名 新名 类型及约束;</span><br><span class=\"line\">例：</span><br><span class=\"line\">alter table students change birthday birth datetime not null;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-6-修改表-修改字段：不重命名版\"><a href=\"#2-6-修改表-修改字段：不重命名版\" class=\"headerlink\" title=\"2.6  修改表-修改字段：不重命名版\"></a>2.6  修改表-修改字段：不重命名版</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter table 表名 modify 列名 类型及约束;</span><br><span class=\"line\">例：</span><br><span class=\"line\">alter table students modify birth date not null;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-7-修改表-删除字段\"><a href=\"#2-7-修改表-删除字段\" class=\"headerlink\" title=\"2.7  修改表-删除字段\"></a>2.7  修改表-删除字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter table 表名 drop 列名;</span><br><span class=\"line\">例：</span><br><span class=\"line\">alter table students drop birthday;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-8-删除表\"><a href=\"#2-8-删除表\" class=\"headerlink\" title=\"2.8 删除表\"></a>2.8 删除表</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop table 表名;</span><br><span class=\"line\">例：</span><br><span class=\"line\">drop table students;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-9-查看表的创建语句\"><a href=\"#2-9-查看表的创建语句\" class=\"headerlink\" title=\"2.9  查看表的创建语句\"></a>2.9  查看表的创建语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">show create table 表名;</span><br><span class=\"line\">例：</span><br><span class=\"line\">show create table classes;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三-MySQL-查询\"><a href=\"#三-MySQL-查询\" class=\"headerlink\" title=\"三 .  MySQL 查询\"></a>三 .  MySQL 查询</h2><h3 id=\"3-1-普通查询\"><a href=\"#3-1-普通查询\" class=\"headerlink\" title=\"3.1 普通查询\"></a>3.1 普通查询</h3><ul>\n<li>查询所有字段</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表名;</span><br><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询指定字段</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 列<span class=\"number\">1</span>,列<span class=\"number\">2</span>,... <span class=\"keyword\">from</span> 表名;</span><br><span class=\"line\">例:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 as 给字段起别名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">as</span> 序号, <span class=\"keyword\">name</span> <span class=\"keyword\">as</span> 名字, gender <span class=\"keyword\">as</span> 性别 <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以通过 as 给表起别名</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 如果是单表查询 可以省略表明</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, gender <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表名.字段名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> students.id,students.name,students.gender <span class=\"keyword\">from</span> students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 可以通过 as 给表起别名 </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> s.id,s.name,s.gender <span class=\"keyword\">from</span> students <span class=\"keyword\">as</span> s;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在select后面列前使用distinct可以消除重复的行</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> 列<span class=\"number\">1</span>,... <span class=\"keyword\">from</span> 表名;</span><br><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> gender <span class=\"keyword\">from</span> students;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-条件查询\"><a href=\"#3-2-条件查询\" class=\"headerlink\" title=\"3.2  条件查询\"></a>3.2  条件查询</h3><p>使用where子句对表中的数据筛选，结果为true的行会出现在结果集中</p>\n<ul>\n<li>语法如下：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">where</span> 条件;</span><br><span class=\"line\">例：</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>where后面支持多种运算符，进行条件的处理</p>\n<ul>\n<li><p>比较运算符 = &gt; &gt;= &lt; &lt;= != &lt;&gt; </p>\n</li>\n<li><p>逻辑运算符 and or not</p>\n</li>\n<li><p>模糊查询  like  </p>\n<ul>\n<li><p>%表示任意多个任意字符</p>\n</li>\n<li><p>_表示一个任意字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from students where name like &#39;黄%&#39; or name like &#39;%靖&#39;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>范围查询</p>\n<ul>\n<li><p>in表示在一个非连续的范围内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from students where id in(1,3,8);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>between … and …表示在一个连续的范围内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from students where id between 3 and 8;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>空判断   <strong>判空is null</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from students where height is null;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>优先级</strong></p>\n<ul>\n<li>优先级由高到低的顺序为：小括号，not，比较运算符，逻辑运算符</li>\n</ul>\n<h3 id=\"3-3-排序查询\"><a href=\"#3-3-排序查询\" class=\"headerlink\" title=\"3.3 排序查询\"></a>3.3 排序查询</h3><p>为了方便查看数据，可以对数据进行排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 列<span class=\"number\">1</span> <span class=\"keyword\">asc</span>|<span class=\"keyword\">desc</span> [,列<span class=\"number\">2</span> <span class=\"keyword\">asc</span>|<span class=\"keyword\">desc</span>,...]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><ul>\n<li>将行数据按照列1进行排序，如果某些行列1的值相同时，则按照列2排序，以此类推</li>\n<li>默认按照列值从小到大排列（asc）</li>\n<li>asc从小到大排列，即升序</li>\n<li>desc从大到小排序，即降序</li>\n</ul>\n<p>例：显示所有的学生信息，先按照年龄从大–&gt;小排序，当年龄相同时 按照身高从高–&gt;矮排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> students  <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age <span class=\"keyword\">desc</span>,height <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-4-聚合函数\"><a href=\"#3-4-聚合函数\" class=\"headerlink\" title=\"3.4  聚合函数\"></a>3.4  聚合函数</h3><ul>\n<li><p>count(*)表示计算总行数，括号中写星与列名，结果是相同的</p>\n</li>\n<li><p>max(列)表示求此列的最大值</p>\n</li>\n<li><p>min(列)表示求此列的最小值</p>\n</li>\n<li><p>sum(列)表示求此列的和</p>\n</li>\n<li><p>avg(列)表示求此列的平均值</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select count(*) from students;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-5-分组\"><a href=\"#3-5-分组\" class=\"headerlink\" title=\"3.5  分组\"></a>3.5  分组</h3><ul>\n<li><p>group by的含义:将查询结果按照1个或多个字段进行分组，字段值相同的为一组</p>\n</li>\n<li><p><strong>group by + group_concat()</strong></p>\n<ul>\n<li>group_concat(字段名)可以作为一个输出字段来使用，</li>\n<li>表示分组之后，根据分组结果，使用group_concat()来放置每一组的某字段的值的集合</li>\n</ul>\n</li>\n<li><h3 id=\"group-by-集合函数\"><a href=\"#group-by-集合函数\" class=\"headerlink\" title=\"group by + 集合函数\"></a>group by + 集合函数</h3><ul>\n<li>通过group_concat()的启发，我们既然可以统计出每个分组的某字段的值的集合，那么我们也可以通过集合函数来对这个<code>值的集合</code>做一些操作</li>\n</ul>\n</li>\n<li><h3 id=\"group-by-having\"><a href=\"#group-by-having\" class=\"headerlink\" title=\"group by + having\"></a>group by + having</h3><ul>\n<li>having 条件表达式：用来分组查询后指定一些条件来输出查询结果</li>\n<li>having作用和where一样，但having只能用于group by</li>\n</ul>\n</li>\n<li><h3 id=\"group-by-with-rollup\"><a href=\"#group-by-with-rollup\" class=\"headerlink\" title=\"group by + with rollup\"></a>group by + with rollup</h3><ul>\n<li>with rollup的作用是：在最后新增一行，来记录当前列里所有记录的总和</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select gender,group_concat(id) from students group by gender;</span><br><span class=\"line\">+--------+------------------+</span><br><span class=\"line\">| gender | group_concat(id) |</span><br><span class=\"line\">+--------+------------------+</span><br><span class=\"line\">| 男     | 3,4,8,9,14       |</span><br><span class=\"line\">| 女     | 1,2,5,7,10,12,13 |</span><br><span class=\"line\">| 中性   | 11               |</span><br><span class=\"line\">| 保密   | 6                |</span><br><span class=\"line\">+--------+------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">分别统计性别为男&#x2F;女的人年龄平均值</span><br><span class=\"line\">select gender,avg(age) from students group by gender;</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| gender | avg(age) |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| 男     |  32.6000 |</span><br><span class=\"line\">| 女     |  23.2857 |</span><br><span class=\"line\">| 中性   |  33.0000 |</span><br><span class=\"line\">| 保密   |  28.0000 |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">select gender,count(*) from students group by gender having count(*)&gt;2;</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| gender | count(*) |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| 男     |        5 |</span><br><span class=\"line\">| 女     |        7 |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">select gender,count(*) from students group by gender with rollup;</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| gender | count(*) |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| 男     |        5 |</span><br><span class=\"line\">| 女     |        7 |</span><br><span class=\"line\">| 中性   |        1 |</span><br><span class=\"line\">| 保密   |        1 |</span><br><span class=\"line\">| NULL   |       14 |</span><br><span class=\"line\">+--------+----------+</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-6-分页\"><a href=\"#3-6-分页\" class=\"headerlink\" title=\"3.6 分页\"></a>3.6 分页</h3><p>当数据量过大时，在一页中查看数据是一件非常麻烦的事情</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">limit</span> <span class=\"keyword\">start</span>,<span class=\"keyword\">count</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h4><ul>\n<li>从start开始，获取count条数据</li>\n</ul>\n<p>例1：查询前3行男生信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> students <span class=\"keyword\">where</span> gender=<span class=\"number\">1</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-7-总结\"><a href=\"#3-7-总结\" class=\"headerlink\" title=\"3.7   总结\"></a>3.7   总结</h3><p><strong>查询的完整格式 ^_<em>^ 不要被吓到 其实很简单 !</em> _ !</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> select_expr [,select_expr,...] [      </span><br><span class=\"line\">      <span class=\"keyword\">FROM</span> tb_name</span><br><span class=\"line\">      [<span class=\"keyword\">WHERE</span> 条件判断]</span><br><span class=\"line\">      [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &#123;col_name | postion&#125; [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>], ...] </span><br><span class=\"line\">      [<span class=\"keyword\">HAVING</span> <span class=\"keyword\">WHERE</span> 条件判断]</span><br><span class=\"line\">      [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &#123;col_name|expr|postion&#125; [<span class=\"keyword\">ASC</span> | <span class=\"keyword\">DESC</span>], ...]</span><br><span class=\"line\">      [ <span class=\"keyword\">LIMIT</span> &#123;[<span class=\"keyword\">offset</span>,]rowcount | <span class=\"keyword\">row_count</span> <span class=\"keyword\">OFFSET</span> <span class=\"keyword\">offset</span>&#125;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完整的select语句</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">where</span> ....</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> ... <span class=\"keyword\">having</span> ...</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> ...</span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"keyword\">start</span>,<span class=\"keyword\">count</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行顺序为：<ul>\n<li>from 表名</li>\n<li>where ….</li>\n<li>group by …</li>\n<li>select distinct *</li>\n<li>having …</li>\n<li>order by …</li>\n<li>limit start,count</li>\n</ul>\n</li>\n<li>实际使用中，只是语句中某些部分的组合，而不是全部</li>\n</ul>\n<h2 id=\"四：python-操作-MYSQL\"><a href=\"#四：python-操作-MYSQL\" class=\"headerlink\" title=\"四：python 操作 MYSQL\"></a>四：python 操作 MYSQL</h2><p><img src=\"http://photo.jomeswang.top/20200703155202.png\" alt=\"\"></p>\n<h3 id=\"4-1-引入模块\"><a href=\"#4-1-引入模块\" class=\"headerlink\" title=\"4.1 引入模块\"></a>4.1 引入模块</h3><ul>\n<li>在py文件中引入pymysql模块</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymysql <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-Connection-对象\"><a href=\"#4-2-Connection-对象\" class=\"headerlink\" title=\"4.2 Connection 对象\"></a>4.2 Connection 对象</h3><ul>\n<li>用于建立与数据库的连接</li>\n<li>创建对象：调用connect()方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">conn=connect(参数列表)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数host：连接的mysql主机，如果本机是’localhost’</li>\n<li>参数port：连接的mysql主机的端口，默认是3306</li>\n<li>参数database：数据库的名称</li>\n<li>参数user：连接的用户名</li>\n<li>参数password：连接的密码</li>\n<li>参数charset：通信采用的编码方式，推荐使用utf8</li>\n</ul>\n<h3 id=\"4-3-对象的方法\"><a href=\"#4-3-对象的方法\" class=\"headerlink\" title=\"4.3 对象的方法\"></a>4.3 对象的方法</h3><ul>\n<li>close()关闭连接</li>\n<li>commit()提交</li>\n<li>cursor()返回Cursor对象，用于执行sql语句并获得结果</li>\n</ul>\n<h3 id=\"4-4-Cursor对象\"><a href=\"#4-4-Cursor对象\" class=\"headerlink\" title=\"4.4 Cursor对象\"></a>4.4 Cursor对象</h3><ul>\n<li>用于执行sql语句，使用频度最高的语句为select、insert、update、delete</li>\n<li>获取Cursor对象：调用Connection对象的cursor()方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">cs1=conn.cursor()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5-对象的方法\"><a href=\"#4-5-对象的方法\" class=\"headerlink\" title=\"4.5 对象的方法\"></a>4.5 对象的方法</h3><ul>\n<li>close()关闭</li>\n<li>execute(operation [, parameters ])执行语句，返回受影响的行数，主要用于执行insert、update、delete语句，也可以执行create、alter、drop等语句</li>\n<li>fetchone()执行查询语句时，获取查询结果集的第一个行数据，返回一个元组</li>\n<li>fetchall()执行查询时，获取结果集的所有行，一行构成一个元组，再将这些元组装入一个元组返回</li>\n</ul>\n<h3 id=\"4-6-对象的属性\"><a href=\"#4-6-对象的属性\" class=\"headerlink\" title=\"4.6 对象的属性\"></a>4.6 对象的属性</h3><ul>\n<li>rowcount只读属性，表示最近一次execute()执行后受影响的行数</li>\n<li>connection获得当前连接对象</li>\n</ul>\n<h2 id=\"五：python-mysql-增删改查\"><a href=\"#五：python-mysql-增删改查\" class=\"headerlink\" title=\"五：python mysql  增删改查\"></a>五：python mysql  增删改查</h2><h3 id=\"5-1-基础\"><a href=\"#5-1-基础\" class=\"headerlink\" title=\"5.1 基础\"></a>5.1 基础</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pymysql import *</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # 创建Connection连接</span><br><span class=\"line\">    conn &#x3D; connect(host&#x3D;&#39;localhost&#39;,port&#x3D;3306,database&#x3D;&#39;jing_dong&#39;,user&#x3D;&#39;root&#39;,password&#x3D;&#39;mysql&#39;,charset&#x3D;&#39;utf8&#39;)</span><br><span class=\"line\">    # 获得Cursor对象</span><br><span class=\"line\">    cs1 &#x3D; conn.cursor()</span><br><span class=\"line\">    # 执行insert语句，并返回受影响的行数：添加一条数据</span><br><span class=\"line\">    # 增加</span><br><span class=\"line\">    count &#x3D; cs1.execute(&#39;insert into goods_cates(name) values(&quot;硬盘&quot;)&#39;)</span><br><span class=\"line\">    #打印受影响的行数</span><br><span class=\"line\">    print(count)</span><br><span class=\"line\"></span><br><span class=\"line\">    count &#x3D; cs1.execute(&#39;insert into goods_cates(name) values(&quot;光盘&quot;)&#39;)</span><br><span class=\"line\">    print(count)</span><br><span class=\"line\"></span><br><span class=\"line\">    # # 更新</span><br><span class=\"line\">    # count &#x3D; cs1.execute(&#39;update goods_cates set name&#x3D;&quot;机械硬盘&quot; where name&#x3D;&quot;硬盘&quot;&#39;)</span><br><span class=\"line\">    # # 删除</span><br><span class=\"line\">    # count &#x3D; cs1.execute(&#39;delete from goods_cates where id&#x3D;6&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 提交之前的操作，如果之前已经之执行过多次的execute，那么就都进行提交</span><br><span class=\"line\">    conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    # 关闭Cursor对象</span><br><span class=\"line\">    cs1.close()</span><br><span class=\"line\">    # 关闭Connection对象</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-2-查询一行数据\"><a href=\"#5-2-查询一行数据\" class=\"headerlink\" title=\"5.2 查询一行数据\"></a>5.2 查询一行数据</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymysql <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建Connection连接</span></span><br><span class=\"line\">    conn = connect(host=<span class=\"string\">'localhost'</span>,port=<span class=\"number\">3306</span>,user=<span class=\"string\">'root'</span>,password=<span class=\"string\">'mysql'</span>,database=<span class=\"string\">'jing_dong'</span>,charset=<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 获得Cursor对象</span></span><br><span class=\"line\">    cs1 = conn.cursor()</span><br><span class=\"line\">    <span class=\"comment\"># 执行select语句，并返回受影响的行数：查询一条数据</span></span><br><span class=\"line\">    count = cs1.execute(<span class=\"string\">'select id,name from goods where id&gt;=4'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 打印受影响的行数</span></span><br><span class=\"line\">    print(<span class=\"string\">\"查询到%d条数据:\"</span> % count)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(count):</span><br><span class=\"line\">        <span class=\"comment\"># 获取查询的结果</span></span><br><span class=\"line\">        result = cs1.fetchone()</span><br><span class=\"line\">        <span class=\"comment\"># 打印查询的结果</span></span><br><span class=\"line\">        print(result)</span><br><span class=\"line\">        <span class=\"comment\"># 获取查询的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 关闭Cursor对象</span></span><br><span class=\"line\">    cs1.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-3-查询多行数据\"><a href=\"#5-3-查询多行数据\" class=\"headerlink\" title=\"5.3  查询多行数据\"></a>5.3  查询多行数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pymysql import *</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # 创建Connection连接</span><br><span class=\"line\">    conn &#x3D; connect(host&#x3D;&#39;localhost&#39;,port&#x3D;3306,user&#x3D;&#39;root&#39;,password&#x3D;&#39;mysql&#39;,database&#x3D;&#39;jing_dong&#39;,charset&#x3D;&#39;utf8&#39;)</span><br><span class=\"line\">    # 获得Cursor对象</span><br><span class=\"line\">    cs1 &#x3D; conn.cursor()</span><br><span class=\"line\">    # 执行select语句，并返回受影响的行数：查询一条数据</span><br><span class=\"line\">    count &#x3D; cs1.execute(&#39;select id,name from goods where id&gt;&#x3D;4&#39;)</span><br><span class=\"line\">    # 打印受影响的行数</span><br><span class=\"line\">    print(&quot;查询到%d条数据:&quot; % count)</span><br><span class=\"line\"></span><br><span class=\"line\">    # for i in range(count):</span><br><span class=\"line\">    #     # 获取查询的结果</span><br><span class=\"line\">    #     result &#x3D; cs1.fetchone()</span><br><span class=\"line\">    #     # 打印查询的结果</span><br><span class=\"line\">    #     print(result)</span><br><span class=\"line\">    #     # 获取查询的结果</span><br><span class=\"line\"></span><br><span class=\"line\">    result &#x3D; cs1.fetchall()</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 关闭Cursor对象</span><br><span class=\"line\">    cs1.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n","categories":["mysql"],"tags":["mysql"]},{"title":"Matlab 深度学习","url":"/posts/4ca17e7a/","content":"<blockquote>\n<p>入坑 MATLAB 进行深度学习</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：摄像头\"><a href=\"#一：摄像头\" class=\"headerlink\" title=\"一：摄像头\"></a>一：摄像头</h2><h3 id=\"1-1-两种获取摄像头的方式\"><a href=\"#1-1-两种获取摄像头的方式\" class=\"headerlink\" title=\"1.1   两种获取摄像头的方式\"></a>1.1   两种获取摄像头的方式</h3><p>Matlab自身不支持直接读取摄像头数据，需要安装硬件支持包才可以获取，目前常用的有两个包：</p>\n<p><img src=\"http://photo.jomeswang.top/20200625234633.png\" alt=\"\"></p>\n<p>第一个是 MATLAB Support Package for USB Webcams，这个包可以获取任何USB摄像头的图像（UVC），也可以获取电脑自带摄像头的数据，兼容 R2014a 到 R2020a 的版本。</p>\n<p>第二个是Image Acquisition Toolbox Support Package for OS Generic Video Interface，更加通用，它也兼容 R2014a 到 R2020a 的版本。（推荐）</p>\n<p>点击获取附加功能中的获取硬件支持包（安装适合的包）：</p>\n<p><img src=\"http://photo.jomeswang.top/20200625234839.png\" alt=\"\"></p>\n<h3 id=\"1-2-第一种方法摄像头的使用（webcams）\"><a href=\"#1-2-第一种方法摄像头的使用（webcams）\" class=\"headerlink\" title=\"1.2   第一种方法摄像头的使用（webcams）\"></a>1.2   第一种方法摄像头的使用（webcams）</h3><h4 id=\"1-2-1-查看当前摄像头设备列表\"><a href=\"#1-2-1-查看当前摄像头设备列表\" class=\"headerlink\" title=\"1.2.1   查看当前摄像头设备列表\"></a>1.2.1   查看当前摄像头设备列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">webcamlist</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200626004325.png\" alt=\"\"></p>\n<p>需要注意，使用webcam的时候，下标从1开始，1对应USB Camera，2对应Integrated Camera。</p>\n<h4 id=\"1-2-2-获取视频对象\"><a href=\"#1-2-2-获取视频对象\" class=\"headerlink\" title=\"1.2.2    获取视频对象\"></a>1.2.2    获取视频对象</h4><p>一行代码即可获取，非常舒服，比如获取外接USB摄像头的输入对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cam1 &#x3D; webcam(1)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200626004407.png\" alt=\"\"></p>\n<p>同样可以获取电脑自带摄像头的输入对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cam1 &#x3D; webcam(2)</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"http://photo.jomeswang.top/20200626004416.png\" alt=\"\"></p>\n<h4 id=\"1-2-3-预览视频对象\"><a href=\"#1-2-3-预览视频对象\" class=\"headerlink\" title=\"1.2.3    预览视频对象\"></a>1.2.3    预览视频对象</h4><p>使用如下命令即可预览视频对象，该函数会自动打开一个窗口，播放摄像头画面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">preview(cam1)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-4-查看摄像头支持的分辨率并修改：\"><a href=\"#1-2-4-查看摄像头支持的分辨率并修改：\" class=\"headerlink\" title=\"1.2.4   查看摄像头支持的分辨率并修改：\"></a>1.2.4   查看摄像头支持的分辨率并修改：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;刚刚获取的设备对象&gt;.AvailableResolutions</span><br></pre></td></tr></table></figure>\n\n<p>然后根据修改为需要的分辨率：</p>\n<p><img src=\"http://photo.jomeswang.top/20200626004458.png\" alt=\"\"></p>\n<p>再次preview之后即可看到分辨率改变。</p>\n<h4 id=\"1-2-5-用完之后清除对象\"><a href=\"#1-2-5-用完之后清除对象\" class=\"headerlink\" title=\"1.2.5   用完之后清除对象\"></a>1.2.5   用完之后清除对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">clear &lt;刚刚获取的对象&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-6-拍照（抓取画面）\"><a href=\"#1-2-6-拍照（抓取画面）\" class=\"headerlink\" title=\"1.2.6    拍照（抓取画面）\"></a>1.2.6    拍照（抓取画面）</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mypic &#x3D; snapshot(cam1);</span><br><span class=\"line\">imshow(mypic);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-3-第二种方法摄像头的使用（Image-Acquisition-Toolbox）\"><a href=\"#1-3-第二种方法摄像头的使用（Image-Acquisition-Toolbox）\" class=\"headerlink\" title=\"1.3   第二种方法摄像头的使用（Image Acquisition Toolbox）\"></a>1.3   第二种方法摄像头的使用（Image Acquisition Toolbox）</h3><h4 id=\"1-3-1-首先执行这条命令打开摄像头，测试是否可以调用videoinput函数：\"><a href=\"#1-3-1-首先执行这条命令打开摄像头，测试是否可以调用videoinput函数：\" class=\"headerlink\" title=\"1.3.1    首先执行这条命令打开摄像头，测试是否可以调用videoinput函数：\"></a>1.3.1    首先执行这条命令打开摄像头，测试是否可以调用videoinput函数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">video_source &#x3D; videoinput(&#39;winvideo&#39;,1)</span><br></pre></td></tr></table></figure>\n\n<p>如果出现图中的错误，那么恭喜你，需要手动安装硬件支持包了。</p>\n<p><img src=\"http://photo.jomeswang.top/20200626004837.png\" alt=\"\"></p>\n<h4 id=\"1-3-2-查看电脑上已经安装的图像适配器\"><a href=\"#1-3-2-查看电脑上已经安装的图像适配器\" class=\"headerlink\" title=\"1.3.2   查看电脑上已经安装的图像适配器\"></a>1.3.2   查看电脑上已经安装的图像适配器</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">imaqhwinfo()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200626004915.png\" alt=\"\"></p>\n<p>其中InstalledAdaptors的值给出了当前电脑上已经安装的摄像头适配器个数，这里我的电脑上只有一个：winvideo。</p>\n<h4 id=\"1-3-3-查看摄像头设备具体参数\"><a href=\"#1-3-3-查看摄像头设备具体参数\" class=\"headerlink\" title=\"1.3.3    查看摄像头设备具体参数\"></a>1.3.3    查看摄像头设备具体参数</h4><p>使用该命令查看上一步获取到的图像适配器的具体参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">win_info &#x3D; imaqhwinfo(&#39;winvideo&#39;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200626005159.png\" alt=\"\"></p>\n<p>可以看到其中给出了该图像适配器具体的一些参数，特别需要注意的是，该函数返回了连接在当前图像适配器winvideo上的所有摄像头的设备ID和设备信息！</p>\n<p>当前我的电脑上一共有两个摄像头，一个是笔记本电脑内置的摄像头，另一个是我连接的USB 2.0 摄像头，接下来以USB摄像头为例，说明如何查看摄像头的设备ID和具体信息：</p>\n<p>在工作区找到保存信息的变量win_info，双击查看其值：</p>\n<p><img src=\"http://photo.jomeswang.top/20200626083926.png\" alt=\"\"></p>\n<p>可以看到，两个摄像头的设备ID分别为1和2，一般来说，电脑内置的摄像头的ID为1。</p>\n<p>同样，双击win_info.DeviceInfo变量，可以查看摄像头的具体参数：</p>\n<p><img src=\"http://photo.jomeswang.top/20200626083944.png\" alt=\"\"></p>\n<h4 id=\"1-3-4-创建视频输入对象\"><a href=\"#1-3-4-创建视频输入对象\" class=\"headerlink\" title=\"1.3.4    创建视频输入对象\"></a>1.3.4    创建视频输入对象</h4><p>使用如下的命令来创建一个视频输入对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">video_obj &#x3D; videoinput(adaptorname,deviceID,format)</span><br></pre></td></tr></table></figure>\n\n<p>该函数的三个参数说明如下：</p>\n<ul>\n<li>adaptorname：适配器名称（必须）</li>\n<li>deviceID：设备ID号（必须）</li>\n<li>format：视频采集格式（不填写则使用默认）<br>如下，我要创建USB摄像头的视频输入对象：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">video_obj &#x3D; videoinput(&#39;winvideo&#39;,2)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200626084122.png\" alt=\"\"></p>\n<h4 id=\"1-3-5-预览视频对象\"><a href=\"#1-3-5-预览视频对象\" class=\"headerlink\" title=\"1.3.5    预览视频对象\"></a>1.3.5    预览视频对象</h4><p>使用如下命令即可预览视频对象，该函数会自动打开一个窗口，播放摄像头画面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">preview(video_obj)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-6-捕抓画面\"><a href=\"#1-3-6-捕抓画面\" class=\"headerlink\" title=\"1.3.6     捕抓画面\"></a>1.3.6     捕抓画面</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mypic &#x3D; getsnapshot(video_obj);</span><br><span class=\"line\">imshow(mypic);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：-迁移学习\"><a href=\"#二：-迁移学习\" class=\"headerlink\" title=\"二： 迁移学习\"></a>二： 迁移学习</h2><blockquote>\n<p>AlexNet已经训练了超过100万张图片，可以将图片分类为1000个对象类别(如键盘、咖啡杯、铅笔和许多动物)。该网络已经学习了大量图像的丰富特征表示。该网络以一幅图像作为输入，并输出图像中对象的标签以及每个对象类别的概率。</p>\n</blockquote>\n<h3 id=\"2-1-首先安装相应的包\"><a href=\"#2-1-首先安装相应的包\" class=\"headerlink\" title=\"2.1 首先安装相应的包\"></a>2.1 首先安装相应的包</h3><p><code>Deep Learning Toobox Model for Alexnet Network</code></p>\n<p><img src=\"http://photo.jomeswang.top/20200626171932.png\" alt=\"\"></p>\n<h3 id=\"2-2-使用方法\"><a href=\"#2-2-使用方法\" class=\"headerlink\" title=\"2.2 使用方法\"></a>2.2 使用方法</h3><p><img src=\"http://photo.jomeswang.top/20200626172036.png\" alt=\"\"></p>\n<h3 id=\"2-3-加载数据集\"><a href=\"#2-3-加载数据集\" class=\"headerlink\" title=\"2.3  加载数据集\"></a>2.3  加载数据集</h3><p>需要先将数据标注好，即在一个文件夹下放多个标签名字的文件夹，里面有相应的图片。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">%  使用数据集函数载入并标记数据</span><br><span class=\"line\">imds &#x3D; imageDatastore(&#39;MerchData&#39;, ...</span><br><span class=\"line\">    &#39;IncludeSubfolders&#39;,true, ...</span><br><span class=\"line\">    &#39;LabelSource&#39;,&#39;foldernames&#39;);</span><br><span class=\"line\">    </span><br><span class=\"line\">% 分离训练数据和测试数据</span><br><span class=\"line\">[imdsTrain,imdsValidation] &#x3D; splitEachLabel(imds,0.7,&#39;randomized&#39;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-加载训练网络\"><a href=\"#2-4-加载训练网络\" class=\"headerlink\" title=\"2.4  加载训练网络\"></a>2.4  加载训练网络</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net &#x3D; alexnet;</span><br><span class=\"line\">%  取出网络所需的图片大小</span><br><span class=\"line\">inputSize &#x3D; net.Layers(1).InputSize</span><br></pre></td></tr></table></figure>\n\n<p>其中图片的大小有限制，不同的网络不一样。Alexnet  的限制是227 227 3.</p>\n<p>方法一（推荐）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pixelRange &#x3D; [-30 30];</span><br><span class=\"line\">imageAugmenter &#x3D; imageDataAugmenter( ...</span><br><span class=\"line\">    &#39;RandXReflection&#39;,true, ...</span><br><span class=\"line\">    &#39;RandXTranslation&#39;,pixelRange, ...</span><br><span class=\"line\">    &#39;RandYTranslation&#39;,pixelRange);</span><br><span class=\"line\"></span><br><span class=\"line\">%  训练数据</span><br><span class=\"line\">augimdsTrain &#x3D; augmentedImageDatastore(inputSize(1:2),imdsTrain, ...</span><br><span class=\"line\">    &#39;DataAugmentation&#39;,imageAugmenter);</span><br><span class=\"line\">    </span><br><span class=\"line\">% 测试数据</span><br><span class=\"line\">augimdsValidation &#x3D; augmentedImageDatastore(inputSize(1:2),imdsValidation);</span><br></pre></td></tr></table></figure>\n\n<p>方法二： 使用imresize  方法改变大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">% This file in order to change the photo size into the fit size</span><br><span class=\"line\"></span><br><span class=\"line\">source_files &#x3D; &quot;Answer&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">imds &#x3D; imageDatastore(source_files, &#39;IncludeSubFolders&#39;, true, &#39;LabelSource&#39;, &#39;foldernames&#39;);</span><br><span class=\"line\">lens &#x3D; length(imds.Labels);</span><br><span class=\"line\">% lens &#x3D; 2;</span><br><span class=\"line\"></span><br><span class=\"line\">% imshow(readimage(imds, 2))</span><br><span class=\"line\">for i&#x3D;1:lens</span><br><span class=\"line\">    dir &#x3D; char(imds.Files(i));</span><br><span class=\"line\">    img&#x3D;imresize(readimage(imds, i),[227,227]);</span><br><span class=\"line\">    imwrite(img, dir);</span><br><span class=\"line\">    i</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">disp(&quot;All thing has been done successfully!&quot;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-5-取代最后一层\"><a href=\"#2-5-取代最后一层\" class=\"headerlink\" title=\"2.5  取代最后一层\"></a>2.5  取代最后一层</h3><p>预训练的网络的最后三层被配置为1000个类。这三层必须针对新的分类问题进行微调。从预先训练好的网络中提取除后三层之外的所有层。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">layersTransfer &#x3D; net.Layers(1:end-3);</span><br><span class=\"line\">numClasses &#x3D; numel(categories(imdsTrain.Labels))</span><br><span class=\"line\">layers &#x3D; [</span><br><span class=\"line\">    layersTransfer</span><br><span class=\"line\">    fullyConnectedLayer(numClasses,&#39;WeightLearnRateFactor&#39;,20,&#39;BiasLearnRateFactor&#39;,20)</span><br><span class=\"line\">    softmaxLayer</span><br><span class=\"line\">    classificationLayer];</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-6-训练网络\"><a href=\"#2-6-训练网络\" class=\"headerlink\" title=\"2.6 训练网络\"></a>2.6 训练网络</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">options &#x3D; trainingOptions(&#39;sgdm&#39;, ...</span><br><span class=\"line\">    &#39;MiniBatchSize&#39;,10, ...</span><br><span class=\"line\">    &#39;MaxEpochs&#39;,6, ...</span><br><span class=\"line\">    &#39;InitialLearnRate&#39;,1e-4, ...</span><br><span class=\"line\">    &#39;Shuffle&#39;,&#39;every-epoch&#39;, ...</span><br><span class=\"line\">    &#39;ValidationData&#39;,augimdsValidation, ...</span><br><span class=\"line\">    &#39;ValidationFrequency&#39;,3, ...</span><br><span class=\"line\">    &#39;Verbose&#39;,false, ...</span><br><span class=\"line\">    &#39;Plots&#39;,&#39;training-progress&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">% 开始训练网络</span><br><span class=\"line\">netTransfer &#x3D; trainNetwork(augimdsTrain,layers,options);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-7-验证网络\"><a href=\"#2-7-验证网络\" class=\"headerlink\" title=\"2.7 验证网络\"></a>2.7 验证网络</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[YPred,scores] &#x3D; classify(net,augimdsValidation);</span><br><span class=\"line\">% YPred 含最大可能分类，  scores 含各个分类的可能概率值</span><br><span class=\"line\"></span><br><span class=\"line\">% 测试网络的准确性</span><br><span class=\"line\">YValidation &#x3D; imdsValidation.Labels;</span><br><span class=\"line\">accuracy &#x3D; mean(YPred &#x3D;&#x3D; YValidation)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三：计算机视觉\"><a href=\"#三：计算机视觉\" class=\"headerlink\" title=\"三：计算机视觉\"></a>三：计算机视觉</h2><h3 id=\"3-1-摄像头处理数据\"><a href=\"#3-1-摄像头处理数据\" class=\"headerlink\" title=\"3.1  摄像头处理数据\"></a>3.1  摄像头处理数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vidobj &#x3D; videoinput(&#39;winvideo&#39;,1); %capture the device handle</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set(vidobj, &#39;FramesPerTrigger&#39;,1); % each time we call trigger one frame gets captured</span><br><span class=\"line\">set(vidobj, &#39;TriggerRepeat&#39;,inf); % we can have infinite triggers</span><br><span class=\"line\"></span><br><span class=\"line\">triggerconfig(vidobj, &#39;manual&#39;); % the trigger will be called manually. We can also set times for the same</span><br><span class=\"line\">start(vidobj); % start the device capture</span><br><span class=\"line\"></span><br><span class=\"line\">% 采集每一帧的数据</span><br><span class=\"line\">trigger(vidobj); % capture one frame</span><br><span class=\"line\">im&#x3D;getdata(vidobj); % frame is a matrix that stores the frame</span><br><span class=\"line\">%     im &#x3D; getsnapshot(cam);</span><br><span class=\"line\">image(ax1,im);</span><br></pre></td></tr></table></figure>\n\n","categories":["Matlab"],"tags":["Matlab","Deep Learning"]},{"title":"uni-app 入手体验","url":"/posts/35c7bc4b/","content":"<blockquote>\n<p><code>uni-app</code> 是一个使用 <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：-开发准备\"><a href=\"#一：-开发准备\" class=\"headerlink\" title=\"一： 开发准备\"></a>一： 开发准备</h2><h3 id=\"1-1-编译工具\"><a href=\"#1-1-编译工具\" class=\"headerlink\" title=\"1.1   编译工具\"></a>1.1   编译工具</h3><p>HBuilderX: <a href=\"https://www.dcloud.io/hbuilderx.html\" target=\"_blank\" rel=\"noopener\">https://www.dcloud.io/hbuilderx.html</a></p>\n<p>微信小程序开发工具： <a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p>\n<h3 id=\"1-2-环境配置\"><a href=\"#1-2-环境配置\" class=\"headerlink\" title=\"1.2  环境配置\"></a>1.2  环境配置</h3><ol>\n<li>打开微信开发者工具&gt;设置&gt;安全设置&gt;打开服务端口</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200619150350.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>HBuilderX&gt;运行&gt;小程序模拟器&gt;运行设置&gt;设置微信小程序开发工具路径</li>\n</ol>\n<h3 id=\"1-3-开发文档\"><a href=\"#1-3-开发文档\" class=\"headerlink\" title=\"1.3   开发文档\"></a>1.3   开发文档</h3><p>uni-app 开发文档：</p>\n<p>微信小程序开发文档：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/</a></p>\n<h2 id=\"二：入门\"><a href=\"#二：入门\" class=\"headerlink\" title=\"二：入门\"></a>二：入门</h2><h3 id=\"2-1-创建项目初始uni-app\"><a href=\"#2-1-创建项目初始uni-app\" class=\"headerlink\" title=\"2.1    创建项目初始uni-app\"></a>2.1    创建项目初始uni-app</h3><p>打开HBuilderX 新建uni-app 项目</p>\n<p><img src=\"http://photo.jomeswang.top/20200619150728.png\" alt=\"\"></p>\n<p>打开之后看到目录，现在我们来看看目录有什么呢？</p>\n<p><img src=\"http://photo.jomeswang.top/20200619150948.png\" alt=\"\"></p>\n<h3 id=\"2-2-表达式测试\"><a href=\"#2-2-表达式测试\" class=\"headerlink\" title=\"2.2  表达式测试\"></a>2.2  表达式测试</h3><p><img src=\"http://photo.jomeswang.top/20200619153816.png\" alt=\"\"></p>\n<h3 id=\"2-3-属性绑定\"><a href=\"#2-3-属性绑定\" class=\"headerlink\" title=\"2.3 属性绑定\"></a>2.3 属性绑定</h3><p><img src=\"http://photo.jomeswang.top/20200619154624.png\" alt=\"\"></p>\n<h3 id=\"2-4-方法调用\"><a href=\"#2-4-方法调用\" class=\"headerlink\" title=\"2.4  方法调用\"></a>2.4  方法调用</h3><p><img src=\"http://photo.jomeswang.top/20200619155111.png\" alt=\"\"></p>\n<h3 id=\"2-5-常用指令\"><a href=\"#2-5-常用指令\" class=\"headerlink\" title=\"2.5   常用指令\"></a>2.5   常用指令</h3><p><img src=\"http://photo.jomeswang.top/20200619160958.png\" alt=\"\"></p>\n<h3 id=\"2-6-常用生命周期\"><a href=\"#2-6-常用生命周期\" class=\"headerlink\" title=\"2.6    常用生命周期\"></a>2.6    常用生命周期</h3><h4 id=\"2-6-1-应用生命周期\"><a href=\"#2-6-1-应用生命周期\" class=\"headerlink\" title=\"2.6.1    应用生命周期\"></a>2.6.1    应用生命周期</h4><table>\n<thead>\n<tr>\n<th align=\"left\">函数名</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onLaunch</td>\n<td align=\"left\">当<code>uni-app</code> 初始化完成时触发（全局只触发一次）传入一个option，里面可以获取场景值</td>\n</tr>\n<tr>\n<td align=\"left\">onShow</td>\n<td align=\"left\">当 <code>uni-app</code> 启动，或从后台进入前台显示，传入一个option，里面可以获取场景值</td>\n</tr>\n<tr>\n<td align=\"left\">onHide</td>\n<td align=\"left\">当 <code>uni-app</code> 从前台进入后台</td>\n</tr>\n<tr>\n<td align=\"left\">onUniNViewMessage</td>\n<td align=\"left\">对 <code>nvue</code> 页面发送的数据进行监听，可参考 <a href=\"https://uniapp.dcloud.net.cn/use-weex?id=nvue-向-vue-通讯\" target=\"_blank\" rel=\"noopener\">nvue 向 vue 通讯</a></td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong></p>\n<ul>\n<li>应用生命周期仅可在<code>App.vue</code>中监听，在其它页面监听无效。</li>\n<li>onlaunch里进行页面跳转，如遇白屏报错，请参考<a href=\"https://ask.dcloud.net.cn/article/35942\" target=\"_blank\" rel=\"noopener\">https://ask.dcloud.net.cn/article/35942</a></li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">onShow: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'App Show'</span>);</span><br><span class=\"line\">\t\t <span class=\"built_in\">console</span>.log(option);</span><br><span class=\"line\">\t&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-6-2-分页生命周期\"><a href=\"#2-6-2-分页生命周期\" class=\"headerlink\" title=\"2.6.2 分页生命周期\"></a>2.6.2 分页生命周期</h4><p><img src=\"http://photo.jomeswang.top/20200619162326.png\" alt=\"\"></p>\n<h4 id=\"2-6-3-组件生命周期\"><a href=\"#2-6-3-组件生命周期\" class=\"headerlink\" title=\"2.6.3 组件生命周期\"></a>2.6.3 组件生命周期</h4><p><img src=\"http://photo.jomeswang.top/20200619162402.png\" alt=\"\"></p>\n<h3 id=\"2-7-路由跳转\"><a href=\"#2-7-路由跳转\" class=\"headerlink\" title=\"2.7   路由跳转\"></a>2.7   路由跳转</h3><p><img src=\"http://photo.jomeswang.top/20200619162910.png\" alt=\"\"></p>\n<p>例子：写在方法里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\">\t\t非tabbar配置的页面我们使用 navigateTo</span><br><span class=\"line\">\t\t跳转时保留老页面,一般用于需要返回</span><br><span class=\"line\">\t\t *&#x2F;</span><br><span class=\"line\">\t\t uni.navigateTo(&#123;</span><br><span class=\"line\">\t\t\turl:&quot;..&#x2F;one&#x2F;one&quot;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;* 跳转pages.json&gt;tabbar&gt;配置过的页面,使用 switchTab</span><br><span class=\"line\">\t\tuni.switchTab(&#123;</span><br><span class=\"line\">\t\t\turl:&quot;..&#x2F;news&#x2F;news&quot;</span><br><span class=\"line\">\t\t&#125;) *&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-8-视图容器\"><a href=\"#2-8-视图容器\" class=\"headerlink\" title=\"2.8 视图容器\"></a>2.8 视图容器</h3><p><img src=\"http://photo.jomeswang.top/20200619213842.png\" alt=\"\"></p>\n<h3 id=\"2-9-节点操作\"><a href=\"#2-9-节点操作\" class=\"headerlink\" title=\"2.9   节点操作\"></a>2.9   节点操作</h3><p><img src=\"http://photo.jomeswang.top/20200619213931.png\" alt=\"\"></p>\n<h3 id=\"2-10-网络请求\"><a href=\"#2-10-网络请求\" class=\"headerlink\" title=\"2.10  网络请求\"></a>2.10  网络请求<img src=\"http://photo.jomeswang.top/20200619215225.png\" alt=\"\"></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">uni.request(&#123;</span><br><span class=\"line\">    url: &#39;https:&#x2F;&#x2F;www.example.com&#x2F;request&#39;,</span><br><span class=\"line\">    success: (res) &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(res.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-11-扩展组件\"><a href=\"#2-11-扩展组件\" class=\"headerlink\" title=\"2.11  扩展组件\"></a>2.11  扩展组件</h3><p><img src=\"http://photo.jomeswang.top/20200619215321.png\" alt=\"\"></p>\n<h3 id=\"2-12-vuex-组件数据管理\"><a href=\"#2-12-vuex-组件数据管理\" class=\"headerlink\" title=\"2.12 vuex 组件数据管理\"></a>2.12 vuex 组件数据管理</h3><p>uni- app 中已经有vuex 组件了。</p>\n<p><img src=\"http://photo.jomeswang.top/20200619220948.png\" alt=\"\"></p>\n<p>在根目录下的main.js 中加入以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import store from &#39;.&#x2F;store&#39;</span><br><span class=\"line\">Vue.prototype.$store&#x3D;store;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在根目录下创建一个store文件夹，放入一个index.js 文件，里面写vuex配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import Vuex from &quot;vuex&quot;</span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\">export default new Vuex.Store(&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 全局属性变量</span><br><span class=\"line\">\tstate:&#123;</span><br><span class=\"line\">\t\tnum:0,</span><br><span class=\"line\">\t\tprice:10,</span><br><span class=\"line\">\t\tname:&#39;苹果&#39;,</span><br><span class=\"line\">\t\ttestList:[]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#x2F;&#x2F; 全局同步方法, 调用方法,this.$store.commit(&quot;xxx&quot;)</span><br><span class=\"line\">\tmutations:&#123;</span><br><span class=\"line\">\t\tadd(state)&#123;</span><br><span class=\"line\">\t\t\tstate.num++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#x2F;&#x2F;Vuex属性计算,在视图里面当变量使用</span><br><span class=\"line\">\tgetters:&#123;</span><br><span class=\"line\">\t\tcount(state)&#123;</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F;这个函数的执行依赖一个可变的变量</span><br><span class=\"line\">\t\t\treturn state.num*state.price;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#x2F;&#x2F;异步方法 调用方法,this.$store.dispatch(&quot;xxx&quot;) </span><br><span class=\"line\">\tactions:&#123;</span><br><span class=\"line\">\t\ttestActions(context)&#123;</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; context里面包含了 state,mutations,getters,actions</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; console.log(context)</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 执行一些异步参数,通用ajax</span><br><span class=\"line\">\t\t\tsetTimeout(()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t\t\tcontext.state.testList&#x3D;[&quot;猪猪侠&quot;,&quot;超人强&quot;,&quot;喜洋洋&quot;,&quot;老村长&quot;]</span><br><span class=\"line\">\t\t\t&#125;, 2000);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n","categories":["小程序"],"tags":["小程序"]},{"title":"解决数组，对象更新但vue视图不更新","url":"/posts/b55e4518/","content":"<blockquote>\n<p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：检测变化注意\"><a href=\"#一：检测变化注意\" class=\"headerlink\" title=\"一：检测变化注意\"></a>一：检测变化注意</h2><h3 id=\"1-1-对于对象\"><a href=\"#1-1-对于对象\" class=\"headerlink\" title=\"1.1  对于对象\"></a>1.1  对于对象</h3><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.someObject.b &#x3D; 2  &#x2F;&#x2F; 这种直接添加对象属性的方法不能够被检测到</span><br></pre></td></tr></table></figure>\n\n<p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如，对于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.set(vm.someObject, &#39;b&#39;, 2)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 您还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名：</span><br><span class=\"line\">this.$set(this.someObject,&#39;b&#39;,2)   &#x2F;&#x2F; 等价于 this.someObject.b &#x3D; 2</span><br></pre></td></tr></table></figure>\n\n<p>有时你可能需要为已有对象赋值多个新 property，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。但是，这样添加到对象上的新 property 不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 代替 &#96;Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)&#96;</span><br><span class=\"line\">this.someObject &#x3D; Object.assign(&#123;&#125;, this.someObject, &#123; a: 1, b: 2 &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-对于数组\"><a href=\"#1-2-对于数组\" class=\"headerlink\" title=\"1.2 对于数组\"></a>1.2 对于数组</h3><p>Vue 不能检测以下数组的变动：</p>\n<ol>\n<li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li>\n<li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li>\n</ol>\n<p>举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.items[1] &#x3D; &#39;x&#39; &#x2F;&#x2F; 不是响应性的</span><br><span class=\"line\">vm.items.length &#x3D; 2 &#x2F;&#x2F; 不是响应性的</span><br></pre></td></tr></table></figure>\n\n<p>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将在响应式系统内触发状态更新：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Vue.set</span><br><span class=\"line\">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class=\"line\">&#x2F;&#x2F; Array.prototype.splice</span><br><span class=\"line\">vm.items.splice(indexOfItem, 1, newValue)</span><br></pre></td></tr></table></figure>\n\n<p>你也可以使用 <a href=\"https://cn.vuejs.org/v2/api/#vm-set\" target=\"_blank\" rel=\"noopener\"><code>vm.$set</code></a> 实例方法，该方法是全局方法 <code>Vue.set</code> 的一个别名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.$set(vm.items, indexOfItem, newValue)  &#x2F;&#x2F;在</span><br><span class=\"line\"></span><br><span class=\"line\">this.$set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure>\n\n<p>为了解决第二类问题，你可以使用 <code>splice</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure>\n\n<p> <code>在组件中使用 this 代替  vm</code>   </p>\n<h2 id=\"二：总结\"><a href=\"#二：总结\" class=\"headerlink\" title=\"二：总结\"></a>二：总结</h2><h3 id=\"2-1-重新渲染视图\"><a href=\"#2-1-重新渲染视图\" class=\"headerlink\" title=\"2.1 重新渲染视图\"></a>2.1 重新渲染视图</h3><p>如果你没有发现哪里的数据更新了，但视图没有更新的话。请使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$forceUpdate()    &#x2F;&#x2F; 这个函数会强制刷新视图，重新渲染数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用-set方法\"><a href=\"#2-2-使用-set方法\" class=\"headerlink\" title=\"2. 2   使用 set方法\"></a>2. 2   使用 set方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$set(vm.items, indexOfItem, newValue)  &#x2F;&#x2F; 数组</span><br><span class=\"line\"></span><br><span class=\"line\">this.$set(object, propertyName, value)    &#x2F;&#x2F; 对象</span><br></pre></td></tr></table></figure>\n\n","categories":["vue"],"tags":["vue"]},{"title":"解决vue的跨域问题","url":"/posts/a8f404b4/","content":"<blockquote>\n<p>使用官方推荐方法进行跨域问题解决</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200614100745.png\" alt=\"\"></p>\n<p>之前使用vue-jsonp  来解决跨域问题，这次使用官方方法来解决。</p>\n<p>我的请求地址 ： <em><a href=\"https://api.ixiaowai.cn/mcapi/mcapi.php?return=json\" target=\"_blank\" rel=\"noopener\">https://api.ixiaowai.cn/mcapi/mcapi.php?return=json</a></em></p>\n<p>首先，要在当前项目的根路径下新建一个文件,文件名是固定的 vue.config.js  （与package.json同路径）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        open: true,  &#x2F;&#x2F; 默认启动自启浏览器</span><br><span class=\"line\">        host: &#39;localhost&#39;,</span><br><span class=\"line\">        port: 8001,</span><br><span class=\"line\">        https: false,</span><br><span class=\"line\">        &#x2F;&#x2F;以上的ip和端口是我们本机的;下面为需要跨域的</span><br><span class=\"line\">        proxy: &#123;&#x2F;&#x2F;配置跨域</span><br><span class=\"line\">            &#39;&#x2F;api&#39;: &#123;</span><br><span class=\"line\">                target: &#39;https:&#x2F;&#x2F;api.ixiaowai.cn&#39;,&#x2F;&#x2F;这里后台的地址模拟的;应该填写你们真实的后台接口</span><br><span class=\"line\">                ws: true,</span><br><span class=\"line\">                changOrigin: true,&#x2F;&#x2F;允许跨域</span><br><span class=\"line\">                pathRewrite: &#123;</span><br><span class=\"line\">                    &#39;^&#x2F;api&#39;: &#39;&#39;&#x2F;&#x2F;请求的时候使用这个api就可以</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用时：如此配置后，本地请求地址  <a href=\"http://localhost:8001/api//mcapi/mcapi.php?return=json\" target=\"_blank\" rel=\"noopener\">http://localhost:8001/api//mcapi/mcapi.php?return=json</a></p>\n<p>实际请求地址为： <a href=\"https://api.ixiaowai.cn/mcapi/mcapi.php?return=json\" target=\"_blank\" rel=\"noopener\">https://api.ixiaowai.cn/mcapi/mcapi.php?return=json</a>  就是因为在 <code>vue.config.js</code>  配置好了，所以请求的时候，就就可以用   /api 来代替  <a href=\"https://api.ixiaowai.cn\" target=\"_blank\" rel=\"noopener\">https://api.ixiaowai.cn</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 请求接口 后台的接口为5001 我们本地的接口为8080,所以我们需要去到vue.config.js配置跨域 https:&#x2F;&#x2F;api.ixiaowai.cn&#x2F;mcapi&#x2F;mcapi.php?return&#x3D;json</span><br><span class=\"line\">         this.axios.get(&#39;&#x2F;api&#x2F;mcapi&#x2F;mcapi.php?return&#x3D;json&#39;)</span><br><span class=\"line\">         .then(res &#x3D;&gt;&#123;</span><br><span class=\"line\">             &#x2F;&#x2F; 注册成功</span><br><span class=\"line\">             alert(&#39;获取成功!&#39;)</span><br><span class=\"line\">             console.log(res)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">         .catch(error &#x3D;&gt; &#123;</span><br><span class=\"line\">         \tconsole.log(error)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求成功！！！！</p>\n<p><img src=\"http://photo.jomeswang.top/20200614102309.png\" alt=\"\"></p>\n","categories":["vue"],"tags":["vue"]},{"title":"vuex使用","url":"/posts/a47b42bc/","content":"<h2 id=\"1-vuex简介\"><a href=\"#1-vuex简介\" class=\"headerlink\" title=\"1. vuex简介\"></a>1. vuex简介</h2><p>vuex是专门用来管理vue.js应用程序中状态的一个插件。他的作用是将应用中的所有状态都放在一起，集中式来管理。需要声明的是，这里所说的状态指的是vue组件中data里面的属性。了解vue的同学应该是明白data是怎么回事的吧，如果不懂的话，建议先学完vue的基础知识再看vuex。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-vuex的组成结构示意图\"><a href=\"#2-vuex的组成结构示意图\" class=\"headerlink\" title=\"2. vuex的组成结构示意图\"></a>2. vuex的组成结构示意图</h2><p>vuex的特点是把数据单独隔离，形成一棵树状图。单独隔离就意味着它有自己的生态系统。输入和输出，其中action作为数据的输入，state作为数据的输出。如下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200613120122.png\" alt=\"\"></p>\n<p>vuex里有这么一个规则：</p>\n<blockquote>\n<p>只能在mutaions里修改state，actions不能直接修改state</p>\n</blockquote>\n<p>mutations即变化，修改state的数据，而且只能是同步的，不能存在异步的操作。如果需要异步怎么办呢？把异步操作放在actions里，拿到数据再通过mutations同步处理。vuex做的其实是把职权明确了，责任细分了。所以它文档里也说，小系统可以不用。状态数据少，没有细分的必要。</p>\n<p>通过这个图，我们很容易就对vuex的组成部分，以及vuex与组件(components)之间的联系一目了然。其实这张图，有点迷惑人，暂时看不懂也没关系，只要有一个直观的认识就行了。这张描述图就不用了<img src=\"https://res.wx.qq.com/mpres/htmledition/images/icon/common/emotion_panel/emoji_wx/2_05.png?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\">，大家请往下看。</p>\n<h2 id=\"3-vuex-的核心概念\"><a href=\"#3-vuex-的核心概念\" class=\"headerlink\" title=\"3. vuex 的核心概念\"></a>3. vuex 的核心概念</h2><h3 id=\"3-1-store\"><a href=\"#3-1-store\" class=\"headerlink\" title=\"3.1 store\"></a>3.1 store</h3><p>vuex 中最关键的是store对象，这是vuex的核心。可以说，vuex这个插件其实就是一个store对象，每个vue应用仅且仅有一个store对象。</p>\n<h4 id=\"3-1-1-创建store\"><a href=\"#3-1-1-创建store\" class=\"headerlink\" title=\"3.1.1 创建store\"></a>3.1.1 创建store</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const store &#x3D; new Vuex.Store(&#123;...&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可见，store是Vuex.Store这个构造函数new出来的实例。在构造函数中可以传一个对象参数。这个参数中可以包含5个对象：</p>\n<ul>\n<li>1.state – 存放状态</li>\n<li>2.getters – state的计算属性</li>\n<li>3.mutations – 更改状态的逻辑，同步操作</li>\n<li>4.actions – 提交mutation，异步操作</li>\n<li>5.mudules – 将store模块化</li>\n</ul>\n<p>关于store，需要先记住两点：</p>\n<ol>\n<li><p>store 中存储的状态是响应式的，当组件从store中读取状态时，如果store中的状态发生了改变，那么相应的组件也会得到更新；</p>\n</li>\n<li><p>不能直接改变store中的状态。改变store中的状态的唯一途径是提交(commit)mutations。这样使得我们可以方便地跟踪每一个状态的变化。</p>\n</li>\n</ol>\n<h4 id=\"3-1-2-一个完整的store的结构是这样的\"><a href=\"#3-1-2-一个完整的store的结构是这样的\" class=\"headerlink\" title=\"3.1.2 一个完整的store的结构是这样的\"></a>3.1.2 一个完整的store的结构是这样的</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const store &#x3D; new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 存放状态</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; state的计算属性</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 更改state中状态的逻辑，同步操作</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 提交mutation，异步操作</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#x2F;&#x2F; 如果将store分成一个个的模块的话，则需要用到modules。</span><br><span class=\"line\">   &#x2F;&#x2F;然后在每一个module中写state, getters, mutations, actions等。</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB,</span><br><span class=\"line\">    &#x2F;&#x2F; ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-state\"><a href=\"#3-2-state\" class=\"headerlink\" title=\"3.2 state\"></a>3.2 state</h3><p>state上存放的，说的简单一些就是变量，也就是所谓的状态。没有使用 state 的时候，我们都是直接在 data 中进行初始化的，但是有了 state 之后，我们就把 data 上的数据转移到 state 上去了。另外有些状态是组件私有的状态，称为组件的局部状态，我们不需要把这部分状态放在store中去。</p>\n<h4 id=\"3-2-1-如何在组件中获取vuex状态\"><a href=\"#3-2-1-如何在组件中获取vuex状态\" class=\"headerlink\" title=\"3.2.1 如何在组件中获取vuex状态\"></a>3.2.1 如何在组件中获取vuex状态</h4><p>由于vuex的状态是响应式的，所以从store中读取状态的的方法是在组件的计算属性中返回某个状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const Counter &#x3D; &#123;</span><br><span class=\"line\">  template: &#96;&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;div&gt;&#96;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 获取store中的状态</span><br><span class=\"line\">      return this.$store.state.count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-2-mapState\"><a href=\"#3-2-2-mapState\" class=\"headerlink\" title=\"3.2.2 mapState\"></a>3.2.2 mapState</h4><p>当一个组件获取多种状态的时候，则在计算属性中要写多个函数。为了方便，可以使用mapState辅助函数来帮我们生成计算属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; mapState &#125; from  &#39;vuex&#39;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">  data ()&#123;</span><br><span class=\"line\">    localState: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  computed: mapState(&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 此处的state即为store里面的state</span><br><span class=\"line\">    count: state &#x3D;&gt; state.count,</span><br><span class=\"line\">    &#x2F;&#x2F; 当计算属性的名称与state的状态名称一样时，可以省写</span><br><span class=\"line\">    &#x2F;&#x2F; 映射 this.count1 为 store.state.count1</span><br><span class=\"line\">    count1,</span><br><span class=\"line\">    &#x2F;&#x2F;&#39;count&#39;等同于 ‘state &#x3D;&gt; state.count’</span><br><span class=\"line\">    countAlias: &#39;count&#39;,</span><br><span class=\"line\">    countPlus (state)&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 使用普通函数是为了保证this指向组件对象</span><br><span class=\"line\">      return state.count + this.localState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;上面是通过mapState的对象来赋值的，还可以通过mapState的数组来赋值</span><br><span class=\"line\">computed: mapState([&#39;count&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;这种方式很简洁，但是组件中的state的名称就跟store中映射过来的同名</span><br></pre></td></tr></table></figure>\n\n<p>对象扩展运算符</p>\n<p>mapState 函数返回的是一个对象，为了将它里面的计算属性与组件本身的局部计算属性组合起来，需要用到对象扩展运算符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  localState () &#123; </span><br><span class=\"line\">  ... mapState (&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，mapState中的计算属性就与localState计算属性混合一起了。</p>\n<h3 id=\"3-3-getters\"><a href=\"#3-3-getters\" class=\"headerlink\" title=\"3.3 getters\"></a>3.3 getters</h3><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数。此时可以用到getters，getters可以看作是store的计算属性，其参数为state。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const store &#x3D; new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    todos: [</span><br><span class=\"line\">      &#123;id: 1, text: &#39;reading&#39;, done: true&#125;,</span><br><span class=\"line\">      &#123;id: 2, text: &#39;playBastketball&#39;, done: false&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doneTodos: state &#x3D;&gt; &#123;</span><br><span class=\"line\">      return state.todos.filter(todo &#x3D;&gt; todo.done);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-1-获取getters里面的状态，方法一\"><a href=\"#3-3-1-获取getters里面的状态，方法一\" class=\"headerlink\" title=\"3.3.1 获取getters里面的状态，方法一\"></a>3.3.1 获取getters里面的状态，方法一</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;在组件中，则要写在计算属性中，</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneTodos () &#123;</span><br><span class=\"line\">    return this.$store.getters.doneTodos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-2-使用mapGetters获取getters里面的状态：方法二\"><a href=\"#3-3-2-使用mapGetters获取getters里面的状态：方法二\" class=\"headerlink\" title=\"3.3.2 使用mapGetters获取getters里面的状态：方法二\"></a>3.3.2 使用mapGetters获取getters里面的状态：方法二</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123;mapState, mapGetters&#125; from &#39;vuex&#39;;</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">...mapState([&#39;increment&#39;]),</span><br><span class=\"line\">...mapGetters([&#39;doneTodos&#39;])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-mutations\"><a href=\"#3-4-mutations\" class=\"headerlink\" title=\"3.4 mutations\"></a>3.4 mutations</h3><p>mutations里面是如何更改state中状态的逻辑。更改Vuex中的state的唯一方法是，提交mutation，即store.commit(‘increment’)。</p>\n<h4 id=\"3-4-1-提交载荷-payload\"><a href=\"#3-4-1-提交载荷-payload\" class=\"headerlink\" title=\"3.4.1 提交载荷(payload)\"></a>3.4.1 提交载荷(payload)</h4><p>可以向commit传入额外的参数，即mutation的载荷。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment(state, n)&#123;</span><br><span class=\"line\">    state.count +&#x3D; n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.commit(&#39;increment&#39;, 10);</span><br></pre></td></tr></table></figure>\n\n<p>payload还可以是一个对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment(state, payload)&#123;</span><br><span class=\"line\">  state.count +&#x3D; payload.amount;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">store.commit(&#39;increment&#39;, &#123;amount: 10&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>还可以使用type属性来提交mutation。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: &#39;increment&#39;,</span><br><span class=\"line\">  amount: 10</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#x2F;&#x2F; mutations保持不变</span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">  increment(state, payload)&#123;</span><br><span class=\"line\">    state.count +&#x3D; payload.amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：mutation必须是同步函数，不能是异步的，这是为了调试的方便。</p>\n<h4 id=\"3-4-2-在组件中提交mutations\"><a href=\"#3-4-2-在组件中提交mutations\" class=\"headerlink\" title=\"3.4.2 在组件中提交mutations\"></a>3.4.2 在组件中提交mutations</h4><p>那么mutation应该在哪里提交呢？ 因为js是基于事件驱动的，所以改变状态的逻辑肯定是由事件来驱动的，所以store.commit(‘increment’)是在组件的methods中来执行的。</p>\n<p>方法1: 在组件的methods中提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  increment()&#123;</span><br><span class=\"line\">    this.$store.commit(&#39;increment&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法2: 使用mapMutaions</p>\n<p>用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; mapMutaions &#125; from &#39;vuex&#39;;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapMutaions([</span><br><span class=\"line\">    &#39;increment&#39; &#x2F;&#x2F; 映射 this.increment() 为 this.$store.commit(&#39;increment&#39;)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\">  ...mapMutaions([</span><br><span class=\"line\">      add: &#39;increment&#39; &#x2F;&#x2F; 映射 this.add() 为 this.$store.commit(&#39;increment&#39;)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 因为mutation相当于一个method，所以在组件中，可以这样来使用</span><br><span class=\"line\">&lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-actions\"><a href=\"#3-5-actions\" class=\"headerlink\" title=\"3.5 actions\"></a>3.5 actions</h3><p>因为mutations中只能是同步操作，但是在实际的项目中，会有异步操作，那么actions就是为了异步操作而设置的。这样，就变成了在action中去提交mutation，然后在组件的methods中去提交action。只是提交actions的时候使用的是dispatch函数，而mutations则是用commit函数。</p>\n<h4 id=\"3-5-1-一个简单的action\"><a href=\"#3-5-1-一个简单的action\" class=\"headerlink\" title=\"3.5.1 一个简单的action\"></a>3.5.1 一个简单的action</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const store &#x3D; new Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment(state)&#123;</span><br><span class=\"line\">      state.count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    increment(context)&#123;</span><br><span class=\"line\">      context.commit(&#39;increment&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#x2F;* 可以用参数结构的方法来写action</span><br><span class=\"line\">     increment(&#123;commit&#125;)&#123;</span><br><span class=\"line\">     commit(&#39;increment&#39;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; action函数接受一个context参数，这个context具有与store实例相同的方法和属性。</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 分发action</span><br><span class=\"line\">store.dispatch(&#39;increment&#39;);</span><br></pre></td></tr></table></figure>\n\n<p>action同样支持payload和对象方式来分发，格式跟commit是一样的，不再赘述。</p>\n<h4 id=\"3-5-2-在组件中分发action\"><a href=\"#3-5-2-在组件中分发action\" class=\"headerlink\" title=\"3.5.2 在组件中分发action\"></a>3.5.2 在组件中分发action</h4><p>方法1: 在组件的methods中，使用this.$store.dispatch(‘increment’)。</p>\n<p>方法2: 使用mapActions，跟mapMutations是类似的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; mapActions &#125; from &#39;vuex&#39;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    ...mapActions([</span><br><span class=\"line\">    &#39;increment&#39; &#x2F;&#x2F; 映射 this.increment() 为 this.$store.dispatch(&#39;increment&#39;)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\">  ...mapActions(&#123;</span><br><span class=\"line\">  add: &#39;increment&#39; &#x2F;&#x2F; 映射 this.add() 为 this.$store.dispatch(&#39;increment&#39;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 同样在组件中，可以这样来使用</span><br><span class=\"line\">&lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-5-3-组合actions\"><a href=\"#3-5-3-组合actions\" class=\"headerlink\" title=\"3.5.3 组合actions\"></a>3.5.3 组合actions</h4><p>因为action是异步的，那么我们需要知道这个异步函数什么时候结束，以及等到其执行后，会利用某个action的结果。这个可以使用promise来实现。在一个action中返回一个promise，然后使用then()回调函数来处理这个action返回的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions:&#123;</span><br><span class=\"line\">  actionA(&#123;commit&#125;)&#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        commit(&#39;someMutation&#39;);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">      &#125;,1000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 这样就可以操作actionA返回的结果了</span><br><span class=\"line\">store.dispatch(&#39;actionA&#39;).then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; dosomething ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 也可以在另一个action中使用actionA的结果</span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">  actionB(&#123; dispatch, commit &#125;)&#123;</span><br><span class=\"line\">    return dispatch(&#39;actionA&#39;).then(() &#x3D;&gt; &#123;</span><br><span class=\"line\">      commit(&#39;someOtherMutation&#39;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-mudules\"><a href=\"#4-mudules\" class=\"headerlink\" title=\"4 mudules\"></a>4 mudules</h2><p>module是为了将store拆分后的一个个小模块，这么做的目的是因为当store很大的时候，分成模块的话，方便管理。</p>\n<h3 id=\"4-1-每个module拥有自己的state-getters-mutation-action\"><a href=\"#4-1-每个module拥有自己的state-getters-mutation-action\" class=\"headerlink\" title=\"4.1 每个module拥有自己的state, getters, mutation, action\"></a>4.1 每个module拥有自己的state, getters, mutation, action</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const moduleA &#x3D; &#123;</span><br><span class=\"line\">    state: &#123;...&#125;,</span><br><span class=\"line\">    getters: &#123;...&#125;,</span><br><span class=\"line\">    mutations: &#123;....&#125;,</span><br><span class=\"line\">  actions: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const moduleB &#x3D; &#123;</span><br><span class=\"line\">    state: &#123;...&#125;,</span><br><span class=\"line\">    getters: &#123;...&#125;,</span><br><span class=\"line\">    mutations: &#123;....&#125;,</span><br><span class=\"line\">  actions: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store &#x3D; new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    a: moduleA,</span><br><span class=\"line\">    b: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a &#x2F;&#x2F; 获取moduleA的状态</span><br><span class=\"line\">store.state.b &#x2F;&#x2F; 获取moduleB的状态</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-模块内部的状态\"><a href=\"#4-2-模块内部的状态\" class=\"headerlink\" title=\"4.2 模块内部的状态\"></a>4.2 模块内部的状态</h3><p>对于模块内部的mutation和getter，接受的第一个参数是模块的局部状态state。顺便说一下，根结点的状态为rootState。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const moduleA &#x3D; &#123;</span><br><span class=\"line\">  state: &#123; count: 0&#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    doubleCount(state)&#123;</span><br><span class=\"line\">      return state.count * 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    increment(state)&#123;</span><br><span class=\"line\">      state.count ++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-模块的动态注册\"><a href=\"#4-3-模块的动态注册\" class=\"headerlink\" title=\"4.3 模块的动态注册\"></a>4.3 模块的动态注册</h3><p>在模块创建之后，可以使用store.registerModule方法来注册模块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">store.registerModule(&#39;myModule&#39;, &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>依然的，可以通过store.state.myModule来获取模块的状态。</p>\n<p>可以使用store.unregisterModule(moduleName)来动态的卸载模块，但是这种方法对于静态模块是无效的（即在创建store时声明的模块）。</p>\n<h2 id=\"5-含有vuex的项目的结构\"><a href=\"#5-含有vuex的项目的结构\" class=\"headerlink\" title=\"5 含有vuex的项目的结构\"></a>5 含有vuex的项目的结构</h2><h3 id=\"5-1-应该遵循的规则\"><a href=\"#5-1-应该遵循的规则\" class=\"headerlink\" title=\"5.1 应该遵循的规则\"></a>5.1 应该遵循的规则</h3><ol>\n<li><p>应用层级的状态都应该集中在store中</p>\n</li>\n<li><p>提交 mutation 是更改状态state的唯一方式，并且这个过程是同步的。</p>\n</li>\n<li><p>异步的操作应该都放在action里面</p>\n</li>\n</ol>\n","categories":["vuex"],"tags":["vuex"]},{"title":"深度学习matlab实践","url":"/posts/9b893582/","content":"<blockquote>\n<p>实践是验证真理的唯一标准</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200613000908.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200613000924.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200613000940.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200613000957.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200613001014.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200613001023.png\" alt=\"\"></p>\n","categories":["深度学习"],"tags":["深度学习"]},{"title":"深度学习之迁移学习","url":"/posts/6ec61041/","content":"<h2 id=\"1-什么是迁移学习\"><a href=\"#1-什么是迁移学习\" class=\"headerlink\" title=\"1. 什么是迁移学习\"></a>1. 什么是迁移学习</h2><p>迁移学习(Transfer Learning)是一种机器学习方法，就是把为任务 A 开发的模型作为初始点，重新使用在为任务 B 开发模型的过程中。迁移学习是通过从已学习的相关任务中转移知识来改进学习的新任务，虽然大多数机器学习算法都是为了解决单个任务而设计的，但是促进迁移学习的算法的开发是机器学习社区持续关注的话题。 迁移学习对人类来说很常见，例如，我们可能会发现学习识别苹果可能有助于识别梨，或者学习弹奏电子琴可能有助于学习钢琴。</p>\n<p>找到目标问题的相似性，迁移学习任务就是从相似性出发，将旧领域(domain)学习过的模型应用在新领域上。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-为什么需要迁移学习？\"><a href=\"#2-为什么需要迁移学习？\" class=\"headerlink\" title=\"2. 为什么需要迁移学习？\"></a>2. 为什么需要迁移学习？</h2><ol>\n<li><strong>大数据与少标注的矛盾</strong>：虽然有大量的数据，但往往都是没有标注的，无法训练机器学习模型。人工进行数据标定太耗时。</li>\n<li><strong>大数据与弱计算的矛盾</strong>：普通人无法拥有庞大的数据量与计算资源。因此需要借助于模型的迁移。</li>\n<li><strong>普适化模型与个性化需求的矛盾</strong>：即使是在同一个任务上，一个模型也往往难以满足每个人的个性化需求，比如特定的隐私设置。这就需要在不同人之间做模型的适配。</li>\n<li><strong>特定应用（如冷启动）的需求</strong>。</li>\n</ol>\n<h2 id=\"3-迁移学习的基本问题有哪些？\"><a href=\"#3-迁移学习的基本问题有哪些？\" class=\"headerlink\" title=\"3. 迁移学习的基本问题有哪些？\"></a>3. 迁移学习的基本问题有哪些？</h2><p>基本问题主要有3个：</p>\n<ul>\n<li><strong>How to transfer</strong>： 如何进行迁移学习？（设计迁移方法）</li>\n<li><strong>What to transfer</strong>： 给定一个目标领域，如何找到相对应的源领域，然后进行迁移？（源领域选择）</li>\n<li><strong>When to transfer</strong>： 什么时候可以进行迁移，什么时候不可以？（避免负迁移）</li>\n</ul>\n<h2 id=\"4-迁移学习有哪些常用概念？\"><a href=\"#4-迁移学习有哪些常用概念？\" class=\"headerlink\" title=\"4. 迁移学习有哪些常用概念？\"></a>4. 迁移学习有哪些常用概念？</h2><ul>\n<li><p>基本定义</p>\n<ul>\n<li>域(Domain)：数据特征和特征分布组成，是学习的主体<ul>\n<li><strong>源域 (Source domain)</strong>：已有知识的域</li>\n<li><strong>目标域 (Target domain)</strong>：要进行学习的域</li>\n</ul>\n</li>\n<li><strong>任务 (Task)</strong>：由目标函数和学习结果组成，是学习的结果</li>\n</ul>\n</li>\n<li><p>按特征空间分类</p>\n<ul>\n<li><strong>同构迁移学习（Homogeneous TL）</strong>： 源域和目标域的特征空间相同，<img src=\"https://latex.codecogs.com/gif.latex?D_s=D_t\" alt=\"\"></li>\n<li><strong>异构迁移学习（Heterogeneous TL）</strong>：源域和目标域的特征空间不同，<img src=\"https://latex.codecogs.com/gif.latex?D_s%5Cne_%7B%7DD_t\" alt=\"\"></li>\n</ul>\n</li>\n<li><p>按迁移情景分类</p>\n<ul>\n<li><strong>归纳式迁移学习（Inductive TL）</strong>：源域和目标域的学习任务不同</li>\n<li><strong>直推式迁移学习（Transductive TL)</strong>：源域和目标域不同，学习任务相同</li>\n<li><strong>无监督迁移学习（Unsupervised TL)</strong>：源域和目标域均没有标签</li>\n</ul>\n</li>\n<li><p>按迁移方法分类</p>\n<ul>\n<li><p><strong>基于样本的迁移 (Instance based TL)</strong>：通过权重重用源域和目标域的样例进行迁移</p>\n<p>基于样本的迁移学习方法 (Instance based Transfer Learning) 根据一定的权重生成规则，对数据样本进行重用，来进行迁移学习。下图形象地表示了基于样本迁移方法的思想源域中存在不同种类的动物，如狗、鸟、猫等，目标域只有狗这一种类别。在迁移时，为了最大限度地和目标域相似，我们可以人为地提高源域中属于狗这个类别的样本权重。</p>\n<p><img src=\"https://gitee.com/kkweishe/images/raw/master/ML/2019-8-17_22-16-3.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>基于特征的迁移 (Feature based TL)</strong>：将源域和目标域的特征变换到相同空间</p>\n<p>基于特征的迁移方法 (Feature based Transfer Learning) 是指将通过特征变换的方式互相迁移,来减少源域和目标域之间的差距；或者将源域和目标域的数据特征变换到统一特征空间中,然后利用传统的机器学习方法进行分类识别。根据特征的同构和异构性,又可以分为同构和异构迁移学习。下图很形象地表示了两种基于特 征的迁移学习方法。</p>\n<p><img src=\"https://gitee.com/kkweishe/images/raw/master/ML/2019-8-17_22-21-18.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>基于模型的迁移 (Parameter based TL)</strong>：利用源域和目标域的参数共享模型</p>\n<p>基于模型的迁移方法 (Parameter/Model based Transfer Learning) 是指从源域和目标域中找到他们之间共享的参数信息,以实现迁移的方法。这种迁移方式要求的假设条件是： 源域中的数据与目标域中的数据可以共享一些模型的参数。下图形象地表示了基于模型的迁移学习方法的基本思想。</p>\n<p><img src=\"https://gitee.com/kkweishe/images/raw/master/ML/2019-8-17_22-27-58.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>基于关系的迁移 (Relation based TL)</strong>：利用源域中的逻辑网络关系进行迁移</p>\n<p>基于关系的迁移学习方法 (Relation Based Transfer Learning) 与上述三种方法具有截然不同的思路。这种方法比较关注源域和目标域的样本之间的关系。下图形象地表示了不 同领域之间相似的关系。</p>\n<p><img src=\"https://gitee.com/kkweishe/images/raw/master/ML/2019-8-17_22-30-12.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/kkweishe/images/raw/master/ML/2019-8-17_21-51-51.png\" alt=\"\"></p>\n<h2 id=\"5-迁移学习与传统机器学习有什么区别？\"><a href=\"#5-迁移学习与传统机器学习有什么区别？\" class=\"headerlink\" title=\"5. 迁移学习与传统机器学习有什么区别？\"></a>5. 迁移学习与传统机器学习有什么区别？</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>迁移学习</th>\n<th>传统机器学习</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据分布</td>\n<td>训练和测试数据不需要同分布</td>\n<td>训练和测试数据同分布</td>\n</tr>\n<tr>\n<td>数据标签</td>\n<td>不需要足够的数据标注</td>\n<td>足够的数据标注</td>\n</tr>\n<tr>\n<td>建模</td>\n<td>可以重用之前的模型</td>\n<td>每个任务分别建模</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-迁移学习的核心及度量准则？\"><a href=\"#6-迁移学习的核心及度量准则？\" class=\"headerlink\" title=\"6. 迁移学习的核心及度量准则？\"></a>6. 迁移学习的核心及度量准则？</h2><p><strong>迁移学习的总体思路可以概括为</strong>：开发算法来最大限度地利用有标注的领域的知识，来辅助目标领域的知识获取和学习。</p>\n<p><strong>迁移学习的核心是</strong>：找到源领域和目标领域之间的相似性，并加以合理利用。这种相似性非常普遍。比如，不同人的身体构造是相似的；自行车和摩托车的骑行方式是相似的；国际象棋和中国象棋是相似的；羽毛球和网球的打球方式是相似的。这种相似性也可以理解为不变量。以不变应万变，才能立于不败之地。</p>\n<p><strong>有了这种相似性后，下一步工作就是， 如何度量和利用这种相似性。</strong>度量工作的目标有两点：一是很好地度量两个领域的相似性，不仅定性地告诉我们它们是否相似，更定量地给出相似程度。二是以度量为准则，通过我们所要采用的学习手段，增大两个领域之间的相似性，从而完成迁移学习。</p>\n<p><strong>一句话总结： 相似性是核心，度量准则是重要手段。</strong></p>\n<h2 id=\"7-迁移学习与其他概念的区别？\"><a href=\"#7-迁移学习与其他概念的区别？\" class=\"headerlink\" title=\"7. 迁移学习与其他概念的区别？\"></a>7. 迁移学习与其他概念的区别？</h2><ol>\n<li>迁移学习与多任务学习关系：<ul>\n<li><strong>多任务学习</strong>：多个相关任务一起协同学习；</li>\n<li><strong>迁移学习</strong>：强调信息复用，从一个领域(domain)迁移到另一个领域。</li>\n</ul>\n</li>\n<li>迁移学习与领域自适应：<strong>领域自适应</strong>：使两个特征分布不一致的domain一致。</li>\n<li>迁移学习与协方差漂移：<strong>协方差漂移</strong>：数据的条件概率分布发生变化。</li>\n</ol>\n<h2 id=\"8-什么情况下可以使用迁移学习？\"><a href=\"#8-什么情况下可以使用迁移学习？\" class=\"headerlink\" title=\"8. 什么情况下可以使用迁移学习？\"></a>8. 什么情况下可以使用迁移学习？</h2><p>迁移学习<strong>最有用的场合</strong>是，如果你尝试优化任务B的性能，通常这个任务数据相对较少。 例如，在放射科中你知道很难收集很多射线扫描图来搭建一个性能良好的放射科诊断系统，所以在这种情况下，你可能会找一个相关但不同的任务，如图像识别，其中你可能用 1 百万张图片训练过了，并从中学到很多低层次特征，所以那也许能帮助网络在任务在放射科任务上做得更好，尽管任务没有这么多数据。</p>\n<p>假如两个领域之间的区别特别的大，<strong>不可以直接采用迁移学习</strong>，因为在这种情况下效果不是很好。在这种情况下，推荐以上的方法，在两个相似度很低的domain之间一步步迁移过去（踩着石头过河）。</p>\n<h2 id=\"9-什么是finetune？\"><a href=\"#9-什么是finetune？\" class=\"headerlink\" title=\"9. 什么是finetune？\"></a>9. 什么是finetune？</h2><p>度网络的finetune也许是最简单的深度网络迁移方法。<strong>Finetune</strong>,也叫微调、fine-tuning, 是深度学习中的一个重要概念。简而言之，finetune就是利用别人己经训练好的网络，针对自己的任务再进行调整。从这个意思上看，我们不难理解finetune是迁移学习的一部分。</p>\n<p><strong>为什么需要已经训练好的网络？</strong></p>\n<p>在实际的应用中,我们通常不会针对一个新任务,就去从头开始训练一个神经网络。这样的操作显然是非常耗时的。尤其是，我们的训练数据不可能像ImageNet那么大，可以训练出泛化能力足够强的深度神经网络。即使有如此之多的训练数据,我们从头开始训练,其代价也是不可承受的。</p>\n<p><strong>为什么需要 finetune？</strong></p>\n<p>因为别人训练好的模型,可能并不是完全适用于我们自己的任务。可能别人的训练数据和我们的数据之间不服从同一个分布；可能别人的网络能做比我们的任务更多的事情；可能别人的网络比较复杂,我们的任务比较简单。</p>\n<h2 id=\"10-什么是深度网络自适应？\"><a href=\"#10-什么是深度网络自适应？\" class=\"headerlink\" title=\"10. 什么是深度网络自适应？\"></a>10. 什么是深度网络自适应？</h2><p>深度网络的 finetune 可以帮助我们节省训练时间，提高学习精度。但是 finetune 有它的先天不足:它无法处理训练数据和测试数据分布不同的情况。而这一现象在实际应用中比比皆是。因为 finetune 的基本假设也是训练数据和测试数据服从相同的数据分布。这在迁移学习中也是不成立的。因此，我们需要更进一步，针对深度网络开发出更好的方法使之更好地完成迁移学习任务。</p>\n<p>以我们之前介绍过的数据分布自适应方法为参考，许多深度学习方法都开发出了自适应层(AdaptationLayer)来完成源域和目标域数据的自适应。自适应能够使得源域和目标域的数据分布更加接近，从而使得网络的效果更好。</p>\n<h2 id=\"11-GAN在迁移学习中的应用\"><a href=\"#11-GAN在迁移学习中的应用\" class=\"headerlink\" title=\"11. GAN在迁移学习中的应用\"></a>11. GAN在迁移学习中的应用</h2><p>生成对抗网络 GAN(Generative Adversarial Nets)  受到自博弈论中的二人零和博弈 (two-player game) 思想的启发而提出。它一共包括两个部分：</p>\n<ul>\n<li><p>一部分为生成网络(Generative Network)，此部分负责生成尽可能地以假乱真的样本，这部分被成为生成器(Generator)；</p>\n</li>\n<li><p>另一部分为判别网络(Discriminative Network), 此部分负责判断样本是真实的，还是由生成器生成的，这部分被成为判别器(Discriminator) 生成器和判别器的互相博弈，就完成了对抗训练。</p>\n<p>GAN 的目标很明确：生成训练样本。这似乎与迁移学习的大目标有些许出入。然而，由于在迁移学习中，天然地存在一个源领域，一个目标领域，因此，我们可以免去生成样本的过程，而直接将其中一个领域的数据 (通常是目标域) 当作是生成的样本。此时，生成器的职能发生变化，不再生成新样本，而是扮演了特征提取的功能：不断学习领域数据的特征使得判别器无法对两个领域进行分辨。这样，原来的生成器也可以称为特征提取器 (Feature Extractor)。</p>\n</li>\n</ul>\n<h2 id=\"12-代码实现\"><a href=\"#12-代码实现\" class=\"headerlink\" title=\"12. 代码实现\"></a>12. 代码实现</h2><p><a href=\"https://github.com/NLP-LOVE/ML-NLP/blob/master/Deep%20Learning/13.%20Transfer%20Learning/Transfer%20Learning.ipynb\" target=\"_blank\" rel=\"noopener\">Transfer Learning例子</a></p>\n<p><strong>数据集下载：</strong></p>\n<ul>\n<li>Inception-v3模型：<a href=\"https://www.lanzous.com/i5mxw5c\" target=\"_blank\" rel=\"noopener\">点击下载</a></li>\n<li>flower_photos数据集：<a href=\"http://download.tensorflow.org/example_images/flower_photos.tgz\" target=\"_blank\" rel=\"noopener\">点击下载</a></li>\n</ul>\n<h2 id=\"13-参考文献\"><a href=\"#13-参考文献\" class=\"headerlink\" title=\"13. 参考文献\"></a>13. 参考文献</h2><p><a href=\"[https://github.com/scutan90/DeepLearning-500-questions/tree/master/ch11_%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0](https://github.com/scutan90/DeepLearning-500-questions/tree/master/ch11_迁移学习)\"><a href=\"https://github.com/scutan90/DeepLearning-500-questions/tree/master/ch11_迁移学习\" target=\"_blank\" rel=\"noopener\">https://github.com/scutan90/DeepLearning-500-questions/tree/master/ch11_%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0</a></a></p>\n<hr>\n<blockquote>\n<p>作者：<a href=\"https://github.com/NLP-LOVE/ML-NLP\" target=\"_blank\" rel=\"noopener\">@mantchs</a></p>\n<p>GitHub：<a href=\"https://github.com/NLP-LOVE/ML-NLP\" target=\"_blank\" rel=\"noopener\">https://github.com/NLP-LOVE/ML-NLP</a></p>\n<p>欢迎大家加入讨论！共同完善此项目！群号：【541954936】<a target=\"_blank\" href=\"//shang.qq.com/wpa/qunwpa?idkey=863f915b9178560bd32ca07cd090a7d9e6f5f90fcff5667489697b1621cecdb3\"><img border=\"0\" src=\"http://pub.idqqimg.com/wpa/images/group.png\" alt=\"NLP面试学习群\" title=\"NLP面试学习群\"></a></p>\n</blockquote>\n","categories":["深度学习"],"tags":["深度学习"]},{"title":"深度学习之卷积网络（CNN）","url":"/posts/91037bbc/","content":"<h2 id=\"1-什么是CNN\"><a href=\"#1-什么是CNN\" class=\"headerlink\" title=\"1. 什么是CNN\"></a>1. 什么是CNN</h2><blockquote>\n<p>卷积神经网络（Convolutional Neural Networks, CNN）是一类包含<a href=\"https://baike.baidu.com/item/卷积/9411006\" target=\"_blank\" rel=\"noopener\">卷积</a>计算且具有深度结构的<a href=\"https://baike.baidu.com/item/前馈神经网络/7580523\" target=\"_blank\" rel=\"noopener\">前馈神经网络</a>（Feedforward Neural Networks），是<a href=\"https://baike.baidu.com/item/深度学习/3729729\" target=\"_blank\" rel=\"noopener\">深度学习</a>（deep learning）的代表算法之一。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>我们先来看卷积神经网络各个层级结构图：</p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/00630Defgy1g5pqv7pv9uj30yv0gpn1e.jpg\" alt=\"\"></p>\n<p>上图中CNN要做的事情是：给定一张图片，是车还是马未知，是什么车也未知，现在需要模型判断这张图片里具体是一个什么东西，总之输出一个结果：如果是车 那是什么车。</p>\n<ul>\n<li>最左边是数据<strong>输入层</strong>(input layer)，对数据做一些处理，比如去均值（把输入数据各个维度都中心化为0，避免数据过多偏差，影响训练效果）、归一化（把所有的数据都归一到同样的范围）、PCA/白化等等。CNN只对训练集做“去均值”这一步。</li>\n<li>CONV：卷积计算层(conv layer)，线性乘积求和。</li>\n<li>RELU：激励层(activation layer)，下文有提到：ReLU是激活函数的一种。</li>\n<li>POOL：池化层(pooling layer)，简言之，即取区域平均或最大。</li>\n<li>FC：全连接层(FC layer)。</li>\n</ul>\n<p>这几个部分中，卷积计算层是CNN的核心。</p>\n<h3 id=\"1-1-输入层\"><a href=\"#1-1-输入层\" class=\"headerlink\" title=\"1.1 输入层\"></a>1.1 输入层</h3><p>在做输入的时候，需要把图片处理成同样大小的图片才能够进行处理。</p>\n<p>常见的处理数据的方式有：</p>\n<ol>\n<li><p>去均值(<strong>常用</strong>)</p>\n<ul>\n<li><strong>AlexNet</strong>：训练集中100万张图片，对每个像素点求均值，得到均值图像，当训练时用原图减去均值图像。</li>\n<li><strong>VGG</strong>：对所有输入在三个颜色通道R/G/B上取均值，只会得到3个值，当训练时减去对应的颜色通道均值。(<strong>此种方法效率高</strong>)</li>\n</ul>\n<p><strong>TIPS:</strong>在训练集和测试集上减去训练集的均值。</p>\n</li>\n<li><p>归一化</p>\n<p>幅度归一化到同样的范围。</p>\n</li>\n<li><p>PCA/白化(<strong>很少用</strong>)</p>\n<ul>\n<li>用PCA降维</li>\n<li>白化是对数据每个特征轴上的幅度归一化。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-2-卷积计算层-conv\"><a href=\"#1-2-卷积计算层-conv\" class=\"headerlink\" title=\"1.2 卷积计算层(conv)\"></a>1.2 卷积计算层(conv)</h3><p>对图像（不同的数据窗口数据）和滤波矩阵（一组固定的权重：因为每个神经元的多个权重固定，所以又可以看做一个恒定的滤波器filter）做<strong>内积</strong>（逐个元素相乘再求和）的操作就是所谓的『卷积』操作，也是卷积神经网络的名字来源。</p>\n<p>滤波器filter是什么呢！请看下图。图中左边部分是原始输入数据，图中中间部分是滤波器filter，图中右边是输出的新的二维数据。</p>\n<p><img src=\"http://photo.jomeswang.top/20200612230349.png\" alt=\"\"></p>\n<p>不同的滤波器filter会得到不同的输出数据，比如颜色深浅、轮廓。<strong>相当于提取图像的不同特征，模型就能够学习到多种特征。</strong>用不同的滤波器filter，提取想要的关于图像的特定信息：颜色深浅或轮廓。如下图所示。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/00630Defgy1g5r30db3jpj30hv0b1wq3.jpg\" alt=\"\"></p>\n<p>在CNN中，滤波器filter（带着一组固定权重的神经元）对局部输入数据进行卷积计算。每计算完一个数据窗口内的局部数据后，数据窗口不断平移滑动，直到计算完所有数据。这个过程中，有这么几个参数： </p>\n<ul>\n<li>深度depth：神经元个数，决定输出的depth厚度。同时代表滤波器个数。</li>\n<li>步长stride：决定滑动多少步可以到边缘。</li>\n<li>填充值zero-padding：在外围边缘补充若干圈0，方便从初始位置以步长为单位可以刚好滑倒末尾位置，通俗地讲就是为了总长能被步长整除。 </li>\n</ul>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/00630Defgy1g5r34yi6p4j308g05baaj.jpg\" alt=\"\"></p>\n<p><img src=\"https://mlnotebook.github.io/img/CNN/convSobel.gif\" alt=\"\"></p>\n<ul>\n<li><p><strong>参数共享机制</strong></p>\n<p>假设每个神经元连接数据窗的权重是固定对的。固定每个神经元连接权重，可以看做模板，每个神经元只关注<strong>一个特性(模板)</strong>，这使得需要估算的权重个数减少：一层中从1亿到3.5万。</p>\n</li>\n<li><p>一组固定的权重和不同窗口内数据做<strong>内积</strong>：卷积</p>\n</li>\n<li><p>作用在于捕捉某一种模式，具体表现为很大的值。</p>\n</li>\n</ul>\n<p><strong>卷积操作的本质特性包括稀疏交互和参数共享</strong>。</p>\n<h3 id=\"1-3-激励层\"><a href=\"#1-3-激励层\" class=\"headerlink\" title=\"1.3 激励层\"></a>1.3 激励层</h3><p>把卷积层输出结果做非线性映射。</p>\n<p>激活函数有：</p>\n<p><img src=\"https://i.loli.net/2019/04/24/5cbff6153eef3.png\" alt=\"UTOOLS1556084241657.png\"></p>\n<ul>\n<li>sigmoid：在两端斜率接近于0，梯度消失。</li>\n<li>ReLu：修正线性单元，有可能出现斜率为0，但概率很小，因为mini-batch是一批样本损失求导之和。</li>\n</ul>\n<p><strong>TIPS:</strong></p>\n<ul>\n<li>CNN慎用sigmoid！慎用sigmoid！慎用sigmoid！</li>\n<li>首先试RELU，因为快，但要小心点。</li>\n<li>如果RELU失效，请用 Leaky ReLU或者Maxout。</li>\n<li>某些情况下tanh倒是有不错的结果，但是很少。</li>\n</ul>\n<h3 id=\"1-4-池化层\"><a href=\"#1-4-池化层\" class=\"headerlink\" title=\"1.4 池化层\"></a>1.4 池化层</h3><p>也叫<strong>下采样层</strong>，就算通过了卷积层，纬度还是很高 ，需要进行池化层操作。</p>\n<ul>\n<li>夹在连续的卷积层中间。</li>\n<li>压缩数据和参数的量，降低维度。</li>\n<li>减小过拟合。</li>\n<li>具有特征不变性。</li>\n</ul>\n<p>方式有：<strong>Max pooling、average pooling</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200612230412.png\" alt=\"\"></p>\n<p><strong>Max pooling</strong></p>\n<p>取出每个部分的最大值作为输出，例如上图左上角的4个黄色方块取最大值为3作为输出，以此类推。</p>\n<p><strong>average pooling</strong></p>\n<p>每个部分进行计算得到平均值作为输出，例如上图左上角的4个黄色方块取得平均值2作为输出，以此类推。</p>\n<h3 id=\"1-5-全连接层\"><a href=\"#1-5-全连接层\" class=\"headerlink\" title=\"1.5 全连接层\"></a>1.5 全连接层</h3><p>全连接层的每一个结点都与上一层的所有结点相连，用来把前边提取到的特征综合起来。由于其全连接的特性，一般全连接层的参数也是最多的。</p>\n<ul>\n<li>两层之间所有神经元都有权重连接</li>\n<li>通常全连接层在卷积神经网络尾部</li>\n</ul>\n<h3 id=\"1-6-层次结构小结\"><a href=\"#1-6-层次结构小结\" class=\"headerlink\" title=\"1.6 层次结构小结\"></a>1.6 层次结构小结</h3><table>\n<thead>\n<tr>\n<th>CNN层次结构</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>输入层</td>\n<td>卷积网络的原始输入，可以是原始或预处理后的像素矩阵</td>\n</tr>\n<tr>\n<td>卷积层</td>\n<td>参数共享、局部连接，利用平移不变性从全局特征图提取局部特征</td>\n</tr>\n<tr>\n<td>激活层</td>\n<td>将卷积层的输出结果进行非线性映射</td>\n</tr>\n<tr>\n<td>池化层</td>\n<td>进一步筛选特征，可以有效减少后续网络层次所需的参数量</td>\n</tr>\n<tr>\n<td>全连接层</td>\n<td>用于把该层之前提取到的特征综合起来。</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-7-CNN优缺点\"><a href=\"#1-7-CNN优缺点\" class=\"headerlink\" title=\"1.7 CNN优缺点\"></a>1.7 CNN优缺点</h3><p><strong>优点：</strong></p>\n<ul>\n<li>共享卷积核，优化计算量。</li>\n<li>无需手动选取特征，训练好权重，即得特征。</li>\n<li>深层次的网络抽取图像信息丰富，表达效果好。</li>\n<li>保持了层级网络结构。</li>\n<li>不同层次有不同形式与功能。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>需要调参，需要大样本量，GPU等硬件依赖。</li>\n<li>物理含义不明确。</li>\n</ul>\n<p><strong>与NLP/Speech共性：</strong></p>\n<p>都存在局部与整体的关系，由低层次的特征经过组合，组成高层次的特征，并且得到不同特征之间的空间相关性。</p>\n<h2 id=\"2-典型CNN发展历程\"><a href=\"#2-典型CNN发展历程\" class=\"headerlink\" title=\"2. 典型CNN发展历程\"></a>2. 典型CNN发展历程</h2><ul>\n<li>LeNet，这是最早用于数字识别的CNN </li>\n<li>AlexNet， 2012 ILSVRC比赛远超第2名的CNN，比LeNet更深，用多层小卷积层叠加替换单大卷积层。 </li>\n<li>ZF Net， 2013 ILSVRC比赛冠军 </li>\n<li>GoogLeNet， 2014 ILSVRC比赛冠军 </li>\n<li>VGGNet， 2014 ILSVRC比赛中的模型，图像识别略差于GoogLeNet，但是在很多图像转化学习问题(比如objectdetection)上效果很好 </li>\n<li>ResNet(深度残差网络（Deep Residual Network，ResNet）)， 2015ILSVRC比赛冠军，结构修正(残差学习)以适应深层次CNN训练。 </li>\n<li>DenseNet， CVPR2017 best paper，把ResNet的add变成concat </li>\n</ul>\n<h2 id=\"3-图像相关任务\"><a href=\"#3-图像相关任务\" class=\"headerlink\" title=\"3. 图像相关任务\"></a>3. 图像相关任务</h2><p><img src=\"http://photo.jomeswang.top/20200612230430.png\" alt=\"\"></p>\n<h3 id=\"3-1-图像识别与定位\"><a href=\"#3-1-图像识别与定位\" class=\"headerlink\" title=\"3.1 图像识别与定位\"></a>3.1 图像识别与定位</h3><ol>\n<li><p><strong>classification：</strong>C个类别识别</p>\n<ul>\n<li><strong>input</strong>：Image</li>\n<li><strong>Output</strong>：类别标签</li>\n<li><strong>Evaluation metric</strong>：准确率</li>\n</ul>\n</li>\n<li><p><strong>Localization定位)</strong></p>\n<ul>\n<li><p><strong>Input</strong>：Image</p>\n</li>\n<li><p><strong>Output</strong>：物体边界框(x,y,w,h)</p>\n</li>\n<li><p><strong>Evaluation metric</strong>：交并准则(IOU) &gt; 0.5   图中阴影部分所占面积</p>\n<p><img src=\"http://photo.jomeswang.top/20200612230440.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"3-1-1-思路1：识别-定位过程\"><a href=\"#3-1-1-思路1：识别-定位过程\" class=\"headerlink\" title=\"3.1.1 思路1：识别+定位过程\"></a>3.1.1 思路1：识别+定位过程</h4><ol>\n<li><p><strong>识别</strong>可以看作多分类问题(<strong>用softmax</strong>)，用别人训练好的CNN模型做fine-tune</p>\n</li>\n<li><p><strong>定位</strong>的目标是(x,y,w,h)是连续值，当回归问题解决(<strong>mse</strong>)</p>\n<p>在<strong>1</strong>的CNN尾部展开(例如把最后一层拿开)，接上一个(x,y,w,h)的神经网络，成为<strong>classification+regression的模型</strong>。</p>\n<p>更细致的识别可以提前规定好有k个组成部分，做成k个部分的回归，</p>\n<p><strong>例如：</strong>框出两只眼睛和两条腿，4元祖*4=16(个连续值)</p>\n</li>\n<li><p>Regression部分用欧氏距离损失，使用SGD训练。</p>\n</li>\n</ol>\n<p><img src=\"https://julyedu-img-public.oss-cn-beijing.aliyuncs.com/Public/Image/Question/1517393046_527.png\" alt=\"image\"></p>\n<h4 id=\"3-1-2-思路2：图窗-识别\"><a href=\"#3-1-2-思路2：图窗-识别\" class=\"headerlink\" title=\"3.1.2 思路2：图窗+识别\"></a>3.1.2 思路2：图窗+识别</h4><ul>\n<li>类似刚才的classification+regression思路</li>\n<li>咱们取不同大小的“框”</li>\n<li>让框出现在不同的位置</li>\n<li>判定得分</li>\n<li>按照得分的高低对“结果框”做抽样和合并</li>\n</ul>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/00630Defgy1g5r50m0d5wj30ow0e1dpg.jpg\" alt=\"\"></p>\n<h3 id=\"3-2-物体检测-object-detection\"><a href=\"#3-2-物体检测-object-detection\" class=\"headerlink\" title=\"3.2 物体检测(object detection)\"></a>3.2 物体检测(object detection)</h3><h4 id=\"3-2-1-过程\"><a href=\"#3-2-1-过程\" class=\"headerlink\" title=\"3.2.1 过程\"></a>3.2.1 过程</h4><p>当图像有很多物体怎么办的？难度可是一下暴增啊。</p>\n<p>那任务就变成了：多物体识别+定位多个物体，那把这个任务看做分类问题？</p>\n<p><img src=\"http://photo.jomeswang.top/20200612234840.png\" alt=\"\"></p>\n<p>看成分类问题有何不妥？</p>\n<ul>\n<li>你需要找很多位置， 给很多个不同大小的框</li>\n<li>你还需要对框内的图像分类</li>\n<li>当然， 如果你的GPU很强大， 恩， 那加油做吧…</li>\n</ul>\n<p><strong>边缘策略：</strong>想办法先找到可能包含内容的图框(<strong>候选框</strong>)，然后进行分类问题的识别。</p>\n<p><strong>方法</strong>：根据RGB值做区域融合。<strong>fast-CNN</strong>，共享图窗，从而加速候选框的形成。</p>\n<ul>\n<li><p><strong>R-CNN =&gt; fast-CNN =&gt; faster-RCNN</strong> 速度对比</p>\n<p><img src=\"http://photo.jomeswang.top/20200612234906.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"3-2-2-R-CNN\"><a href=\"#3-2-2-R-CNN\" class=\"headerlink\" title=\"3.2.2 R-CNN\"></a>3.2.2 R-CNN</h4><p>R-CNN的简要步骤如下：</p>\n<ol>\n<li>输入测试图像。</li>\n<li>利用选择性搜索Selective Search算法在图像中从下到上提取2000个左右的可能包含物体的候选区域Region Proposal。</li>\n<li>因为取出的区域大小各自不同，所以需要将每个Region Proposal缩放（warp）成统一的227x227的大小并输入到CNN，将CNN的fc7层的输出作为特征。</li>\n<li>将每个Region Proposal提取到的CNN特征输入到SVM进行分类。</li>\n</ol>\n<h4 id=\"3-2-3-SPP-Net\"><a href=\"#3-2-3-SPP-Net\" class=\"headerlink\" title=\"3.2.3 SPP-Net\"></a>3.2.3 SPP-Net</h4><p>SPP：Spatial Pyramid Pooling（空间金字塔池化），SPP-Net是出自2015年发表在IEEE上的论文。</p>\n<p>众所周知，CNN一般都含有卷积部分和全连接部分，其中，卷积层不需要固定尺寸的图像，而全连接层是需要固定大小的输入。所以当全连接层面对各种尺寸的输入数据时，就需要对输入数据进行crop（crop就是从一个大图扣出网络输入大小的patch，比如227×227），或warp（把一个边界框bounding box(红框)的内容resize成227×227）等一系列操作以统一图片的尺寸大小，比如224<em>224（ImageNet）、32</em>32(LenNet)、96*96等。</p>\n<p><img src=\"https://julyedu-img-public.oss-cn-beijing.aliyuncs.com/Public/Image/Question/1525249316_603.png\" alt=\"\"></p>\n<p>所以才如你在上文中看到的，在R-CNN中，“因为取出的区域大小各自不同，所以需要将每个Region Proposal缩放（warp）成统一的227x227的大小并输入到CNN”。</p>\n<p>但warp/crop这种预处理，导致的问题要么被拉伸变形、要么物体不全，限制了识别精确度。没太明白？说句人话就是，一张16:9比例的图片你硬是要Resize成1:1的图片，你说图片失真不？</p>\n<p>SPP Net的作者Kaiming He等人逆向思考，既然由于全连接FC层的存在，普通的CNN需要通过固定输入图片的大小来使得全连接层的输入固定。那借鉴卷积层可以适应任何尺寸，为何不能在卷积层的最后加入某种结构，使得后面全连接层得到的输入变成固定的呢？</p>\n<p>这个“化腐朽为神奇”的结构就是spatial pyramid pooling layer。</p>\n<p>它的特点有两个:</p>\n<ol>\n<li><p><strong>结合空间金字塔方法实现CNNs的多尺度输入。</strong></p>\n<p>SPP Net的第一个贡献就是在最后一个卷积层后，接入了金字塔池化层，保证传到下一层全连接层的输入固定。</p>\n<p>换句话说，在普通的CNN机构中，输入图像的尺寸往往是固定的（比如224*224像素），输出则是一个固定维数的向量。SPP Net在普通的CNN结构中加入了ROI池化层（ROI Pooling），使得网络的输入图像可以是任意尺寸的，输出则不变，同样是一个固定维数的向量。</p>\n<p>简言之，CNN原本只能固定输入、固定输出，CNN加上SSP之后，便能任意输入、固定输出。神奇吧？</p>\n</li>\n<li><p><strong>只对原图提取一次卷积特征</strong></p>\n<p>在R-CNN中，每个候选框先resize到统一大小，然后分别作为CNN的输入，这样是很低效的。</p>\n<p>而SPP Net根据这个缺点做了优化：只对原图进行一次卷积计算，便得到整张图的卷积特征feature map，然后找到每个候选框在feature map上的映射patch，将此patch作为每个候选框的卷积特征输入到SPP layer和之后的层，完成特征提取工作。</p>\n</li>\n</ol>\n<p>如此这般，R-CNN要对每个区域计算卷积，而SPPNet只需要计算一次卷积，从而节省了大量的计算时间，比R-CNN有一百倍左右的提速。</p>\n<h4 id=\"3-2-4-Fast-R-CNN\"><a href=\"#3-2-4-Fast-R-CNN\" class=\"headerlink\" title=\"3.2.4 Fast R-CNN\"></a>3.2.4 Fast R-CNN</h4><p>SPP Net真是个好方法，R-CNN的进阶版Fast R-CNN就是在R-CNN的基础上采纳了SPP Net方法，对R-CNN作了改进，使得性能进一步提高。</p>\n<p>R-CNN有一些相当大的缺点（把这些缺点都改掉了，就成了Fast R-CNN）。</p>\n<p><strong>大缺点：</strong>由于每一个候选框都要独自经过CNN，这使得花费的时间非常多。</p>\n<p><strong>解决：</strong>共享卷积层，现在不是每一个候选框都当做输入进入CNN了，而是输入一张完整的图片，在第五个卷积层再得到每个候选框的特征。</p>\n<p>原来的方法：许多候选框（比如两千个）–&gt;CNN–&gt;得到每个候选框的特征–&gt;分类+回归</p>\n<p>现在的方法：一张完整图片–&gt;CNN–&gt;得到每张候选框的特征–&gt;分类+回归</p>\n<p>所以容易看见，Fast R-CNN相对于R-CNN的提速原因就在于：不过不像R-CNN把每个候选区域给深度网络提特征，而是整张图提一次特征，再把候选框映射到conv5上，而SPP只需要计算一次特征，剩下的只需要在conv5层上操作就可以了。</p>\n<p><strong>算法步骤：</strong></p>\n<ol>\n<li>在图像中确定约1000-2000个候选框 (使用选择性搜索)。</li>\n<li>对整张图片输进CNN，得到feature map。</li>\n<li>找到每个候选框在feature map上的映射patch，将此patch作为每个候选框的卷积特征输入到SPP layer和之后的层。</li>\n<li>对候选框中提取出的特征，使用分类器判别是否属于一个特定类。</li>\n<li>对于属于某一类别的候选框，用回归器进一步调整其位置。</li>\n</ol>\n<h4 id=\"3-2-5-Faster-R-CNN\"><a href=\"#3-2-5-Faster-R-CNN\" class=\"headerlink\" title=\"3.2.5 Faster R-CNN\"></a>3.2.5 Faster R-CNN</h4><p>Fast R-CNN存在的问题：存在瓶颈：选择性搜索，找出所有的候选框，这个也非常耗时。那我们能不能找出一个更加高效的方法来求出这些候选框呢？</p>\n<p>解决：加入一个提取边缘的神经网络，也就说找到候选框的工作也交给神经网络来做了。</p>\n<p>所以，rgbd在Fast R-CNN中引入Region Proposal Network(RPN)替代Selective Search，同时引入anchor box应对目标形状的变化问题（anchor就是位置和大小固定的box，可以理解成事先设置好的固定的proposal）。这就是Faster R-CNN。</p>\n<p><strong>算法步骤：</strong></p>\n<ol>\n<li>对整张图片输进CNN，得到feature map。</li>\n<li>卷积特征输入到RPN，得到候选框的特征信息。</li>\n<li>对候选框中提取出的特征，使用分类器判别是否属于一个特定类。</li>\n<li>对于属于某一类别的候选框，用回归器进一步调整其位置。</li>\n</ol>\n<h4 id=\"3-2-6-YOLO\"><a href=\"#3-2-6-YOLO\" class=\"headerlink\" title=\"3.2.6 YOLO\"></a>3.2.6 YOLO</h4><p>Faster R-CNN的方法目前是主流的目标检测方法，但是速度上并不能满足实时的要求。YOLO一类的方法慢慢显现出其重要性，这类方法使用了回归的思想，利用整张图作为网络的输入，直接在图像的多个位置上回归出这个位置的目标边框，以及目标所属的类别。</p>\n<p>我们直接看上面YOLO的目标检测的流程图：</p>\n<p><img src=\"https://julyedu-img-public.oss-cn-beijing.aliyuncs.com/Public/Image/Question/1525171091_647.jpg\" alt=\"\"></p>\n<ol>\n<li>给个一个输入图像，首先将图像划分成7*7的网格。</li>\n<li>对于每个网格，我们都预测2个边框（包括每个边框是目标的置信度以及每个边框区域在多个类别上的概率）。</li>\n<li>根据上一步可以预测出7<em>7</em>2个目标窗口，然后根据阈值去除可能性比较低的目标窗口，最后NMS去除冗余窗口即可。</li>\n</ol>\n<p><strong>小结：</strong>YOLO将目标检测任务转换成一个回归问题，大大加快了检测的速度，使得YOLO可以每秒处理45张图像。而且由于每个网络预测目标窗口时使用的是全图信息，使得false positive比例大幅降低（充分的上下文信息）。</p>\n<p>但是YOLO也存在问题：没有了Region Proposal机制，只使用7*7的网格回归会使得目标不能非常精准的定位，这也导致了YOLO的检测精度并不是很高。</p>\n<h4 id=\"3-2-7-SSD\"><a href=\"#3-2-7-SSD\" class=\"headerlink\" title=\"3.2.7 SSD\"></a>3.2.7 SSD</h4><p>SSD: Single Shot MultiBox Detector。上面分析了YOLO存在的问题，使用整图特征在7*7的粗糙网格内回归对目标的定位并不是很精准。那是不是可以结合region proposal的思想实现精准一些的定位？SSD结合YOLO的回归思想以及Faster R-CNN的anchor机制做到了这点。</p>\n<p><img src=\"https://julyedu-img-public.oss-cn-beijing.aliyuncs.com/Public/Image/Question/1525171268_230.jpg\" alt=\"\"></p>\n<p>上图是SSD的一个框架图，首先SSD获取目标位置和类别的方法跟YOLO一样，都是使用回归，但是YOLO预测某个位置使用的是全图的特征，SSD预测某个位置使用的是这个位置周围的特征（感觉更合理一些）。</p>\n<p>那么如何建立某个位置和其特征的对应关系呢？可能你已经想到了，使用Faster R-CNN的anchor机制。如SSD的框架图所示，假如某一层特征图(图b)大小是8*8，那么就使用3*3的滑窗提取每个位置的特征，然后这个特征回归得到目标的坐标信息和类别信息(图c)。</p>\n<p>不同于Faster R-CNN，这个anchor是在多个feature map上，这样可以利用多层的特征并且自然的达到多尺度（不同层的feature map 3*3滑窗感受野不同）。</p>\n<p>小结：SSD结合了YOLO中的回归思想和Faster R-CNN中的anchor机制，使用全图各个位置的多尺度区域特征进行回归，既保持了YOLO速度快的特性，也保证了窗口预测的跟Faster R-CNN一样比较精准。SSD在VOC2007上mAP可以达到72.1%，速度在GPU上达到58帧每秒。</p>\n<h3 id=\"3-3-语义-图像-分割\"><a href=\"#3-3-语义-图像-分割\" class=\"headerlink\" title=\"3.3 语义(图像)分割\"></a>3.3 语义(图像)分割</h3><p>识别图上pixel的类别，用全卷积网络。</p>\n<p><img src=\"http://photo.jomeswang.top/20200612230513.png\" alt=\"\"></p>\n<h2 id=\"4-代码实现CNN\"><a href=\"#4-代码实现CNN\" class=\"headerlink\" title=\"4. 代码实现CNN\"></a>4. 代码实现CNN</h2><p><a href=\"https://github.com/NLP-LOVE/ML-NLP/blob/master/Deep%20Learning/11.%20CNN/CNN.ipynb\" target=\"_blank\" rel=\"noopener\">cifar10数据集分类–CNN</a></p>\n<h2 id=\"5-参考文献\"><a href=\"#5-参考文献\" class=\"headerlink\" title=\"5. 参考文献\"></a>5. 参考文献</h2><ol>\n<li><a href=\"https://www.julyedu.com/question/big/kp_id/32/ques_id/2103\" target=\"_blank\" rel=\"noopener\">基于深度学习的目标检测技术演进：R-CNN、Fast R-CNN、Faster R-CNN、YOLO、SSD</a></li>\n<li><a href=\"https://blog.csdn.net/v_july_v/article/details/51812459\" target=\"_blank\" rel=\"noopener\">通俗理解卷积神经网络</a></li>\n</ol>\n<hr>\n<blockquote>\n<p>作者：<a href=\"https://github.com/NLP-LOVE/ML-NLP\" target=\"_blank\" rel=\"noopener\">@mantchs</a></p>\n<p>GitHub：<a href=\"https://github.com/NLP-LOVE/ML-NLP\" target=\"_blank\" rel=\"noopener\">https://github.com/NLP-LOVE/ML-NLP</a></p>\n<p>欢迎大家加入讨论！共同完善此项目！群号：【541954936】<a target=\"_blank\" href=\"//shang.qq.com/wpa/qunwpa?idkey=863f915b9178560bd32ca07cd090a7d9e6f5f90fcff5667489697b1621cecdb3\"><img border=\"0\" src=\"http://pub.idqqimg.com/wpa/images/group.png\" alt=\"NLP面试学习群\" title=\"NLP面试学习群\"></a></p>\n</blockquote>\n","categories":["深度学习"],"tags":["深度学习"]},{"title":"深度学习之入门","url":"/posts/781b3e4f/","content":"<h2 id=\"1-深度学习有哪些应用\"><a href=\"#1-深度学习有哪些应用\" class=\"headerlink\" title=\"1. 深度学习有哪些应用\"></a>1. 深度学习有哪些应用</h2><ul>\n<li>图像：图像识别、物体识别、图片美化、图片修复、目标检测。</li>\n<li>自然语言处理：机器创作、个性化推荐、文本分类、翻译、自动纠错、情感分析。</li>\n<li>数值预测、量化交易</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"2-什么是神经网络\"><a href=\"#2-什么是神经网络\" class=\"headerlink\" title=\"2. 什么是神经网络\"></a>2. 什么是神经网络</h2><p>我们以房价预测的案例来说明一下，把房屋的面积作为神经网络的输入（我们称之为𝑥），通过一个节点（一个小圆圈），最终输出了价格（我们用𝑦表示）。其实这个小圆圈就是一个单独的神经元，就像人的大脑神经元一样。如果这是一个单神经元网络，不管规模大小，<strong>它正是通过把这些单个神经元叠加在一起来形成。如果你把这些神经元想象成单独的乐高积木，你就通过搭积木来完成一个更大的神经网络。</strong></p>\n<p>神经网络与大脑关联不大。这是一个过度简化的对比，把一个神经网络的逻辑单元和右边的生物神经元对比。至今为止其实连神经科学家们都很难解释，究竟一个神经元能做什么。</p>\n<h3 id=\"2-1-什么是感知器\"><a href=\"#2-1-什么是感知器\" class=\"headerlink\" title=\"2.1 什么是感知器\"></a>2.1 什么是感知器</h3><p>这要从逻辑回归讲起，我们都知道逻辑回归的目标函数如下所示：</p>\n<p><img src=\"https://latex.codecogs.com/gif.latex?z=%5Ctheta_0+%5Ctheta_1X_1+%5Ctheta_2X_2\" alt=\"\"></p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/00630Defgy1g5nlym74voj305v01rjr6.jpg\" alt=\"\"></p>\n<p>我们用网络来表示，这个网络就叫做感知器：</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/00630Defly1g5gzor6zzvj30az08jtaf.jpg\" alt=\"\"></p>\n<p>如果在这个感知器的基础上加上隐藏层，就会得到下面我们要说的神经网络结构了。</p>\n<h3 id=\"2-2-神经网络的结构\"><a href=\"#2-2-神经网络的结构\" class=\"headerlink\" title=\"2.2 神经网络的结构\"></a>2.2 神经网络的结构</h3><p>神经网络的一般结构是由<strong>输入层、隐藏层(神经元)、输出层</strong>构成的。隐藏层可以是1层或者多层叠加，层与层之间是相互连接的，如下图所示。</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw690/00630Defgy1g5gqsvdbxfj30p10con4q.jpg\" alt=\"\"></p>\n<p><strong>一般说到神经网络的层数是这样计算的，输入层不算，从隐藏层开始一直到输出层，一共有几层就代表着这是一个几层的神经网络</strong>，例如上图就是一个三层结构的神经网络。</p>\n<p><strong>解释隐藏层的含义：</strong>在一个神经网络中，当你使用监督学习训练它的时候，训练集包含了输入𝑥也包含了目标输出𝑦，所以术语隐藏层的含义是在训练集中，这些中间结点的准确值我们是不知道到的，也就是说你看不见它们在训练集中应具有的值。</p>\n<ul>\n<li>多隐藏层的神经网络比 单隐藏层的神经网络工程效果好很多。</li>\n<li>提升隐层层数或者隐层神经元个数，神经网络“容量”会变大，空间表达力会变强。</li>\n<li>过多的隐层和神经元节点，会带来过拟合问题。</li>\n<li>不要试图通过降低神经网络参数量来减缓过拟合，用正则化或者dropout。</li>\n</ul>\n<h3 id=\"2-3-为什么神经网络具有非线性切分能力\"><a href=\"#2-3-为什么神经网络具有非线性切分能力\" class=\"headerlink\" title=\"2.3 为什么神经网络具有非线性切分能力\"></a>2.3 为什么神经网络具有非线性切分能力</h3><p>假设对下图进行分类，圆圈为一类，红叉叉为另一类，如果用线性切分的话无论如何都不能把它们进行分开。</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw690/00630Defly1g5h19dcut2j308s072dfy.jpg\" alt=\"\"></p>\n<p>这时，引入神经网络(2层神经网络)，包含一个隐藏层，在隐藏层中,分别得到了P1和P2的图形，P1这条线以上的部分都是红叉叉，P2这条线以下的部分都是红叉叉，两个神经元就有2条线性直线。从隐藏层到输出层要做的事情就是把这两条直线给合并起来，就会得到h(x)的图形，也就是说P1以上的空间交上P2以下的空间就是红叉叉的分类，其余空间分类为圆圈。这就使得原本不能够线性切分变成非线性切分了。</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/00630Defly1g5h1fu2kvjj30px0irtd0.jpg\" alt=\"\"></p>\n<p>如果隐藏层更加复杂的话，就能够完美的实现复杂平面样本点分布的划分(类似于抠图)，如下图所示：</p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/00630Defly1g5h1svz7mij30f40cq795.jpg\" alt=\"\"></p>\n<h2 id=\"3-神经网络的计算过程\"><a href=\"#3-神经网络的计算过程\" class=\"headerlink\" title=\"3. 神经网络的计算过程\"></a>3. 神经网络的计算过程</h2><h3 id=\"3-1-计算过程\"><a href=\"#3-1-计算过程\" class=\"headerlink\" title=\"3.1 计算过程\"></a>3.1 计算过程</h3><p>如下图所示。用圆圈表示神经网络的计算单元，逻辑回归的计算有两个步骤，首先你按步骤计算出𝑧，然后在第二<br>步中你以 sigmoid 函数为激活函数计算𝑧（得出𝑎），一个神经网络只是这样子做了好多次重复计算。</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/00630Defly1g5h3bwknx1j30iy0fh79u.jpg\" alt=\"\"></p>\n<p>其中的一个神经元计算如下图所示：</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw690/00630Defly1g5h35bulb7j30g5068jse.jpg\" alt=\"\"></p>\n<p><strong>向量化计算</strong>，如果你执行神经网络的程序，用 for 循环来做这些看起来真的很低效。所以接下来我们要做的就是把这四个等式向量化。向量化的过程是将神经网络中的一层神经元参数纵向堆积起来，例如隐藏层中的𝑤纵向堆积起来变成一个(4,3)的矩阵，用符号𝑊[1]表示。另一个看待这个的方法是我们有四个逻辑回归单元，且每一个逻辑回归单元都有相对应的参数——向量𝑤，把这四个向量堆积在一起，你会得出这 4×3 的矩阵。</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/00630Defly1g5h3eqh76aj30cq06xjro.jpg\" alt=\"\"></p>\n<p>上面公式表示的是一个样本的向量化计算，那么<strong>多样本向量化计算</strong>其实就是在上面公式的基础上再增列数，每一列相当于一个样本。</p>\n<h3 id=\"3-2-随机初始化模型参数\"><a href=\"#3-2-随机初始化模型参数\" class=\"headerlink\" title=\"3.2 随机初始化模型参数\"></a>3.2 随机初始化模型参数</h3><p>在神经⽹络中，通常需要随机初始化模型参数。下⾯我们来解释这样做的原因。</p>\n<p>假设输出层只保留⼀个输出单元<em>o</em>1（删去<em>o</em>2和<em>o</em>3以及指向它们的箭头），且隐藏层使⽤相同的激活函数。如果将每个隐藏单元的参数都初始化为相等的值，那么在正向传播时每个隐藏单元将根据相同的输⼊计算出相同的值， 并传递⾄输出层。在反向传播中，每个隐藏单元的参数梯度值相等。因此，这些参数在使⽤基于梯度的优化算法迭代后值依然相等。之后的迭代也是如此。</p>\n<p>在这种情况下，⽆论隐藏单元有多少， 隐藏层本质上只有1个隐藏单元在发挥作⽤。因此，正如在前⾯的实验中所做的那样，我们通常将神经⽹络的模型参数，特别是权重参数，进⾏随机初始化。 </p>\n<p><strong>有两种初始化方法：</strong></p>\n<ol>\n<li><p>采用正态分布的随机初始化方法。</p>\n</li>\n<li><p>Xavier初始化方法：假设某全连接层的输入个数为a，输出个数为b，Xavier随机初始化将使该层中权重参数的每个元素都随机采样于均匀分布：</p>\n<p><img src=\"https://latex.codecogs.com/gif.latex?U%5B-%5Csqrt%7B%5Cfrac%7B6%7D%7Ba+b%7D%7D,%5Csqrt%7B%5Cfrac%7B6%7D%7Ba+b%7D%7D%5D\" alt=\"\"></p>\n<p>初始化后，<strong>每层输出的方差不会受该层输入个数的影响，且每层梯度的方差也不受该层输出个数的影响。</strong></p>\n</li>\n</ol>\n<h3 id=\"3-3-激活函数\"><a href=\"#3-3-激活函数\" class=\"headerlink\" title=\"3.3 激活函数\"></a>3.3 激活函数</h3><h4 id=\"3-3-1-激活函数有哪些\"><a href=\"#3-3-1-激活函数有哪些\" class=\"headerlink\" title=\"3.3.1 激活函数有哪些\"></a>3.3.1 激活函数有哪些</h4><p>在隐层接一个线性变换后 ，再接一个非线性变换(如sigmoid)，这个非线性变换叫做<strong>传递函数或者激活函数</strong>。上面的例子用的都是逻辑回归的Sigmoid激活函数，如果还不明白激活函数在哪，可以看下面这幅图。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/00630Defly1g5h3pqzw0sj30g5068wfi.jpg\" alt=\"\"></p>\n<ol>\n<li><p><strong>sigmoid函数</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200612232049.png\" alt=\"\"></p>\n</li>\n<li><p><strong>tanh(双曲正切)函数</strong></p>\n<p>事实上，<strong>tanh</strong> 函数是 <strong>sigmoid</strong> 的向下平移和伸缩后的结果。对它进行了变形后，穿过了(0,0)点，并且值域介于+1 和-1 之间。但有一个例外：在二分类的问题中，对于输出层，因为𝑦的值是 0 或 1，所以想让𝑦^的数值介于0和1之间，而不是在-1和+1之间。所以需要使用<strong>sigmoid</strong>激活函数。</p>\n<p><img src=\"http://photo.jomeswang.top/20200612232305.png\" alt=\"\"></p>\n<p><strong>sigmoid</strong>函数和<strong>tanh</strong>函数两者共同的缺点是，在𝑧特别大或者特别小的情况下，导数的梯度或者函数的斜率会变得特别小，最后就会接近于 0，导致降低梯度下降的速度。</p>\n</li>\n<li><p><strong>ReLu(修正线性单元)函数</strong></p>\n<p>只要𝑧是正值的情况下，导数恒等于 1，当𝑧是负 值的时候，导数恒等于 0。</p>\n<p><img src=\"http://photo.jomeswang.top/20200612232505.png\" alt=\"\"></p>\n<p>这有一些选择激活函数的经验法则： 如果输出是 0、1 值（二分类问题），则输出层选择 <strong>sigmoid</strong> 函数，然后其它的所有单 元都选择 <strong>Relu</strong> 函数。 </p>\n</li>\n<li><p><strong>softmax激活函数</strong></p>\n<ul>\n<li>非线性变换之前计算：<img src=\"https://latex.codecogs.com/gif.latex?z%5E%7B(l)%7D=W%5E%7B(l)%7Da%5E%7B(l-1)%7D+b%5E%7B(l)%7D\" alt=\"\"></li>\n<li>经过非线性变换，临时变量：<img src=\"https://latex.codecogs.com/gif.latex?t=e%5E%7Bz%5E%7B(l)%7D%7D\" alt=\"\"></li>\n<li><img src=\"http://photo.jomeswang.top/20200612232554.png\" alt=\"\"></li>\n<li>$a^l$表示的就是第几个类别的概率值，这些<strong>概率值和为1</strong></li>\n</ul>\n<p>之前，我们的激活函数都是接受单行数值输入，例如 <strong>Sigmoid</strong> 和 <strong>ReLu</strong> 激活函数，输入一个实数，输出一个实数。<strong>Softmax</strong> 激活函数的特殊之处在于，因为需要将所有可能的输出归一化，就需要输入一个向量，最后输出一个向量。</p>\n<p><strong>hardmax</strong> 函数会观察𝑧的元素，然后在𝑧中最大元素的位置放上 1，其它位置放上 0，<strong>Softmax</strong> 所做的从𝑧到这些概率的映射更为温和。</p>\n<p><strong>Softmax</strong> 回归将 <strong>logistic</strong> 回归推广到了两种分类以上。</p>\n</li>\n</ol>\n<h4 id=\"3-3-2-优缺点\"><a href=\"#3-3-2-优缺点\" class=\"headerlink\" title=\"3.3.2 优缺点\"></a>3.3.2 优缺点</h4><ul>\n<li>在𝑧的区间变动很大的情况下，激活函数的导数或者激活函数的斜率都会远大于0，在程序实现就是一个 <strong>if-else</strong> 语句，而 <strong>sigmoid</strong> 函数需要进行浮点四则运算，在实践中，使用 <strong>ReLu</strong> 激活函数神经网络通常会比使用 <strong>sigmoid</strong> 或者 <strong>tanh</strong> 激活函数学习的更快。</li>\n<li><strong>sigmoid</strong> 和 <strong>tanh</strong> 函数的导数在正负饱和区的梯度都会接近于 0，这会造成梯度弥散，而 <strong>Relu</strong> 和 <strong>Leaky ReLu</strong> 函数大于 0 部分都为常数，不会产生梯度弥散现象。(同时应该注意到的是，<strong>Relu</strong> 进入负半区的时候，梯度为 0，神经元此时不会训练，产生所谓的稀疏性，而 <strong>Leaky ReLu</strong> 不会有这问题) 𝑧在 <strong>ReLu</strong> 的梯度一半都是 0，但是，有足够的隐藏层使得 z 值大于 0，所以对大多数的 训练数据来说学习过程仍然可以很快。 </li>\n</ul>\n<h4 id=\"3-3-3-为什么使用激活函数\"><a href=\"#3-3-3-为什么使用激活函数\" class=\"headerlink\" title=\"3.3.3 为什么使用激活函数\"></a>3.3.3 为什么使用激活函数</h4><p>如果你使用线性激活函数或者没有使用一个激活函数，那么无论你的神经网络有多少层一直在做的只是计算线性函数，所以不如直接去掉全部隐藏层。在我们的简明案例中，事实证明如果你在隐藏层用线性激活函数，在输出层用 <strong>sigmoid</strong> 函数，那么这个模型的复杂度和没有任何隐藏层。的标准 <strong>Logistic</strong> 回归是一样的。</p>\n<p>在这里线性隐层一点用也没有，因为这两个线性函数的组合本身就是线性函数，所以除非你引入非线性，否则你无法计算更有趣的函数，即使你的网络层数再多也不行。</p>\n<h4 id=\"3-3-4-人工神经网络中为什么ReLu要好过于tanh和sigmoid-function？\"><a href=\"#3-3-4-人工神经网络中为什么ReLu要好过于tanh和sigmoid-function？\" class=\"headerlink\" title=\"3.3.4 人工神经网络中为什么ReLu要好过于tanh和sigmoid function？\"></a>3.3.4 人工神经网络中为什么ReLu要好过于tanh和sigmoid function？</h4><ol>\n<li>采用sigmoid等函数，算激活函数时（指数运算），计算量大，反向传播求误差梯度时，求导涉及除法和指数运算，计算量相对大，而采用Relu激活函数，整个过程的计算量节省很多。</li>\n<li>对于深层网络，sigmoid函数反向传播时，很容易就会出现梯度消失的情况（在sigmoid接近饱和区时，变换太缓慢，导数趋于0，这种情况会造成信息丢失），这种现象称为饱和，从而无法完成深层网络的训练。而ReLU就不会有饱和倾向，不会有特别小的梯度出现。</li>\n<li>Relu会使一部分神经元的输出为0，这样就造成了网络的稀疏性，并且减少了参数的相互依存关系，缓解了过拟合问题的发生（以及一些人的生物解释balabala）。当然现在也有一些对relu的改进，比如prelu，random relu等，在不同的数据集上会有一些训练速度上或者准确率上的改进，具体的大家可以找相关的paper看。</li>\n</ol>\n<h4 id=\"3-3-5-激活函数有哪些性质？\"><a href=\"#3-3-5-激活函数有哪些性质？\" class=\"headerlink\" title=\"3.3.5 激活函数有哪些性质？\"></a>3.3.5 激活函数有哪些性质？</h4><ol>\n<li>非线性： 当激活函数是线性的，一个两层的神经网络就可以基本上逼近所有的函数。但如果激活函数是恒等激活函数的时候，即 <img src=\"https://latex.codecogs.com/gif.latex?f(x)=x\" alt=\"\">，就不满足这个性质，而且如果 MLP 使用的是恒等激活函数，那么其实整个网络跟单层神经网络是等价的；</li>\n<li>可微性： 当优化方法是基于梯度的时候，就体现了该性质；</li>\n<li>单调性： 当激活函数是单调的时候，单层网络能够保证是凸函数；</li>\n<li><img src=\"http://wx1.sinaimg.cn/mw690/00630Defgy1g5nmaak1f3j302x0120si.jpg\" alt=\"\">： 当激活函数满足这个性质的时候，如果参数的初始化是随机的较小值，那么神经网络的训练将会很高效；如果不满足这个性质，那么就需要详细地去设置初始值；</li>\n<li>输出值的范围： 当激活函数输出值是有限的时候，基于梯度的优化方法会更加稳定，因为特征的表示受有限权值的影响更显著；当激活函数的输出是无限的时候，模型的训练会更加高效，不过在这种情况小，一般需要更小的 Learning Rate。</li>\n</ol>\n<h3 id=\"3-4-正向传播\"><a href=\"#3-4-正向传播\" class=\"headerlink\" title=\"3.4 正向传播\"></a>3.4 正向传播</h3><p>正向传播(forward-propagation)是指对神经网络沿着从输入层到输出层的顺序，依次计算并存储模型的中间变量(包括输出)。</p>\n<p>逻辑回归的计算步骤：所以回想当时我们讨论逻辑回归的时候，我们有这个正向传播步骤，其中我们计算𝑧，然后𝑎，然后损失函数𝐿。 正向传播类似，计算<img src=\"https://latex.codecogs.com/gif.latex?z%5E%7B%5B1%5D%7D%EF%BC%8Ca%5E%7B%5B1%5D%7D\" alt=\"\">)，再计算<img src=\"https://latex.codecogs.com/gif.latex?z%5E%7B%5B2%5D%7D%EF%BC%8Ca%5E%7B%5B2%5D%7D\" alt=\"\">，最后得到<strong>loss function</strong>。</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/00630Defgy1g5nmdcfqwjj30dp039t8n.jpg\" alt=\"\"></p>\n<h3 id=\"3-5-反向传播-BP\"><a href=\"#3-5-反向传播-BP\" class=\"headerlink\" title=\"3.5 反向传播(BP)\"></a>3.5 反向传播(BP)</h3><p>反向传播(back-propagation)指的是计算神经网络参数梯度的方法。总的来说，反向传播依据微积分中的链式法则，沿着从输出层到输入层的顺序，依次计算并存储目标函数有关神经网络各层的中间变量以及参数的梯度。</p>\n<p>由正向传播经过所有的隐藏层到达输出层，会得到一个输出结果<img src=\"https://latex.codecogs.com/gif.latex?O_L\" alt=\"\">)，然后根据这个<img src=\"https://latex.codecogs.com/gif.latex?O_L\" alt=\"\">带入<strong>loss funcation</strong>中，利用SGD算法进行最优化求解，其中每次梯度下降都会使用一次BP来更新各个网络层中的参数值，这就是BP回传误差的意思。</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw690/00630Defgy1g5hmv1p3elj30nw0adacj.jpg\" alt=\"image\"></p>\n<ul>\n<li>正向传播求损失，BP回传误差。</li>\n<li>根据误差信号修正每层的权重。对各个w进行求导，然后更新各个w。</li>\n<li><strong>链式依赖损失函数</strong>：<img src=\"https://latex.codecogs.com/gif.latex?y%5E%7B-%7D=h(g(f(x)))\" alt=\"\"></li>\n</ul>\n<h3 id=\"3-6-随机梯度下降法-SGD\"><a href=\"#3-6-随机梯度下降法-SGD\" class=\"headerlink\" title=\"3.6 随机梯度下降法(SGD)\"></a>3.6 随机梯度下降法(SGD)</h3><h4 id=\"3-6-1-mini-batch梯度下降\"><a href=\"#3-6-1-mini-batch梯度下降\" class=\"headerlink\" title=\"3.6.1 mini-batch梯度下降\"></a>3.6.1 mini-batch梯度下降</h4><p>你可以把训练集分割为小一点的子集训练，这些子集被取名为 <strong>mini-batch</strong>，假设每一个子集中只有 1000 个样本，那么把其中的𝑥 (1)到𝑥 (1000)取出来，将其称为第一个子训练集，也叫做 <strong>mini-batch</strong>，然后你再取出接下来的 1000 个样本，从𝑥 (1001)到𝑥 (2000)，然后再取 1000个样本，以此类推。</p>\n<p>在训练集上运行 <strong>mini-batch</strong> 梯度下降法，你运行 for t=1……5000，因为我们有5000个各有 1000 个样本的组，在 <strong>for</strong> 循环里你要做得基本就是对𝑋 {𝑡}和𝑌 {𝑡}执行一步梯度下降法。 </p>\n<ul>\n<li>batch_size=1，就是SGD。</li>\n<li>batch_size=n，就是mini-batch</li>\n<li>batch_size=m，就是batch</li>\n</ul>\n<p>其中1&lt;n&lt;m，m表示整个训练集大小。</p>\n<p><strong>优缺点：</strong></p>\n<ul>\n<li>batch：相对噪声低些，幅度也大一些，你可以继续找最小值。 </li>\n<li>SGD：大部分时候你向着全局最小值靠近，有时候你会远离最小值，因为那个样本恰好给你指的方向不对，因此随机梯度下降法是有很多噪声的，平均来看，它最终会靠近最小值，不过有时候也会方向错误，因为随机梯度下降法永远不会收敛，而是会一直在最小值附近波动。一次性只处理了一个训练样本，这样效率过于低下。</li>\n<li>mini-batch：实践中最好选择不大不小的 <strong>mini-batch</strong>，得到了大量向量化，效率高，收敛快。</li>\n</ul>\n<p>首先，如果训练集较小，直接使用 <strong>batch</strong> 梯度下降法，这里的少是说小于 2000 个样本。一般的 <strong>mini-batch</strong> 大小为 64 到 512，考虑到电脑内存设置和使用的方式，如果 <strong>mini-batch</strong> 大小是 2 的𝑛次方，代码会运行地快一些。</p>\n<h4 id=\"3-6-2-调节-Batch-Size-对训练效果影响到底如何？\"><a href=\"#3-6-2-调节-Batch-Size-对训练效果影响到底如何？\" class=\"headerlink\" title=\"3.6.2 调节 Batch_Size 对训练效果影响到底如何？\"></a>3.6.2 调节 Batch_Size 对训练效果影响到底如何？</h4><ol>\n<li>Batch_Size 太小，模型表现效果极其糟糕(error飙升)。</li>\n<li>随着 Batch_Size 增大，处理相同数据量的速度越快。</li>\n<li>随着 Batch_Size 增大，达到相同精度所需要的 epoch 数量越来越多。</li>\n<li>由于上述两种因素的矛盾， Batch_Size 增大到某个时候，达到时间上的最优。</li>\n<li>由于最终收敛精度会陷入不同的局部极值，因此 Batch_Size 增大到某些时候，达到最终收敛精度上的最优。 </li>\n</ol>\n<h2 id=\"4-为什么说神经网络是端到端的网络\"><a href=\"#4-为什么说神经网络是端到端的网络\" class=\"headerlink\" title=\"4. 为什么说神经网络是端到端的网络?\"></a>4. 为什么说神经网络是端到端的网络?</h2><p>端到端学习(end-to-end)是一种解决问题的思路，与之对应的是多步骤解决问题，也就是将一个问题拆分为多个步骤分步解决，而端到端是由输入端的数据直接得到输出端的结果。</p>\n<p>就是不要预处理和特征提取，直接把原始数据扔进去得到最终结果。</p>\n<p><strong>特征提取包含在神经网络内部</strong>，所以说神经网络是端到端的网络。</p>\n<p><strong>优点</strong>：</p>\n<p>通过缩减人工预处理和后续处理，尽可能使模型从原始输入到最终输出，给模型更多可以根据数据自动调节的空间，增加模型的整体契合度。</p>\n<p><strong>缺点</strong></p>\n<ul>\n<li>它可能需要大量的数据。要直接学到这个𝑥到𝑦的映射，你可能需要大量(𝑥, 𝑦)数据。</li>\n<li>它排除了可能有用的手工设计组件。</li>\n</ul>\n<h2 id=\"5-深度学习框架比较\"><a href=\"#5-深度学习框架比较\" class=\"headerlink\" title=\"5. 深度学习框架比较\"></a>5. 深度学习框架比较</h2><p>现有的深度学习开源平台主要有 Caffe, PyTorch, MXNet, CNTK, Theano, TensorFlow, Keras, fastai等。</p>\n<table>\n<thead>\n<tr>\n<th>平台</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TensorFlow</td>\n<td>1.功能很齐全，能够搭建的网络更丰富。<br/>2.支持多种编程语言。<br/>3.拥有强大的计算集群。<br/>4.谷歌支持<br/>5.社区活跃度高。<br/>6.支持多GPU。<br/>7.TensorBoard支持图形可视化。</td>\n<td>1.编程入门难度较大。<br/>2.计算图是纯 Python 的，因此速度较慢<br/>3.图构造是静态的，意味着图必须先被「编译」再运行</td>\n</tr>\n<tr>\n<td>Keras</td>\n<td>1.Keras是TensorFlow高级集成APi<br/>2.Keras是一个简洁的API。 可以快速帮助您创建应用程序。<br/>3.代码更加可读和简洁。<br/>4.Keras处于高度集成框架。 <br/>5.社区活跃。</td>\n<td>1.Keras框架环境配置比其他底层框架要复杂一些。<br/>2.虽然更容易创建模型，但是面对复杂的网络结构时可能不如TensorFlow。<br/>3.性能方面比较欠缺。</td>\n</tr>\n<tr>\n<td>Pytorch</td>\n<td>1.它可以在流程中更改体系结构。<br/>2.训练神经网络的过程简单明了。<br/>3.可以使用标准 Python 语法编写 for 循环语句。<br/>4.大量预训练模型</td>\n<td>1.不够TensorFlow全面，不过未来会弥补。<br/>2.PyTorch部署移动端不是很好。</td>\n</tr>\n<tr>\n<td>MXNet</td>\n<td>1.支持多语言。<br/>2.文档齐全。<br/>3.支持多个GPU。<br/>4.清晰且易于维护的代码。<br/>5.命令式和符号式编程风格之间进行选择。</td>\n<td>1.不被广泛使用。<br/>2.社区不够活跃。<br/>3.学习难度大一些。</td>\n</tr>\n</tbody></table>\n<p>目前从招聘来说，公司使用TensorFlow的占大多数，毕竟TensorFlow的社区、性能、部署方面都是很强的，所以之后写的实例代码都使用TensorFlow来完成。</p>\n<h2 id=\"6-softmax分类器\"><a href=\"#6-softmax分类器\" class=\"headerlink\" title=\"6. softmax分类器\"></a>6. softmax分类器</h2><h3 id=\"6-1-什么是softmax\"><a href=\"#6-1-什么是softmax\" class=\"headerlink\" title=\"6.1 什么是softmax\"></a>6.1 什么是softmax</h3><p>在图像分类的情景中，softmax分类器输出可以是一个图像类别的离散值，和线性回归不同的是，<strong>softmax输出单元从一个变成了多个。</strong></p>\n<p>softmax回归和线性回归一样将输入特征与权重做线性叠加。与线性回归的一个主要不同在于，<strong>softmax回归的输出值个数等于标签里的类别数。</strong>下图是用神经网络描绘了softmax回归，也是一个单层神经网络，由于每个输出  <img src=\"https://latex.codecogs.com/gif.latex?o_1,o_2,o_3\" alt=\"\">的计算都要依赖于所有的输入 <img src=\"https://latex.codecogs.com/gif.latex?x_1,x_2,x_3,x_4\" alt=\"\">，softmax回归的输出层也是一个全连接层。</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw690/00630Defly1g5lpopm1c3j30h906574z.jpg\" alt=\"\"></p>\n<p><img src=\"https://latex.codecogs.com/gif.latex?o_1=x_1w_%7B11%7D+x_2w_%7B21%7D+x_3w_%7B31%7D+x_4w_%7B41%7D\" alt=\"\"></p>\n<p><img src=\"https://latex.codecogs.com/gif.latex?o_2=x_1w_%7B12%7D+x_2w_%7B22%7D+x_3w_%7B32%7D+x_4w_%7B42%7D\" alt=\"\"></p>\n<p><img src=\"https://latex.codecogs.com/gif.latex?o_3=x_1w_%7B13%7D+x_2w_%7B23%7D+x_3w_%7B33%7D+x_4w_%7B43%7D\" alt=\"\"></p>\n<p><img src=\"https://latex.codecogs.com/gif.latex?o_4=x_1w_%7B14%7D+x_2w_%7B24%7D+x_3w_%7B34%7D+x_4w_%7B44%7D\" alt=\"\"></p>\n<h3 id=\"6-2-softmax的计算\"><a href=\"#6-2-softmax的计算\" class=\"headerlink\" title=\"6.2 softmax的计算\"></a>6.2 softmax的计算</h3><p>一个简单的办法是将输出值  <img src=\"https://latex.codecogs.com/gif.latex?o_i\" alt=\"\">当做预测类别是i的置信度，并将值最大的输出所对应的类别作为预测输出。例如，如果  <img src=\"https://latex.codecogs.com/gif.latex?o_1,o_2,o_3\" alt=\"\">分别为0.1 ; 10 ; 0.1，由于 <img src=\"https://latex.codecogs.com/gif.latex?o_2\" alt=\"\">最大，那么预测类别为2。</p>\n<p>然而，直接使用输出层的输出会有两个问题：</p>\n<ul>\n<li>由于输出层的输出值的范围不确定，我们难以直观上判断这些值得意义。</li>\n<li>由于真实标签是离散值，这些离散值与不确定范围的输出值之间的误差难以衡量。</li>\n</ul>\n<p>softmax运算解决了以上两个问题。它通过下面的公式将输出值变换成值为正且和为1的概率分布：</p>\n<p><img src=\"https://latex.codecogs.com/gif.latex?softmax(o_i)=%5Cfrac%7Bexp(o_i)%7D%7B%5Csum_%7Bi=1%7D%5E%7Bn%7Dexp(o_i)%7D\" alt=\"\"></p>\n<h3 id=\"6-3-交叉熵损失函数\"><a href=\"#6-3-交叉熵损失函数\" class=\"headerlink\" title=\"6.3 交叉熵损失函数\"></a>6.3 交叉熵损失函数</h3><p>我们已经知道，softmax运算将输出变换成一个合法的类别预测分布。实际上，真实标签也可以用类别分布表达：</p>\n<p><img src=\"http://photo.jomeswang.top/20200612234427.png\" alt=\"\"></p>\n<p>想要预测分类结果正确，<strong>我们其实并不需要预测概率完全等于标签概率</strong>，而平方损失则过于严格。改善这个问题的一个方法是使用更适合衡量两个概率分布差异的测量函数。其中，<strong>交叉熵(cross entropy)是一个常用的衡量方法：</strong></p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/00630Defgy1g5nmm3jzapj30e201o749.jpg\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200612234449.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200612234627.png\" alt=\"\"></p>\n<h2 id=\"7-神经网络实现\"><a href=\"#7-神经网络实现\" class=\"headerlink\" title=\"7. 神经网络实现\"></a>7. 神经网络实现</h2><p><a href=\"https://github.com/NLP-LOVE/ML-NLP/blob/master/Deep%20Learning/10.%20Neural%20Network/TensorFlow_LR.ipynb\" target=\"_blank\" rel=\"noopener\">TensorFlow示例：线性回归</a></p>\n<hr>\n<blockquote>\n<p>作者：<a href=\"https://github.com/NLP-LOVE/ML-NLP\" target=\"_blank\" rel=\"noopener\">@mantchs</a></p>\n<p>GitHub：<a href=\"https://github.com/NLP-LOVE/ML-NLP\" target=\"_blank\" rel=\"noopener\">https://github.com/NLP-LOVE/ML-NLP</a></p>\n<p>欢迎大家加入讨论！共同完善此项目！群号：【541954936】<a target=\"_blank\" href=\"//shang.qq.com/wpa/qunwpa?idkey=863f915b9178560bd32ca07cd090a7d9e6f5f90fcff5667489697b1621cecdb3\"><img border=\"0\" src=\"http://pub.idqqimg.com/wpa/images/group.png\" alt=\"NLP面试学习群\" title=\"NLP面试学习群\"></a></p>\n</blockquote>\n","categories":["深度学习"],"tags":["深度学习"]},{"title":"js函数,DOM和BOM操作","url":"/posts/6be5450b/","content":"<h2 id=\"一：函数\"><a href=\"#一：函数\" class=\"headerlink\" title=\"一：函数\"></a>一：函数</h2><a id=\"more\"></a>\n\n<h3 id=\"1-1-Function-构造器\"><a href=\"#1-1-Function-构造器\" class=\"headerlink\" title=\"1.1 Function() 构造器\"></a>1.1 Function() 构造器</h3><p>正如您在之前的例子中看到的，JavaScript 函数是通过 function 关键词定义的。</p>\n<p>函数也可以通过名为 Function() 的内建 JavaScript 函数构造器来定义。</p>\n<p>大多数情况下，您可以避免在 JavaScript 中使用 new 关键词。</p>\n<h3 id=\"1-2-函数提升\"><a href=\"#1-2-函数提升\" class=\"headerlink\" title=\"1.2  函数提升\"></a>1.2  函数提升</h3><p>在本教程中稍早前，您已经学到了“提升”（hoisting）。</p>\n<p>Hoisting 是 JavaScript 将<em>声明</em>移动到当前作用域顶端的默认行为。</p>\n<p>Hoisting 应用于变量声明和函数声明。</p>\n<p>正因如此，JavaScript 函数能够在声明之前被调用：</p>\n<h3 id=\"1-3-箭头函数\"><a href=\"#1-3-箭头函数\" class=\"headerlink\" title=\"1.3  箭头函数\"></a>1.3  箭头函数</h3><p>箭头函数允许使用简短的语法来编写函数表达式。</p>\n<p>您不需要 function 关键字、return 关键字和花括号。</p>\n<p>实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; ES5</span><br><span class=\"line\">var x &#x3D; function(x, y) &#123;</span><br><span class=\"line\">  return x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ES6</span><br><span class=\"line\">const x &#x3D; (x, y) &#x3D;&gt; x * y;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-函数参数\"><a href=\"#1-4-函数参数\" class=\"headerlink\" title=\"1.4  函数参数\"></a>1.4  函数参数</h3><p>在本教程中稍早的时间，您已经学到了函数可以拥有<em>参数</em>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">functionName(parameter1, parameter2, parameter3) &#123;</span><br><span class=\"line\">    要执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>函数参数（parameter）</em>指的是在函数定义中列出的<em>名称</em>。</p>\n<p><em>函数参数（argument）</em>指的是传递到函数或由函数接收到的真实<em>值</em>。</p>\n<h3 id=\"1-5-arguments-对象\"><a href=\"#1-5-arguments-对象\" class=\"headerlink\" title=\"1.5   arguments 对象\"></a>1.5   arguments 对象</h3><p>JavaScript 函数有一个名为 arguments 对象的内置对象。</p>\n<p>arguments 对象包含函数调用时使用的参数数组。</p>\n<p>这样，您就可以简单地使用函数来查找（例如）数字列表中的最高值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">x &#x3D; findMax(1, 123, 500, 115, 44, 88);</span><br><span class=\"line\"></span><br><span class=\"line\">function findMax() &#123;</span><br><span class=\"line\">    var i;</span><br><span class=\"line\">    var max &#x3D; -Infinity;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; arguments.length; i++) &#123;</span><br><span class=\"line\">        if (arguments[i] &gt; max) &#123;</span><br><span class=\"line\">            max &#x3D; arguments[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-JavaScript-call-方法\"><a href=\"#1-6-JavaScript-call-方法\" class=\"headerlink\" title=\"1.6    JavaScript call() 方法\"></a>1.6    JavaScript call() 方法</h3><p>call() 方法是预定义的 JavaScript 方法。</p>\n<p>它可以用来调用所有者对象作为参数的方法。</p>\n<p>通过 call()，您能够使用属于另一个对象的方法。</p>\n<p>本例调用 person 的 fullName 方法，并用于 person1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var person &#x3D; &#123;</span><br><span class=\"line\">    fullName: function() &#123;</span><br><span class=\"line\">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 &#x3D; &#123;</span><br><span class=\"line\">    firstName:&quot;Bill&quot;,</span><br><span class=\"line\">    lastName: &quot;Gates&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person2 &#x3D; &#123;</span><br><span class=\"line\">    firstName:&quot;Steve&quot;,</span><br><span class=\"line\">    lastName: &quot;Jobs&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.fullName.call(person1);  &#x2F;&#x2F; 将返回 &quot;Bill Gates&quot;</span><br></pre></td></tr></table></figure>\n\n<p>不同之处是：</p>\n<p>call() 方法分别接受参数。</p>\n<p>apply() 方法接受数组形式的参数。</p>\n<p>闭包？？</p>\n<h2 id=\"二：-什么是-DOM？\"><a href=\"#二：-什么是-DOM？\" class=\"headerlink\" title=\"二：  什么是 DOM？\"></a>二：  什么是 DOM？</h2><p>DOM 是一项 W3C (World Wide Web Consortium) 标准。</p>\n<p>DOM 定义了访问文档的标准：</p>\n<blockquote>\n<p>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。”</p>\n</blockquote>\n<p>W3C DOM 标准被分为 3 个不同的部分：</p>\n<ul>\n<li>Core DOM - 所有文档类型的标准模型</li>\n<li>XML DOM - XML 文档的标准模型</li>\n<li>HTML DOM - HTML 文档的标准模型</li>\n</ul>\n<h3 id=\"2-1-查找HTML元素\"><a href=\"#2-1-查找HTML元素\" class=\"headerlink\" title=\"2.1  查找HTML元素\"></a>2.1  查找HTML元素</h3><ul>\n<li>通过 id 查找 HTML 元素</li>\n<li>通过标签名查找 HTML 元素</li>\n<li>通过类名查找 HTML 元素</li>\n<li>通过 CSS 选择器查找 HTML 元素</li>\n<li>通过 HTML 对象集合查找 HTML 元素</li>\n</ul>\n<h3 id=\"2-2-通过-CSS-选择器查找-HTML-元素\"><a href=\"#2-2-通过-CSS-选择器查找-HTML-元素\" class=\"headerlink\" title=\"2.2  通过 CSS 选择器查找 HTML 元素\"></a>2.2  通过 CSS 选择器查找 HTML 元素</h3><p>如果您需要查找匹配指定 CSS 选择器（id、类名、类型、属性、属性值等等）的所有 HTML 元素，请使用 querySelectorAll() 方法。</p>\n<h3 id=\"2-3-事件\"><a href=\"#2-3-事件\" class=\"headerlink\" title=\"2.3   事件\"></a>2.3   事件</h3><p>HTML 事件的例子：</p>\n<ul>\n<li>当用户点击鼠标时</li>\n<li>当网页加载后</li>\n<li>当图像加载后</li>\n<li>当鼠标移至元素上时</li>\n<li>当输入字段被改变时</li>\n<li>当 HTML 表单被提交时</li>\n<li>当用户敲击按键时</li>\n</ul>\n<h3 id=\"2-4-JavaScript-HTML-DOM-事件监听器\"><a href=\"#2-4-JavaScript-HTML-DOM-事件监听器\" class=\"headerlink\" title=\"2.4  JavaScript HTML DOM 事件监听器\"></a>2.4  JavaScript HTML DOM 事件监听器</h3><p>addEventListener() 方法为指定元素指定事件处理程序。</p>\n<p>您能够通过使用 removeEventListener() 方法轻松地删除事件监听器。</p>\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">element.addEventListener(event, function, useCapture);</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数是事件的类型（比如 “click” 或 “mousedown”）。</p>\n<p>第二个参数是当事件发生时我们需要调用的函数。</p>\n<p>第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的。</p>\n<p><strong>注意：</strong>请勿对事件使用 “on” 前缀；请使用 “click” 代替 “onclick”。</p>\n<p>你能够通过使用“useCapture”参数来规定传播类型：默认值是 false，将使用冒泡传播，如果该值设置为 true，则事件使用捕获传播。</p>\n<h4 id=\"2-5-DOM-节点\"><a href=\"#2-5-DOM-节点\" class=\"headerlink\" title=\"2.5   DOM 节点\"></a>2.5   DOM 节点</h4><p>根据 W3C HTML DOM 标准，HTML 文档中的所有事物都是节点：</p>\n<ul>\n<li>整个文档是文档节点</li>\n<li>每个 HTML 元素是元素节点</li>\n<li>HTML 元素内的文本是文本节点</li>\n<li>每个 HTML 属性是属性节点</li>\n<li>所有注释是注释节点</li>\n</ul>\n<h3 id=\"2-6-节点关系\"><a href=\"#2-6-节点关系\" class=\"headerlink\" title=\"2.6  节点关系\"></a>2.6  节点关系</h3><p>节点树中的节点彼此之间有一定的等级关系。</p>\n<ul>\n<li>术语（父、子和同胞，parent、child 以及 sibling）用于描述这些关系。</li>\n</ul>\n<p>通过 JavaScript，您可以使用以下节点属性在节点之间导航：</p>\n<ul>\n<li>parentNode</li>\n<li>childNodes[<em>nodenumber</em>]</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>nextSibling</li>\n<li>previousSibling</li>\n</ul>\n<h3 id=\"2-6-节点属性\"><a href=\"#2-6-节点属性\" class=\"headerlink\" title=\"2.6  节点属性\"></a>2.6  节点属性</h3><h4 id=\"2-6-1-InnerHTML\"><a href=\"#2-6-1-InnerHTML\" class=\"headerlink\" title=\"2.6.1  InnerHTML\"></a>2.6.1  InnerHTML</h4><p>在本教程中，我们使用 innerHTML 取回 HTML 元素的内容。</p>\n<h4 id=\"2-6-2-nodeValue-属性\"><a href=\"#2-6-2-nodeValue-属性\" class=\"headerlink\" title=\"2.6.2  nodeValue 属性\"></a>2.6.2  nodeValue 属性</h4><p>nodeValue 属性规定节点的值。</p>\n<ul>\n<li>元素节点的 nodeValue 是 undefined</li>\n<li>文本节点的 nodeValue 是文本文本</li>\n<li>属性节点的 nodeValue 是属性值</li>\n</ul>\n<h3 id=\"2-7-创建新-HTML-元素（节点）\"><a href=\"#2-7-创建新-HTML-元素（节点）\" class=\"headerlink\" title=\"2.7  创建新 HTML 元素（节点）\"></a>2.7  创建新 HTML 元素（节点）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class=\"line\">var node &#x3D; document.createTextNode(&quot;这是新文本。&quot;);</span><br><span class=\"line\">para.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\">var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">element.appendChild(para);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-8-创建新-HTML-元素-insertBefore\"><a href=\"#2-8-创建新-HTML-元素-insertBefore\" class=\"headerlink\" title=\"2.8   创建新 HTML 元素 - insertBefore()\"></a>2.8   创建新 HTML 元素 - insertBefore()</h3><h3 id=\"2-9-删除已有-HTML-元素\"><a href=\"#2-9-删除已有-HTML-元素\" class=\"headerlink\" title=\"2.9   删除已有 HTML 元素\"></a>2.9   删除已有 HTML 元素</h3><p>如需删除某个 HTML 元素，您需要知晓该元素的父：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">parent.removeChild(child);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-10-替换-HTML-元素\"><a href=\"#2-10-替换-HTML-元素\" class=\"headerlink\" title=\"2.10   替换 HTML 元素\"></a>2.10   替换 HTML 元素</h3><p>如需替换元素的，请使用 replaceChild() 方法：</p>\n<h2 id=\"三：-BOM-操作\"><a href=\"#三：-BOM-操作\" class=\"headerlink\" title=\"三： BOM 操作\"></a>三： BOM 操作</h2><h3 id=\"3-1-浏览器对象模型（Browser-Object-Model-BOM-）\"><a href=\"#3-1-浏览器对象模型（Browser-Object-Model-BOM-）\" class=\"headerlink\" title=\"3.1     浏览器对象模型（Browser Object Model (BOM)）\"></a>3.1     浏览器对象模型（Browser Object Model (BOM)）</h3><p>不存在浏览器对象模型（BOM）的官方标准。</p>\n<p>现代的浏览器已经（几乎）实现了 JavaScript 交互相同的方法和属性，因此它经常作为 BOM 的方法和属性被提到。</p>\n<p>一些其他方法： </p>\n<ul>\n<li>window.open() - 打开新窗口</li>\n<li>window.close() - 关闭当前窗口</li>\n<li>window.moveTo() -移动当前窗口</li>\n<li>window.resizeTo() -重新调整当前窗口</li>\n</ul>\n<p>setTimeout(<em>function</em>, <em>milliseconds</em>)</p>\n<p>在等待指定的毫秒数后执行函数。</p>\n<p>setInterval(<em>function</em>, <em>milliseconds</em>)</p>\n<p>等同于 setTimeout()，但持续重复执行该函数。</p>\n","categories":["js"],"tags":["js"]},{"title":"js的基础语法","url":"/posts/583d6f5d/","content":"<h2 id=\"一：为何学习-JavaScript？\"><a href=\"#一：为何学习-JavaScript？\" class=\"headerlink\" title=\"一：为何学习 JavaScript？\"></a>一：为何学习 JavaScript？</h2><p>JavaScript 是 web 开发者必学的三种语言之一：</p>\n<a id=\"more\"></a>\n\n<ul>\n<li><em>HTML</em> 定义网页的内容</li>\n<li><em>CSS</em> 规定网页的布局</li>\n<li><em>JavaScript</em> 对网页行为进行编程</li>\n</ul>\n<h2 id=\"二：基础知识\"><a href=\"#二：基础知识\" class=\"headerlink\" title=\"二：基础知识\"></a>二：基础知识</h2><h3 id=\"2-1-显示数据\"><a href=\"#2-1-显示数据\" class=\"headerlink\" title=\"2.1 显示数据\"></a>2.1 显示数据</h3><p>JavaScript 能够以不同方式“显示”数据：</p>\n<ul>\n<li>使用 window.alert() 写入警告框</li>\n<li>使用 document.write() 写入 HTML 输出</li>\n<li>使用 innerHTML 写入 HTML 元素</li>\n<li>使用 console.log() 写入浏览器控制台</li>\n</ul>\n<h3 id=\"2-2-注释\"><a href=\"#2-2-注释\" class=\"headerlink\" title=\"2.2 注释\"></a>2.2 注释</h3><p>单行注释以 // 开头。</p>\n<p>多行注释以 /* 开头，以 */ 结尾。</p>\n<h3 id=\"2-3-变量\"><a href=\"#2-3-变量\" class=\"headerlink\" title=\"2.3 变量\"></a>2.3 变量</h3><h4 id=\"2-3-1-命名\"><a href=\"#2-3-1-命名\" class=\"headerlink\" title=\"2.3.1 命名\"></a>2.3.1 命名</h4><ul>\n<li>名称可包含字母、数字、下划线和美元符号</li>\n<li>名称必须以字母开头</li>\n<li>名称也可以 $ 和 _ 开头（但是在本教程中我们不会这么做）</li>\n<li>名称对大小写敏感（y 和 Y 是不同的变量）</li>\n<li>保留字（比如 JavaScript 的关键词）无法用作变量名称</li>\n</ul>\n<h4 id=\"2-3-2-声明变量\"><a href=\"#2-3-2-声明变量\" class=\"headerlink\" title=\"2.3.2 声明变量\"></a>2.3.2 声明变量</h4><p>使用 var 或者 let  来定义变量，无需在意变量类型。</p>\n<p>其中var的作用域为全局，而 let 的作用域只在代码块内。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var x &#x3D; &#39;3&#39; + 2 </span><br><span class=\"line\">&#x2F;&#x2F; 结果是 &#39;32&#39;</span><br><span class=\"line\">var y &#x3D; 3 + 2 + &#39;9&#39;</span><br><span class=\"line\">&#x2F;&#x2F;结果是 &#39;79&#39;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-运算符\"><a href=\"#2-4-运算符\" class=\"headerlink\" title=\"2.4   运算符\"></a>2.4   运算符</h3><h4 id=\"2-4-1-算数运算符\"><a href=\"#2-4-1-算数运算符\" class=\"headerlink\" title=\"2.4.1  算数运算符\"></a>2.4.1  算数运算符</h4><p>‘+ - * /  % ++ – ‘</p>\n<h4 id=\"2-4-2-赋值运算符\"><a href=\"#2-4-2-赋值运算符\" class=\"headerlink\" title=\"2.4.2  赋值运算符\"></a>2.4.2  赋值运算符</h4><p>‘  =  +=  -=  *=  /=  %=  ‘</p>\n<h4 id=\"2-4-3-字符串运算符\"><a href=\"#2-4-3-字符串运算符\" class=\"headerlink\" title=\"2.4.3 字符串运算符\"></a>2.4.3 字符串运算符</h4><p>+ 运算符也可用于对字符串进行相加（concatenate，级联）</p>\n<h4 id=\"2-4-4-比较运算符\"><a href=\"#2-4-4-比较运算符\" class=\"headerlink\" title=\"2.4.4  比较运算符\"></a>2.4.4  比较运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">==</td>\n<td align=\"left\">等于</td>\n</tr>\n<tr>\n<td align=\"left\">===</td>\n<td align=\"left\">等值等型</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">不相等</td>\n</tr>\n<tr>\n<td align=\"left\">!==</td>\n<td align=\"left\">不等值或不等型</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">大于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">小于</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;=</td>\n<td align=\"left\">大于或等于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;=</td>\n<td align=\"left\">小于或等于</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">三元运算符</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-4-5-逻辑运算符\"><a href=\"#2-4-5-逻辑运算符\" class=\"headerlink\" title=\"2.4.5 逻辑运算符\"></a>2.4.5 逻辑运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑与</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑或</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">逻辑非</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-4-6-类型运算符\"><a href=\"#2-4-6-类型运算符\" class=\"headerlink\" title=\"2.4.6  类型运算符\"></a>2.4.6  类型运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">typeof</td>\n<td align=\"left\">返回变量的类型。</td>\n</tr>\n<tr>\n<td align=\"left\">instanceof</td>\n<td align=\"left\">返回 true，如果对象是对象类型的实例。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-5-函数\"><a href=\"#2-5-函数\" class=\"headerlink\" title=\"2.5    函数\"></a>2.5    函数</h3><p>JavaScript 函数通过 function 关键词进行定义，其后是<em>函数名</em>和括号 ()。</p>\n<p>函数名可包含字母、数字、下划线和美元符号（规则与变量名相同）。</p>\n<p>圆括号可包括由逗号分隔的参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(参数 1, 参数 2, ...)</span><br></pre></td></tr></table></figure>\n\n<p>由函数执行的代码被放置在花括号中：<em>{}</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function name(参数 1, 参数 2, 参数 3) &#123;</span><br><span class=\"line\">    要执行的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>函数参数（Function parameters）</em>是在函数定义中所列的名称。</p>\n<p><em>函数参数（Function arguments）</em>是当调用函数时由函数接收的真实的<em>值</em>。</p>\n<h3 id=\"2-6-事件\"><a href=\"#2-6-事件\" class=\"headerlink\" title=\"2.6 事件\"></a>2.6 事件</h3><p>HTML 事件可以是浏览器或用户做的某些事情。</p>\n<p>下面是 HTML 事件的一些例子：</p>\n<ul>\n<li>HTML 网页完成加载</li>\n<li>HTML 输入字段被修改</li>\n<li>HTML 按钮被点击</li>\n</ul>\n<p>通常，当事件发生时，用户会希望做某件事。</p>\n<p>JavaScript 允许您在事件被侦测到时执行代码。</p>\n<p><em>通过 JavaScript 代码</em>，HTML 允许您向 HTML 元素添加事件处理程序。</p>\n<p><strong>常见的 HTML 事件</strong></p>\n<p>下面是一些常见的 HTML 事件：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">事件</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">onchange</td>\n<td align=\"left\">HTML 元素已被改变</td>\n</tr>\n<tr>\n<td align=\"left\">onclick</td>\n<td align=\"left\">用户点击了 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseover</td>\n<td align=\"left\">用户把鼠标移动到 HTML 元素上</td>\n</tr>\n<tr>\n<td align=\"left\">onmouseout</td>\n<td align=\"left\">用户把鼠标移开 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\">onkeydown</td>\n<td align=\"left\">用户按下键盘按键</td>\n</tr>\n<tr>\n<td align=\"left\">onload</td>\n<td align=\"left\">浏览器已经完成页面加载</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-7-字符串\"><a href=\"#2-7-字符串\" class=\"headerlink\" title=\"2.7  字符串\"></a>2.7  字符串</h3><p>通常，JavaScript 字符串是原始值，通过字面方式创建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var firstName &#x3D; &quot;Bill&quot;</span><br></pre></td></tr></table></figure>\n\n<p>但是字符串也可通过关键词 new 定义为对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var firstName &#x3D; new String(&quot;Bill&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-7-1-查找字符串中的字符串\"><a href=\"#2-7-1-查找字符串中的字符串\" class=\"headerlink\" title=\"2.7.1  查找字符串中的字符串\"></a>2.7.1  查找字符串中的字符串</h4><p>indexOf() 方法返回字符串中指定文本<em>首次</em>出现的索引（位置）：如果未找到文本， indexOf() 和 lastIndexOf() 均返回 -1。</p>\n<h4 id=\"2-7-2-lastIndexOf-方法返回指定文本在字符串中最后一次出现的索引：\"><a href=\"#2-7-2-lastIndexOf-方法返回指定文本在字符串中最后一次出现的索引：\" class=\"headerlink\" title=\"2.7.2  lastIndexOf() 方法返回指定文本在字符串中最后一次出现的索引：\"></a>2.7.2  lastIndexOf() 方法返回指定文本在字符串中<em>最后</em>一次出现的索引：</h4><h4 id=\"2-7-3-slice-方法\"><a href=\"#2-7-3-slice-方法\" class=\"headerlink\" title=\"2.7.3  slice() 方法\"></a>2.7.3  slice() 方法</h4><p>slice() 提取字符串的某个部分并在新字符串中返回被提取的部分。</p>\n<p>该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。</p>\n<p>这个例子裁剪字符串中位置 7 到位置 13 的片段：</p>\n<h4 id=\"2-7-4-替换字符串内容\"><a href=\"#2-7-4-替换字符串内容\" class=\"headerlink\" title=\"2.7.4  替换字符串内容\"></a>2.7.4  替换字符串内容</h4><p>replace() 方法用另一个值替换在字符串中指定的值：</p>\n<h4 id=\"2-7-5-转换大小写\"><a href=\"#2-7-5-转换大小写\" class=\"headerlink\" title=\"2.7.5 转换大小写\"></a>2.7.5 转换大小写</h4><p>通过 toUpperCase() 把字符串转换为大写：</p>\n<p>通过 toLowerCase() 把字符串转换为小写：</p>\n<h4 id=\"2-7-6-连接字符串\"><a href=\"#2-7-6-连接字符串\" class=\"headerlink\" title=\"2.7.6 连接字符串\"></a>2.7.6 连接字符串</h4><p>concat() 连接两个或多个字符串：</p>\n<h4 id=\"2-7-7-去两边空格\"><a href=\"#2-7-7-去两边空格\" class=\"headerlink\" title=\"2.7.7 去两边空格\"></a>2.7.7 去两边空格</h4><p>trim() 方法删除字符串两端的空白符：</p>\n<h4 id=\"2-7-8-提取字符\"><a href=\"#2-7-8-提取字符\" class=\"headerlink\" title=\"2.7.8 提取字符\"></a>2.7.8 提取字符</h4><p>charAt() 方法返回字符串中指定下标（位置）的字符串：</p>\n<p>charCodeAt() 方法返回字符串中指定索引的字符 unicode 编码：</p>\n<h4 id=\"2-7-9-把字符串转换为数组\"><a href=\"#2-7-9-把字符串转换为数组\" class=\"headerlink\" title=\"2.7.9  把字符串转换为数组\"></a>2.7.9  把字符串转换为数组</h4><p>可以通过 split() 将字符串转换为数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var txt &#x3D; &quot;a,b,c,d,e&quot;;   &#x2F;&#x2F; 字符串</span><br><span class=\"line\">txt.split(&quot;,&quot;);          &#x2F;&#x2F; 用逗号分隔</span><br><span class=\"line\">txt.split(&quot; &quot;);          &#x2F;&#x2F; 用空格分隔</span><br><span class=\"line\">txt.split(&quot;|&quot;);          &#x2F;&#x2F; 用竖线分隔</span><br><span class=\"line\">txt.split(&quot;&quot;);           &#x2F;&#x2F; 分隔为字符</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-8-数字方法\"><a href=\"#2-8-数字方法\" class=\"headerlink\" title=\"2.8 数字方法\"></a>2.8 数字方法</h3><h4 id=\"2-8-1-转换字符串为数值\"><a href=\"#2-8-1-转换字符串为数值\" class=\"headerlink\" title=\"2.8.1 转换字符串为数值\"></a>2.8.1 转换字符串为数值</h4><p>toString() 以字符串返回数值。</p>\n<h4 id=\"2-8-2-转变量为数值\"><a href=\"#2-8-2-转变量为数值\" class=\"headerlink\" title=\"2.8.2 转变量为数值\"></a>2.8.2 转变量为数值</h4><p>Number() 可用于把 JavaScript 变量转换为数值：</p>\n<p>parseInt() 解析一段字符串并返回数值。允许空格。只返回首个数字：</p>\n<p>parseFloat() 解析一段字符串并返回数值。允许空格。只返回首个数字：</p>\n<h3 id=\"2-9数组方法\"><a href=\"#2-9数组方法\" class=\"headerlink\" title=\"2.9数组方法\"></a>2.9数组方法</h3><h4 id=\"2-8-1-数组遍历\"><a href=\"#2-8-1-数组遍历\" class=\"headerlink\" title=\"2.8.1  数组遍历\"></a>2.8.1  数组遍历</h4><p>遍历数组的最安全方法是使用 “for” 循环：</p>\n<p>您也可以使用 Array.foreach() 函数：</p>\n<h4 id=\"2-8-2-添加数组元素\"><a href=\"#2-8-2-添加数组元素\" class=\"headerlink\" title=\"2.8.2 添加数组元素\"></a>2.8.2 添加数组元素</h4><p>向数组添加新元素的最佳方法是使用 push() 方法：</p>\n<h4 id=\"2-8-3-创建数组\"><a href=\"#2-8-3-创建数组\" class=\"headerlink\" title=\"2.8.3 创建数组\"></a>2.8.3 创建数组</h4><p>没有必要使用 JavaScript 的内建数组构造器 new Array()。</p>\n<p><em>请使用 [] 取而代之！</em></p>\n<h4 id=\"2-8-4-判别数组对象\"><a href=\"#2-8-4-判别数组对象\" class=\"headerlink\" title=\"2.8.4  判别数组对象\"></a>2.8.4  判别数组对象</h4><p>为了解决这个问题，ECMAScript 5 定义了新方法 Array.<code>isArray()</code>：</p>\n<p>假如对象由给定的构造器创建，则 <em>instanceiof</em> 运算符返回 true：</p>\n<h4 id=\"2-8-5-把数组转换为字符串\"><a href=\"#2-8-5-把数组转换为字符串\" class=\"headerlink\" title=\"2.8.5   把数组转换为字符串\"></a>2.8.5   把数组转换为字符串</h4><p>JavaScript 方法 toString() 把数组转换为数组值（逗号分隔）的字符串。</p>\n<p>join() 方法也可将所有数组元素结合为一个字符串。它的行为类似 toString()，但是您还可以规定分隔符：</p>\n<h4 id=\"2-8-6-删除添加元素\"><a href=\"#2-8-6-删除添加元素\" class=\"headerlink\" title=\"2.8.6 删除添加元素\"></a>2.8.6 删除添加元素</h4><p>pop() 方法从数组中删除最后一个元素：</p>\n<p>push() 方法（在数组结尾处）向数组添加一个新的元素：push() 方法返回新数组的长度：</p>\n<p>shift() 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引。shift() 方法返回被“位移出”的字符串：</p>\n<p>unshift() 方法（在开头）向数组添加新元素，并“反向位移”旧元素：unshift() 方法返回新数组的长度。</p>\n<h4 id=\"2-8-7-更改元素\"><a href=\"#2-8-7-更改元素\" class=\"headerlink\" title=\"2.8.7 更改元素\"></a>2.8.7 更改元素</h4><p>通过使用它们的<em>索引号</em>来访问数组元素：length 属性提供了向数组追加新元素的简易方法：</p>\n<h4 id=\"2-8-8-删除元素\"><a href=\"#2-8-8-删除元素\" class=\"headerlink\" title=\"2.8.8  删除元素\"></a>2.8.8  删除元素</h4><p>既然 JavaScript 数组属于对象，其中的元素就可以使用 JavaScript delete 运算符来<em>删除</em>：改为 undefined</p>\n<h4 id=\"2-8-9-拼接数组\"><a href=\"#2-8-9-拼接数组\" class=\"headerlink\" title=\"2.8.9 拼接数组\"></a>2.8.9 拼接数组</h4><p>splice() 方法可用于向数组添加新项：第一个参数（2）定义了应添加新元素的位置（拼接）。</p>\n<p>第二个参数（0）定义应删除多少元素。</p>\n<p>其余参数（“Lemon”，“Kiwi”）定义要添加的新元素。</p>\n<p>splice() 方法返回一个包含已删除项的数组：</p>\n<h4 id=\"2-8-10-合并数组\"><a href=\"#2-8-10-合并数组\" class=\"headerlink\" title=\"2.8.10  合并数组\"></a>2.8.10  合并数组</h4><p>concat() 方法通过合并（连接）现有数组来创建一个新数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [&quot;Cecilie&quot;, &quot;Lone&quot;];</span><br><span class=\"line\">var arr2 &#x3D; [&quot;Emil&quot;, &quot;Tobias&quot;, &quot;Linus&quot;];</span><br><span class=\"line\">var arr3 &#x3D; [&quot;Robin&quot;, &quot;Morgan&quot;];</span><br><span class=\"line\">var myChildren &#x3D; arr1.concat(arr2, arr3);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-8-11-裁剪数组\"><a href=\"#2-8-11-裁剪数组\" class=\"headerlink\" title=\"2.8.11 裁剪数组\"></a>2.8.11 裁剪数组</h4><p>slice() 可接受两个参数，比如 (1, 3)。</p>\n<p>该方法会从开始参数选取元素，直到结束参数（不包括）为止。</p>\n<h4 id=\"2-8-12-自动-toString\"><a href=\"#2-8-12-自动-toString\" class=\"headerlink\" title=\"2.8.12  自动 toString()\"></a>2.8.12  自动 toString()</h4><p>如果需要原始值，则 JavaScript 会自动把数组转换为字符串。</p>\n<h3 id=\"2-9-数组排序\"><a href=\"#2-9-数组排序\" class=\"headerlink\" title=\"2.9 数组排序\"></a>2.9 数组排序</h3><h4 id=\"2-9-1-sort\"><a href=\"#2-9-1-sort\" class=\"headerlink\" title=\"2.9.1  sort()\"></a>2.9.1  sort()</h4><p>sort() 方法以字母顺序对数组进行排序：</p>\n<h4 id=\"2-9-2-反转数组\"><a href=\"#2-9-2-反转数组\" class=\"headerlink\" title=\"2.9.2  反转数组\"></a>2.9.2  反转数组</h4><p>reverse() 方法反转数组中的元素。</p>\n<h4 id=\"2-9-3-比值函数\"><a href=\"#2-9-3-比值函数\" class=\"headerlink\" title=\"2.9.3  比值函数\"></a>2.9.3  比值函数</h4><p>比较函数的目的是定义另一种排序顺序。</p>\n<p>比较函数应该返回一个负，零或正值，这取决于参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function(a, b)&#123;return a-b&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 sort() 函数比较两个值时，会将值发送到比较函数，并根据所返回的值（负、零或正值）对这些值进行排序。</p>\n<h4 id=\"2-9-4-查找最高（或最低）的数组值\"><a href=\"#2-9-4-查找最高（或最低）的数组值\" class=\"headerlink\" title=\"2.9.4 查找最高（或最低）的数组值\"></a>2.9.4 查找最高（或最低）的数组值</h4><p>JavaScript 不提供查找数组中最大或最小数组值的内建函数。</p>\n<p>不过，在对数组进行排序之后，您能够使用索引来获得最高或最低值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var points &#x3D; [40, 100, 1, 5, 25, 10];</span><br><span class=\"line\">points.sort(function(a, b)&#123;return a - b&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 现在 points[0] 包含最低值</span><br><span class=\"line\">&#x2F;&#x2F; 而 points[points.length-1] 包含最高值</span><br></pre></td></tr></table></figure>\n\n<p>您可以使用 Math.max.apply 来查找数组中的最高值：</p>\n<p>您可以使用 Math.min.apply 来查找数组中的最低值：</p>\n<h3 id=\"2-10-数组迭代\"><a href=\"#2-10-数组迭代\" class=\"headerlink\" title=\"2.10 数组迭代\"></a>2.10 数组迭代</h3><h4 id=\"2-10-1-Array-forEach\"><a href=\"#2-10-1-Array-forEach\" class=\"headerlink\" title=\"2.10.1 Array.forEach()\"></a>2.10.1 Array.forEach()</h4><p>forEach() 方法为每个数组元素调用一次函数（回调函数）。</p>\n<p><strong>注释：</strong>该函数接受 3 个参数：</p>\n<ul>\n<li>项目值</li>\n<li>项目索引</li>\n<li>数组本身</li>\n</ul>\n<h4 id=\"2-10-2-Array-map\"><a href=\"#2-10-2-Array-map\" class=\"headerlink\" title=\"2.10.2  Array.map()\"></a>2.10.2  Array.map()</h4><p>map() 方法通过对每个数组元素执行函数来创建新数组。</p>\n<p>请注意，该函数有 3 个参数：</p>\n<ul>\n<li>项目值</li>\n<li>项目索引</li>\n<li>数组本身</li>\n</ul>\n<h4 id=\"2-10-3-Array-filter\"><a href=\"#2-10-3-Array-filter\" class=\"headerlink\" title=\"2.10.3  Array.filter()\"></a>2.10.3  Array.filter()</h4><p>filter() 方法创建一个包含通过测试的数组元素的新数组。</p>\n<h4 id=\"2-10-4-Array-reduce\"><a href=\"#2-10-4-Array-reduce\" class=\"headerlink\" title=\"2.10.4  Array.reduce()\"></a>2.10.4  Array.reduce()</h4><p>reduce() 方法在每个数组元素上运行函数，以生成（减少它）单个值。</p>\n<h4 id=\"2-10-5-Array-reduceRight\"><a href=\"#2-10-5-Array-reduceRight\" class=\"headerlink\" title=\"2.10.5   Array.reduceRight()\"></a>2.10.5   Array.reduceRight()</h4><p>reduceRight() 方法在每个数组元素上运行函数，以生成（减少它）单个值。</p>\n<h4 id=\"2-10-6-Array-indexOf\"><a href=\"#2-10-6-Array-indexOf\" class=\"headerlink\" title=\"2.10.6   Array.indexOf()\"></a>2.10.6   Array.indexOf()</h4><p>indexOf() 方法在数组中搜索元素值并返回其位置。</p>\n<p><strong>注释：</strong>第一个项目的位置是 0，第二个项目的位置是 1，以此类推。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">array.indexOf(item, start)</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th><em>item</em></th>\n<th>必需。要检索的项目。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><em>start</em></td>\n<td>可选。从哪里开始搜索。负值将从结尾开始的给定位置开始，并搜索到结尾。</td>\n</tr>\n</tbody></table>\n<p>如果未找到项目，Array.indexOf() 返回 -1。</p>\n<p>如果项目多次出现，则返回第一次出现的位置。</p>\n<h4 id=\"2-10-7-Array-lastIndexOf\"><a href=\"#2-10-7-Array-lastIndexOf\" class=\"headerlink\" title=\"2.10.7   Array.lastIndexOf()\"></a>2.10.7   Array.lastIndexOf()</h4><p> Array.lastIndexOf() 与 Array.indexOf() 类似，但是从数组结尾开始搜索。</p>\n<h4 id=\"2-11-日期\"><a href=\"#2-11-日期\" class=\"headerlink\" title=\"2.11 日期\"></a>2.11 日期</h4><h4 id=\"2-11-1-创建日期\"><a href=\"#2-11-1-创建日期\" class=\"headerlink\" title=\"2.11.1  创建日期\"></a>2.11.1  创建日期</h4><p>Date 对象由新的 Date() 构造函数创建。</p>\n<p>有 4 种方法创建新的日期对象：</p>\n<ul>\n<li>new Date()</li>\n<li>new Date(year, month, day, hours, minutes, seconds, milliseconds)</li>\n<li>new Date(milliseconds)</li>\n<li>new Date(date string)</li>\n</ul>\n<h4 id=\"2-11-2-输入格式\"><a href=\"#2-11-2-输入格式\" class=\"headerlink\" title=\"2.11.2 输入格式\"></a>2.11.2 输入格式</h4><p>有四种 JavaScript 日期输入格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ISO 日期</td>\n<td align=\"left\">“2018-02-19” （国际标准）</td>\n</tr>\n<tr>\n<td align=\"left\">短日期</td>\n<td align=\"left\">“02/19/2018” 或者 “2018/02/19”</td>\n</tr>\n<tr>\n<td align=\"left\">长日期</td>\n<td align=\"left\">“Feb 19 2018” 或者 “19 Feb 2019”</td>\n</tr>\n<tr>\n<td align=\"left\">完整日期</td>\n<td align=\"left\">“Monday February 25 2015”</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-11-3-日期获取方法\"><a href=\"#2-11-3-日期获取方法\" class=\"headerlink\" title=\"2.11.3   日期获取方法\"></a>2.11.3   日期获取方法</h4><p>获取方法用于获取日期的某个部分（来自日期对象的信息）。下面是最常用的方法（以字母顺序排序）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">getDate()</td>\n<td align=\"left\">以数值返回天（1-31）</td>\n</tr>\n<tr>\n<td align=\"left\">getDay()</td>\n<td align=\"left\">以数值获取周名（0-6）</td>\n</tr>\n<tr>\n<td align=\"left\">getFullYear()</td>\n<td align=\"left\">获取四位的年（yyyy）</td>\n</tr>\n<tr>\n<td align=\"left\">getHours()</td>\n<td align=\"left\">获取小时（0-23）</td>\n</tr>\n<tr>\n<td align=\"left\">getMilliseconds()</td>\n<td align=\"left\">获取毫秒（0-999）</td>\n</tr>\n<tr>\n<td align=\"left\">getMinutes()</td>\n<td align=\"left\">获取分（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">getMonth()</td>\n<td align=\"left\">获取月（0-11）</td>\n</tr>\n<tr>\n<td align=\"left\">getSeconds()</td>\n<td align=\"left\">获取秒（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">getTime()</td>\n<td align=\"left\">获取时间（从 1970 年 1 月 1 日至今）</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-11-4-日期设置方法\"><a href=\"#2-11-4-日期设置方法\" class=\"headerlink\" title=\"2.11.4  日期设置方法\"></a>2.11.4  日期设置方法</h4><p>设置方法用于设置日期的某个部分。下面是最常用的方法（按照字母顺序排序）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">setDate()</td>\n<td align=\"left\">以数值（1-31）设置日</td>\n</tr>\n<tr>\n<td align=\"left\">setFullYear()</td>\n<td align=\"left\">设置年（可选月和日）</td>\n</tr>\n<tr>\n<td align=\"left\">setHours()</td>\n<td align=\"left\">设置小时（0-23）</td>\n</tr>\n<tr>\n<td align=\"left\">setMilliseconds()</td>\n<td align=\"left\">设置毫秒（0-999）</td>\n</tr>\n<tr>\n<td align=\"left\">setMinutes()</td>\n<td align=\"left\">设置分（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">setMonth()</td>\n<td align=\"left\">设置月（0-11）</td>\n</tr>\n<tr>\n<td align=\"left\">setSeconds()</td>\n<td align=\"left\">设置秒（0-59）</td>\n</tr>\n<tr>\n<td align=\"left\">setTime()</td>\n<td align=\"left\">设置时间（从 1970 年 1 月 1 日至今的毫秒数）</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-12-Math方法\"><a href=\"#2-12-Math方法\" class=\"headerlink\" title=\"2.12 Math方法\"></a>2.12 Math方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">abs(x)</td>\n<td align=\"left\">返回 x 的绝对值</td>\n</tr>\n<tr>\n<td align=\"left\">acos(x)</td>\n<td align=\"left\">返回 x 的反余弦值，以弧度计</td>\n</tr>\n<tr>\n<td align=\"left\">asin(x)</td>\n<td align=\"left\">返回 x 的反正弦值，以弧度计</td>\n</tr>\n<tr>\n<td align=\"left\">atan(x)</td>\n<td align=\"left\">以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。</td>\n</tr>\n<tr>\n<td align=\"left\">atan2(y,x)</td>\n<td align=\"left\">返回从 x 轴到点 (x,y) 的角度</td>\n</tr>\n<tr>\n<td align=\"left\">ceil(x)</td>\n<td align=\"left\">对 x 进行上舍入</td>\n</tr>\n<tr>\n<td align=\"left\">cos(x)</td>\n<td align=\"left\">返回 x 的余弦</td>\n</tr>\n<tr>\n<td align=\"left\">exp(x)</td>\n<td align=\"left\">返回 Ex 的值</td>\n</tr>\n<tr>\n<td align=\"left\">floor(x)</td>\n<td align=\"left\">对 x 进行下舍入</td>\n</tr>\n<tr>\n<td align=\"left\">log(x)</td>\n<td align=\"left\">返回 x 的自然对数（底为e）</td>\n</tr>\n<tr>\n<td align=\"left\">max(x,y,z,…,n)</td>\n<td align=\"left\">返回最高值</td>\n</tr>\n<tr>\n<td align=\"left\">min(x,y,z,…,n)</td>\n<td align=\"left\">返回最低值</td>\n</tr>\n<tr>\n<td align=\"left\">pow(x,y)</td>\n<td align=\"left\">返回 x 的 y 次幂</td>\n</tr>\n<tr>\n<td align=\"left\">random()</td>\n<td align=\"left\">返回 0 ~ 1 之间的随机数</td>\n</tr>\n<tr>\n<td align=\"left\">round(x)</td>\n<td align=\"left\">把 x 四舍五入为最接近的整数</td>\n</tr>\n<tr>\n<td align=\"left\">sin(x)</td>\n<td align=\"left\">返回 x（x 以角度计）的正弦</td>\n</tr>\n<tr>\n<td align=\"left\">sqrt(x)</td>\n<td align=\"left\">返回 x 的平方根</td>\n</tr>\n<tr>\n<td align=\"left\">tan(x)</td>\n<td align=\"left\">返回角的正切</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-13-循环\"><a href=\"#2-13-循环\" class=\"headerlink\" title=\"2.13  循环\"></a>2.13  循环</h3><p>JavaScript 支持不同类型的循环：</p>\n<ul>\n<li>for - 多次遍历代码块</li>\n<li>for/in - 遍历对象属性</li>\n<li>while - 当指定条件为 true 时循环一段代码块</li>\n<li>do/while - 当指定条件为 true 时循环一段代码块</li>\n</ul>\n<h3 id=\"2-14-类型转换\"><a href=\"#2-14-类型转换\" class=\"headerlink\" title=\"2.14  类型转换\"></a>2.14  类型转换</h3><p>JavaScript 中有五种可包含值的数据类型：</p>\n<ul>\n<li>字符串（string）</li>\n<li>数字（number）</li>\n<li>布尔（boolean）</li>\n<li>对象（object）</li>\n<li>函数（function）</li>\n</ul>\n<p>有三种对象类型：</p>\n<ul>\n<li>对象（Object）</li>\n<li>日期（Date）</li>\n<li>数组（Array）</li>\n</ul>\n<p>同时有两种不能包含值的数据类型：</p>\n<ul>\n<li>null</li>\n<li>undefined</li>\n</ul>\n<p>如果 JavaScript 尝试操作一种“错误”的数据类型，它会试图将该值转换为“正确”的类型。</p>\n<p>结果并不总是你所期望的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">5 + null    &#x2F;&#x2F; 返回 5         因为 null 被转换为 0</span><br><span class=\"line\">&quot;5&quot; + null  &#x2F;&#x2F; 返回 &quot;5null&quot;   因为 null 被转换为  &quot;null&quot;</span><br><span class=\"line\">&quot;5&quot; + 2     &#x2F;&#x2F; 返回 52        因为 2 被转换为 &quot;2&quot;</span><br><span class=\"line\">&quot;5&quot; - 2     &#x2F;&#x2F; 返回 3         因为 &quot;5&quot; 被转换为 5</span><br><span class=\"line\">&quot;5&quot; * &quot;2&quot;   &#x2F;&#x2F; 返回 10        因为 &quot;5&quot; 和 &quot;2&quot; 被转换为 5 和 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-15-正则表达式\"><a href=\"#2-15-正则表达式\" class=\"headerlink\" title=\"2.15 正则表达式\"></a>2.15 正则表达式</h3><p><strong>语法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;pattern&#x2F;modifiers;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用字符串方法</strong></p>\n<p>在 JavaScript 中，正则表达式常用于两个<em>字符串方法</em>：search() 和 replace()。</p>\n<p>search() 方法使用表达式来搜索匹配，然后返回匹配的位置。</p>\n<p>replace() 方法返回模式被替换处修改后的字符串。在 JavaScript 中，正则表达式常用于两个<em>字符串方法</em>：search() 和 replace()。</p>\n<p>search() 方法使用表达式来搜索匹配，然后返回匹配的位置。</p>\n<p>replace() 方法返回模式被替换处修改后的字符串。</p>\n<h3 id=\"2-16-错误处理\"><a href=\"#2-16-错误处理\" class=\"headerlink\" title=\"2.16 错误处理\"></a>2.16 错误处理</h3><p>try 语句使您能够测试代码块中的错误。</p>\n<p>catch 语句允许您处理错误。</p>\n<p>throw 语句允许您创建自定义错误。</p>\n<p>finally 使您能够执行代码，在 try 和 catch 之后，无论结果如何。</p>\n","categories":["js"],"tags":["js"]},{"title":"yarn 的安装和换源","url":"/posts/1d9a2b3e/","content":"<h1 id=\"yarn-的安装和换源\"><a href=\"#yarn-的安装和换源\" class=\"headerlink\" title=\"yarn 的安装和换源\"></a>yarn 的安装和换源</h1><a id=\"more\"></a>\n\n<h2 id=\"一：介绍\"><a href=\"#一：介绍\" class=\"headerlink\" title=\"一：介绍\"></a>一：介绍</h2><h3 id=\"1-1-Yarn-的简介：\"><a href=\"#1-1-Yarn-的简介：\" class=\"headerlink\" title=\"1.1   Yarn 的简介：\"></a><strong>1.1   Yarn 的简介：</strong></h3><p>​     Yarn是facebook发布的一款取代npm的包管理工具；</p>\n<h3 id=\"1-2-Yarn的特点：\"><a href=\"#1-2-Yarn的特点：\" class=\"headerlink\" title=\"1.2   Yarn的特点：\"></a><strong>1.2   Yarn的特点：</strong></h3><p>​    1）速度超快—-Yarn缓存了每个下载过的包，所以再次使用时无需重复下载。同时利用并行下载以最大化资源利用率，因此安装快。</p>\n<p>​     2）超级安全—-在执行代码之前，Yarn会通过算法检验每个安装包的完整性。</p>\n<p>​     3）超级可靠—–使用详细、简洁的锁文件格式和明确的安装算法，Yarn能够保证在不同系统上无差异工作。</p>\n<h2 id=\"二：安装\"><a href=\"#二：安装\" class=\"headerlink\" title=\"二：安装\"></a>二：安装</h2><p>进入官网：<a href=\"https://classic.yarnpkg.com/zh-Hans/docs/install#windows-stable\" target=\"_blank\" rel=\"noopener\">https://classic.yarnpkg.com/zh-Hans/docs/install#windows-stable</a></p>\n<p>下载安装程序</p>\n<p>之后点击运行，之后一直点击Next就可以了</p>\n<p><img src=\"http://photo.jomeswang.top/20200605215052.png\" alt=\"\"></p>\n<p>在cmd中输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn --version</span><br></pre></td></tr></table></figure>\n\n<p>看到如下界面即是成功了。</p>\n<p><img src=\"http://photo.jomeswang.top/20200605215234.png\" alt=\"\"></p>\n<h2 id=\"三：换源\"><a href=\"#三：换源\" class=\"headerlink\" title=\"三：换源\"></a>三：换源</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn config get registry  &#x2F;&#x2F; 查看yarn当前镜像源</span><br><span class=\"line\"></span><br><span class=\"line\">yarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;  &#x2F;&#x2F; 设置yarn镜像源为淘宝镜像</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200605220028.png\" alt=\"\"></p>\n","categories":["环境配置"],"tags":["环境配置","教程"]},{"title":"python 和pycharm的安装和使用","url":"/posts/e9ec5064/","content":"<blockquote>\n<p>人生苦短，我用python</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：安装Python配置pip\"><a href=\"#一：安装Python配置pip\" class=\"headerlink\" title=\"一：安装Python配置pip\"></a>一：安装Python配置pip</h2><h3 id=\"1-1-安装python\"><a href=\"#1-1-安装python\" class=\"headerlink\" title=\"1.1 安装python\"></a>1.1 安装python</h3><p>进入官网：<a href=\"https://www.python.org/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200606095229.png\" alt=\"\"></p>\n<p>安装：</p>\n<p><img src=\"http://photo.jomeswang.top/20200606095355.png\" alt=\"\"></p>\n<p>之后等待安装完成即可</p>\n<p>之后在cmd中敲python看是否安装成功</p>\n<p><img src=\"http://photo.jomeswang.top/20200606095627.png\" alt=\"\"></p>\n<h3 id=\"1-2-配置pip源\"><a href=\"#1-2-配置pip源\" class=\"headerlink\" title=\"1.2 配置pip源\"></a>1.2 配置pip源</h3><p>源地址：<a href=\"https://zhuanlan.zhihu.com/p/33345935\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/33345935</a></p>\n<p>由于国内通过pip下载python包的速度真的很慢，特别是下载包文件比较大的情况下经常会导致下载失败，使用pqi可以把默认的PyPi源迅速切换化为国内源tuna, douban, aliyun, ustc从而加快python包的安装速度-项目地址欢迎star和fork，下图为提速效果展示。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606100220.png\" alt=\"\"></p>\n<h4 id=\"1-安装（cmd中敲）\"><a href=\"#1-安装（cmd中敲）\" class=\"headerlink\" title=\"1.安装（cmd中敲）\"></a>1.安装（cmd中敲）</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pqi</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-命令行输入-pqi-回车\"><a href=\"#2-命令行输入-pqi-回车\" class=\"headerlink\" title=\"2. 命令行输入 pqi 回车\"></a>2. 命令行输入 pqi 回车</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; pqi</span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  pqi ls</span><br><span class=\"line\">  pqi use &lt;name&gt;</span><br><span class=\"line\">  pqi show</span><br><span class=\"line\">  pqi add &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\">  pqi remove &lt;name&gt;</span><br><span class=\"line\">  pqi (-h | --help)</span><br><span class=\"line\">  pqi (-v | --version)</span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -h --help        Show this screen.</span><br><span class=\"line\">  -v --version     Show version.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列举所有支持的pip源</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pqi ls</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>改变pip源(当前pip源改为清华的pip源)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip use tuna</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"二：安装Pycharm\"><a href=\"#二：安装Pycharm\" class=\"headerlink\" title=\"二：安装Pycharm\"></a>二：安装Pycharm</h2><h3 id=\"2-1-下载安装toolbox\"><a href=\"#2-1-下载安装toolbox\" class=\"headerlink\" title=\"2.1   下载安装toolbox\"></a>2.1   下载安装toolbox</h3><p>进入官网下载toolbox：<a href=\"https://www.jetbrains.com/toolbox-app/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/toolbox-app/</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200606094845.png\" alt=\"\"></p>\n<p>这是jb家中一个安装管理软件。</p>\n<p>之后点击运行安装即可。</p>\n<h3 id=\"2-2-安装pycharm\"><a href=\"#2-2-安装pycharm\" class=\"headerlink\" title=\"2.2   安装pycharm\"></a>2.2   安装pycharm</h3><p>运行刚刚安装的然后</p>\n<p><img src=\"http://photo.jomeswang.top/20200606101013.png\" alt=\"\"></p>\n<h3 id=\"2-3-安装的pycharm-是付费版的，需要使用学生邮箱激活使用\"><a href=\"#2-3-安装的pycharm-是付费版的，需要使用学生邮箱激活使用\" class=\"headerlink\" title=\"2.3 安装的pycharm 是付费版的，需要使用学生邮箱激活使用\"></a>2.3 安装的pycharm 是付费版的，需要使用学生邮箱激活使用</h3><p>打开官网申请：<a href=\"https://www.jetbrains.com/zh-cn/community/education/#students\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/zh-cn/community/education/#students</a></p>\n<ol>\n<li><p>接下来输入你的个人信息和学校邮箱（用来接收验证信息）。确认无误后，你的校内邮箱将会收到一封邮件，然后查看这个邮件，根据上面的提示创建一个JetBrains账号（注意这是你的JetBrains账号，不一定是你的邮箱密码）。</p>\n</li>\n<li><p>接下来打开一款JetBrains Product，激活方式选择输入你的学生账号和密码，确认就可以激活了，应该是可以免费用一年。</p>\n</li>\n</ol>\n<h3 id=\"2-4-配置pycharm\"><a href=\"#2-4-配置pycharm\" class=\"headerlink\" title=\"2.4  配置pycharm\"></a>2.4  配置pycharm</h3><p>打开安装好的pycharm </p>\n<p><img src=\"http://photo.jomeswang.top/20200606101734.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200606101827.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200606101944.png\" alt=\"\"></p>\n<p>激活完成！！！</p>\n<ol>\n<li>配置环境</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200606102224.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200606102251.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200606103729.png\" alt=\"\"></p>\n<p>在cmd中输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">where python</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200606105339.png\" alt=\"\"></p>\n<p>把这一行路径复制到刚刚那里缺少路径的地方。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606105819.png\" alt=\"\"></p>\n<p>这样就可以了！！</p>\n","categories":["环境配置"],"tags":["环境配置","教程"]},{"title":"hexo 迁移电脑","url":"/posts/921d30fb/","content":"<p>hexo 迁移电脑</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一：安装gitbash\"><a href=\"#一：安装gitbash\" class=\"headerlink\" title=\"一：安装gitbash\"></a>一：安装gitbash</h2><p>打开官网，下载，然后几乎全部默认安装即可</p>\n<p>进入官网：<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">https://gitforwindows.org/</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200606134139.png\" alt=\"\"></p>\n<h2 id=\"二：设置密钥连接GitHub\"><a href=\"#二：设置密钥连接GitHub\" class=\"headerlink\" title=\"二：设置密钥连接GitHub\"></a>二：设置密钥连接GitHub</h2><ul>\n<li>设置git全局邮箱和用户名</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourgithubname&quot;</span><br><span class=\"line\">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置ssh key</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class=\"line\">#生成后填到github和coding上（有coding平台的话）</span><br></pre></td></tr></table></figure>\n\n<p>打开其中的文件，将其中的内容复制下来，进入web的GitHub</p>\n<p><img src=\"http://photo.jomeswang.top/20200606142650.png\" alt=\"\"></p>\n<p>进入GitHub，选取settings-&gt;SSH and GPG keys-&gt;NewSSH key</p>\n<p>title随意，然后将刚才复制的密钥粘贴进去。</p>\n<p>此时进入git bash 中，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#验证是否成功</span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200606142754.png\" alt=\"\"></p>\n<p>然后打开自己的GitHub仓库使用ssh方式克隆下仓库，同时克隆下的仓库默认是master分支，所以需要先更改默认分支为dev，然后在clone下来。</p>\n<p>之后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd  xxx.github.io</span><br><span class=\"line\">npm install &#x2F;&#x2F; 安装好依赖包</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\">然后使用</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class=\"line\">看看能不能发布上去</span><br></pre></td></tr></table></figure>\n\n","categories":["环境配置"],"tags":["环境配置","教程"]},{"title":"C语言环境配置和vscode","url":"/posts/5c417394/","content":"<blockquote>\n<p><strong>C语言环境配置和vsc</strong></p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：安装MinGW-w64编译器套件\"><a href=\"#一：安装MinGW-w64编译器套件\" class=\"headerlink\" title=\"一：安装MinGW-w64编译器套件\"></a>一：安装MinGW-w64编译器套件</h2><h3 id=\"1-1-下载安装\"><a href=\"#1-1-下载安装\" class=\"headerlink\" title=\"1.1 下载安装\"></a>1.1 下载安装</h3><p>本文提到的MinGW-w64是一个著名项目为Windows 64位平台提供的一套编译器，它也受到了微软官方文档的推荐，相关文件托管在SourceForge的网站上，下载地址为：<a href=\"https://sourceforge.net/projects/mingw-w64/files/\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/mingw-w64/files/</a>    </p>\n<p><img src=\"http://photo.jomeswang.top/20200606004628.png\" alt=\"\"></p>\n<p>点击下载即可，之后解压,将里面的  <code>mingw64</code>  放至C盘根目录像这个样子</p>\n<p><img src=\"http://photo.jomeswang.top/20200606004749.png\" alt=\"\"></p>\n<h3 id=\"1-2-配置环境变量\"><a href=\"#1-2-配置环境变量\" class=\"headerlink\" title=\"1.2 配置环境变量\"></a>1.2 配置环境变量</h3><p>进入页面</p>\n<p><img src=\"http://photo.jomeswang.top/20200606004937.png\" alt=\"\"></p>\n<p>选中Path进行编辑<img src=\"http://photo.jomeswang.top/20200606005040.png\" alt=\"\"></p>\n<p>将刚刚的路径填进去如果你也是放在C盘的话，像这样子做</p>\n<p><img src=\"http://photo.jomeswang.top/20200606005147.png\" alt=\"\"></p>\n<p>最后为了验证之前操作是否正确，我们需要实际访问一下那些编译器。还是在搜索框中，输入“cmd”，启动“命令提示符”，在命令窗口中输入以下命令并回车</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n\n<p>如果结果如图所示，你的编译器就安装成功了。如果失败，请回头检查你添加的路径是否生效且与实际相符；或者请卸载你参考其他教程安装的老式MinGW编译器并清除其添加在Path中的路径。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606005245.png\" alt=\"\"></p>\n<h2 id=\"二：安装VS-Code文本编辑器\"><a href=\"#二：安装VS-Code文本编辑器\" class=\"headerlink\" title=\"二：安装VS Code文本编辑器\"></a>二：安装VS Code文本编辑器</h2><blockquote>\n<p>众多专用的编辑器被开发出来，以提供代码高亮（根据特定语言的语法给代码染色，便于阅读）、语法错误检查（在编译前提示错字漏字、不合规的语句等错误）、断点调试、多文件的管理等辅助功能。</p>\n</blockquote>\n<p>在这里进入官网，下载即可：<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/</a></p>\n<p>根据你的平台选择适合的版本，下载下来安装即可。安装完打开大概是这样的，</p>\n<p><img src=\"http://photo.jomeswang.top/20200606091756.png\" alt=\"\"></p>\n<ol>\n<li>初始启动页应该是英文，如果需要中文，点击左侧四个小方块组成的按钮“插件管理器”，在搜索栏中输入”Chinese”，找到汉化插件，安装即可。</li>\n<li>安装完后，由于我们需要配置C/C++环境，所以请再次搜索”C/C++”，安装这个插件。</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200606091957.png\" alt=\"\"></p>\n<p>3.修改完环境变量、安装或更新完插件后，务必重启VS Code。这类属于编辑器环境的东西，大都需重启软件才能生效。</p>\n<h2 id=\"三：配置C-C-环境\"><a href=\"#三：配置C-C-环境\" class=\"headerlink\" title=\"三：配置C/C++环境\"></a>三：配置C/C++环境</h2><p>这里实际上就是VS Code的具体用法，原则上并无固定章法，但几个基本点有必要提及一下：</p>\n<ol>\n<li>脑子里要有源代码文件这个概念。写程序不是说就在框框里写一堆代码然后就能跑了！代码都要写成文件保存起来（到硬盘里），然后才有后续的工作；</li>\n<li>VS Code是支持多语言的编辑器，并不只为C/C++服务，所以还要确保把代码文件的后缀名写对，C语言的后缀名是.c，C++的是.cpp。这是VS Code区分你代码类型的标志；</li>\n<li>上面安装的”C/C++”插件提供了对这两门语言的基本支持。C跟C++是两门不同的语言，请向你的老师问清楚学的是哪一门。无论是在.c文件里敲C++代码，还是在.cpp文件里敲C代码，都是自掘天坑的行为。</li>\n<li>编写C/C++程序有两个基本步骤，一是把代码文件变成程序文件，这叫编译或生成，是调用最开始安装的编译器做的事；二才是把刚刚生成的程序跑起来，这叫执行，是操作系统做的事；</li>\n<li>这两个基本步骤，一般都是在命令行的环境下进行，输入输出也是在这里面。VS Code的优势之一，就是把系统的命令行集成进了软件内部，名唤“终端”，从而不必再开新窗口。</li>\n</ol>\n<p>接下来，是要利用”C/C++”插件预定义好了的配置，稍作修改以满足我们的需要。按快捷键【Ctrl】【Shift】+【P】，打开命令面板，输入关键词”C/C++”，在弹出的诸命令中选择编辑配置 (UI)或者Edit Configurations (UI)，将弹出”C/C++”给我们的默认配置（JSON那个操作难度较大，有兴趣的可自行研究）。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606092350.png\" alt=\"\"></p>\n<p>诸配置中最重要的是编译器路径和IntelliSense模式这两项，两者在右侧都有下拉三角。如果前面你正确配置了环境变量，路径的待选项中就会包含几个正确的编译器路径，编写C程序请选择gcc.exe，C++则选择g++.exe；模式选择gcc-x64。</p>\n<h2 id=\"四：编写”Hello-World”程序\"><a href=\"#四：编写”Hello-World”程序\" class=\"headerlink\" title=\"四：编写”Hello World”程序\"></a>四：编写”Hello World”程序</h2><p>到工作文件夹中添加一个源代码文件，命名为hello.c（或者任意你喜欢的名字，但注意后缀名.c别忘了打上），</p>\n<p>我这里的示例是C语言的，要试用C++的请注意后缀名为.cpp，并求教你的老师或自行编写相应代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    printf(&quot;HellO world!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200606093434.png\" alt=\"\"></p>\n<p>输完你的代码后，按快捷键【Ctrl】+【S】保存、之后点击运行，看正不正确。</p>\n<p>如果输出乱码：参看这一篇：<a href=\"https://blog.csdn.net/m0_37218227/article/details/103023936\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/m0_37218227/article/details/103023936</a><br>你可以选择开启VS Code的自动保存功能，但手动保存习惯仍是最好的依靠。这里更重要的问题是编译器需要从硬盘中读取你的代码文件，而未保存的代码在硬盘上是未更新的甚至压根不存在，将直接导致接下来的编译掰瞎！这么多提醒你文件没保存的标记要是都看不到就尴尬了。</p>\n","categories":["环境配置"],"tags":["环境配置","教程"]},{"title":"node.js 配置和 npm 换源","url":"/posts/73e70778/","content":"<h1 id=\"node-js-配置和-npm-换源\"><a href=\"#node-js-配置和-npm-换源\" class=\"headerlink\" title=\"node.js 配置和 npm 换源\"></a>node.js 配置和 npm 换源</h1><a id=\"more\"></a>\n\n<h2 id=\"一：下载node-js\"><a href=\"#一：下载node-js\" class=\"headerlink\" title=\"一：下载node.js\"></a>一：下载node.js</h2><p>进入官网：<a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/zh-cn/download/</a></p>\n<p>就会出现下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200605153121.png\" alt=\"\"></p>\n<h2 id=\"二：安装node-js\"><a href=\"#二：安装node-js\" class=\"headerlink\" title=\"二：安装node.js\"></a>二：安装node.js</h2><p>点击刚刚下载的文件。</p>\n<p>会出现如下的页面点击Next </p>\n<p><img src=\"http://photo.jomeswang.top/20200605153254.png\" alt=\"\"></p>\n<p>之后</p>\n<p><img src=\"http://photo.jomeswang.top/20200605153350.png\" alt=\"\"></p>\n<p>选择安装路径：  这里我选择的是  <code>D:\\Program Files\\nodejs\\</code></p>\n<p><img src=\"http://photo.jomeswang.top/20200605153513.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200605153634.png\" alt=\"\"></p>\n<p>​    <img src=\"http://photo.jomeswang.top/20200605185454.png\" alt=\"\"></p>\n<p>之后点击安装即可。</p>\n<p>等待安装完成后是如下模样。</p>\n<p><img src=\"http://photo.jomeswang.top/20200605154103.png\" alt=\"\"></p>\n<h2 id=\"三：测试安装是否成功\"><a href=\"#三：测试安装是否成功\" class=\"headerlink\" title=\"三：测试安装是否成功\"></a>三：测试安装是否成功</h2><p>安装完成后打开 cmd(或powershell)，输入命令 <code>node -v</code> 或者 <code>npm -v</code> 来查看node当前版本号或者npm当前版本。（cmd 可以在文件地址栏敲cmd 回车就会出现）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; node -v</span><br><span class=\"line\">v13.1.0</span><br><span class=\"line\">&gt; npm -v</span><br><span class=\"line\">6.12.1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四：配置环境\"><a href=\"#四：配置环境\" class=\"headerlink\" title=\"四：配置环境\"></a>四：配置环境</h2><blockquote>\n<p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\\Users\\用户名\\AppData\\Roaming\\npm】路径中，占C盘空间。</p>\n</blockquote>\n<p>所以我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹<code>D:\\Program Files\\nodejs</code>下创建两个文件夹<code>【node_global】及【node_cache】</code></p>\n<p>创建完两个空文件夹之后，打开cmd命令窗口，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config set prefix “D:\\Program Files\\nodejs\\node_global”</span><br><span class=\"line\">npm config set cache “D:\\Program Files\\nodejs\\node_cache”</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200605172552.png\" alt=\"\"></p>\n<p>接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”</p>\n<p><img src=\"http://photo.jomeswang.top/20200605172609.png\" alt=\"\"></p>\n<p>选择用户环境变量：备注：<br>环境变量Path的作用：path是路径变量，它的作用是告诉系统在当前目录找不到所需文件时，就按path指定的路径查找</p>\n<p><img src=\"http://photo.jomeswang.top/20200605173825.png\" alt=\"\"></p>\n<p>在cmd中.查看nodeJS全局安装路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config ls</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"http://photo.jomeswang.top/20200605210534.png\" alt=\"\"></p>\n<p>将这个<code>prefix</code> 的值替换成下方所要替换的路径</p>\n<p><img src=\"http://photo.jomeswang.top/20200605173856.png\" alt=\"\"></p>\n<p>即变为：<img src=\"http://photo.jomeswang.top/20200605211101.png\" alt=\"\"></p>\n<p>点确定就完成了。</p>\n<h2 id=\"五：npm换源\"><a href=\"#五：npm换源\" class=\"headerlink\" title=\"五：npm换源\"></a>五：npm换源</h2><p>因为npm源在国外，所以国内就有人将这个仓库把他拷到国内，所以我们就要将这个地址替换掉原来的地址</p>\n<h3 id=\"5-1-直接换源法\"><a href=\"#5-1-直接换源法\" class=\"headerlink\" title=\"5.1 直接换源法\"></a>5.1 直接换源法</h3><p>npm查看源和换源：</p>\n<p>在cmd中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config get registry  &#x2F;&#x2F; 查看npm当前镜像源</span><br><span class=\"line\"></span><br><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;  &#x2F;&#x2F; 设置npm镜像源为淘宝镜像</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200605174800.png\" alt=\"\"></p>\n<p>镜像源地址部分如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm --- https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">cnpm --- https:&#x2F;&#x2F;r.cnpmjs.org&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">taobao --- https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">nj --- https:&#x2F;&#x2F;registry.nodejitsu.com&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">rednpm --- https:&#x2F;&#x2F;registry.mirror.cqupt.edu.cn&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">npmMirror --- https:&#x2F;&#x2F;skimdb.npmjs.com&#x2F;registry&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">deunpm --- http:&#x2F;&#x2F;registry.enpmjs.org&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-使用nrm-换源法\"><a href=\"#5-2-使用nrm-换源法\" class=\"headerlink\" title=\"5.2 使用nrm 换源法\"></a>5.2 使用nrm 换源法</h3><p>在使用 npm 的过程中，可能插件安装速度比较慢，我们可能会使用淘宝源对插件进行下载安装。或者在公司内部，有一些私有的插件，需要使用公司的源才可以下载。这种情况，我们就需要设置不同的源来进行下载。每次手动设置相对比较麻烦。而 nrm 可以很好的解决这个问题。</p>\n<h4 id=\"5-2-1-nrm-的安装\"><a href=\"#5-2-1-nrm-的安装\" class=\"headerlink\" title=\"5.2.1 nrm 的安装\"></a>5.2.1 nrm 的安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 全局安装 nrm</span><br><span class=\"line\">$ npm install nrm -g</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，输入命令 <code>nrm ls</code>，可以看到默认已经有了 6 个源（带 * 号的为当前使用的源）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* npm ---- https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class=\"line\">  cnpm --- http:&#x2F;&#x2F;r.cnpmjs.org&#x2F;</span><br><span class=\"line\">  taobao - https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br><span class=\"line\">  nj ----- https:&#x2F;&#x2F;registry.nodejitsu.com&#x2F;</span><br><span class=\"line\">  npmMirror  https:&#x2F;&#x2F;skimdb.npmjs.com&#x2F;registry&#x2F;</span><br><span class=\"line\">  edunpm - http:&#x2F;&#x2F;registry.enpmjs.org&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>输入 <code>nrm use taobao</code>，即切换 registry 到 taobao，即可使用淘宝的源进行插件的安装下载了。</p>\n<h4 id=\"5-2-2-nrm-常用命令\"><a href=\"#5-2-2-nrm-常用命令\" class=\"headerlink\" title=\"5.2.2   nrm 常用命令\"></a>5.2.2   nrm 常用命令</h4><ul>\n<li><code>nrm ls</code>              ：查看所有配置好的源以及对应名称</li>\n<li><code>nrm add company http://npm.xxx.cn</code>：添加源，<code>company</code> 是名称，可以自行命名，后面是源的 <code>url</code> 地址</li>\n<li><code>nrm del company</code>     ：删除源，根据名称 <code>company</code> 可以删除对应的源</li>\n<li><code>nrm test [registry]</code> ：测试源的速度，不加对应的 <code>registry</code> 名称，测试所有源的速度，添加对应的名称，比如 <code>company</code>，就是测试 <code>company</code> 对应的源的速度</li>\n<li><code>nrm use company</code>     ：切换源，即可使用 <code>company</code> 对应名称的源</li>\n<li>更多命令在命令行输入 <code>nrm</code> 即可查看</li>\n</ul>\n<h3 id=\"5-3-安装cnpm\"><a href=\"#5-3-安装cnpm\" class=\"headerlink\" title=\"5.3 安装cnpm\"></a>5.3 安装cnpm</h3><p>你可以使用我们定制的 <a href=\"https://github.com/cnpm/cnpm\" target=\"_blank\" rel=\"noopener\">cnpm</a> (gzip 压缩支持) 命令行工具代替默认的 <code>npm</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>最后使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cnpm install -g express</span><br></pre></td></tr></table></figure>\n\n<p>试一下可是否可以运行cnpm。</p>\n<p><img src=\"http://photo.jomeswang.top/20200605212022.png\" alt=\"\"></p>\n","categories":["环境配置"],"tags":["环境配置","教程"]},{"title":"Hello World","url":"/posts/4a17b156/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n <a id=\"more\"></a> \n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":["算法"]},{"title":"First 推文KO  ","url":"/posts/d48495b1/","content":"<p>一.</p>\n<a id=\"more\"></a>\n\n<p>2020 年 02月 01 日</p>\n<p>今日发了我人生中第一篇推文啊，有点开心，但没人看，是真的伤心。我要继续努力让人数增加。呵呵呵。</p>\n<p>今日也算是完成了一个小任务了，只不过这耗费了许久的时间罢了。有几次怀疑自己是否能做成功，在自己一次次的不断的尝试中，我逐渐成为的那个自己想去成为的那个人。</p>\n<p>qq 群没人聊天哎，那该怎么办啊</p>\n<p><img src=\"http://photo.jomeswang.top/20200505102107.png\" alt=\"\"></p>\n<p>逐渐地去培养自己的种种能力，加油吧！少年！</p>\n<p>首先我能做出来这篇推文，也要多谢   黄李雪 宁啦     </p>\n<p>把我从萌新变成萌新，这也是难为你了。</p>\n<p>2020年02月02日</p>\n<p>我要做苏大，深大，南方医科大的推文</p>\n<p>发现    一定要有魄力去完成这些东西，  加油，  前方也许充满着荆轲，但我们一定要砥砺前行啊！！ 前行的远方要有脚印啊！脚印多的地方，才能成为路啊！</p>\n<p>现在还是有些迷茫的，不知前方是什么地方！！   吾辈青年当不惧前方荆轲，勇敢前进吧，少年！</p>\n<p>2020年02月03日</p>\n<p>昨天只做了一个南医大的推文，有点难，发现做推文也是间很困难的事情。</p>\n<p>今天一定要把深圳大学的推文做出来啊！！</p>\n<p>0，深大简介    1，排名？？？    2，校友资源和奖学金  3，环境（衣食住行）   4，特色班    5，视频    盒子！！！ 6，分数线      7，  白嫖活动 </p>\n<p>2020年   02 月 04日</p>\n<p>今天做出了深大的推文了哎</p>\n<p>加油，也许这一点点的变化改变不了什么，但我相信不断地坚持做下去，一定会有人相信的。</p>\n<p>同时我也很迷茫，这能够传承下去吗？？？？？</p>\n<p>我真的不知道哎。。。</p>\n<p>但我会坚持地做下去，直到真的做不下去。。。加油，你是最棒的。相信你自己！！！！</p>\n<p>我从来不相信我做的这一件小事能为别人带来什么大的改变，我只希望我做的这一件事情是有结果的，是有意义的。</p>\n<p>我只有一个想法，就是我做的这一件小事能够让他们填志愿的时候少一份迷茫，多一个选择，同时对自己的人生多一份思考。</p>\n<p>回想过去，我曾经如此的无知，同时我也在思考，这是不是因为我想去反抗这一制度。而做出的种种呢！！不清楚。</p>\n<p>但希望我可以改正并思考过去的不足，做足好准备，为着以后的自己而努力奋斗。</p>\n","categories":["日志"],"tags":["推文","秀米"]},{"title":"竞选。。。","url":"/posts/adfcc4bd/","content":"<blockquote>\n<p>珍惜美好的现在，拥抱更好的未来</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>啥都输了，我都不知道原来我的影响力如此之差。。。</p>\n<p>看来我对整一个社团没有很好的一个影响力。</p>\n<p>所以我都没有加入一个团队。</p>\n<p>犹豫不绝，害害。。。。。</p>\n<p>发现我还没有影响力。这是我大一这一年内最最失败的一点。</p>\n<p>但是在最美好的时光，遇见最美好的自己。</p>\n<p>我觉得还是缺了某些东西。</p>\n<p>但是坚持自己所想，看着未来的希望。</p>\n<p>所以很感谢大家的鼎立支持啊！！！！</p>\n<p>我发现我的嘴巴害不灵活啊，怎么办啊！！！发现我没有我喜欢这一种我一级大二了，我想说的话，都说出来了，说话就要做好并且我想把它做完，</p>\n<p>但是我可以发现其实自己可以做的更好的哦！！！！</p>\n<p>在自己喜欢的路上做着自己喜欢的事情，加油啊！！！</p>\n<p>欧里给！！！</p>\n<p>不忘初心，方得始终。</p>\n<p>我们。</p>\n<p>留部吗留部吗留部吗！！！</p>\n<p>留留留！！！</p>\n<p>锻炼自己的能力与技术。要扛得住压力，努力向前冲。。</p>\n<p>蛙哥感言：</p>\n<p>大家好啊，换届结束了，真的是大佬众多啊，让我非常意外。然后我也总结了一下硬件部的一年。</p>\n<p>首先夸夸大家吧，大家从一开学就敢于挑战自己，去自学焊接或者编程，当你们下定决心要进电协的时候，你们就比同届的强很多了，不知道大家现在回想起开学初那一段经历会不会给自己带来一些鼓励捏，你们真的非常棒的呀！说实话，这一届不论是小干事还是讲课的师兄师姐都比之前好很多了。</p>\n<p>硬件部这一年主要就教了单片机和焊接，也没干什么啦。为什么我这么执着于教大家单片机呢，因为我认为这个东西是一个电子相关专业学生最基本的技能之一，无论以后做通信，做信号处理还是其他的都会用到。至于下学期为什么没开什么培训，一方面是我太懒啦，另一方面电信学院这边的课不管大一大二都比较繁忙啦，再者就是大家手上也没有工具什么的培训起来不像软件部那么方便，所以干脆就放开了，有能力的同学自己自然会去学的了。</p>\n<p>但是话说回来，学习是自己的事，我也不想说指定什么给大家学(主要是我也很菜)，硬件这边的东西太多太杂了而且需要很多基础知识，如果不打算走CS而是走电信相关职业的，我希望（纯属个人建议）你们什么数电模电，信号与系统之类的学好一些，在学好专业课的情况下多去了解跟这些课程相关的技术然后找到自己的方向去深入研究。</p>\n<p>关于电协的看法，我觉得他首先是一个社团，再是一个学术社团，不过今年社团性质的活动还是比较少，凝聚力也不够，下一届不知道会不会好一些。我觉得吧上大学不仅仅就只是为找工作做准备的，大家也得找点机会享受一下这闲暇的大学时光(️不是叫你们只玩不学️)，当然啦每个人有自己的选择我就不评价了。说到学术社团，学校这几年的学术社团也越来越多了，可以考虑一下跟他们py一下搞一下活动扩大电协的影响力啦。</p>\n<p>最后希望硬件部越来越好啦，希望电协也越来越好啦。</p>\n<p>想要做的事情太多了，我又不能样样都顾及。</p>\n<p>再见我的好朋友们，不能在一起换届，实属一个遗憾，但是我认为</p>\n<p>我要在</p>\n","tags":["随笔"]},{"title":"520, 我又想你们啦","url":"/posts/f93d83c7/","content":"<blockquote>\n<p>遮住你面容的口罩，遮不住你发自内心的笑容。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200520103947.jpg\" alt=\"\"></p>\n<p>一代人有一代人的使命与担当，一代人有一代人的责任有义务，一代人接上一代人的接力棒，继续鼎立前行。</p>\n<p>曾经我们也是这样的啊！！日复一日的做着这样的事情。</p>\n<p>为着自己的梦想而去努力奋斗，不是一件很快乐的事吗？</p>\n<p><img src=\"http://photo.jomeswang.top/20200520114712.jpg\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200520110341.jpg\" alt=\"\"></p>\n<p>看着他们的笑容，我又想起了当年的我们，也是这样的啊！！</p>\n<p>得到这样的一些奖励，就会非常开心啊！！</p>\n<p>都是如此的满足的啊！！</p>\n<p>仿佛之前做的都是有价值的啊！！</p>\n<p><img src=\"http://photo.jomeswang.top/20200520114458.jpg\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200520114533.jpg\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200520114800.jpg\" alt=\"\"></p>\n<p>都在专心认真地了解深大呢！！！</p>\n<p>仔细看清每一个字。。非常渴望</p>\n<p>每一个都在思索，思索我将来能上什么大学呢？</p>\n<p>我的分数够不够呢？？</p>\n<p>真心祝愿2020届象贤中学高三届六月宁静备考，七月旗开得胜。</p>\n","categories":["随笔"],"tags":["寒招","随笔"]},{"title":"好用的电脑软件和插件","url":"/posts/18a1b841/","content":"<p>好用的电脑软件和插件</p>\n<a id=\"more\"></a>\n\n<h3 id=\"一：学习类\"><a href=\"#一：学习类\" class=\"headerlink\" title=\"一：学习类\"></a>一：学习类</h3><ol>\n<li><p>网易有道词典 ：<a href=\"https://jomeswang.lanzous.com/iPQQXdf2rzc\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iPQQXdf2rzc</a></p>\n</li>\n<li><p>桌面日历： <a href=\"http://chs.desktopcal.com/chs/\" target=\"_blank\" rel=\"noopener\">http://chs.desktopcal.com/chs/</a> </p>\n<p><img src=\"http://photo.jomeswang.top/20200515140545.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"二：博客类\"><a href=\"#二：博客类\" class=\"headerlink\" title=\"二：博客类\"></a>二：博客类</h3><ol>\n<li><p>Listary  快速打开文件  <a href=\"https://jomeswang.lanzous.com/iTdJWdf2s3g\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iTdJWdf2s3g</a></p>\n</li>\n<li><p>snipaste 截图和贴图必备工具  <a href=\"https://zh.snipaste.com/\" target=\"_blank\" rel=\"noopener\">https://zh.snipaste.com/</a> </p>\n</li>\n<li><p>Typora  md文件编写，所写即所见，免去记忆md格式，快速编写。官网： <a href=\"https://www.typora.io/#windows\" target=\"_blank\" rel=\"noopener\">https://www.typora.io/#windows</a>  下载地址：<a href=\"https://jomeswang.lanzous.com/iVbt9df318f\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iVbt9df318f</a></p>\n</li>\n<li><p>picgo 图床工具，利用千牛云的储存功能，建立图床，快速上传图片并自动生成md格式链接，写博客必备工具。使用：  <a href=\"https://github.com/Molunerfinn/PicGo\" target=\"_blank\" rel=\"noopener\">https://github.com/Molunerfinn/PicGo</a>  安装：<a href=\"https://jomeswang.lanzous.com/i3llBdf2yuj\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/i3llBdf2yuj</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200515140246.png\" alt=\"\"></p>\n</li>\n<li><p>pandas OCR  文字识别工具</p>\n<p> 发布地址：<a href=\"https://github.com/jomeswang/PandaOCR\" target=\"_blank\" rel=\"noopener\">https://github.com/jomeswang/PandaOCR</a>  下载地址：</p>\n<p><img src=\"http://photo.jomeswang.top/20200603085619.png\" alt=\"\"></p>\n</li>\n<li><p>Fastoncapture 长截图</p>\n</li>\n</ol>\n<p>安装包  <a href=\"https://jomeswang.lanzous.com/iSqi7da81yb\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iSqi7da81yb</a></p>\n<h3 id=\"三：系统\"><a href=\"#三：系统\" class=\"headerlink\" title=\"三：系统\"></a>三：系统</h3><ol>\n<li><p>CCleaner   一款轻巧的清理文件软件，快速清理不需要的垃圾。 <a href=\"https://jomeswang.lanzous.com/ip4yndf34ej\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/ip4yndf34ej</a></p>\n</li>\n<li><p>IObit unistaller 一款优秀的管理软件卸载的软件。<a href=\"https://jomeswang.lanzous.com/iKEEBdf36mj\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iKEEBdf36mj</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200515142844.png\" alt=\"\"></p>\n</li>\n<li><p>raildrive  一款将云盘映射到本地的软件。<a href=\"https://jomeswang.lanzous.com/i3ZzEda8j4j\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/i3ZzEda8j4j</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200515145222.png\" alt=\"\"></p>\n</li>\n<li><p>plotplayer: 一款拥有极佳用户体验的视频播放器，<a href=\"https://potplayer.org/\" target=\"_blank\" rel=\"noopener\">https://potplayer.org/</a></p>\n</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200607110011.png\" alt=\"\"></p>\n<ol start=\"5\">\n<li>quicker   一款快捷使用的小工具箱，有着像快速搜索，图像OCR识别等功能。<a href=\"https://www.getquicker.net/\" target=\"_blank\" rel=\"noopener\">https://www.getquicker.net/</a></li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200607104900.png\" alt=\"\"></p>\n<h3 id=\"四：浏览器\"><a href=\"#四：浏览器\" class=\"headerlink\" title=\"四：浏览器\"></a>四：浏览器</h3><ol>\n<li><p>Chrome 常用浏览器，不多说  <a href=\"https://www.google.cn/chrome/\" target=\"_blank\" rel=\"noopener\">https://www.google.cn/chrome/</a> </p>\n</li>\n<li><p>IDM下载 传说中的多线程下载神器， <a href=\"https://jomeswang.lanzous.com/i83nsda801c\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/i83nsda801c</a> </p>\n<p><img src=\"http://photo.jomeswang.top/20200515143701.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"五：谷歌插件\"><a href=\"#五：谷歌插件\" class=\"headerlink\" title=\"五：谷歌插件\"></a>五：谷歌插件</h3><p><img src=\"http://photo.jomeswang.top/20200515144534.png\" alt=\"\"></p>\n<h3 id=\"六：油猴脚本\"><a href=\"#六：油猴脚本\" class=\"headerlink\" title=\"六：油猴脚本\"></a>六：油猴脚本</h3><p>找脚本地址： <a href=\"https://greasyfork.org/zh-CN\" target=\"_blank\" rel=\"noopener\">https://greasyfork.org/zh-CN</a> </p>\n<ol>\n<li><p>AC baidu 过滤广告，优化界面</p>\n<p><img src=\"http://photo.jomeswang.top/20200515144651.png\" alt=\"\"></p>\n</li>\n<li><p>隐藏youtube google广告</p>\n</li>\n<li><p>视频:: 全网VIP视频破解超强集合；爱奇艺、优酷、腾讯视频原网站广告过滤；知乎视频下载；YouTube油管</p>\n</li>\n<li><p>知乎免登录， izhihu</p>\n</li>\n<li><p>Userscript+ : 显示当前网站所有可用的UserJS脚本 Jaeger</p>\n</li>\n<li><p>知乎、简书、csdn、实验楼剪切板消毒</p>\n</li>\n</ol>\n<h3 id=\"七：云盘\"><a href=\"#七：云盘\" class=\"headerlink\" title=\"七：云盘\"></a>七：云盘</h3><ol>\n<li>坚果云  满速下载，支持挂载，分享，但免费版每月只有1G上传流量和3G下载流量。</li>\n<li>Onedrive 微软的云盘，教育版可以1T空间，并且支持挂载，还算可以吧，但不能分享。</li>\n<li>白熊云盘   看着先</li>\n<li>蓝奏云：分享直链下载</li>\n</ol>\n<h3 id=\"八：编程\"><a href=\"#八：编程\" class=\"headerlink\" title=\"八：编程\"></a>八：编程</h3><ol>\n<li>dev-cpp  传说中的最简单的c语言IDE  <a href=\"https://jomeswang.lanzous.com/imapcda8vpc\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/imapcda8vpc</a></li>\n<li>Postman 测试接口工具   <a href=\"https://jomeswang.lanzous.com/iMs4sda8s9i\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iMs4sda8s9i</a></li>\n<li>Devc++    传说中萌新入门C语言的法宝     <a href=\"https://jomeswang.lanzous.com/iKEEBdf36mj\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iKEEBdf36mj</a></li>\n</ol>\n<h3 id=\"九：clashr\"><a href=\"#九：clashr\" class=\"headerlink\" title=\"九：clashr\"></a>九：clashr</h3><p><a href=\"https://jomeswang.lanzous.com/ihsmLda8o1g\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/ihsmLda8o1g</a></p>\n<h3 id=\"十：Windows-美化\"><a href=\"#十：Windows-美化\" class=\"headerlink\" title=\"十：Windows 美化\"></a>十：Windows 美化</h3><ol>\n<li>steam的wallpaper engine   全都是好看的壁纸</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200607113420.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>RockerDock  仿Macox 的Dock  选择栏。  安装：<a href=\"https://jomeswang.lanzous.com/iQohndf49ub\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iQohndf49ub</a></li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200607113535.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>TranslucentTB  使任务栏透明化  安装：<a href=\"https://jomeswang.lanzous.com/iFjWFdf4a4b\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iFjWFdf4a4b</a></li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200607113633.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>Rainmeter   水滴插件（有各类式的插件如时间，温度，CPU，内存等信息的插件）安装： <a href=\"https://jomeswang.lanzous.com/iC8eTdf49of\" target=\"_blank\" rel=\"noopener\">https://jomeswang.lanzous.com/iC8eTdf49of</a>   （也可在microsoft store 中安装中文版）</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200607113726.png\" alt=\"\"></p>\n<p>持续更新。。。。。</p>\n<p>​                                        —-更新至2020-05-15</p>\n","categories":["随笔"]},{"title":"微博点赞数等信息和公众号点赞数等信息爬取","url":"/posts/cd5b1c33/","content":"<h2 id=\"一：微博\"><a href=\"#一：微博\" class=\"headerlink\" title=\"一：微博\"></a>一：微博</h2><a id=\"more\"></a>\n\n<p>因为GitHub页面中已有非常详细的描述，这里只贴出地址和运行结果。</p>\n<p>地址： <a href=\"https://github.com/dataabc/weiboSpider\" target=\"_blank\" rel=\"noopener\">https://github.com/dataabc/weiboSpider</a> </p>\n<p>运行结果：（获取点赞数，转发数，评论数）</p>\n<p><img src=\"http://photo.jomeswang.top/20200512091954.png\" alt=\"\"></p>\n<h2 id=\"二：微信公众号\"><a href=\"#二：微信公众号\" class=\"headerlink\" title=\"二：微信公众号\"></a>二：微信公众号</h2><p>github地址： <a href=\"https://github.com/wnma3mz/wechat_articles_spider\" target=\"_blank\" rel=\"noopener\">https://github.com/wnma3mz/wechat_articles_spider</a> </p>\n<p>先看结果图：（获取url和阅读数和点赞数）<img src=\"http://photo.jomeswang.top/20200513125714.png\" alt=\"\"></p>\n<h3 id=\"2-1-原理介绍\"><a href=\"#2-1-原理介绍\" class=\"headerlink\" title=\"2.1 原理介绍\"></a>2.1 原理介绍</h3><h4 id=\"2-1-1-抓取文章url\"><a href=\"#2-1-1-抓取文章url\" class=\"headerlink\" title=\"2.1.1 抓取文章url\"></a>2.1.1 抓取文章url</h4><ol>\n<li>拥有一个微信个人订阅号，附上登陆和注册链接。<a href=\"https://mp.weixin.qq.com/\" target=\"_blank\" rel=\"noopener\">微信公众平台</a></li>\n<li>登陆之后，点击左侧菜单栏“管理”-“素材管理”。再点击右边的“新建图文素材”</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200513134801.png\" alt=\"\"></p>\n<ol>\n<li><p>弹出一个新的标签页，在上面的工具栏找到“超链接”并点击<br><img src=\"http://photo.jomeswang.top/20200513135008.png\" alt=\"\"></p>\n</li>\n<li><p>弹出了一个小窗口，选择“查找文章”，输入需要查找的公众号，这里用“科技美学”公众号作为例子<br><img src=\"http://photo.jomeswang.top/20200513135022.png\" alt=\"\"></p>\n</li>\n<li><p>点击之后，可以弹出该公众号的所有历史文章</p>\n<p><img src=\"http://photo.jomeswang.top/20200513135037.png\" alt=\"\"></p>\n</li>\n</ol>\n<h4 id=\"2-1-2-抓取文章的阅读量和点赞量\"><a href=\"#2-1-2-抓取文章的阅读量和点赞量\" class=\"headerlink\" title=\"2.1.2 抓取文章的阅读量和点赞量\"></a>2.1.2 抓取文章的阅读量和点赞量</h4><p>1.首先安装Fiddler抓包工具软件</p>\n<p>下载链接：<a href=\"https://www.telerik.com/download/fiddler/fiddler4\" target=\"_blank\" rel=\"noopener\">https://www.telerik.com/download/fiddler/fiddler4</a></p>\n<p>安装完成，只需点击同意，下一步安装即可。</p>\n<p>2.Fiddler相关配置</p>\n<p>安装完毕后，按下图图进行配置勾选，然后重启Fiddler。</p>\n<p><img src=\"http://photo.jomeswang.top/20200513182844.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200513170351.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200513170406.png\" alt=\"\"></p>\n<p>按图进行配置操作，然后重启Fiddler。</p>\n<ol start=\"3\">\n<li><p>登陆微信客户端，浏览该公众号的任意一篇推文 </p>\n</li>\n<li><p>可以观察到这里的内容显示会有阅读量、点赞量、评论等 </p>\n</li>\n<li><p>观察fiddler的监控数据，如下图显示 </p>\n<p><img src=\"http://photo.jomeswang.top/20200513170518.png\" alt=\"\"></p>\n</li>\n<li><p>其中<code>/mp/getappmgsext?...</code>是我们推文内容的url，双击之后，fiddler界面右边出现如下图数据 </p>\n<p><img src=\"http://photo.jomeswang.top/20200513171219.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"2-2-用法\"><a href=\"#2-2-用法\" class=\"headerlink\" title=\"2.2 用法\"></a>2.2 用法</h3><h4 id=\"2-2-1-克隆项目并安装依赖\"><a href=\"#2-2-1-克隆项目并安装依赖\" class=\"headerlink\" title=\"2.2.1 克隆项目并安装依赖\"></a>2.2.1 克隆项目并安装依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;wnma3mz&#x2F;wechat_articles_spider.git</span><br><span class=\"line\"></span><br><span class=\"line\"># 在项目文件夹内</span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-获取微信公众号token和cookie\"><a href=\"#2-2-2-获取微信公众号token和cookie\" class=\"headerlink\" title=\"2.2.2 获取微信公众号token和cookie\"></a>2.2.2 获取微信公众号token和cookie</h4><ol>\n<li><p>登录微信公众号， 打开浏览器的<strong>开发者选项</strong>(F12), 推荐Chrome或者Firefox </p>\n<p><img src=\"http://photo.jomeswang.top/20200513171719.png\" alt=\"\"></p>\n</li>\n</ol>\n<h4 id=\"2-2-2-获取个人微信号的token和cookie（要打开想要爬的公众号所属文章）\"><a href=\"#2-2-2-获取个人微信号的token和cookie（要打开想要爬的公众号所属文章）\" class=\"headerlink\" title=\"2.2.2 获取个人微信号的token和cookie（要打开想要爬的公众号所属文章）\"></a>2.2.2 获取个人微信号的token和cookie（要打开想要爬的公众号所属文章）</h4><ol>\n<li><p>打开fiddler开始监控</p>\n</li>\n<li><p>登陆微信PC端，浏览该公众号的任意一篇推文</p>\n</li>\n<li><p>其中<code>/mp/getappmgsext?...</code>是我们推文内容的url，双击之后，fiddler界面右边出现如下图数据 </p>\n</li>\n<li><p>获取token</p>\n<p><img src=\"http://photo.jomeswang.top/20200513172115.png\" alt=\"\"></p>\n</li>\n<li><p>获取cookie </p>\n<p><img src=\"http://photo.jomeswang.top/20200513172224.png\" alt=\"\"></p>\n</li>\n</ol>\n<h4 id=\"2-2-3-测试cookie和token-填入相关信息\"><a href=\"#2-2-3-测试cookie和token-填入相关信息\" class=\"headerlink\" title=\"2.2.3 测试cookie和token(填入相关信息)\"></a>2.2.3 测试cookie和token(填入相关信息)</h4><p><img src=\"http://photo.jomeswang.top/20200513181352.png\" alt=\"\"></p>\n<p>方法一（一次性检测）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># coding&#x3D;utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import time</span><br><span class=\"line\">from wechatarticles import ArticlesInfo, ArticlesUrls, tools</span><br><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import os</span><br><span class=\"line\">sys.path.append(os.getcwd())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 公众号的cookie和token</span><br><span class=\"line\">official_cookie &#x3D; &quot;&quot;</span><br><span class=\"line\">token &#x3D; &quot;&quot;</span><br><span class=\"line\"># 个人微信号的cookie和token</span><br><span class=\"line\">appmsg_token, wechat_cookie &#x3D; &quot;&quot;, &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#  查询的公众号名称</span><br><span class=\"line\">nickname &#x3D; &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 实例化爬取对象</span><br><span class=\"line\"># 手动输入账号密码</span><br><span class=\"line\">test_url &#x3D; ArticlesUrls(cookie&#x3D;official_cookie, token&#x3D;token)</span><br><span class=\"line\">test_info &#x3D; ArticlesInfo(appmsg_token&#x3D;appmsg_token, cookie&#x3D;wechat_cookie)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_info(articles_data, test_info):</span><br><span class=\"line\">    articles &#x3D; []</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        # print(articles_data)</span><br><span class=\"line\">        for article_data in articles_data:</span><br><span class=\"line\">            print(article_data)</span><br><span class=\"line\">            # 设置一定的间隔时间防止被禁最好是 10s左右</span><br><span class=\"line\">            time.sleep(6)</span><br><span class=\"line\">            # print(article_data)</span><br><span class=\"line\">            time_array &#x3D; time.localtime(int(article_data[&#39;create_time&#39;]))</span><br><span class=\"line\">            datetime &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time_array)</span><br><span class=\"line\">            year &#x3D; time.strftime(&quot;%Y&quot;, time_array)</span><br><span class=\"line\">            read_num, like_num &#x3D; test_info.read_like_nums(article_data[&#39;link&#39;])</span><br><span class=\"line\">            article &#x3D; &#123;&quot;title&quot;: article_data[&#39;title&#39;], &#39;digest&#39;: article_data[&#39;digest&#39;],</span><br><span class=\"line\">                       &#39;link&#39;: article_data[&#39;link&#39;], &#39;time&#39;: datetime, &#39;year&#39;: year,</span><br><span class=\"line\">                       &#39;read_num&#39;: read_num, &#39;like_num&#39;: like_num&#125;</span><br><span class=\"line\">            articles.append(article)</span><br><span class=\"line\">    except Exception as error:</span><br><span class=\"line\">        print(articles_data)</span><br><span class=\"line\">        print(error)</span><br><span class=\"line\">    finally:</span><br><span class=\"line\">        # 在遇到意外时先将已经弄出来的文章URL保存至 test.csv 中</span><br><span class=\"line\">        with open(&quot;.&#x2F;test2.txt&quot;, &quot;a+&quot;, encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class=\"line\">            f.write(str(articles_data))</span><br><span class=\"line\">            f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            f.write(&quot;\\n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 在遇到意外时先将已经弄出来的文章阅读数和点赞数保存至 test.csv 中</span><br><span class=\"line\">        a &#x3D; pd.DataFrame(articles)</span><br><span class=\"line\">        # print(a)</span><br><span class=\"line\">        a.to_csv(&#39;.&#x2F;test2.csv&#39;)</span><br><span class=\"line\">        print(&quot;写入成功&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\"></span><br><span class=\"line\">    # 输入公众号名称，获取公众号文章总数</span><br><span class=\"line\">    articles_sum &#x3D; test_url.articles_nums(nickname)</span><br><span class=\"line\">    count &#x3D; 5</span><br><span class=\"line\">    begin &#x3D; 0</span><br><span class=\"line\">    articles_data &#x3D; []</span><br><span class=\"line\">    articles &#x3D; []</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            # 设置一个间隔时间，亲测这个时间可以跑两三百条数据，但时间也可以更长一点</span><br><span class=\"line\">            time.sleep(60)</span><br><span class=\"line\">            print(begin)</span><br><span class=\"line\">            # 获取文章数据（如url等）大于五条</span><br><span class=\"line\">            temp &#x3D; test_url.articles(nickname, begin&#x3D;str(begin), count&#x3D;str(count))</span><br><span class=\"line\">            # 重复获取所有的文章的url，并储存到一个列表中</span><br><span class=\"line\">            articles_data +&#x3D; temp</span><br><span class=\"line\">            print(&#39;----&#123;&#125;----&#123;&#125;&#39;.format(len(temp), len(articles_data)))</span><br><span class=\"line\"></span><br><span class=\"line\">        except Exception as e:</span><br><span class=\"line\">            print(&quot;Working Error!&quot;)</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            # 当公众号被禁时进入获取文章点赞数函数进去</span><br><span class=\"line\">            get_info(articles_data, test_info)</span><br><span class=\"line\">            break</span><br><span class=\"line\">        begin +&#x3D; count</span><br><span class=\"line\">        if begin &gt; 10:</span><br><span class=\"line\">            print(&#39;End!!&#39;)</span><br><span class=\"line\">            # 当得到数据时进入获取文章点赞数函数进去</span><br><span class=\"line\">            get_info(articles_data, test_info)</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;第&#123;&#125;篇文章爬取失败，请过段时间再次尝试或换个帐号继续爬取&quot;.format(begin))</span><br><span class=\"line\">    print(&quot;Success!!!!&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>方法二（分部检测）：</p>\n<ol>\n<li><p>在项目文件夹中有个test文件夹进入后</p>\n<p><img src=\"http://photo.jomeswang.top/20200513173431.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"2-3-遇到的Bug\"><a href=\"#2-3-遇到的Bug\" class=\"headerlink\" title=\"2.3 遇到的Bug\"></a>2.3 遇到的Bug</h3><ol>\n<li>由于打开的文章获取的token和要去爬的公众号不属于同一公众号，于是会报这个错误。所以要重新打开相同的公众号文章获取token和cookie。</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200513180206.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><img src=\"http://photo.jomeswang.top/20200513181103.png\" alt=\"\"></li>\n</ol>\n","categories":["爬虫"],"tags":["python"]},{"title":"数据分析之Pandas 分组聚合","url":"/posts/2d6b5bea/","content":"<p>Pandas分组与聚合</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一：分组-groupby\"><a href=\"#一：分组-groupby\" class=\"headerlink\" title=\"一：分组 (groupby)\"></a>一：分组 (groupby)</h2><ul>\n<li>对数据集进行分组，然后对每组进行统计分析</li>\n<li>SQL能够对数据进行过滤，分组聚合</li>\n<li>pandas能利用groupby进行更加复杂的分组运算</li>\n<li>分组运算过程：split-&gt;apply-&gt;combine<ol>\n<li>拆分：进行分组的根据</li>\n<li>应用：每个分组运行的计算规则</li>\n<li>合并：把每个分组的计算结果合并起来</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200510094658.png\" alt=\"\"></p>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">dict_obj = &#123;<span class=\"string\">'key1'</span> : [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, </span><br><span class=\"line\">                      <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>],</span><br><span class=\"line\">            <span class=\"string\">'key2'</span> : [<span class=\"string\">'one'</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'two'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">            <span class=\"string\">'data1'</span>: np.random.randn(<span class=\"number\">8</span>),</span><br><span class=\"line\">            <span class=\"string\">'data2'</span>: np.random.randn(<span class=\"number\">8</span>)&#125;</span><br><span class=\"line\">df_obj = pd.DataFrame(dict_obj)</span><br><span class=\"line\">print(df_obj)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">      data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.974685</span> <span class=\"number\">-0.672494</span>    a    one</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.214324</span>  <span class=\"number\">0.758372</span>    b    one</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.508838</span>  <span class=\"number\">0.392787</span>    a    two</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">0.522911</span>  <span class=\"number\">0.630814</span>    b  three</span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">1.347359</span> <span class=\"number\">-0.177858</span>    a    two</span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">-0.264616</span>  <span class=\"number\">1.017155</span>    b    two</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">-0.624708</span>  <span class=\"number\">0.450885</span>    a    one</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">-1.019229</span> <span class=\"number\">-1.143825</span>    a  three</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一、GroupBy对象：DataFrameGroupBy，SeriesGroupBy\"><a href=\"#一、GroupBy对象：DataFrameGroupBy，SeriesGroupBy\" class=\"headerlink\" title=\"一、GroupBy对象：DataFrameGroupBy，SeriesGroupBy\"></a>一、GroupBy对象：DataFrameGroupBy，SeriesGroupBy</h3><h4 id=\"1-分组操作\"><a href=\"#1-分组操作\" class=\"headerlink\" title=\"1. 分组操作\"></a>1. 分组操作</h4><blockquote>\n<p>groupby()进行分组，GroupBy对象没有进行实际运算，只是包含分组的中间数据</p>\n<p>按列名分组：obj.groupby(‘label’)</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dataframe根据key1进行分组</span></span><br><span class=\"line\">print(type(df_obj.groupby(<span class=\"string\">'key1'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dataframe的 data1 列根据 key1 进行分组</span></span><br><span class=\"line\">print(type(df_obj[<span class=\"string\">'data1'</span>].groupby(df_obj[<span class=\"string\">'key1'</span>])))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">pandas</span>.<span class=\"title\">core</span>.<span class=\"title\">groupby</span>.<span class=\"title\">DataFrameGroupBy</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">pandas</span>.<span class=\"title\">core</span>.<span class=\"title\">groupby</span>.<span class=\"title\">SeriesGroupBy</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-分组运算\"><a href=\"#2-分组运算\" class=\"headerlink\" title=\"2. 分组运算\"></a>2. 分组运算</h4><blockquote>\n<p>对GroupBy对象进行分组运算/多重分组运算，如mean()</p>\n<p>非数值数据不进行分组运算</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分组运算</span></span><br><span class=\"line\">grouped1 = df_obj.groupby(<span class=\"string\">'key1'</span>)</span><br><span class=\"line\">print(grouped1.mean())</span><br><span class=\"line\"></span><br><span class=\"line\">grouped2 = df_obj[<span class=\"string\">'data1'</span>].groupby(df_obj[<span class=\"string\">'key1'</span>])</span><br><span class=\"line\">print(grouped2.mean())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">         data1     data2</span><br><span class=\"line\">key1                    </span><br><span class=\"line\">a     <span class=\"number\">0.437389</span> <span class=\"number\">-0.230101</span></span><br><span class=\"line\">b     <span class=\"number\">0.014657</span>  <span class=\"number\">0.802114</span></span><br><span class=\"line\">key1</span><br><span class=\"line\">a    <span class=\"number\">0.437389</span></span><br><span class=\"line\">b    <span class=\"number\">0.014657</span></span><br><span class=\"line\">Name: data1, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>size() 返回每个分组的元素个数</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># size</span></span><br><span class=\"line\">print(grouped1.size())</span><br><span class=\"line\">print(grouped2.size())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">key1</span><br><span class=\"line\">a    <span class=\"number\">5</span></span><br><span class=\"line\">b    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">key1</span><br><span class=\"line\">a    <span class=\"number\">5</span></span><br><span class=\"line\">b    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-按自定义的key分组\"><a href=\"#3-按自定义的key分组\" class=\"headerlink\" title=\"3. 按自定义的key分组\"></a>3. 按自定义的key分组</h4><blockquote>\n<p>obj.groupby(self_def_key)</p>\n<p>自定义的key可为列表或多层列表</p>\n<p>obj.groupby([‘label1’, ‘label2’])-&gt;多层dataframe</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按自定义key分组，列表</span></span><br><span class=\"line\">self_def_key = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">print(df_obj.groupby(self_def_key).size())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按自定义key分组，多层列表</span></span><br><span class=\"line\">print(df_obj.groupby([df_obj[<span class=\"string\">'key1'</span>], df_obj[<span class=\"string\">'key2'</span>]]).size())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按多个列多层分组</span></span><br><span class=\"line\">grouped2 = df_obj.groupby([<span class=\"string\">'key1'</span>, <span class=\"string\">'key2'</span>])</span><br><span class=\"line\">print(grouped2.size())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多层分组按key的顺序进行</span></span><br><span class=\"line\">grouped3 = df_obj.groupby([<span class=\"string\">'key2'</span>, <span class=\"string\">'key1'</span>])</span><br><span class=\"line\">print(grouped3.mean())</span><br><span class=\"line\"><span class=\"comment\"># unstack可以将多层索引的结果转换成单层的dataframe</span></span><br><span class=\"line\">print(grouped3.mean().unstack())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">5</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">7</span>    <span class=\"number\">1</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">key1  key2 </span><br><span class=\"line\">a     one      <span class=\"number\">2</span></span><br><span class=\"line\">      three    <span class=\"number\">1</span></span><br><span class=\"line\">      two      <span class=\"number\">2</span></span><br><span class=\"line\">b     one      <span class=\"number\">1</span></span><br><span class=\"line\">      three    <span class=\"number\">1</span></span><br><span class=\"line\">      two      <span class=\"number\">1</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">key1  key2 </span><br><span class=\"line\">a     one      <span class=\"number\">2</span></span><br><span class=\"line\">      three    <span class=\"number\">1</span></span><br><span class=\"line\">      two      <span class=\"number\">2</span></span><br><span class=\"line\">b     one      <span class=\"number\">1</span></span><br><span class=\"line\">      three    <span class=\"number\">1</span></span><br><span class=\"line\">      two      <span class=\"number\">1</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">               data1     data2</span><br><span class=\"line\">key2  key1                    </span><br><span class=\"line\">one   a     <span class=\"number\">0.174988</span> <span class=\"number\">-0.110804</span></span><br><span class=\"line\">      b    <span class=\"number\">-0.214324</span>  <span class=\"number\">0.758372</span></span><br><span class=\"line\">three a    <span class=\"number\">-1.019229</span> <span class=\"number\">-1.143825</span></span><br><span class=\"line\">      b     <span class=\"number\">0.522911</span>  <span class=\"number\">0.630814</span></span><br><span class=\"line\">two   a     <span class=\"number\">1.428099</span>  <span class=\"number\">0.107465</span></span><br><span class=\"line\">      b    <span class=\"number\">-0.264616</span>  <span class=\"number\">1.017155</span></span><br><span class=\"line\"></span><br><span class=\"line\">          data1               data2          </span><br><span class=\"line\">key1          a         b         a         b</span><br><span class=\"line\">key2                                         </span><br><span class=\"line\">one    <span class=\"number\">0.174988</span> <span class=\"number\">-0.214324</span> <span class=\"number\">-0.110804</span>  <span class=\"number\">0.758372</span></span><br><span class=\"line\">three <span class=\"number\">-1.019229</span>  <span class=\"number\">0.522911</span> <span class=\"number\">-1.143825</span>  <span class=\"number\">0.630814</span></span><br><span class=\"line\">two    <span class=\"number\">1.428099</span> <span class=\"number\">-0.264616</span>  <span class=\"number\">0.107465</span>  <span class=\"number\">1.017155</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、GroupBy对象支持迭代操作\"><a href=\"#二、GroupBy对象支持迭代操作\" class=\"headerlink\" title=\"二、GroupBy对象支持迭代操作\"></a>二、GroupBy对象支持迭代操作</h3><blockquote>\n<p>每次迭代返回一个元组 (group_name, group_data)</p>\n<p>可用于分组数据的具体运算</p>\n</blockquote>\n<h4 id=\"1-单层分组\"><a href=\"#1-单层分组\" class=\"headerlink\" title=\"1. 单层分组\"></a>1. 单层分组</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单层分组，根据key1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> group_name, group_data <span class=\"keyword\">in</span> grouped1:</span><br><span class=\"line\">    print(group_name)</span><br><span class=\"line\">    print(group_data)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">      data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.974685</span> <span class=\"number\">-0.672494</span>    a    one</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.508838</span>  <span class=\"number\">0.392787</span>    a    two</span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">1.347359</span> <span class=\"number\">-0.177858</span>    a    two</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">-0.624708</span>  <span class=\"number\">0.450885</span>    a    one</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">-1.019229</span> <span class=\"number\">-1.143825</span>    a  three</span><br><span class=\"line\"></span><br><span class=\"line\">b</span><br><span class=\"line\">      data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.214324</span>  <span class=\"number\">0.758372</span>    b    one</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">0.522911</span>  <span class=\"number\">0.630814</span>    b  three</span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">-0.264616</span>  <span class=\"number\">1.017155</span>    b    two</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-多层分组\"><a href=\"#2-多层分组\" class=\"headerlink\" title=\"2. 多层分组\"></a>2. 多层分组</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多层分组，根据key1 和 key2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> group_name, group_data <span class=\"keyword\">in</span> grouped2:</span><br><span class=\"line\">    print(group_name)</span><br><span class=\"line\">    print(group_data)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"string\">'one'</span>)</span><br><span class=\"line\">      data1     data2 key1 key2</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.974685</span> <span class=\"number\">-0.672494</span>    a  one</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">-0.624708</span>  <span class=\"number\">0.450885</span>    a  one</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"string\">'three'</span>)</span><br><span class=\"line\">      data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">-1.019229</span> <span class=\"number\">-1.143825</span>    a  three</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"string\">'two'</span>)</span><br><span class=\"line\">      data1     data2 key1 key2</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.508838</span>  <span class=\"number\">0.392787</span>    a  two</span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">1.347359</span> <span class=\"number\">-0.177858</span>    a  two</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'b'</span>, <span class=\"string\">'one'</span>)</span><br><span class=\"line\">      data1     data2 key1 key2</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.214324</span>  <span class=\"number\">0.758372</span>    b  one</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'b'</span>, <span class=\"string\">'three'</span>)</span><br><span class=\"line\">      data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">0.522911</span>  <span class=\"number\">0.630814</span>    b  three</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">'b'</span>, <span class=\"string\">'two'</span>)</span><br><span class=\"line\">      data1     data2 key1 key2</span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">-0.264616</span>  <span class=\"number\">1.017155</span>    b  two</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、GroupBy对象可以转换成列表或字典\"><a href=\"#三、GroupBy对象可以转换成列表或字典\" class=\"headerlink\" title=\"三、GroupBy对象可以转换成列表或字典\"></a>三、GroupBy对象可以转换成列表或字典</h3><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># GroupBy对象转换list</span></span><br><span class=\"line\">print(list(grouped1))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GroupBy对象转换dict</span></span><br><span class=\"line\">print(dict(list(grouped1)))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[(<span class=\"string\">'a'</span>,       data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.974685</span> <span class=\"number\">-0.672494</span>    a    one</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.508838</span>  <span class=\"number\">0.392787</span>    a    two</span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">1.347359</span> <span class=\"number\">-0.177858</span>    a    two</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">-0.624708</span>  <span class=\"number\">0.450885</span>    a    one</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">-1.019229</span> <span class=\"number\">-1.143825</span>    a  three), </span><br><span class=\"line\">(<span class=\"string\">'b'</span>,       data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.214324</span>  <span class=\"number\">0.758372</span>    b    one</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">0.522911</span>  <span class=\"number\">0.630814</span>    b  three</span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">-0.264616</span>  <span class=\"number\">1.017155</span>    b    two)]</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">'a'</span>:       data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.974685</span> <span class=\"number\">-0.672494</span>    a    one</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.508838</span>  <span class=\"number\">0.392787</span>    a    two</span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">1.347359</span> <span class=\"number\">-0.177858</span>    a    two</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">-0.624708</span>  <span class=\"number\">0.450885</span>    a    one</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">-1.019229</span> <span class=\"number\">-1.143825</span>    a  three, </span><br><span class=\"line\"><span class=\"string\">'b'</span>:       data1     data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.214324</span>  <span class=\"number\">0.758372</span>    b    one</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">0.522911</span>  <span class=\"number\">0.630814</span>    b  three</span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">-0.264616</span>  <span class=\"number\">1.017155</span>    b    two&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-按列分组、按数据类型分组\"><a href=\"#1-按列分组、按数据类型分组\" class=\"headerlink\" title=\"1. 按列分组、按数据类型分组\"></a>1. 按列分组、按数据类型分组</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按列分组</span></span><br><span class=\"line\">print(df_obj.dtypes)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按数据类型分组</span></span><br><span class=\"line\">print(df_obj.groupby(df_obj.dtypes, axis=<span class=\"number\">1</span>).size())</span><br><span class=\"line\">print(df_obj.groupby(df_obj.dtypes, axis=<span class=\"number\">1</span>).sum())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">data1    float64</span><br><span class=\"line\">data2    float64</span><br><span class=\"line\">key1      object</span><br><span class=\"line\">key2      object</span><br><span class=\"line\">dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\">float64    <span class=\"number\">2</span></span><br><span class=\"line\">object     <span class=\"number\">2</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">    float64  object</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.302191</span>    a one</span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">0.544048</span>    b one</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.901626</span>    a two</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1.153725</span>  b three</span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">1.169501</span>    a two</span><br><span class=\"line\"><span class=\"number\">5</span>  <span class=\"number\">0.752539</span>    b two</span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">-0.173823</span>    a one</span><br><span class=\"line\"><span class=\"number\">7</span> <span class=\"number\">-2.163054</span>  a three</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-其他分组方法\"><a href=\"#2-其他分组方法\" class=\"headerlink\" title=\"2. 其他分组方法\"></a>2. 其他分组方法</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df_obj2 = pd.DataFrame(np.random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>, (<span class=\"number\">5</span>,<span class=\"number\">5</span>)),</span><br><span class=\"line\">                       columns=[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>],</span><br><span class=\"line\">                       index=[<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>])</span><br><span class=\"line\">df_obj2.ix[<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">4</span>] = np.NaN</span><br><span class=\"line\">print(df_obj2)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   a    b    c    d  e</span><br><span class=\"line\">A  <span class=\"number\">7</span>  <span class=\"number\">2.0</span>  <span class=\"number\">4.0</span>  <span class=\"number\">5.0</span>  <span class=\"number\">8</span></span><br><span class=\"line\">B  <span class=\"number\">4</span>  NaN  NaN  NaN  <span class=\"number\">1</span></span><br><span class=\"line\">C  <span class=\"number\">3</span>  <span class=\"number\">2.0</span>  <span class=\"number\">5.0</span>  <span class=\"number\">4.0</span>  <span class=\"number\">6</span></span><br><span class=\"line\">D  <span class=\"number\">3</span>  <span class=\"number\">1.0</span>  <span class=\"number\">9.0</span>  <span class=\"number\">7.0</span>  <span class=\"number\">3</span></span><br><span class=\"line\">E  <span class=\"number\">6</span>  <span class=\"number\">1.0</span>  <span class=\"number\">6.0</span>  <span class=\"number\">8.0</span>  <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-通过字典分组\"><a href=\"#3-通过字典分组\" class=\"headerlink\" title=\"3. 通过字典分组\"></a>3. 通过字典分组</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过字典分组</span></span><br><span class=\"line\">mapping_dict = &#123;<span class=\"string\">'a'</span>:<span class=\"string\">'Python'</span>, <span class=\"string\">'b'</span>:<span class=\"string\">'Python'</span>, <span class=\"string\">'c'</span>:<span class=\"string\">'Java'</span>, <span class=\"string\">'d'</span>:<span class=\"string\">'C'</span>, <span class=\"string\">'e'</span>:<span class=\"string\">'Java'</span>&#125;</span><br><span class=\"line\">print(df_obj2.groupby(mapping_dict, axis=<span class=\"number\">1</span>).size())</span><br><span class=\"line\">print(df_obj2.groupby(mapping_dict, axis=<span class=\"number\">1</span>).count()) <span class=\"comment\"># 非NaN的个数</span></span><br><span class=\"line\">print(df_obj2.groupby(mapping_dict, axis=<span class=\"number\">1</span>).sum())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">C         <span class=\"number\">1</span></span><br><span class=\"line\">Java      <span class=\"number\">2</span></span><br><span class=\"line\">Python    <span class=\"number\">2</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">   C  Java  Python</span><br><span class=\"line\">A  <span class=\"number\">1</span>     <span class=\"number\">2</span>       <span class=\"number\">2</span></span><br><span class=\"line\">B  <span class=\"number\">0</span>     <span class=\"number\">1</span>       <span class=\"number\">1</span></span><br><span class=\"line\">C  <span class=\"number\">1</span>     <span class=\"number\">2</span>       <span class=\"number\">2</span></span><br><span class=\"line\">D  <span class=\"number\">1</span>     <span class=\"number\">2</span>       <span class=\"number\">2</span></span><br><span class=\"line\">E  <span class=\"number\">1</span>     <span class=\"number\">2</span>       <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">     C  Java  Python</span><br><span class=\"line\">A  <span class=\"number\">5.0</span>  <span class=\"number\">12.0</span>     <span class=\"number\">9.0</span></span><br><span class=\"line\">B  NaN   <span class=\"number\">1.0</span>     <span class=\"number\">4.0</span></span><br><span class=\"line\">C  <span class=\"number\">4.0</span>  <span class=\"number\">11.0</span>     <span class=\"number\">5.0</span></span><br><span class=\"line\">D  <span class=\"number\">7.0</span>  <span class=\"number\">12.0</span>     <span class=\"number\">4.0</span></span><br><span class=\"line\">E  <span class=\"number\">8.0</span>   <span class=\"number\">7.0</span>     <span class=\"number\">7.0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-通过函数分组，函数传入的参数为行索引或列索引\"><a href=\"#4-通过函数分组，函数传入的参数为行索引或列索引\" class=\"headerlink\" title=\"4. 通过函数分组，函数传入的参数为行索引或列索引\"></a>4. 通过函数分组，函数传入的参数为行索引或列索引</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过函数分组</span></span><br><span class=\"line\">df_obj3 = pd.DataFrame(np.random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>, (<span class=\"number\">5</span>,<span class=\"number\">5</span>)),</span><br><span class=\"line\">                       columns=[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>],</span><br><span class=\"line\">                       index=[<span class=\"string\">'AA'</span>, <span class=\"string\">'BBB'</span>, <span class=\"string\">'CC'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'EE'</span>])</span><br><span class=\"line\"><span class=\"comment\">#df_obj3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">group_key</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        idx 为列索引或行索引</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\">#return idx</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len(idx)</span><br><span class=\"line\"></span><br><span class=\"line\">print(df_obj3.groupby(group_key).size())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以上自定义函数等价于</span></span><br><span class=\"line\"><span class=\"comment\">#df_obj3.groupby(len).size()</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">1</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-通过索引级别分组\"><a href=\"#5-通过索引级别分组\" class=\"headerlink\" title=\"5. 通过索引级别分组\"></a>5. 通过索引级别分组</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过索引级别分组</span></span><br><span class=\"line\">columns = pd.MultiIndex.from_arrays([[<span class=\"string\">'Python'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'Python'</span>, <span class=\"string\">'Java'</span>, <span class=\"string\">'Python'</span>],</span><br><span class=\"line\">                                     [<span class=\"string\">'A'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'B'</span>]], names=[<span class=\"string\">'language'</span>, <span class=\"string\">'index'</span>])</span><br><span class=\"line\">df_obj4 = pd.DataFrame(np.random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>, (<span class=\"number\">5</span>, <span class=\"number\">5</span>)), columns=columns)</span><br><span class=\"line\">print(df_obj4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据language进行分组</span></span><br><span class=\"line\">print(df_obj4.groupby(level=<span class=\"string\">'language'</span>, axis=<span class=\"number\">1</span>).sum())</span><br><span class=\"line\"><span class=\"comment\"># 根据index进行分组</span></span><br><span class=\"line\">print(df_obj4.groupby(level=<span class=\"string\">'index'</span>, axis=<span class=\"number\">1</span>).sum())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">language Python Java Python Java Python</span><br><span class=\"line\">index         A    A      B    C      B</span><br><span class=\"line\"><span class=\"number\">0</span>             <span class=\"number\">2</span>    <span class=\"number\">7</span>      <span class=\"number\">8</span>    <span class=\"number\">4</span>      <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span>             <span class=\"number\">5</span>    <span class=\"number\">2</span>      <span class=\"number\">6</span>    <span class=\"number\">1</span>      <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span>             <span class=\"number\">6</span>    <span class=\"number\">4</span>      <span class=\"number\">4</span>    <span class=\"number\">5</span>      <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span>             <span class=\"number\">4</span>    <span class=\"number\">7</span>      <span class=\"number\">4</span>    <span class=\"number\">3</span>      <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span>             <span class=\"number\">7</span>    <span class=\"number\">4</span>      <span class=\"number\">3</span>    <span class=\"number\">4</span>      <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">language  Java  Python</span><br><span class=\"line\"><span class=\"number\">0</span>           <span class=\"number\">11</span>      <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">1</span>            <span class=\"number\">3</span>      <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">2</span>            <span class=\"number\">9</span>      <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">3</span>           <span class=\"number\">10</span>       <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">4</span>            <span class=\"number\">8</span>      <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">index   A   B  C</span><br><span class=\"line\"><span class=\"number\">0</span>       <span class=\"number\">9</span>  <span class=\"number\">11</span>  <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>       <span class=\"number\">7</span>   <span class=\"number\">8</span>  <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span>      <span class=\"number\">10</span>   <span class=\"number\">6</span>  <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span>      <span class=\"number\">11</span>   <span class=\"number\">5</span>  <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span>      <span class=\"number\">11</span>  <span class=\"number\">11</span>  <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二：聚合-aggregation\"><a href=\"#二：聚合-aggregation\" class=\"headerlink\" title=\"二：聚合 (aggregation)\"></a>二：聚合 (aggregation)</h2><ul>\n<li>数组产生标量的过程，如mean()、count()等</li>\n<li>常用于对分组后的数据进行计算</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">dict_obj = &#123;<span class=\"string\">'key1'</span> : [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, </span><br><span class=\"line\">                      <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>],</span><br><span class=\"line\">            <span class=\"string\">'key2'</span> : [<span class=\"string\">'one'</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'two'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">            <span class=\"string\">'data1'</span>: np.random.randint(<span class=\"number\">1</span>,<span class=\"number\">10</span>, <span class=\"number\">8</span>),</span><br><span class=\"line\">            <span class=\"string\">'data2'</span>: np.random.randint(<span class=\"number\">1</span>,<span class=\"number\">10</span>, <span class=\"number\">8</span>)&#125;</span><br><span class=\"line\">df_obj5 = pd.DataFrame(dict_obj)</span><br><span class=\"line\">print(df_obj5)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   data1  data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">0</span>      <span class=\"number\">3</span>      <span class=\"number\">7</span>    a    one</span><br><span class=\"line\"><span class=\"number\">1</span>      <span class=\"number\">1</span>      <span class=\"number\">5</span>    b    one</span><br><span class=\"line\"><span class=\"number\">2</span>      <span class=\"number\">7</span>      <span class=\"number\">4</span>    a    two</span><br><span class=\"line\"><span class=\"number\">3</span>      <span class=\"number\">2</span>      <span class=\"number\">4</span>    b  three</span><br><span class=\"line\"><span class=\"number\">4</span>      <span class=\"number\">6</span>      <span class=\"number\">4</span>    a    two</span><br><span class=\"line\"><span class=\"number\">5</span>      <span class=\"number\">9</span>      <span class=\"number\">9</span>    b    two</span><br><span class=\"line\"><span class=\"number\">6</span>      <span class=\"number\">3</span>      <span class=\"number\">5</span>    a    one</span><br><span class=\"line\"><span class=\"number\">7</span>      <span class=\"number\">8</span>      <span class=\"number\">4</span>    a  three</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-内置的聚合函数\"><a href=\"#1-内置的聚合函数\" class=\"headerlink\" title=\"1. 内置的聚合函数\"></a>1. 内置的聚合函数</h3><blockquote>\n<p>sum(), mean(), max(), min(), count(), size(), describe()</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).sum())</span><br><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).max())</span><br><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).min())</span><br><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).mean())</span><br><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).size())</span><br><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).count())</span><br><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).describe())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">      data1  data2</span><br><span class=\"line\">key1              </span><br><span class=\"line\">a        <span class=\"number\">27</span>     <span class=\"number\">24</span></span><br><span class=\"line\">b        <span class=\"number\">12</span>     <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">      data1  data2 key2</span><br><span class=\"line\">key1                   </span><br><span class=\"line\">a         <span class=\"number\">8</span>      <span class=\"number\">7</span>  two</span><br><span class=\"line\">b         <span class=\"number\">9</span>      <span class=\"number\">9</span>  two</span><br><span class=\"line\"></span><br><span class=\"line\">      data1  data2 key2</span><br><span class=\"line\">key1                   </span><br><span class=\"line\">a         <span class=\"number\">3</span>      <span class=\"number\">4</span>  one</span><br><span class=\"line\">b         <span class=\"number\">1</span>      <span class=\"number\">4</span>  one</span><br><span class=\"line\"></span><br><span class=\"line\">      data1  data2</span><br><span class=\"line\">key1              </span><br><span class=\"line\">a       <span class=\"number\">5.4</span>    <span class=\"number\">4.8</span></span><br><span class=\"line\">b       <span class=\"number\">4.0</span>    <span class=\"number\">6.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">key1</span><br><span class=\"line\">a    <span class=\"number\">5</span></span><br><span class=\"line\">b    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">      data1  data2  key2</span><br><span class=\"line\">key1                    </span><br><span class=\"line\">a         <span class=\"number\">5</span>      <span class=\"number\">5</span>     <span class=\"number\">5</span></span><br><span class=\"line\">b         <span class=\"number\">3</span>      <span class=\"number\">3</span>     <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">               data1     data2</span><br><span class=\"line\">key1                          </span><br><span class=\"line\">a    count  <span class=\"number\">5.000000</span>  <span class=\"number\">5.000000</span></span><br><span class=\"line\">     mean   <span class=\"number\">5.400000</span>  <span class=\"number\">4.800000</span></span><br><span class=\"line\">     std    <span class=\"number\">2.302173</span>  <span class=\"number\">1.303840</span></span><br><span class=\"line\">     min    <span class=\"number\">3.000000</span>  <span class=\"number\">4.000000</span></span><br><span class=\"line\">     <span class=\"number\">25</span>%    <span class=\"number\">3.000000</span>  <span class=\"number\">4.000000</span></span><br><span class=\"line\">     <span class=\"number\">50</span>%    <span class=\"number\">6.000000</span>  <span class=\"number\">4.000000</span></span><br><span class=\"line\">     <span class=\"number\">75</span>%    <span class=\"number\">7.000000</span>  <span class=\"number\">5.000000</span></span><br><span class=\"line\">     max    <span class=\"number\">8.000000</span>  <span class=\"number\">7.000000</span></span><br><span class=\"line\">b    count  <span class=\"number\">3.000000</span>  <span class=\"number\">3.000000</span></span><br><span class=\"line\">     mean   <span class=\"number\">4.000000</span>  <span class=\"number\">6.000000</span></span><br><span class=\"line\">     std    <span class=\"number\">4.358899</span>  <span class=\"number\">2.645751</span></span><br><span class=\"line\">     min    <span class=\"number\">1.000000</span>  <span class=\"number\">4.000000</span></span><br><span class=\"line\">     <span class=\"number\">25</span>%    <span class=\"number\">1.500000</span>  <span class=\"number\">4.500000</span></span><br><span class=\"line\">     <span class=\"number\">50</span>%    <span class=\"number\">2.000000</span>  <span class=\"number\">5.000000</span></span><br><span class=\"line\">     <span class=\"number\">75</span>%    <span class=\"number\">5.500000</span>  <span class=\"number\">7.000000</span></span><br><span class=\"line\">     max    <span class=\"number\">9.000000</span>  <span class=\"number\">9.000000</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-可自定义函数，传入agg方法中\"><a href=\"#2-可自定义函数，传入agg方法中\" class=\"headerlink\" title=\"2. 可自定义函数，传入agg方法中\"></a>2. 可自定义函数，传入agg方法中</h3><blockquote>\n<p>grouped.agg(func)</p>\n<p>func的参数为groupby索引对应的记录</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义聚合函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peak_range</span><span class=\"params\">(df)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        返回数值范围</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\">#print type(df) #参数为索引所对应的记录</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> df.max() - df.min()</span><br><span class=\"line\"></span><br><span class=\"line\">print(df_obj5.groupby(<span class=\"string\">'key1'</span>).agg(peak_range))</span><br><span class=\"line\">print(df_obj.groupby(<span class=\"string\">'key1'</span>).agg(<span class=\"keyword\">lambda</span> df : df.max() - df.min()))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">      data1  data2</span><br><span class=\"line\">key1              </span><br><span class=\"line\">a         <span class=\"number\">5</span>      <span class=\"number\">3</span></span><br><span class=\"line\">b         <span class=\"number\">8</span>      <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">         data1     data2</span><br><span class=\"line\">key1                    </span><br><span class=\"line\">a     <span class=\"number\">2.528067</span>  <span class=\"number\">1.594711</span></span><br><span class=\"line\">b     <span class=\"number\">0.787527</span>  <span class=\"number\">0.386341</span></span><br><span class=\"line\">In [<span class=\"number\">25</span>]:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-应用多个聚合函数\"><a href=\"#3-应用多个聚合函数\" class=\"headerlink\" title=\"3. 应用多个聚合函数\"></a>3. 应用多个聚合函数</h3><blockquote>\n<p>同时应用多个函数进行聚合操作，使用函数列表</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 应用多个聚合函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时应用多个聚合函数</span></span><br><span class=\"line\">print(df_obj.groupby(<span class=\"string\">'key1'</span>).agg([<span class=\"string\">'mean'</span>, <span class=\"string\">'std'</span>, <span class=\"string\">'count'</span>, peak_range])) <span class=\"comment\"># 默认列名为函数名</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(df_obj.groupby(<span class=\"string\">'key1'</span>).agg([<span class=\"string\">'mean'</span>, <span class=\"string\">'std'</span>, <span class=\"string\">'count'</span>, (<span class=\"string\">'range'</span>, peak_range)])) <span class=\"comment\"># 通过元组提供新的列名</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">         data1                                data2                           </span><br><span class=\"line\">          mean       std count peak_range      mean       std count peak_range</span><br><span class=\"line\">key1                                                                          </span><br><span class=\"line\">a     <span class=\"number\">0.437389</span>  <span class=\"number\">1.174151</span>     <span class=\"number\">5</span>   <span class=\"number\">2.528067</span> <span class=\"number\">-0.230101</span>  <span class=\"number\">0.686488</span>     <span class=\"number\">5</span>   <span class=\"number\">1.594711</span></span><br><span class=\"line\">b     <span class=\"number\">0.014657</span>  <span class=\"number\">0.440878</span>     <span class=\"number\">3</span>   <span class=\"number\">0.787527</span>  <span class=\"number\">0.802114</span>  <span class=\"number\">0.196850</span>     <span class=\"number\">3</span>   <span class=\"number\">0.386341</span></span><br><span class=\"line\"></span><br><span class=\"line\">         data1                               data2                          </span><br><span class=\"line\">          mean       std count     range      mean       std count     range</span><br><span class=\"line\">key1                                                                        </span><br><span class=\"line\">a     <span class=\"number\">0.437389</span>  <span class=\"number\">1.174151</span>     <span class=\"number\">5</span>  <span class=\"number\">2.528067</span> <span class=\"number\">-0.230101</span>  <span class=\"number\">0.686488</span>     <span class=\"number\">5</span>  <span class=\"number\">1.594711</span></span><br><span class=\"line\">b     <span class=\"number\">0.014657</span>  <span class=\"number\">0.440878</span>     <span class=\"number\">3</span>  <span class=\"number\">0.787527</span>  <span class=\"number\">0.802114</span>  <span class=\"number\">0.196850</span>     <span class=\"number\">3</span>  <span class=\"number\">0.386341</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-对不同的列分别作用不同的聚合函数，使用dict\"><a href=\"#4-对不同的列分别作用不同的聚合函数，使用dict\" class=\"headerlink\" title=\"4. 对不同的列分别作用不同的聚合函数，使用dict\"></a>4. 对不同的列分别作用不同的聚合函数，使用dict</h3><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每列作用不同的聚合函数</span></span><br><span class=\"line\">dict_mapping = &#123;<span class=\"string\">'data1'</span>:<span class=\"string\">'mean'</span>,</span><br><span class=\"line\">                <span class=\"string\">'data2'</span>:<span class=\"string\">'sum'</span>&#125;</span><br><span class=\"line\">print(df_obj.groupby(<span class=\"string\">'key1'</span>).agg(dict_mapping))</span><br><span class=\"line\"></span><br><span class=\"line\">dict_mapping = &#123;<span class=\"string\">'data1'</span>:[<span class=\"string\">'mean'</span>,<span class=\"string\">'max'</span>],</span><br><span class=\"line\">                <span class=\"string\">'data2'</span>:<span class=\"string\">'sum'</span>&#125;</span><br><span class=\"line\">print(df_obj.groupby(<span class=\"string\">'key1'</span>).agg(dict_mapping))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">         data1     data2</span><br><span class=\"line\">key1                    </span><br><span class=\"line\">a     <span class=\"number\">0.437389</span> <span class=\"number\">-1.150505</span></span><br><span class=\"line\">b     <span class=\"number\">0.014657</span>  <span class=\"number\">2.406341</span></span><br><span class=\"line\"></span><br><span class=\"line\">         data1               data2</span><br><span class=\"line\">          mean       max       sum</span><br><span class=\"line\">key1                              </span><br><span class=\"line\">a     <span class=\"number\">0.437389</span>  <span class=\"number\">1.508838</span> <span class=\"number\">-1.150505</span></span><br><span class=\"line\">b     <span class=\"number\">0.014657</span>  <span class=\"number\">0.522911</span>  <span class=\"number\">2.406341</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-常用的内置聚合函数\"><a href=\"#5-常用的内置聚合函数\" class=\"headerlink\" title=\"5. 常用的内置聚合函数\"></a>5. 常用的内置聚合函数</h3><p><img src=\"http://photo.jomeswang.top/20200510094933.png\" alt=\"\"></p>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">dict_obj = &#123;<span class=\"string\">'key1'</span> : [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, </span><br><span class=\"line\">                      <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'a'</span>],</span><br><span class=\"line\">            <span class=\"string\">'key2'</span> : [<span class=\"string\">'one'</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>,</span><br><span class=\"line\">                      <span class=\"string\">'two'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'one'</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">            <span class=\"string\">'data1'</span>: np.random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>),</span><br><span class=\"line\">            <span class=\"string\">'data2'</span>: np.random.randint(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>)&#125;</span><br><span class=\"line\">df_obj = pd.DataFrame(dict_obj)</span><br><span class=\"line\">print(df_obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按key1分组后，计算data1，data2的统计信息并附加到原始表格中，并添加表头前缀</span></span><br><span class=\"line\">k1_sum = df_obj.groupby(<span class=\"string\">'key1'</span>).sum().add_prefix(<span class=\"string\">'sum_'</span>)</span><br><span class=\"line\">print(k1_sum)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   data1  data2 key1   key2</span><br><span class=\"line\"><span class=\"number\">0</span>      <span class=\"number\">5</span>      <span class=\"number\">1</span>    a    one</span><br><span class=\"line\"><span class=\"number\">1</span>      <span class=\"number\">7</span>      <span class=\"number\">8</span>    b    one</span><br><span class=\"line\"><span class=\"number\">2</span>      <span class=\"number\">1</span>      <span class=\"number\">9</span>    a    two</span><br><span class=\"line\"><span class=\"number\">3</span>      <span class=\"number\">2</span>      <span class=\"number\">6</span>    b  three</span><br><span class=\"line\"><span class=\"number\">4</span>      <span class=\"number\">9</span>      <span class=\"number\">8</span>    a    two</span><br><span class=\"line\"><span class=\"number\">5</span>      <span class=\"number\">8</span>      <span class=\"number\">3</span>    b    two</span><br><span class=\"line\"><span class=\"number\">6</span>      <span class=\"number\">3</span>      <span class=\"number\">5</span>    a    one</span><br><span class=\"line\"><span class=\"number\">7</span>      <span class=\"number\">8</span>      <span class=\"number\">3</span>    a  three</span><br><span class=\"line\"></span><br><span class=\"line\">      sum_data1  sum_data2</span><br><span class=\"line\">key1                      </span><br><span class=\"line\">a            <span class=\"number\">26</span>         <span class=\"number\">26</span></span><br><span class=\"line\">b            <span class=\"number\">17</span>         <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>聚合运算后会改变原始数据的形状，</p>\n<p>如何保持原始数据的形状?</p>\n</blockquote>\n<h4 id=\"1-merge\"><a href=\"#1-merge\" class=\"headerlink\" title=\"1. merge\"></a>1. merge</h4><blockquote>\n<p>使用merge的外连接，比较复杂</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法1，使用merge</span></span><br><span class=\"line\">k1_sum_merge = pd.merge(df_obj, k1_sum, left_on=<span class=\"string\">'key1'</span>, right_index=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(k1_sum_merge)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   data1  data2 key1   key2  sum_data1  sum_data2</span><br><span class=\"line\"><span class=\"number\">0</span>      <span class=\"number\">5</span>      <span class=\"number\">1</span>    a    one         <span class=\"number\">26</span>         <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">2</span>      <span class=\"number\">1</span>      <span class=\"number\">9</span>    a    two         <span class=\"number\">26</span>         <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">4</span>      <span class=\"number\">9</span>      <span class=\"number\">8</span>    a    two         <span class=\"number\">26</span>         <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">6</span>      <span class=\"number\">3</span>      <span class=\"number\">5</span>    a    one         <span class=\"number\">26</span>         <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">7</span>      <span class=\"number\">8</span>      <span class=\"number\">3</span>    a  three         <span class=\"number\">26</span>         <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">1</span>      <span class=\"number\">7</span>      <span class=\"number\">8</span>    b    one         <span class=\"number\">17</span>         <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">3</span>      <span class=\"number\">2</span>      <span class=\"number\">6</span>    b  three         <span class=\"number\">17</span>         <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">5</span>      <span class=\"number\">8</span>      <span class=\"number\">3</span>    b    two         <span class=\"number\">17</span>         <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-transform\"><a href=\"#2-transform\" class=\"headerlink\" title=\"2. transform\"></a>2. transform</h4><blockquote>\n<p>transform的计算结果和原始数据的形状保持一致，</p>\n<p>如：grouped.transform(np.sum)</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方法2，使用transform</span></span><br><span class=\"line\">k1_sum_tf = df_obj.groupby(<span class=\"string\">'key1'</span>).transform(np.sum).add_prefix(<span class=\"string\">'sum_'</span>)</span><br><span class=\"line\">df_obj[k1_sum_tf.columns] = k1_sum_tf</span><br><span class=\"line\">print(df_obj)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   data1  data2 key1   key2 sum_data1 sum_data2           sum_key2</span><br><span class=\"line\"><span class=\"number\">0</span>      <span class=\"number\">5</span>      <span class=\"number\">1</span>    a    one        <span class=\"number\">26</span>        <span class=\"number\">26</span>  onetwotwoonethree</span><br><span class=\"line\"><span class=\"number\">1</span>      <span class=\"number\">7</span>      <span class=\"number\">8</span>    b    one        <span class=\"number\">17</span>        <span class=\"number\">17</span>        onethreetwo</span><br><span class=\"line\"><span class=\"number\">2</span>      <span class=\"number\">1</span>      <span class=\"number\">9</span>    a    two        <span class=\"number\">26</span>        <span class=\"number\">26</span>  onetwotwoonethree</span><br><span class=\"line\"><span class=\"number\">3</span>      <span class=\"number\">2</span>      <span class=\"number\">6</span>    b  three        <span class=\"number\">17</span>        <span class=\"number\">17</span>        onethreetwo</span><br><span class=\"line\"><span class=\"number\">4</span>      <span class=\"number\">9</span>      <span class=\"number\">8</span>    a    two        <span class=\"number\">26</span>        <span class=\"number\">26</span>  onetwotwoonethree</span><br><span class=\"line\"><span class=\"number\">5</span>      <span class=\"number\">8</span>      <span class=\"number\">3</span>    b    two        <span class=\"number\">17</span>        <span class=\"number\">17</span>        onethreetwo</span><br><span class=\"line\"><span class=\"number\">6</span>      <span class=\"number\">3</span>      <span class=\"number\">5</span>    a    one        <span class=\"number\">26</span>        <span class=\"number\">26</span>  onetwotwoonethree</span><br><span class=\"line\"><span class=\"number\">7</span>      <span class=\"number\">8</span>      <span class=\"number\">3</span>    a  three        <span class=\"number\">26</span>        <span class=\"number\">26</span>  onetwotwoonethree</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>也可传入自定义函数，</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义函数传入transform</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">diff_mean</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        返回数据与均值的差值</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s - s.mean()</span><br><span class=\"line\"></span><br><span class=\"line\">print(df_obj.groupby(<span class=\"string\">'key1'</span>).transform(diff_mean))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">      data1     data2 sum_data1 sum_data2</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-0.200000</span> <span class=\"number\">-4.200000</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">1.333333</span>  <span class=\"number\">2.333333</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-4.200000</span>  <span class=\"number\">3.800000</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">-3.666667</span>  <span class=\"number\">0.333333</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">3.800000</span>  <span class=\"number\">2.800000</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">5</span>  <span class=\"number\">2.333333</span> <span class=\"number\">-2.666667</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">-2.200000</span> <span class=\"number\">-0.200000</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">7</span>  <span class=\"number\">2.800000</span> <span class=\"number\">-2.200000</span>         <span class=\"number\">0</span>         <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"groupby-apply-func\"><a href=\"#groupby-apply-func\" class=\"headerlink\" title=\"groupby.apply(func)\"></a>groupby.apply(func)</h3><blockquote>\n<p>func函数也可以在各分组上分别调用，最后结果通过pd.concat组装到一起（数据合并）</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">dataset_path = <span class=\"string\">'./starcraft.csv'</span></span><br><span class=\"line\">df_data = pd.read_csv(dataset_path, usecols=[<span class=\"string\">'LeagueIndex'</span>, <span class=\"string\">'Age'</span>, <span class=\"string\">'HoursPerWeek'</span>, </span><br><span class=\"line\">                                             <span class=\"string\">'TotalHours'</span>, <span class=\"string\">'APM'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top_n</span><span class=\"params\">(df, n=<span class=\"number\">3</span>, column=<span class=\"string\">'APM'</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        返回每个分组按 column 的 top n 数据</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> df.sort_values(by=column, ascending=<span class=\"literal\">False</span>)[:n]</span><br><span class=\"line\"></span><br><span class=\"line\">print(df_data.groupby(<span class=\"string\">'LeagueIndex'</span>).apply(top_n))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">                  LeagueIndex   Age  HoursPerWeek  TotalHours       APM</span><br><span class=\"line\">LeagueIndex                                                            </span><br><span class=\"line\"><span class=\"number\">1</span>           <span class=\"number\">2214</span>            <span class=\"number\">1</span>  <span class=\"number\">20.0</span>          <span class=\"number\">12.0</span>       <span class=\"number\">730.0</span>  <span class=\"number\">172.9530</span></span><br><span class=\"line\">            <span class=\"number\">2246</span>            <span class=\"number\">1</span>  <span class=\"number\">27.0</span>           <span class=\"number\">8.0</span>       <span class=\"number\">250.0</span>  <span class=\"number\">141.6282</span></span><br><span class=\"line\">            <span class=\"number\">1753</span>            <span class=\"number\">1</span>  <span class=\"number\">20.0</span>          <span class=\"number\">28.0</span>       <span class=\"number\">100.0</span>  <span class=\"number\">139.6362</span></span><br><span class=\"line\"><span class=\"number\">2</span>           <span class=\"number\">3062</span>            <span class=\"number\">2</span>  <span class=\"number\">20.0</span>           <span class=\"number\">6.0</span>       <span class=\"number\">100.0</span>  <span class=\"number\">179.6250</span></span><br><span class=\"line\">            <span class=\"number\">3229</span>            <span class=\"number\">2</span>  <span class=\"number\">16.0</span>          <span class=\"number\">24.0</span>       <span class=\"number\">110.0</span>  <span class=\"number\">156.7380</span></span><br><span class=\"line\">            <span class=\"number\">1520</span>            <span class=\"number\">2</span>  <span class=\"number\">29.0</span>           <span class=\"number\">6.0</span>       <span class=\"number\">250.0</span>  <span class=\"number\">151.6470</span></span><br><span class=\"line\"><span class=\"number\">3</span>           <span class=\"number\">1557</span>            <span class=\"number\">3</span>  <span class=\"number\">22.0</span>           <span class=\"number\">6.0</span>       <span class=\"number\">200.0</span>  <span class=\"number\">226.6554</span></span><br><span class=\"line\">            <span class=\"number\">484</span>             <span class=\"number\">3</span>  <span class=\"number\">19.0</span>          <span class=\"number\">42.0</span>       <span class=\"number\">450.0</span>  <span class=\"number\">220.0692</span></span><br><span class=\"line\">            <span class=\"number\">2883</span>            <span class=\"number\">3</span>  <span class=\"number\">16.0</span>           <span class=\"number\">8.0</span>       <span class=\"number\">800.0</span>  <span class=\"number\">208.9500</span></span><br><span class=\"line\"><span class=\"number\">4</span>           <span class=\"number\">2688</span>            <span class=\"number\">4</span>  <span class=\"number\">26.0</span>          <span class=\"number\">24.0</span>       <span class=\"number\">990.0</span>  <span class=\"number\">249.0210</span></span><br><span class=\"line\">            <span class=\"number\">1759</span>            <span class=\"number\">4</span>  <span class=\"number\">16.0</span>           <span class=\"number\">6.0</span>        <span class=\"number\">75.0</span>  <span class=\"number\">229.9122</span></span><br><span class=\"line\">            <span class=\"number\">2637</span>            <span class=\"number\">4</span>  <span class=\"number\">23.0</span>          <span class=\"number\">24.0</span>       <span class=\"number\">650.0</span>  <span class=\"number\">227.2272</span></span><br><span class=\"line\"><span class=\"number\">5</span>           <span class=\"number\">3277</span>            <span class=\"number\">5</span>  <span class=\"number\">18.0</span>          <span class=\"number\">16.0</span>       <span class=\"number\">950.0</span>  <span class=\"number\">372.6426</span></span><br><span class=\"line\">            <span class=\"number\">93</span>              <span class=\"number\">5</span>  <span class=\"number\">17.0</span>          <span class=\"number\">36.0</span>       <span class=\"number\">720.0</span>  <span class=\"number\">335.4990</span></span><br><span class=\"line\">            <span class=\"number\">202</span>             <span class=\"number\">5</span>  <span class=\"number\">37.0</span>          <span class=\"number\">14.0</span>       <span class=\"number\">800.0</span>  <span class=\"number\">327.7218</span></span><br><span class=\"line\"><span class=\"number\">6</span>           <span class=\"number\">734</span>             <span class=\"number\">6</span>  <span class=\"number\">16.0</span>          <span class=\"number\">28.0</span>       <span class=\"number\">730.0</span>  <span class=\"number\">389.8314</span></span><br><span class=\"line\">            <span class=\"number\">2746</span>            <span class=\"number\">6</span>  <span class=\"number\">16.0</span>          <span class=\"number\">28.0</span>      <span class=\"number\">4000.0</span>  <span class=\"number\">350.4114</span></span><br><span class=\"line\">            <span class=\"number\">1810</span>            <span class=\"number\">6</span>  <span class=\"number\">21.0</span>          <span class=\"number\">14.0</span>       <span class=\"number\">730.0</span>  <span class=\"number\">323.2506</span></span><br><span class=\"line\"><span class=\"number\">7</span>           <span class=\"number\">3127</span>            <span class=\"number\">7</span>  <span class=\"number\">23.0</span>          <span class=\"number\">42.0</span>      <span class=\"number\">2000.0</span>  <span class=\"number\">298.7952</span></span><br><span class=\"line\">            <span class=\"number\">104</span>             <span class=\"number\">7</span>  <span class=\"number\">21.0</span>          <span class=\"number\">24.0</span>      <span class=\"number\">1000.0</span>  <span class=\"number\">286.4538</span></span><br><span class=\"line\">            <span class=\"number\">1654</span>            <span class=\"number\">7</span>  <span class=\"number\">18.0</span>          <span class=\"number\">98.0</span>       <span class=\"number\">700.0</span>  <span class=\"number\">236.0316</span></span><br><span class=\"line\"><span class=\"number\">8</span>           <span class=\"number\">3393</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">375.8664</span></span><br><span class=\"line\">            <span class=\"number\">3373</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">364.8504</span></span><br><span class=\"line\">            <span class=\"number\">3372</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">355.3518</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-产生层级索引：外层索引是分组名，内层索引是df-obj的行索引\"><a href=\"#1-产生层级索引：外层索引是分组名，内层索引是df-obj的行索引\" class=\"headerlink\" title=\"1. 产生层级索引：外层索引是分组名，内层索引是df_obj的行索引\"></a>1. 产生层级索引：外层索引是分组名，内层索引是df_obj的行索引</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apply函数接收的参数会传入自定义的函数中</span></span><br><span class=\"line\">print(df_data.groupby(<span class=\"string\">'LeagueIndex'</span>).apply(top_n, n=<span class=\"number\">2</span>, column=<span class=\"string\">'Age'</span>))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">                  LeagueIndex   Age  HoursPerWeek  TotalHours       APM</span><br><span class=\"line\">LeagueIndex                                                            </span><br><span class=\"line\"><span class=\"number\">1</span>           <span class=\"number\">3146</span>            <span class=\"number\">1</span>  <span class=\"number\">40.0</span>          <span class=\"number\">12.0</span>       <span class=\"number\">150.0</span>   <span class=\"number\">38.5590</span></span><br><span class=\"line\">            <span class=\"number\">3040</span>            <span class=\"number\">1</span>  <span class=\"number\">39.0</span>          <span class=\"number\">10.0</span>       <span class=\"number\">500.0</span>   <span class=\"number\">29.8764</span></span><br><span class=\"line\"><span class=\"number\">2</span>           <span class=\"number\">920</span>             <span class=\"number\">2</span>  <span class=\"number\">43.0</span>          <span class=\"number\">10.0</span>       <span class=\"number\">730.0</span>   <span class=\"number\">86.0586</span></span><br><span class=\"line\">            <span class=\"number\">2437</span>            <span class=\"number\">2</span>  <span class=\"number\">41.0</span>           <span class=\"number\">4.0</span>       <span class=\"number\">200.0</span>   <span class=\"number\">54.2166</span></span><br><span class=\"line\"><span class=\"number\">3</span>           <span class=\"number\">1258</span>            <span class=\"number\">3</span>  <span class=\"number\">41.0</span>          <span class=\"number\">14.0</span>       <span class=\"number\">800.0</span>   <span class=\"number\">77.6472</span></span><br><span class=\"line\">            <span class=\"number\">2972</span>            <span class=\"number\">3</span>  <span class=\"number\">40.0</span>          <span class=\"number\">10.0</span>       <span class=\"number\">500.0</span>   <span class=\"number\">60.5970</span></span><br><span class=\"line\"><span class=\"number\">4</span>           <span class=\"number\">1696</span>            <span class=\"number\">4</span>  <span class=\"number\">44.0</span>           <span class=\"number\">6.0</span>       <span class=\"number\">500.0</span>   <span class=\"number\">89.5266</span></span><br><span class=\"line\">            <span class=\"number\">1729</span>            <span class=\"number\">4</span>  <span class=\"number\">39.0</span>           <span class=\"number\">8.0</span>       <span class=\"number\">500.0</span>   <span class=\"number\">86.7246</span></span><br><span class=\"line\"><span class=\"number\">5</span>           <span class=\"number\">202</span>             <span class=\"number\">5</span>  <span class=\"number\">37.0</span>          <span class=\"number\">14.0</span>       <span class=\"number\">800.0</span>  <span class=\"number\">327.7218</span></span><br><span class=\"line\">            <span class=\"number\">2745</span>            <span class=\"number\">5</span>  <span class=\"number\">37.0</span>          <span class=\"number\">18.0</span>      <span class=\"number\">1000.0</span>  <span class=\"number\">123.4098</span></span><br><span class=\"line\"><span class=\"number\">6</span>           <span class=\"number\">3069</span>            <span class=\"number\">6</span>  <span class=\"number\">31.0</span>           <span class=\"number\">8.0</span>       <span class=\"number\">800.0</span>  <span class=\"number\">133.1790</span></span><br><span class=\"line\">            <span class=\"number\">2706</span>            <span class=\"number\">6</span>  <span class=\"number\">31.0</span>           <span class=\"number\">8.0</span>       <span class=\"number\">700.0</span>   <span class=\"number\">66.9918</span></span><br><span class=\"line\"><span class=\"number\">7</span>           <span class=\"number\">2813</span>            <span class=\"number\">7</span>  <span class=\"number\">26.0</span>          <span class=\"number\">36.0</span>      <span class=\"number\">1300.0</span>  <span class=\"number\">188.5512</span></span><br><span class=\"line\">            <span class=\"number\">1992</span>            <span class=\"number\">7</span>  <span class=\"number\">26.0</span>          <span class=\"number\">24.0</span>      <span class=\"number\">1000.0</span>  <span class=\"number\">219.6690</span></span><br><span class=\"line\"><span class=\"number\">8</span>           <span class=\"number\">3340</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">189.7404</span></span><br><span class=\"line\">            <span class=\"number\">3341</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">287.8128</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-禁止层级索引-group-keys-False\"><a href=\"#2-禁止层级索引-group-keys-False\" class=\"headerlink\" title=\"2. 禁止层级索引, group_keys=False\"></a>2. 禁止层级索引, group_keys=False</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(df_data.groupby(<span class=\"string\">'LeagueIndex'</span>, group_keys=<span class=\"literal\">False</span>).apply(top_n))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">      LeagueIndex   Age  HoursPerWeek  TotalHours       APM</span><br><span class=\"line\"><span class=\"number\">2214</span>            <span class=\"number\">1</span>  <span class=\"number\">20.0</span>          <span class=\"number\">12.0</span>       <span class=\"number\">730.0</span>  <span class=\"number\">172.9530</span></span><br><span class=\"line\"><span class=\"number\">2246</span>            <span class=\"number\">1</span>  <span class=\"number\">27.0</span>           <span class=\"number\">8.0</span>       <span class=\"number\">250.0</span>  <span class=\"number\">141.6282</span></span><br><span class=\"line\"><span class=\"number\">1753</span>            <span class=\"number\">1</span>  <span class=\"number\">20.0</span>          <span class=\"number\">28.0</span>       <span class=\"number\">100.0</span>  <span class=\"number\">139.6362</span></span><br><span class=\"line\"><span class=\"number\">3062</span>            <span class=\"number\">2</span>  <span class=\"number\">20.0</span>           <span class=\"number\">6.0</span>       <span class=\"number\">100.0</span>  <span class=\"number\">179.6250</span></span><br><span class=\"line\"><span class=\"number\">3229</span>            <span class=\"number\">2</span>  <span class=\"number\">16.0</span>          <span class=\"number\">24.0</span>       <span class=\"number\">110.0</span>  <span class=\"number\">156.7380</span></span><br><span class=\"line\"><span class=\"number\">1520</span>            <span class=\"number\">2</span>  <span class=\"number\">29.0</span>           <span class=\"number\">6.0</span>       <span class=\"number\">250.0</span>  <span class=\"number\">151.6470</span></span><br><span class=\"line\"><span class=\"number\">1557</span>            <span class=\"number\">3</span>  <span class=\"number\">22.0</span>           <span class=\"number\">6.0</span>       <span class=\"number\">200.0</span>  <span class=\"number\">226.6554</span></span><br><span class=\"line\"><span class=\"number\">484</span>             <span class=\"number\">3</span>  <span class=\"number\">19.0</span>          <span class=\"number\">42.0</span>       <span class=\"number\">450.0</span>  <span class=\"number\">220.0692</span></span><br><span class=\"line\"><span class=\"number\">2883</span>            <span class=\"number\">3</span>  <span class=\"number\">16.0</span>           <span class=\"number\">8.0</span>       <span class=\"number\">800.0</span>  <span class=\"number\">208.9500</span></span><br><span class=\"line\"><span class=\"number\">2688</span>            <span class=\"number\">4</span>  <span class=\"number\">26.0</span>          <span class=\"number\">24.0</span>       <span class=\"number\">990.0</span>  <span class=\"number\">249.0210</span></span><br><span class=\"line\"><span class=\"number\">1759</span>            <span class=\"number\">4</span>  <span class=\"number\">16.0</span>           <span class=\"number\">6.0</span>        <span class=\"number\">75.0</span>  <span class=\"number\">229.9122</span></span><br><span class=\"line\"><span class=\"number\">2637</span>            <span class=\"number\">4</span>  <span class=\"number\">23.0</span>          <span class=\"number\">24.0</span>       <span class=\"number\">650.0</span>  <span class=\"number\">227.2272</span></span><br><span class=\"line\"><span class=\"number\">3277</span>            <span class=\"number\">5</span>  <span class=\"number\">18.0</span>          <span class=\"number\">16.0</span>       <span class=\"number\">950.0</span>  <span class=\"number\">372.6426</span></span><br><span class=\"line\"><span class=\"number\">93</span>              <span class=\"number\">5</span>  <span class=\"number\">17.0</span>          <span class=\"number\">36.0</span>       <span class=\"number\">720.0</span>  <span class=\"number\">335.4990</span></span><br><span class=\"line\"><span class=\"number\">202</span>             <span class=\"number\">5</span>  <span class=\"number\">37.0</span>          <span class=\"number\">14.0</span>       <span class=\"number\">800.0</span>  <span class=\"number\">327.7218</span></span><br><span class=\"line\"><span class=\"number\">734</span>             <span class=\"number\">6</span>  <span class=\"number\">16.0</span>          <span class=\"number\">28.0</span>       <span class=\"number\">730.0</span>  <span class=\"number\">389.8314</span></span><br><span class=\"line\"><span class=\"number\">2746</span>            <span class=\"number\">6</span>  <span class=\"number\">16.0</span>          <span class=\"number\">28.0</span>      <span class=\"number\">4000.0</span>  <span class=\"number\">350.4114</span></span><br><span class=\"line\"><span class=\"number\">1810</span>            <span class=\"number\">6</span>  <span class=\"number\">21.0</span>          <span class=\"number\">14.0</span>       <span class=\"number\">730.0</span>  <span class=\"number\">323.2506</span></span><br><span class=\"line\"><span class=\"number\">3127</span>            <span class=\"number\">7</span>  <span class=\"number\">23.0</span>          <span class=\"number\">42.0</span>      <span class=\"number\">2000.0</span>  <span class=\"number\">298.7952</span></span><br><span class=\"line\"><span class=\"number\">104</span>             <span class=\"number\">7</span>  <span class=\"number\">21.0</span>          <span class=\"number\">24.0</span>      <span class=\"number\">1000.0</span>  <span class=\"number\">286.4538</span></span><br><span class=\"line\"><span class=\"number\">1654</span>            <span class=\"number\">7</span>  <span class=\"number\">18.0</span>          <span class=\"number\">98.0</span>       <span class=\"number\">700.0</span>  <span class=\"number\">236.0316</span></span><br><span class=\"line\"><span class=\"number\">3393</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">375.8664</span></span><br><span class=\"line\"><span class=\"number\">3373</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">364.8504</span></span><br><span class=\"line\"><span class=\"number\">3372</span>            <span class=\"number\">8</span>   NaN           NaN         NaN  <span class=\"number\">355.3518</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>apply可以用来处理不同分组内的缺失数据填充 ，填充该分组的均值。 </p>\n</blockquote>\n","categories":["数据分析"],"tags":["python","数据分析"]},{"title":"数据分析之Pandas","url":"/posts/a2fd99a8/","content":"<blockquote>\n<p>Pandas的名称来自于面板数据（panel data）和Python数据分析（data analysis）。</p>\n<p>Pandas是一个强大的分析结构化数据的工具集，基于NumPy构建，提供了 <strong>高级数据结构</strong> 和 <strong>数据操作工具</strong>，它是使Python成为强大而高效的数据分析环境的重要因素之一</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：数据结构\"><a href=\"#一：数据结构\" class=\"headerlink\" title=\"一：数据结构\"></a>一：数据结构</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n\n<p>Pandas有两个最主要也是最重要的数据结构： <strong>Series</strong> 和 <strong>DataFrame</strong></p>\n<h3 id=\"1-1-Series\"><a href=\"#1-1-Series\" class=\"headerlink\" title=\"1.1     Series\"></a>1.1     Series</h3><p>Series是一种类似于一维数组的 <strong>对象</strong>，由一组数据（各种NumPy数据类型）以及一组与之对应的索引（数据标签）组成。</p>\n<ul>\n<li>类似一维数组的对象</li>\n<li>由数据和索引组成<ul>\n<li>索引(index)在左，数据(values)在右</li>\n<li>索引是自动创建的</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200507222352.png\" alt=\"\"></p>\n<h4 id=\"1-通过list构建Series\"><a href=\"#1-通过list构建Series\" class=\"headerlink\" title=\"1. 通过list构建Series\"></a>1. 通过list构建Series</h4><blockquote>\n<p>ser_obj = pd.Series(range(10))</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过list构建Series</span></span><br><span class=\"line\">ser_obj = pd.Series(range(<span class=\"number\">10</span>, <span class=\"number\">20</span>))</span><br><span class=\"line\">print(ser_obj.head(<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(ser_obj))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">12</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">pandas</span>.<span class=\"title\">core</span>.<span class=\"title\">series</span>.<span class=\"title\">Series</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-获取数据和索引\"><a href=\"#2-获取数据和索引\" class=\"headerlink\" title=\"2. 获取数据和索引\"></a>2. 获取数据和索引</h4><blockquote>\n<p>ser_obj.index 和 ser_obj.values</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取数据</span></span><br><span class=\"line\">print(ser_obj.values)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取索引</span></span><br><span class=\"line\">print(ser_obj.index)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">10</span> <span class=\"number\">11</span> <span class=\"number\">12</span> <span class=\"number\">13</span> <span class=\"number\">14</span> <span class=\"number\">15</span> <span class=\"number\">16</span> <span class=\"number\">17</span> <span class=\"number\">18</span> <span class=\"number\">19</span>]</span><br><span class=\"line\">RangeIndex(start=<span class=\"number\">0</span>, stop=<span class=\"number\">10</span>, step=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-通过索引获取数据\"><a href=\"#3-通过索引获取数据\" class=\"headerlink\" title=\"3. 通过索引获取数据\"></a>3. 通过索引获取数据</h4><blockquote>\n<p>ser_obj[idx]</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通过索引获取数据</span></span><br><span class=\"line\">print(ser_obj[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(ser_obj[<span class=\"number\">8</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">18</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-索引与数据的对应关系不被运算结果影响\"><a href=\"#4-索引与数据的对应关系不被运算结果影响\" class=\"headerlink\" title=\"4. 索引与数据的对应关系不被运算结果影响\"></a>4. 索引与数据的对应关系不被运算结果影响</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 索引与数据的对应关系不被运算结果影响</span></span><br><span class=\"line\">print(ser_obj * <span class=\"number\">2</span>)</span><br><span class=\"line\">print(ser_obj &gt; <span class=\"number\">15</span>)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">5</span>    <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"number\">6</span>    <span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"number\">7</span>    <span class=\"number\">34</span></span><br><span class=\"line\"><span class=\"number\">8</span>    <span class=\"number\">36</span></span><br><span class=\"line\"><span class=\"number\">9</span>    <span class=\"number\">38</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">5</span>    <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">6</span>     <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">7</span>     <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">8</span>     <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">9</span>     <span class=\"literal\">True</span></span><br><span class=\"line\">dtype: bool</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-通过dict构建Series\"><a href=\"#5-通过dict构建Series\" class=\"headerlink\" title=\"5. 通过dict构建Series\"></a>5. 通过dict构建Series</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过dict构建Series</span></span><br><span class=\"line\">year_data = &#123;<span class=\"number\">2001</span>: <span class=\"number\">17.8</span>, <span class=\"number\">2002</span>: <span class=\"number\">20.1</span>, <span class=\"number\">2003</span>: <span class=\"number\">16.5</span>&#125;</span><br><span class=\"line\">ser_obj2 = pd.Series(year_data)</span><br><span class=\"line\">print(ser_obj2.head())</span><br><span class=\"line\">print(ser_obj2.index)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2001</span>    <span class=\"number\">17.8</span></span><br><span class=\"line\"><span class=\"number\">2002</span>    <span class=\"number\">20.1</span></span><br><span class=\"line\"><span class=\"number\">2003</span>    <span class=\"number\">16.5</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\">Int64Index([<span class=\"number\">2001</span>, <span class=\"number\">2002</span>, <span class=\"number\">2003</span>], dtype=<span class=\"string\">'int64'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h4><blockquote>\n<p>对象名：ser_obj.name</p>\n<p>对象索引名：ser_obj.index.name</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># name属性</span></span><br><span class=\"line\">ser_obj2.name = <span class=\"string\">'temp'</span></span><br><span class=\"line\">ser_obj2.index.name = <span class=\"string\">'year'</span></span><br><span class=\"line\">print(ser_obj2.head())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">year</span><br><span class=\"line\"><span class=\"number\">2001</span>    <span class=\"number\">17.8</span></span><br><span class=\"line\"><span class=\"number\">2002</span>    <span class=\"number\">20.1</span></span><br><span class=\"line\"><span class=\"number\">2003</span>    <span class=\"number\">16.5</span></span><br><span class=\"line\">Name: temp, dtype: float64</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-DataFrame\"><a href=\"#1-2-DataFrame\" class=\"headerlink\" title=\"1.2 DataFrame\"></a>1.2 DataFrame</h3><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同类型的值。DataFrame既有行索引也有列索引，它可以被看做是由Series组成的字典（共用同一个索引），数据是以二维结构存放的。</p>\n<ul>\n<li>类似多维数组/表格数据 (如，excel, R中的data.frame)</li>\n<li>每列数据可以是不同的类型</li>\n<li>索引包括列索引和行索引</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200507222658.png\" alt=\"\"></p>\n<h4 id=\"1-通过ndarray构建DataFrame\"><a href=\"#1-通过ndarray构建DataFrame\" class=\"headerlink\" title=\"1. 通过ndarray构建DataFrame\"></a>1. 通过ndarray构建DataFrame</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过ndarray构建DataFrame</span></span><br><span class=\"line\">array = np.random.randn(<span class=\"number\">5</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">print(array)</span><br><span class=\"line\"></span><br><span class=\"line\">df_obj = pd.DataFrame(array)</span><br><span class=\"line\">print(df_obj.head())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"number\">0.83500594</span> <span class=\"number\">-1.49290138</span> <span class=\"number\">-0.53120106</span> <span class=\"number\">-0.11313932</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.64629762</span> <span class=\"number\">-0.36779941</span>  <span class=\"number\">0.08011084</span>  <span class=\"number\">0.60080495</span>]</span><br><span class=\"line\"> [<span class=\"number\">-1.23458522</span>  <span class=\"number\">0.33409674</span> <span class=\"number\">-0.58778195</span> <span class=\"number\">-0.73610573</span>]</span><br><span class=\"line\"> [<span class=\"number\">-1.47651414</span>  <span class=\"number\">0.99400187</span>  <span class=\"number\">0.21001995</span> <span class=\"number\">-0.90515656</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.56669419</span>  <span class=\"number\">1.38238348</span> <span class=\"number\">-0.49099007</span>  <span class=\"number\">1.94484598</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">0</span>         <span class=\"number\">1</span>         <span class=\"number\">2</span>         <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.835006</span> <span class=\"number\">-1.492901</span> <span class=\"number\">-0.531201</span> <span class=\"number\">-0.113139</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">0.646298</span> <span class=\"number\">-0.367799</span>  <span class=\"number\">0.080111</span>  <span class=\"number\">0.600805</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-1.234585</span>  <span class=\"number\">0.334097</span> <span class=\"number\">-0.587782</span> <span class=\"number\">-0.736106</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">-1.476514</span>  <span class=\"number\">0.994002</span>  <span class=\"number\">0.210020</span> <span class=\"number\">-0.905157</span></span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">0.566694</span>  <span class=\"number\">1.382383</span> <span class=\"number\">-0.490990</span>  <span class=\"number\">1.944846</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-通过dict构建DataFrame\"><a href=\"#2-通过dict构建DataFrame\" class=\"headerlink\" title=\"2. 通过dict构建DataFrame\"></a>2. 通过dict构建DataFrame</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过dict构建DataFrame</span></span><br><span class=\"line\">dict_data = &#123;<span class=\"string\">'A'</span>: <span class=\"number\">1</span>, </span><br><span class=\"line\">             <span class=\"string\">'B'</span>: pd.Timestamp(<span class=\"string\">'20170426'</span>),</span><br><span class=\"line\">             <span class=\"string\">'C'</span>: pd.Series(<span class=\"number\">1</span>, index=list(range(<span class=\"number\">4</span>)),dtype=<span class=\"string\">'float32'</span>),</span><br><span class=\"line\">             <span class=\"string\">'D'</span>: np.array([<span class=\"number\">3</span>] * <span class=\"number\">4</span>,dtype=<span class=\"string\">'int32'</span>),</span><br><span class=\"line\">             <span class=\"string\">'E'</span>: [<span class=\"string\">\"Python\"</span>,<span class=\"string\">\"Java\"</span>,<span class=\"string\">\"C++\"</span>,<span class=\"string\">\"C\"</span>],</span><br><span class=\"line\">             <span class=\"string\">'F'</span>: <span class=\"string\">'ITCast'</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">#print dict_data</span></span><br><span class=\"line\">df_obj2 = pd.DataFrame(dict_data)</span><br><span class=\"line\">print(df_obj2)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   A          B    C  D       E       F</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">1</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>  Python  ITCast</span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">1</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>    Java  ITCast</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>     C++  ITCast</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-26</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>       C  ITCast</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-通过列索引获取列数据（Series类型）\"><a href=\"#3-通过列索引获取列数据（Series类型）\" class=\"headerlink\" title=\"3. 通过列索引获取列数据（Series类型）\"></a>3. 通过列索引获取列数据（Series类型）</h4><blockquote>\n<p>df_obj[col_idx] 或 df_obj.col_idx</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过列索引获取列数据</span></span><br><span class=\"line\">print(df_obj2[<span class=\"string\">'A'</span>])</span><br><span class=\"line\">print(type(df_obj2[<span class=\"string\">'A'</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">print(df_obj2.A)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">1.0</span></span><br><span class=\"line\">Name: A, dtype: float64</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">pandas</span>.<span class=\"title\">core</span>.<span class=\"title\">series</span>.<span class=\"title\">Series</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\">0    1.0</span></span><br><span class=\"line\"><span class=\"class\">1    1.0</span></span><br><span class=\"line\"><span class=\"class\">2    1.0</span></span><br><span class=\"line\"><span class=\"class\">3    1.0</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Name</span>:</span> A, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-增加列数据\"><a href=\"#4-增加列数据\" class=\"headerlink\" title=\"4. 增加列数据\"></a>4. 增加列数据</h4><blockquote>\n<p>df_obj[new_col_idx] = data</p>\n<p>类似Python的 dict添加key-value</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加列</span></span><br><span class=\"line\">df_obj2[<span class=\"string\">'G'</span>] = df_obj2[<span class=\"string\">'D'</span>] + <span class=\"number\">4</span></span><br><span class=\"line\">print(df_obj2.head())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">     A          B    C  D       E       F  G</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>  Python  ITCast  <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>    Java  ITCast  <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>     C++  ITCast  <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>       C  ITCast  <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-删除列\"><a href=\"#5-删除列\" class=\"headerlink\" title=\"5. 删除列\"></a>5. 删除列</h4><blockquote>\n<p>del df_obj[col_idx]</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除列</span></span><br><span class=\"line\"><span class=\"keyword\">del</span>(df_obj2[<span class=\"string\">'G'</span>] )</span><br><span class=\"line\">print(df_obj2.head())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">     A          B    C  D       E       F</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>  Python  ITCast</span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>    Java  ITCast</span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>     C++  ITCast</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1.0</span> <span class=\"number\">2017</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.0</span>  <span class=\"number\">3</span>       C  ITCast</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二：索引操作\"><a href=\"#二：索引操作\" class=\"headerlink\" title=\"二：索引操作\"></a>二：索引操作</h2><h3 id=\"2-1-索引对象Index\"><a href=\"#2-1-索引对象Index\" class=\"headerlink\" title=\"2.1 索引对象Index\"></a>2.1 索引对象Index</h3><h4 id=\"1-Series和DataFrame中的索引都是Index对象\"><a href=\"#1-Series和DataFrame中的索引都是Index对象\" class=\"headerlink\" title=\"1. Series和DataFrame中的索引都是Index对象\"></a>1. Series和DataFrame中的索引都是Index对象</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(type(ser_obj.index))</span><br><span class=\"line\">print(type(df_obj2.index))</span><br><span class=\"line\"></span><br><span class=\"line\">print(df_obj2.index)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">pandas</span>.<span class=\"title\">indexes</span>.<span class=\"title\">range</span>.<span class=\"title\">RangeIndex</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">pandas</span>.<span class=\"title\">indexes</span>.<span class=\"title\">numeric</span>.<span class=\"title\">Int64Index</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Int64Index</span><span class=\"params\">([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], dtype=<span class=\"string\">'int64'</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-索引对象不可变，保证了数据的安全\"><a href=\"#2-索引对象不可变，保证了数据的安全\" class=\"headerlink\" title=\"2. 索引对象不可变，保证了数据的安全\"></a>2. 索引对象不可变，保证了数据的安全</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 索引对象不可变</span></span><br><span class=\"line\">df_obj2.index[<span class=\"number\">0</span>] = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError                                 Traceback (most recent call last)</span><br><span class=\"line\">&lt;ipython-input<span class=\"number\">-23</span><span class=\"number\">-7</span>f40a356d7d1&gt; <span class=\"keyword\">in</span> &lt;module&gt;()</span><br><span class=\"line\">      <span class=\"number\">1</span> <span class=\"comment\"># 索引对象不可变</span></span><br><span class=\"line\">----&gt; 2 df_obj2.index[0] = 2</span><br><span class=\"line\"></span><br><span class=\"line\">/Users/Power/anaconda/lib/python3<span class=\"number\">.6</span>/site-packages/pandas/indexes/base.py <span class=\"keyword\">in</span> __setitem__(self, key, value)</span><br><span class=\"line\">   <span class=\"number\">1402</span> </span><br><span class=\"line\">   <span class=\"number\">1403</span>     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setitem__</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">-&gt; 1404         raise TypeError(\"Index does not support mutable operations\")</span><br><span class=\"line\">   <span class=\"number\">1405</span> </span><br><span class=\"line\">   <span class=\"number\">1406</span>     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">TypeError: Index does <span class=\"keyword\">not</span> support mutable operations</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见的Index种类\"><a href=\"#常见的Index种类\" class=\"headerlink\" title=\"常见的Index种类\"></a>常见的Index种类</h4><ul>\n<li>Index，索引</li>\n<li>Int64Index，整数索引</li>\n<li>MultiIndex，层级索引</li>\n<li>DatetimeIndex，时间戳类型</li>\n</ul>\n<h3 id=\"2-2-Series索引\"><a href=\"#2-2-Series索引\" class=\"headerlink\" title=\"2.2 Series索引\"></a>2.2 Series索引</h3><h4 id=\"1-index-指定行索引名\"><a href=\"#1-index-指定行索引名\" class=\"headerlink\" title=\"1. index 指定行索引名\"></a>1. index 指定行索引名</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ser_obj = pd.Series(range(<span class=\"number\">5</span>), index = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>])</span><br><span class=\"line\">print(ser_obj.head())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a    <span class=\"number\">0</span></span><br><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">d    <span class=\"number\">3</span></span><br><span class=\"line\">e    <span class=\"number\">4</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-行索引\"><a href=\"#2-行索引\" class=\"headerlink\" title=\"2. 行索引\"></a>2. 行索引</h4><blockquote>\n<p>ser_obj[‘label’], ser_obj[pos]</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 行索引</span></span><br><span class=\"line\">print(ser_obj[<span class=\"string\">'b'</span>])</span><br><span class=\"line\">print(ser_obj[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-切片索引\"><a href=\"#3-切片索引\" class=\"headerlink\" title=\"3. 切片索引\"></a>3. 切片索引</h4><blockquote>\n<p>ser_obj[2:4], ser_obj[‘label1’: ’label3’]</p>\n<p>注意，按索引名切片操作时，是包含终止索引的。</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切片索引</span></span><br><span class=\"line\">print(ser_obj[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">print(ser_obj[<span class=\"string\">'b'</span>:<span class=\"string\">'d'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">d    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-不连续索引\"><a href=\"#4-不连续索引\" class=\"headerlink\" title=\"4. 不连续索引\"></a>4. 不连续索引</h4><blockquote>\n<p>ser_obj[[‘label1’, ’label2’, ‘label3’]]</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不连续索引</span></span><br><span class=\"line\">print(ser_obj[[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\">print(ser_obj[[<span class=\"string\">'a'</span>, <span class=\"string\">'e'</span>]])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a    <span class=\"number\">0</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">e    <span class=\"number\">4</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">a    <span class=\"number\">0</span></span><br><span class=\"line\">e    <span class=\"number\">4</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-布尔索引\"><a href=\"#5-布尔索引\" class=\"headerlink\" title=\"5. 布尔索引\"></a>5. 布尔索引</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 布尔索引</span></span><br><span class=\"line\">ser_bool = ser_obj &gt; <span class=\"number\">2</span></span><br><span class=\"line\">print(ser_bool)</span><br><span class=\"line\">print(ser_obj[ser_bool])</span><br><span class=\"line\"></span><br><span class=\"line\">print(ser_obj[ser_obj &gt; <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a    <span class=\"literal\">False</span></span><br><span class=\"line\">b    <span class=\"literal\">False</span></span><br><span class=\"line\">c    <span class=\"literal\">False</span></span><br><span class=\"line\">d     <span class=\"literal\">True</span></span><br><span class=\"line\">e     <span class=\"literal\">True</span></span><br><span class=\"line\">dtype: bool</span><br><span class=\"line\">d    <span class=\"number\">3</span></span><br><span class=\"line\">e    <span class=\"number\">4</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">d    <span class=\"number\">3</span></span><br><span class=\"line\">e    <span class=\"number\">4</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-DataFrame索引\"><a href=\"#2-3-DataFrame索引\" class=\"headerlink\" title=\"2. 3 DataFrame索引\"></a>2. 3 DataFrame索引</h3><h4 id=\"1-columns-指定列索引名\"><a href=\"#1-columns-指定列索引名\" class=\"headerlink\" title=\"1. columns 指定列索引名\"></a>1. columns 指定列索引名</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">df_obj = pd.DataFrame(np.random.randn(<span class=\"number\">5</span>,<span class=\"number\">4</span>), columns = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>])</span><br><span class=\"line\">print(df_obj.head())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">          a         b         c         d</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-0.241678</span>  <span class=\"number\">0.621589</span>  <span class=\"number\">0.843546</span> <span class=\"number\">-0.383105</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.526918</span> <span class=\"number\">-0.485325</span>  <span class=\"number\">1.124420</span> <span class=\"number\">-0.653144</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-1.074163</span>  <span class=\"number\">0.939324</span> <span class=\"number\">-0.309822</span> <span class=\"number\">-0.209149</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">-0.716816</span>  <span class=\"number\">1.844654</span> <span class=\"number\">-2.123637</span> <span class=\"number\">-1.323484</span></span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">0.368212</span> <span class=\"number\">-0.910324</span>  <span class=\"number\">0.064703</span>  <span class=\"number\">0.486016</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200507223242.png\" alt=\"\"></p>\n<h4 id=\"2-列索引\"><a href=\"#2-列索引\" class=\"headerlink\" title=\"2. 列索引\"></a>2. 列索引</h4><blockquote>\n<p>df_obj[[‘label’]]</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列索引</span></span><br><span class=\"line\">print(df_obj[<span class=\"string\">'a'</span>]) <span class=\"comment\"># 返回Series类型</span></span><br><span class=\"line\">print(df_obj[[<span class=\"number\">0</span>]]) <span class=\"comment\"># 返回DataFrame类型</span></span><br><span class=\"line\">print(type(df_obj[[<span class=\"number\">0</span>]])) <span class=\"comment\"># 返回DataFrame类型</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">-0.241678</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">-0.526918</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">-1.074163</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">-0.716816</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">0.368212</span></span><br><span class=\"line\">Name: a, dtype: float64</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">pandas</span>.<span class=\"title\">core</span>.<span class=\"title\">frame</span>.<span class=\"title\">DataFrame</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-不连续索引\"><a href=\"#3-不连续索引\" class=\"headerlink\" title=\"3. 不连续索引\"></a>3. 不连续索引</h4><blockquote>\n<p>df_obj[[‘label1’, ‘label2’]]</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不连续索引</span></span><br><span class=\"line\">print(df_obj[[<span class=\"string\">'a'</span>,<span class=\"string\">'c'</span>]])</span><br><span class=\"line\">print(df_obj[[<span class=\"number\">1</span>, <span class=\"number\">3</span>]])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">          a         c</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-0.241678</span>  <span class=\"number\">0.843546</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.526918</span>  <span class=\"number\">1.124420</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-1.074163</span> <span class=\"number\">-0.309822</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">-0.716816</span> <span class=\"number\">-2.123637</span></span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">0.368212</span>  <span class=\"number\">0.064703</span></span><br><span class=\"line\">          b         d</span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.621589</span> <span class=\"number\">-0.383105</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.485325</span> <span class=\"number\">-0.653144</span></span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">0.939324</span> <span class=\"number\">-0.209149</span></span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1.844654</span> <span class=\"number\">-1.323484</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">-0.910324</span>  <span class=\"number\">0.486016</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-高级索引：标签、位置和混合\"><a href=\"#2-4-高级索引：标签、位置和混合\" class=\"headerlink\" title=\"2.4  高级索引：标签、位置和混合\"></a>2.4  高级索引：标签、位置和混合</h3><p>Pandas的高级索引有3种</p>\n<h4 id=\"1-loc-标签索引\"><a href=\"#1-loc-标签索引\" class=\"headerlink\" title=\"1. loc 标签索引\"></a>1. loc 标签索引</h4><blockquote>\n<p>DataFrame 不能直接切片，可以通过loc来做切片</p>\n<p>loc是基于标签名的索引，也就是我们自定义的索引名</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 标签索引 loc</span></span><br><span class=\"line\"><span class=\"comment\"># Series</span></span><br><span class=\"line\">print(ser_obj[<span class=\"string\">'b'</span>:<span class=\"string\">'d'</span>])</span><br><span class=\"line\">print(ser_obj.loc[<span class=\"string\">'b'</span>:<span class=\"string\">'d'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DataFrame</span></span><br><span class=\"line\">print(df_obj[<span class=\"string\">'a'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一个参数索引行，第二个参数是列</span></span><br><span class=\"line\">print(df_obj.loc[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"string\">'a'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">d    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">d    <span class=\"number\">3</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">-0.241678</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">-0.526918</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">-1.074163</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">-0.716816</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">0.368212</span></span><br><span class=\"line\">Name: a, dtype: float64</span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">-0.241678</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">-0.526918</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">-1.074163</span></span><br><span class=\"line\">Name: a, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-iloc-位置索引\"><a href=\"#2-iloc-位置索引\" class=\"headerlink\" title=\"2. iloc 位置索引\"></a>2. iloc 位置索引</h4><blockquote>\n<p>作用和loc一样，不过是基于索引编号来索引</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 整型位置索引 iloc</span></span><br><span class=\"line\"><span class=\"comment\"># Series</span></span><br><span class=\"line\">print(ser_obj[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">print(ser_obj.iloc[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DataFrame</span></span><br><span class=\"line\">print(df_obj.iloc[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>]) <span class=\"comment\"># 注意和df_obj.loc[0:2, 'a']的区别</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">-0.241678</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">-0.526918</span></span><br><span class=\"line\">Name: a, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-ix-标签与位置混合索引\"><a href=\"#3-ix-标签与位置混合索引\" class=\"headerlink\" title=\"3. ix 标签与位置混合索引\"></a>3. ix 标签与位置混合索引</h4><blockquote>\n<p>ix是以上二者的综合，既可以使用索引编号，又可以使用自定义索引，要视情况不同来使用，</p>\n<p>如果索引既有数字又有英文，那么这种方式是不建议使用的，容易导致定位的混乱。</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 混合索引 ix</span></span><br><span class=\"line\"><span class=\"comment\"># Series</span></span><br><span class=\"line\">print(ser_obj.ix[<span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">print(ser_obj.ix[<span class=\"string\">'b'</span>:<span class=\"string\">'c'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># DataFrame</span></span><br><span class=\"line\">print(df_obj.loc[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"string\">'a'</span>])</span><br><span class=\"line\">print(df_obj.ix[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\">b    <span class=\"number\">1</span></span><br><span class=\"line\">c    <span class=\"number\">2</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">-0.241678</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">-0.526918</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">-1.074163</span></span><br><span class=\"line\">Name: a, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><blockquote>\n<p>DataFrame索引操作，可将其看作ndarray的索引操作</p>\n<p>标签的切片索引是包含末尾位置的</p>\n</blockquote>\n<h2 id=\"三：-函数运用\"><a href=\"#三：-函数运用\" class=\"headerlink\" title=\"三： 函数运用\"></a>三： 函数运用</h2><h3 id=\"3-1-使用-lambda-批处理操作\"><a href=\"#3-1-使用-lambda-批处理操作\" class=\"headerlink\" title=\"3.1  使用 lambda 批处理操作\"></a>3.1  使用 lambda 批处理操作</h3><h4 id=\"1-可直接使用NumPy的函数\"><a href=\"#1-可直接使用NumPy的函数\" class=\"headerlink\" title=\"1. 可直接使用NumPy的函数\"></a>1. 可直接使用NumPy的函数</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Numpy ufunc 函数</span></span><br><span class=\"line\">df = pd.DataFrame(np.random.randn(<span class=\"number\">5</span>,<span class=\"number\">4</span>) - <span class=\"number\">1</span>)</span><br><span class=\"line\">print(df)</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.abs(df))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">          <span class=\"number\">0</span>         <span class=\"number\">1</span>         <span class=\"number\">2</span>         <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-0.062413</span>  <span class=\"number\">0.844813</span> <span class=\"number\">-1.853721</span> <span class=\"number\">-1.980717</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.539628</span> <span class=\"number\">-1.975173</span> <span class=\"number\">-0.856597</span> <span class=\"number\">-2.612406</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-1.277081</span> <span class=\"number\">-1.088457</span> <span class=\"number\">-0.152189</span>  <span class=\"number\">0.530325</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">-1.356578</span> <span class=\"number\">-1.996441</span>  <span class=\"number\">0.368822</span> <span class=\"number\">-2.211478</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">-0.562777</span>  <span class=\"number\">0.518648</span> <span class=\"number\">-2.007223</span>  <span class=\"number\">0.059411</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">0</span>         <span class=\"number\">1</span>         <span class=\"number\">2</span>         <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">0.062413</span>  <span class=\"number\">0.844813</span>  <span class=\"number\">1.853721</span>  <span class=\"number\">1.980717</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">0.539628</span>  <span class=\"number\">1.975173</span>  <span class=\"number\">0.856597</span>  <span class=\"number\">2.612406</span></span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">1.277081</span>  <span class=\"number\">1.088457</span>  <span class=\"number\">0.152189</span>  <span class=\"number\">0.530325</span></span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1.356578</span>  <span class=\"number\">1.996441</span>  <span class=\"number\">0.368822</span>  <span class=\"number\">2.211478</span></span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">0.562777</span>  <span class=\"number\">0.518648</span>  <span class=\"number\">2.007223</span>  <span class=\"number\">0.059411</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-通过apply将函数应用到列或行上\"><a href=\"#2-通过apply将函数应用到列或行上\" class=\"headerlink\" title=\"2. 通过apply将函数应用到列或行上\"></a>2. 通过apply将函数应用到列或行上</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用apply应用行或列数据</span></span><br><span class=\"line\"><span class=\"comment\">#f = lambda x : x.max()</span></span><br><span class=\"line\">print(df.apply(<span class=\"keyword\">lambda</span> x : x.max()))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">-0.062413</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">0.844813</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">0.368822</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">0.530325</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意指定轴的方向，默认axis=0，方向是列</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定轴方向，axis=1，方向是行</span></span><br><span class=\"line\">print(df.apply(<span class=\"keyword\">lambda</span> x : x.max(), axis=<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">0.844813</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">-0.539628</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">0.530325</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">0.368822</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">0.518648</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-通过applymap将函数应用到每个数据上\"><a href=\"#3-通过applymap将函数应用到每个数据上\" class=\"headerlink\" title=\"3. 通过applymap将函数应用到每个数据上\"></a>3. 通过applymap将函数应用到每个数据上</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用applymap应用到每个数据</span></span><br><span class=\"line\">f2 = <span class=\"keyword\">lambda</span> x : <span class=\"string\">'%.2f'</span> % x</span><br><span class=\"line\">print(df.applymap(f2))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">       <span class=\"number\">0</span>      <span class=\"number\">1</span>      <span class=\"number\">2</span>      <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"number\">-0.06</span>   <span class=\"number\">0.84</span>  <span class=\"number\">-1.85</span>  <span class=\"number\">-1.98</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">-0.54</span>  <span class=\"number\">-1.98</span>  <span class=\"number\">-0.86</span>  <span class=\"number\">-2.61</span></span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">-1.28</span>  <span class=\"number\">-1.09</span>  <span class=\"number\">-0.15</span>   <span class=\"number\">0.53</span></span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">-1.36</span>  <span class=\"number\">-2.00</span>   <span class=\"number\">0.37</span>  <span class=\"number\">-2.21</span></span><br><span class=\"line\"><span class=\"number\">4</span>  <span class=\"number\">-0.56</span>   <span class=\"number\">0.52</span>  <span class=\"number\">-2.01</span>   <span class=\"number\">0.06</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-排序\"><a href=\"#3-2-排序\" class=\"headerlink\" title=\"3.2 排序\"></a>3.2 排序</h3><h4 id=\"1-索引排序\"><a href=\"#1-索引排序\" class=\"headerlink\" title=\"1. 索引排序\"></a>1. 索引排序</h4><blockquote>\n<p>sort_index()</p>\n<p>排序默认使用升序排序，ascending=False 为降序排序</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Series</span></span><br><span class=\"line\">s4 = pd.Series(range(<span class=\"number\">10</span>, <span class=\"number\">15</span>), index = np.random.randint(<span class=\"number\">5</span>, size=<span class=\"number\">5</span>))</span><br><span class=\"line\">print(s4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 索引排序</span></span><br><span class=\"line\">s4.sort_index() <span class=\"comment\"># 0 0 1 3 3</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">14</span></span><br><span class=\"line\">dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">13</span></span><br><span class=\"line\">dtype: int64</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>对DataFrame操作时注意轴方向</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># DataFrame</span></span><br><span class=\"line\">df4 = pd.DataFrame(np.random.randn(<span class=\"number\">3</span>, <span class=\"number\">5</span>), </span><br><span class=\"line\">                   index=np.random.randint(<span class=\"number\">3</span>, size=<span class=\"number\">3</span>),</span><br><span class=\"line\">                   columns=np.random.randint(<span class=\"number\">5</span>, size=<span class=\"number\">5</span>))</span><br><span class=\"line\">print(df4)</span><br><span class=\"line\"></span><br><span class=\"line\">df4_isort = df4.sort_index(axis=<span class=\"number\">1</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(df4_isort) <span class=\"comment\"># 4 2 1 1 0</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">          <span class=\"number\">1</span>         <span class=\"number\">4</span>         <span class=\"number\">0</span>         <span class=\"number\">1</span>         <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-0.416686</span> <span class=\"number\">-0.161256</span>  <span class=\"number\">0.088802</span> <span class=\"number\">-0.004294</span>  <span class=\"number\">1.164138</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.671914</span>  <span class=\"number\">0.531256</span>  <span class=\"number\">0.303222</span> <span class=\"number\">-0.509493</span> <span class=\"number\">-0.342573</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">1.988321</span> <span class=\"number\">-0.466987</span>  <span class=\"number\">2.787891</span> <span class=\"number\">-1.105912</span>  <span class=\"number\">0.889082</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">4</span>         <span class=\"number\">2</span>         <span class=\"number\">1</span>         <span class=\"number\">1</span>         <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-0.161256</span>  <span class=\"number\">1.164138</span> <span class=\"number\">-0.416686</span> <span class=\"number\">-0.004294</span>  <span class=\"number\">0.088802</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">0.531256</span> <span class=\"number\">-0.342573</span> <span class=\"number\">-0.671914</span> <span class=\"number\">-0.509493</span>  <span class=\"number\">0.303222</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.466987</span>  <span class=\"number\">0.889082</span>  <span class=\"number\">1.988321</span> <span class=\"number\">-1.105912</span>  <span class=\"number\">2.787891</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-按值排序\"><a href=\"#2-按值排序\" class=\"headerlink\" title=\"2. 按值排序\"></a>2. 按值排序</h4><blockquote>\n<p>sort_values(by=’column name’)</p>\n<p>根据某个唯一的列名进行排序，如果有其他相同列名则报错。</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按值排序</span></span><br><span class=\"line\">df4_vsort = df4.sort_values(by=<span class=\"number\">0</span>, ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(df4_vsort)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">          <span class=\"number\">1</span>         <span class=\"number\">4</span>         <span class=\"number\">0</span>         <span class=\"number\">1</span>         <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">1.988321</span> <span class=\"number\">-0.466987</span>  <span class=\"number\">2.787891</span> <span class=\"number\">-1.105912</span>  <span class=\"number\">0.889082</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">-0.671914</span>  <span class=\"number\">0.531256</span>  <span class=\"number\">0.303222</span> <span class=\"number\">-0.509493</span> <span class=\"number\">-0.342573</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-0.416686</span> <span class=\"number\">-0.161256</span>  <span class=\"number\">0.088802</span> <span class=\"number\">-0.004294</span>  <span class=\"number\">1.164138</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-处理缺失数据\"><a href=\"#3-3-处理缺失数据\" class=\"headerlink\" title=\"3.3 处理缺失数据\"></a>3.3 处理缺失数据</h3><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">df_data = pd.DataFrame([np.random.randn(<span class=\"number\">3</span>), [<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, np.nan],</span><br><span class=\"line\">                       [np.nan, <span class=\"number\">4.</span>, np.nan], [<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>]])</span><br><span class=\"line\">print(df_data.head())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">          <span class=\"number\">0</span>         <span class=\"number\">1</span>         <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-0.281885</span> <span class=\"number\">-0.786572</span>  <span class=\"number\">0.487126</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">2.000000</span>       NaN</span><br><span class=\"line\"><span class=\"number\">2</span>       NaN  <span class=\"number\">4.000000</span>       NaN</span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">2.000000</span>  <span class=\"number\">3.000000</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-判断是否存在缺失值：isnull\"><a href=\"#1-判断是否存在缺失值：isnull\" class=\"headerlink\" title=\"1. 判断是否存在缺失值：isnull()\"></a>1. 判断是否存在缺失值：isnull()</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># isnull</span></span><br><span class=\"line\">print(df_data.isnull())</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">       <span class=\"number\">0</span>      <span class=\"number\">1</span>      <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>  <span class=\"literal\">False</span>  <span class=\"literal\">False</span>  <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"literal\">False</span>  <span class=\"literal\">False</span>   <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"literal\">True</span>  <span class=\"literal\">False</span>   <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"literal\">False</span>  <span class=\"literal\">False</span>  <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-丢弃缺失数据：dropna\"><a href=\"#2-丢弃缺失数据：dropna\" class=\"headerlink\" title=\"2. 丢弃缺失数据：dropna()\"></a>2. 丢弃缺失数据：dropna()</h4><blockquote>\n<p>根据axis轴方向，丢弃包含NaN的行或列。 示例代码：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dropna</span></span><br><span class=\"line\">print(df_data.dropna())</span><br><span class=\"line\"></span><br><span class=\"line\">print(df_data.dropna(axis=<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">          <span class=\"number\">0</span>         <span class=\"number\">1</span>         <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-0.281885</span> <span class=\"number\">-0.786572</span>  <span class=\"number\">0.487126</span></span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">2.000000</span>  <span class=\"number\">3.000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-0.786572</span></span><br><span class=\"line\"><span class=\"number\">1</span>  <span class=\"number\">2.000000</span></span><br><span class=\"line\"><span class=\"number\">2</span>  <span class=\"number\">4.000000</span></span><br><span class=\"line\"><span class=\"number\">3</span>  <span class=\"number\">2.000000</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-填充缺失数据：fillna\"><a href=\"#3-填充缺失数据：fillna\" class=\"headerlink\" title=\"3. 填充缺失数据：fillna()\"></a>3. 填充缺失数据：fillna()</h4><p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># fillna</span></span><br><span class=\"line\">print(df_data.fillna(<span class=\"number\">-100.</span>))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">            <span class=\"number\">0</span>         <span class=\"number\">1</span>           <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">-0.281885</span> <span class=\"number\">-0.786572</span>    <span class=\"number\">0.487126</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">1.000000</span>  <span class=\"number\">2.000000</span> <span class=\"number\">-100.000000</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">-100.000000</span>  <span class=\"number\">4.000000</span> <span class=\"number\">-100.000000</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">1.000000</span>  <span class=\"number\">2.000000</span>    <span class=\"number\">3.000000</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四：常用的统计描述方法\"><a href=\"#四：常用的统计描述方法\" class=\"headerlink\" title=\"四：常用的统计描述方法\"></a>四：常用的统计描述方法</h2><p><img src=\"http://photo.jomeswang.top/20200507230925.png\" alt=\"\"></p>\n","categories":["数据分析"],"tags":["python","数据分析"]},{"title":"一些回忆往事","url":"/posts/3c2ce24b/","content":"<blockquote>\n<p>往事如风，那就让一切都随风而去吧！！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200507105522.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200507105326.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200507105058.png\" alt=\"\"></p>\n","categories":["随笔"],"tags":["随笔"]},{"title":"数据分析之Numpy","url":"/posts/aaadb207/","content":"<blockquote>\n<p> <strong>NumPy数组是一个多维的数组对象（矩阵），称为</strong><code>ndarray</code><strong>，具有矢量算术运算能力和复杂的广播能力，并具有执行速度快和节省空间的特点。</strong> </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>学习Pandas之前先学习numpy，为什么呢？因为numpy的格式为数组样式的，Pandas以Numpy作为基础库，基于Numpy制作的数据分析库。</p>\n<h2 id=\"二：内容\"><a href=\"#二：内容\" class=\"headerlink\" title=\"二：内容\"></a>二：内容</h2><h3 id=\"2-1-数组的创建\"><a href=\"#2-1-数组的创建\" class=\"headerlink\" title=\"2.1 数组的创建\"></a>2.1 数组的创建</h3><blockquote>\n<h4 id=\"ndarray拥有的属性：\"><a href=\"#ndarray拥有的属性：\" class=\"headerlink\" title=\"ndarray拥有的属性：\"></a>ndarray拥有的属性：</h4><ol>\n<li><code>ndim属性</code>：维度个数</li>\n<li><code>shape属性</code>：维度大小</li>\n<li><code>dtype属性</code>：数据类型</li>\n</ol>\n</blockquote>\n<ol>\n<li><h4 id=\"ndarray的随机创建\"><a href=\"#ndarray的随机创建\" class=\"headerlink\" title=\"ndarray的随机创建\"></a>ndarray的随机创建</h4></li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200506231845.png\" alt=\"\"></p>\n<blockquote>\n<p>通过随机抽样 (numpy.random) 生成随机数据。</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200506232326.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><h4 id=\"ndarray的序列创建\"><a href=\"#ndarray的序列创建\" class=\"headerlink\" title=\"ndarray的序列创建\"></a>ndarray的序列创建</h4></li>\n</ol>\n<h5 id=\"1-np-array-collection\"><a href=\"#1-np-array-collection\" class=\"headerlink\" title=\"1. np.array(collection)\"></a>1. <code>np.array(collection)</code></h5><blockquote>\n<p>collection 为 序列型对象(list)、嵌套序列对象(list of list)。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [4]: np.array([range(10), range(10)])</span><br><span class=\"line\">Out[4]:</span><br><span class=\"line\">array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],</span><br><span class=\"line\">       [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-np-zeros\"><a href=\"#2-np-zeros\" class=\"headerlink\" title=\"2. np.zeros()\"></a>2. <code>np.zeros()</code></h5><blockquote>\n<p>指定大小的全0数组。注意：第一个参数是元组，用来指定大小，如(3, 4)。</p>\n</blockquote>\n<h5 id=\"3-np-ones\"><a href=\"#3-np-ones\" class=\"headerlink\" title=\"3. np.ones()\"></a>3. <code>np.ones()</code></h5><blockquote>\n<p>指定大小的全1数组。注意：第一个参数是元组，用来指定大小，如(3, 4)。</p>\n</blockquote>\n<h5 id=\"4-np-empty\"><a href=\"#4-np-empty\" class=\"headerlink\" title=\"4. np.empty()\"></a>4. <code>np.empty()</code></h5><blockquote>\n<p>初始化数组，不是总是返回全0，有时返回的是未初始的随机值（内存里的随机值）</p>\n</blockquote>\n<h5 id=\"5-np-arange-和-reshape\"><a href=\"#5-np-arange-和-reshape\" class=\"headerlink\" title=\"5. np.arange() 和 reshape()\"></a>5. <code>np.arange()</code> 和 <code>reshape()</code></h5><blockquote>\n<p>arange() 类似 python 的 range() ，创建一个一维 ndarray 数组。</p>\n<p>reshape() 将 重新调整数组的维数。</p>\n</blockquote>\n<h5 id=\"6-random-shuffle\"><a href=\"#6-random-shuffle\" class=\"headerlink\" title=\"6.  random.shuffle()\"></a>6.  <code>random.shuffle()</code></h5><blockquote>\n<p>random.shuffle() 将打乱数组序列（类似于洗牌）。</p>\n</blockquote>\n<h4 id=\"3-ndarray的数据类型\"><a href=\"#3-ndarray的数据类型\" class=\"headerlink\" title=\"3. ndarray的数据类型\"></a>3. ndarray的数据类型</h4><h5 id=\"1-dtype参数\"><a href=\"#1-dtype参数\" class=\"headerlink\" title=\"1. dtype参数\"></a>1. <code>dtype</code>参数</h5><blockquote>\n<p>指定数组的数据类型，类型名+位数，如float64, int32</p>\n</blockquote>\n<h5 id=\"2-astype方法\"><a href=\"#2-astype方法\" class=\"headerlink\" title=\"2. astype方法\"></a>2. <code>astype</code>方法</h5><blockquote>\n<p>转换数组的数据类型</p>\n</blockquote>\n<p>示例代码（1、2）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化3行4列数组，数据类型为float64</span></span><br><span class=\"line\">zeros_float_arr = np.zeros((<span class=\"number\">3</span>, <span class=\"number\">4</span>), dtype=np.float64)</span><br><span class=\"line\">print(zeros_float_arr)</span><br><span class=\"line\">print(zeros_float_arr.dtype)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># astype转换数据类型，将已有的数组的数据类型转换为int32</span></span><br><span class=\"line\">zeros_int_arr = zeros_float_arr.astype(np.int32)</span><br><span class=\"line\">print(zeros_int_arr)</span><br><span class=\"line\">print(zeros_int_arr.dtype)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"number\">0.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>]]</span><br><span class=\"line\">float64</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]</span><br><span class=\"line\"> [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]</span><br><span class=\"line\"> [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]]</span><br><span class=\"line\">int32</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-ndarray的矩阵运算\"><a href=\"#2-2-ndarray的矩阵运算\" class=\"headerlink\" title=\"2.2. ndarray的矩阵运算\"></a>2.2. ndarray的矩阵运算</h3><h4 id=\"2-2-1-矩阵的加减乘除\"><a href=\"#2-2-1-矩阵的加减乘除\" class=\"headerlink\" title=\"2.2.1 矩阵的加减乘除\"></a>2.2.1 矩阵的加减乘除</h4><p>符合矩阵规则的矩阵运算</p>\n<h4 id=\"2-2-2-矩阵运算（点运算）的广播\"><a href=\"#2-2-2-矩阵运算（点运算）的广播\" class=\"headerlink\" title=\"2.2.2 矩阵运算（点运算）的广播\"></a>2.2.2 矩阵运算（点运算）的广播</h4><p><img src=\"http://photo.jomeswang.top/20200506233924.png\" alt=\"\"></p>\n<h4 id=\"2-2-3-矩阵的取值（索引和切片）\"><a href=\"#2-2-3-矩阵的取值（索引和切片）\" class=\"headerlink\" title=\"2.2.3 矩阵的取值（索引和切片）\"></a>2.2.3 矩阵的取值（索引和切片）</h4><h5 id=\"1-一维数组的索引与切片\"><a href=\"#1-一维数组的索引与切片\" class=\"headerlink\" title=\"1. 一维数组的索引与切片\"></a>1. 一维数组的索引与切片</h5><blockquote>\n<p>与Python的列表索引功能相似</p>\n</blockquote>\n<p>示例代码（1）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一维数组</span></span><br><span class=\"line\">arr1 = np.arange(<span class=\"number\">10</span>)</span><br><span class=\"line\">print(arr1)</span><br><span class=\"line\">print(arr1[<span class=\"number\">2</span>:<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]</span><br><span class=\"line\">[<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-多维数组的索引与切片：\"><a href=\"#2-多维数组的索引与切片：\" class=\"headerlink\" title=\"2. 多维数组的索引与切片：\"></a>2. 多维数组的索引与切片：</h5><blockquote>\n<p>arr[r1:r2, c1:c2]</p>\n<p>arr[1,1] 等价 arr[1][1]</p>\n<p>[:] 代表某个维度的数据</p>\n</blockquote>\n<p>示例代码（2）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多维数组</span></span><br><span class=\"line\">arr2 = np.arange(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">print(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\">print(arr2[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">print(arr2[<span class=\"number\">0</span>:<span class=\"number\">2</span>, <span class=\"number\">2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">print(arr2[:, <span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>]</span><br><span class=\"line\"> [ <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>]</span><br><span class=\"line\"> [ <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"number\">2</span> <span class=\"number\">3</span>]</span><br><span class=\"line\"> [<span class=\"number\">6</span> <span class=\"number\">7</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">2</span>]</span><br><span class=\"line\"> [ <span class=\"number\">5</span>  <span class=\"number\">6</span>]</span><br><span class=\"line\"> [ <span class=\"number\">9</span> <span class=\"number\">10</span>]]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-条件索引\"><a href=\"#3-条件索引\" class=\"headerlink\" title=\"3. 条件索引\"></a>3. 条件索引</h5><blockquote>\n<p>布尔值多维数组：arr[condition]，condition也可以是多个条件组合。</p>\n<p>注意，多个条件组合要使用 <strong>&amp; |</strong> 连接，而不是Python的 <strong>and or</strong>。</p>\n</blockquote>\n<p>示例代码（3）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 条件索引</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 data_arr 中 2005年后的数据</span></span><br><span class=\"line\">data_arr = np.random.rand(<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(data_arr)</span><br><span class=\"line\"></span><br><span class=\"line\">year_arr = np.array([[<span class=\"number\">2000</span>, <span class=\"number\">2001</span>, <span class=\"number\">2000</span>],</span><br><span class=\"line\">                     [<span class=\"number\">2005</span>, <span class=\"number\">2002</span>, <span class=\"number\">2009</span>],</span><br><span class=\"line\">                     [<span class=\"number\">2001</span>, <span class=\"number\">2003</span>, <span class=\"number\">2010</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">is_year_after_2005 = year_arr &gt;= <span class=\"number\">2005</span></span><br><span class=\"line\">print(is_year_after_2005, is_year_after_2005.dtype)</span><br><span class=\"line\"></span><br><span class=\"line\">filtered_arr = data_arr[is_year_after_2005]</span><br><span class=\"line\">print(filtered_arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#filtered_arr = data_arr[year_arr &gt;= 2005]</span></span><br><span class=\"line\"><span class=\"comment\">#print(filtered_arr)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个条件</span></span><br><span class=\"line\">filtered_arr = data_arr[(year_arr &lt;= <span class=\"number\">2005</span>) &amp; (year_arr % <span class=\"number\">2</span> == <span class=\"number\">0</span>)]</span><br><span class=\"line\">print(filtered_arr)</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"number\">0.53514038</span>  <span class=\"number\">0.93893429</span>  <span class=\"number\">0.1087513</span> ]</span><br><span class=\"line\"> [ <span class=\"number\">0.32076215</span>  <span class=\"number\">0.39820313</span>  <span class=\"number\">0.89765765</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.6572177</span>   <span class=\"number\">0.71284822</span>  <span class=\"number\">0.15108756</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span>]</span><br><span class=\"line\"> [ <span class=\"literal\">True</span> <span class=\"literal\">False</span>  <span class=\"literal\">True</span>]</span><br><span class=\"line\"> [<span class=\"literal\">False</span> <span class=\"literal\">False</span>  <span class=\"literal\">True</span>]] bool</span><br><span class=\"line\"></span><br><span class=\"line\">[ <span class=\"number\">0.32076215</span>  <span class=\"number\">0.89765765</span>  <span class=\"number\">0.15108756</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[ 0.32076215  0.89765765  0.15108756]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ <span class=\"number\">0.53514038</span>  <span class=\"number\">0.1087513</span>   <span class=\"number\">0.39820313</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-ndarray的维数转换\"><a href=\"#2-2-4-ndarray的维数转换\" class=\"headerlink\" title=\"2.2.4 ndarray的维数转换\"></a>2.2.4 ndarray的维数转换</h4><blockquote>\n<p>二维数组直接使用转换函数：transpose()</p>\n<p>高维数组转换要指定维度编号参数 (0, 1, 2, …)，注意参数是元组</p>\n</blockquote>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr = np.random.rand(<span class=\"number\">2</span>,<span class=\"number\">3</span>)    <span class=\"comment\"># 2x3 数组</span></span><br><span class=\"line\">print(arr)    </span><br><span class=\"line\">print(arr.transpose()) <span class=\"comment\"># 转换为 3x2 数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">arr3d = np.random.rand(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\"># 2x3x4 数组，2对应0，3对应1，4对应3</span></span><br><span class=\"line\">print(arr3d)</span><br><span class=\"line\">print(arr3d.transpose((<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>))) <span class=\"comment\"># 根据维度编号，转为为 3x2x4 数组</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二维数组转换</span></span><br><span class=\"line\"><span class=\"comment\"># 转换前：</span></span><br><span class=\"line\">[[ <span class=\"number\">0.50020075</span>  <span class=\"number\">0.88897914</span>  <span class=\"number\">0.18656499</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.32765696</span>  <span class=\"number\">0.94564495</span>  <span class=\"number\">0.16549632</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 转换后：</span></span><br><span class=\"line\">[[ <span class=\"number\">0.50020075</span>  <span class=\"number\">0.32765696</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.88897914</span>  <span class=\"number\">0.94564495</span>]</span><br><span class=\"line\"> [ <span class=\"number\">0.18656499</span>  <span class=\"number\">0.16549632</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 高维数组转换</span></span><br><span class=\"line\"><span class=\"comment\"># 转换前：</span></span><br><span class=\"line\">[[[ <span class=\"number\">0.91281153</span>  <span class=\"number\">0.61213743</span>  <span class=\"number\">0.16214062</span>  <span class=\"number\">0.73380458</span>]</span><br><span class=\"line\">  [ <span class=\"number\">0.45539155</span>  <span class=\"number\">0.04232412</span>  <span class=\"number\">0.82857746</span>  <span class=\"number\">0.35097793</span>]</span><br><span class=\"line\">  [ <span class=\"number\">0.70418988</span>  <span class=\"number\">0.78075814</span>  <span class=\"number\">0.70963972</span>  <span class=\"number\">0.63774692</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"> [[ <span class=\"number\">0.17772347</span>  <span class=\"number\">0.64875514</span>  <span class=\"number\">0.48422954</span>  <span class=\"number\">0.86919646</span>]</span><br><span class=\"line\">  [ <span class=\"number\">0.92771033</span>  <span class=\"number\">0.51518773</span>  <span class=\"number\">0.82679073</span>  <span class=\"number\">0.18469917</span>]</span><br><span class=\"line\">  [ <span class=\"number\">0.37260457</span>  <span class=\"number\">0.49041953</span>  <span class=\"number\">0.96221477</span>  <span class=\"number\">0.16300198</span>]]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-ndarray的元素处理\"><a href=\"#2-3-ndarray的元素处理\" class=\"headerlink\" title=\"2.3 ndarray的元素处理\"></a>2.3 ndarray的元素处理</h3><h4 id=\"2-3-1-元素计算函数\"><a href=\"#2-3-1-元素计算函数\" class=\"headerlink\" title=\"2.3.1 元素计算函数\"></a>2.3.1 元素计算函数</h4><ol>\n<li><code>ceil()</code>: 向上最接近的整数，参数是 number 或 array</li>\n<li><code>floor()</code>: 向下最接近的整数，参数是 number 或 array</li>\n<li><code>rint()</code>: 四舍五入，参数是 number 或 array</li>\n<li><code>isnan()</code>: 判断元素是否为 NaN(Not a Number)，参数是 number 或 array</li>\n<li><code>multiply()</code>: 元素相乘，参数是 number 或 array</li>\n<li><code>divide()</code>: 元素相除，参数是 number 或 array</li>\n<li><code>abs()</code>：元素的绝对值，参数是 number 或 array</li>\n<li><code>where(condition, x, y)</code>: 三元运算符，x if condition else y</li>\n</ol>\n<p>示例代码（1、2、3、4、5、6、7）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># randn() 返回具有标准正态分布的序列。</span></span><br><span class=\"line\">arr = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.ceil(arr))</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.floor(arr))</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.rint(arr))</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.isnan(arr))</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.multiply(arr, arr))</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.divide(arr, arr))</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.where(arr &gt; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># print(arr)</span></span><br><span class=\"line\">[[<span class=\"number\">-0.75803752</span>  <span class=\"number\">0.0314314</span>   <span class=\"number\">1.15323032</span>]</span><br><span class=\"line\"> [ <span class=\"number\">1.17567832</span>  <span class=\"number\">0.43641395</span>  <span class=\"number\">0.26288021</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.ceil(arr))</span></span><br><span class=\"line\">[[<span class=\"number\">-0.</span>  <span class=\"number\">1.</span>  <span class=\"number\">2.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">2.</span>  <span class=\"number\">1.</span>  <span class=\"number\">1.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.floor(arr))</span></span><br><span class=\"line\">[[<span class=\"number\">-1.</span>  <span class=\"number\">0.</span>  <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">1.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.rint(arr))</span></span><br><span class=\"line\">[[<span class=\"number\">-1.</span>  <span class=\"number\">0.</span>  <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">1.</span>  <span class=\"number\">0.</span>  <span class=\"number\">0.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.isnan(arr))</span></span><br><span class=\"line\">[[<span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span>]</span><br><span class=\"line\"> [<span class=\"literal\">False</span> <span class=\"literal\">False</span> <span class=\"literal\">False</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.multiply(arr, arr))</span></span><br><span class=\"line\">[[  <span class=\"number\">5.16284053e+00</span>   <span class=\"number\">1.77170104e+00</span>   <span class=\"number\">3.04027254e-02</span>]</span><br><span class=\"line\"> [  <span class=\"number\">5.11465231e-03</span>   <span class=\"number\">3.46109263e+00</span>   <span class=\"number\">1.37512421e-02</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.divide(arr, arr))</span></span><br><span class=\"line\">[[ <span class=\"number\">1.</span>  <span class=\"number\">1.</span>  <span class=\"number\">1.</span>]</span><br><span class=\"line\"> [ <span class=\"number\">1.</span>  <span class=\"number\">1.</span>  <span class=\"number\">1.</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.where(arr &gt; 0, 1, -1))</span></span><br><span class=\"line\">[[ <span class=\"number\">1</span>  <span class=\"number\">1</span> <span class=\"number\">-1</span>]</span><br><span class=\"line\"> [<span class=\"number\">-1</span>  <span class=\"number\">1</span>  <span class=\"number\">1</span>]]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-元素统计函数\"><a href=\"#2-3-2-元素统计函数\" class=\"headerlink\" title=\"2.3.2 元素统计函数\"></a>2.3.2 元素统计函数</h4><ol>\n<li><code>np.mean()</code>, <code>np.sum()</code>：所有元素的平均值，所有元素的和，参数是 number 或 array</li>\n<li><code>np.max()</code>, <code>np.min()</code>：所有元素的最大值，所有元素的最小值，参数是 number 或 array</li>\n<li><code>np.std()</code>, <code>np.var()</code>：所有元素的标准差，所有元素的方差，参数是 number 或 array</li>\n<li><code>np.argmax()</code>, <code>np.argmin()</code>：最大值的下标索引值，最小值的下标索引值，参数是 number 或 array</li>\n<li><code>np.cumsum()</code>, <code>np.cumprod()</code>：返回一个一维数组，每个元素都是之前所有元素的 累加和 和 累乘积，参数是 number 或 array</li>\n<li>多维数组默认统计全部维度，<code>axis</code>参数可以按指定轴心统计，值为<code>0</code>则按列统计，值为<code>1</code>则按行统计。</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr = np.arange(<span class=\"number\">12</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">print(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.cumsum(arr)) <span class=\"comment\"># 返回一个一维数组，每个元素都是之前所有元素的 累加和</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.sum(arr)) <span class=\"comment\"># 所有元素的和</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.sum(arr, axis=<span class=\"number\">0</span>)) <span class=\"comment\"># 数组的按列统计和</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(np.sum(arr, axis=<span class=\"number\">1</span>)) <span class=\"comment\"># 数组的按行统计和</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># print(arr)</span></span><br><span class=\"line\">[[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>]</span><br><span class=\"line\"> [ <span class=\"number\">4</span>  <span class=\"number\">5</span>  <span class=\"number\">6</span>  <span class=\"number\">7</span>]</span><br><span class=\"line\"> [ <span class=\"number\">8</span>  <span class=\"number\">9</span> <span class=\"number\">10</span> <span class=\"number\">11</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.cumsum(arr)) </span></span><br><span class=\"line\">[ <span class=\"number\">0</span>  <span class=\"number\">1</span>  <span class=\"number\">3</span>  <span class=\"number\">6</span> <span class=\"number\">10</span> <span class=\"number\">15</span> <span class=\"number\">21</span> <span class=\"number\">28</span> <span class=\"number\">36</span> <span class=\"number\">45</span> <span class=\"number\">55</span> <span class=\"number\">66</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.sum(arr)) # 所有元素的和</span></span><br><span class=\"line\"><span class=\"number\">66</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.sum(arr, axis=0)) # 0表示对数组的每一列的统计和</span></span><br><span class=\"line\">[<span class=\"number\">12</span> <span class=\"number\">15</span> <span class=\"number\">18</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(np.sum(arr, axis=1)) # 1表示数组的每一行的统计和</span></span><br><span class=\"line\">[ <span class=\"number\">6</span> <span class=\"number\">22</span> <span class=\"number\">38</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-元素判断函数\"><a href=\"#2-3-3-元素判断函数\" class=\"headerlink\" title=\"2.3.3 元素判断函数\"></a>2.3.3 元素判断函数</h4><ol>\n<li><code>np.any()</code>: 至少有一个元素满足指定条件，返回True</li>\n<li><code>np.all()</code>: 所有的元素满足指定条件，返回True</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">print(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.any(arr &gt; <span class=\"number\">0</span>))</span><br><span class=\"line\">print(np.all(arr &gt; <span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[ <span class=\"number\">0.05075769</span> <span class=\"number\">-1.31919688</span> <span class=\"number\">-1.80636984</span>]</span><br><span class=\"line\"> [<span class=\"number\">-1.29317016</span> <span class=\"number\">-1.3336612</span>  <span class=\"number\">-0.19316432</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-4-元素去重排序函数\"><a href=\"#2-3-4-元素去重排序函数\" class=\"headerlink\" title=\"2.3.4 元素去重排序函数\"></a>2.3.4 元素去重排序函数</h4><p><code>np.unique()</code>:找到唯一值并返回排序结果，类似于Python的set集合</p>\n<p>示例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\">print(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">print(np.unique(arr))</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">1</span>]</span><br><span class=\"line\"> [<span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三：总结\"><a href=\"#三：总结\" class=\"headerlink\" title=\"三：总结\"></a>三：总结</h2><p>大家一步步来尝试一下吧！！接下将是Pandas大餐。</p>\n","categories":["数据分析"],"tags":["python","数据分析"]},{"title":"记录一次傻傻的踏青活动","url":"/posts/1fd295e6/","content":"<blockquote>\n<p>踏青时，不知那飘拂在空中的青丝是谁的，不知又是谁在背后嘻嘻笑着，更不知谁的心又会因谁而激起波澜。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>2020年05月04日</p>\n<p>今天真是一个适合踏青的日子啊，下午急急忙忙的出发了，时间总是有点急切的。但是今天的心情却从来没有被不好的begining而有些许波澜。</p>\n<p>一路上的嘻嘻闹闹，这样的气氛真是好惬意啊！！</p>\n<p>我好久没有如此放下心去享受这一切了，之前一直为着一件接着一件的事而忙碌着，虽然心中明白有付出也必会有收获，但是一直心里都承受着无与伦比的压力，担心今日与明日，这样的压力几近让我达到崩溃的临界点。</p>\n<p>从来不知何为生活，原本想着生活可能就是在不断学习中获得成长，不断地肝，但是过了今日，我也有些许明白了。也许不能大富大贵一生，但希望痛苦时有人陪你一起度过，开心时有人陪你一起分享。有时我也明白一个人的承受力真的是有限的。但我。。。。</p>\n<p>放完牢骚之后，说些开心的事吧。</p>\n<p>拍到hlx披发的照片了</p>\n<p><img src=\"http://photo.jomeswang.top/20200505105236.png\" alt=\"\"></p>\n<p>(￣▽￣)”</p>\n<p>一开始，到了一个奇葩的地方</p>\n<p><img src=\"http://photo.jomeswang.top/20200505105331.png\" alt=\"\"></p>\n<p>定位搞错了，导致来到一个封闭的场所。导致走了一小段路才与人回合</p>\n<p><img src=\"http://photo.jomeswang.top/20200505111605.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200505111645.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200505111715.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200505111803.png\" alt=\"\"></p>\n<p>搞基三人组：</p>\n<p><img src=\"http://photo.jomeswang.top/20200505194828.png\" alt=\"\"></p>\n<p>圈子里的人：</p>\n<p><img src=\"http://photo.jomeswang.top/20200505195036.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200505195130.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200505195155.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200505220134.png\" alt=\"\"></p>\n<p>！！！！</p>\n<p>今日的分别总是为着他日的相聚而创造机会。</p>\n<p>天下无不散之筵席。</p>\n<p>希望我们相忘于江湖。</p>\n<p>2020年05月06日</p>\n<p>一次无聊的心灵独白，这一次的明信片没有将自己想说的话说出来，到时有点流水账的感觉了。</p>\n<p>当作一篇回忆录，</p>\n<p>To hlx:</p>\n<p>初见你的时候，我自己一个人过着平平淡淡的生活，但你却蹦蹦跳跳的跳进了我的生活。我的生活就像突然有了一束光，照亮我的小世界，我不知道是否是。。。。</p>\n<p>但有时我根本就不想回去，就想每天看着你，每天祈盼你能够问我问题，我因能解答你的一切疑问而感到快乐。我不知道这是一种什么情绪，我也不想知道。。。我只想看着你一步步的成长。假如有一天，你累了，我只希望能够你有一个可以让你值得信赖的肩膀。</p>\n<p>我有时真的不想你受到一点点的挫折与伤害，我只希望你能够快快乐乐的成长。</p>\n<p>我并不打算闯入你的生活，我希望你有个很快乐的生活。</p>\n<p>就算忘记这一切，我也不能忘记那段日子里你说着“来，你教我做题，我请你吃糖”。吃糖的时候，我的心充满着甜蜜，那这并不是这糖的甜味，而是你的话语如糖果般为我那苍老的心灵带来一丝的慰藉，也许以后很少有机会可以再见，但是希望你以后能够找到一个那个适合你的港湾，有着一个爱你的人，与一个你爱的人，一个可以陪你看着夕阳落与朝日升。</p>\n<p>希望我们以后还能如此的朋友，说着不用去思考的话。</p>\n<blockquote>\n<p>​    黄金蕊绽红玉房 ，<br>​    李树影笼周柱史 ，<br>​    雪前栏槛竹前窗 。 </p>\n</blockquote>\n<p>To xqx：</p>\n<p>我觉得你也是个好人，虽然我好像对你没有什么印象，但我依然觉得你是个好人。一个很好好的人！！</p>\n<p>只不过你让我很气的就是我发信息的时候你居然不回复我！！！我很气的好吗，我觉得你这样做很不尊重我哎(　o=^•ェ•)o　┏━┓</p>\n<p>但是我还是希望你能过的好好地！！！</p>\n<p>我觉得你这个人有些时候有些敏感了，呵呵呵！！</p>\n<blockquote>\n<p>​    谢女多才咏不尽 ，<br>​    青青不朽岂杨梅 ，<br>​    西园高树后庭根 。</p>\n</blockquote>\n<p>To ： zzb：</p>\n<p>不会忘记那段我们一起奔跑的日子==</p>\n<p>其实有时我也想有个人能和我一起走在人生征途上。但是一切随缘吧！！</p>\n","categories":["随笔"],"tags":["随笔"]},{"title":"flask 部署到bt python项目管理器上","url":"/posts/84479843/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>今天要搞个快速部署到BT服务器上的教程，运用BT的python 项目管理器。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：内容\"><a href=\"#二：内容\" class=\"headerlink\" title=\"二：内容\"></a>二：内容</h2><p>原始返回：</p>\n<p><img src=\"http://photo.jomeswang.top/20200505084744.png\" alt=\"\"></p>\n<p>之后，打开BT面板（如果未装过，<a href=\"https://www.bt.cn/bbs/thread-19376-1-1.html\" target=\"_blank\" rel=\"noopener\">请点击安装</a>），之后配好环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>用这个命令去把项目所需的拓展包导出</p>\n<p>然后打开这个文件，按需删除其他不需要的拓展包（非虚拟环境下）</p>\n<p><img src=\"http://photo.jomeswang.top/20200505091118.png\" alt=\"\"></p>\n<h3 id=\"2-1-安装python项目管理器\"><a href=\"#2-1-安装python项目管理器\" class=\"headerlink\" title=\"2.1 安装python项目管理器\"></a>2.1 安装python项目管理器</h3><p>之后进入软件商店找到python项目管理器后安装（注意bt版本要在7以上才有这界面，如果没有请自行升级bt版本）</p>\n<p><img src=\"http://photo.jomeswang.top/20200505085142.png\" alt=\"\"></p>\n<h3 id=\"2-2-上传文件\"><a href=\"#2-2-上传文件\" class=\"headerlink\" title=\"2.2 上传文件\"></a>2.2 上传文件</h3><ol>\n<li>新建server_test目录</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200505094915.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>新建flask目录</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200505085615.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>新建flask_test 目录</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200505085857.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>在里面上传.py文件和 requirements.txt</li>\n</ol>\n<h3 id=\"2-3-进入python项目管理器\"><a href=\"#2-3-进入python项目管理器\" class=\"headerlink\" title=\"2.3 进入python项目管理器\"></a>2.3 进入python项目管理器</h3><p><img src=\"http://photo.jomeswang.top/20200505090116.png\" alt=\"\"></p>\n<ol>\n<li>添加python项目</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200505095711.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>映射域名</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200505095919.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>改变端口号</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200505100211.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>成功啦</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200505100716.png\" alt=\"\"></p>\n<h2 id=\"三：总结\"><a href=\"#三：总结\" class=\"headerlink\" title=\"三：总结\"></a>三：总结</h2><p>在使用的过程中，也预料到一些麻烦，比如文件名是中文的话，就可能不能被识别，然后尝试了一番才发现，那么只有多尝试最后才能找到真理啊！！！</p>\n","categories":["python"],"tags":["python","flask","python项目管理器"]},{"title":"Flask 框架的学习","url":"/posts/d4859235/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>前端时间学习了下Flask，准备在这里记录一下Flask的基础入门。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：内容\"><a href=\"#二：内容\" class=\"headerlink\" title=\"二：内容\"></a>二：内容</h2><h3 id=\"2-1-创建并初始化\"><a href=\"#2-1-创建并初始化\" class=\"headerlink\" title=\"2.1     创建并初始化\"></a>2.1     创建并初始化</h3><p>首先先安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install flask flask_restful</span><br></pre></td></tr></table></figure>\n\n<p>之后创建一个hello.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 导入Flask类</span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">#Flask类接收一个参数__name__</span><br><span class=\"line\">app &#x3D; Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 装饰器的作用是将路由映射到视图函数index</span><br><span class=\"line\">@app.route(&#39;&#x2F;&#39;)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    return &#39;Hello World&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Flask应用程序实例的run方法启动WEB服务器</span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    app.run(debug &#x3D; True)</span><br></pre></td></tr></table></figure>\n\n<p>效果图：<img src=\"http://photo.jomeswang.top/20200504101629.png\" alt=\"\"></p>\n<h3 id=\"2-2-路由分发并获取请求\"><a href=\"#2-2-路由分发并获取请求\" class=\"headerlink\" title=\"2.2     路由分发并获取请求\"></a>2.2     路由分发并获取请求</h3><h4 id=\"1-使用原生api给路由传参\"><a href=\"#1-使用原生api给路由传参\" class=\"headerlink\" title=\"1.使用原生api给路由传参\"></a>1.使用原生api给路由传参</h4><ol>\n<li>将url中的参数提取出来</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@app.route(&#39;&#x2F;user&#x2F;&lt;int:id&gt;&#39;)</span><br><span class=\"line\">def hello(id):</span><br><span class=\"line\">    return &#39;hello  %d&#39; % id</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200504102220.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>使用的是Http请求（get，post，put, delete）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 引入request</span><br><span class=\"line\">from flask import request</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#39;&#x2F;http-method-test&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;, &#39;DELETE&#39;]) </span><br><span class=\"line\">def http_method_example():</span><br><span class=\"line\">    if request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class=\"line\">        return &#39;Send request with &#96;GET&#96; method&#39;</span><br><span class=\"line\">    elif request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class=\"line\">        return &#39;Send request with &#96;POST&#96; method&#39;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200504103146.png\" alt=\"\"></p>\n<p>获取请求数据</p>\n<p>request.form.get(“key”, type=str, default=None) 获取表单数据</p>\n<p>request.args.get(“key”) 获取get请求参数</p>\n<p>request.values.get(“key”) 获取所有参数</p>\n<p>下面给出例子：</p>\n<ol>\n<li>get请求</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@app.route(&#39;&#x2F;get_test&#39;, methods&#x3D;[&#39;GET&#39;])</span><br><span class=\"line\">def get_test():</span><br><span class=\"line\">    if request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class=\"line\">        return request.args.get(&quot;data&quot;)</span><br><span class=\"line\">    return &quot;I am a boy&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200504104723.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>同理可以获得post请求</li>\n</ol>\n<p>因此使用<code>request.values.get(&quot;key&quot;)</code>最方便</p>\n<h4 id=\"2-使用flask-restful\"><a href=\"#2-使用flask-restful\" class=\"headerlink\" title=\"2.使用flask_restful\"></a>2.使用flask_restful</h4><p>原生和拓展的比对</p>\n<p>原生：</p>\n<p><img src=\"http://photo.jomeswang.top/20200504105139.png\" alt=\"\"></p>\n<p>拓展：</p>\n<p><img src=\"http://photo.jomeswang.top/20200504105158.png\" alt=\"\"></p>\n<p>看着第二种舒服不是吗，并且满足API的Restful规则</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 首先引入</span><br><span class=\"line\">import  flask_restful</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, request</span><br><span class=\"line\">from flask_restful import reqparse, Resource, Api</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个实例对象</span><br><span class=\"line\">app &#x3D; Flask(__name__)</span><br><span class=\"line\">api &#x3D; Api(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 该类继承自 Resource 类</span><br><span class=\"line\">class Hello(Resource):</span><br><span class=\"line\">    # 假如这个使用的是get方法就会进入这个视图函数里面</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        mydict &#x3D; &#123;&#39;message&#39;: &quot;Hello&quot;&#125;</span><br><span class=\"line\">        return mydict, 200</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Hello 这个资源类分配路由</span><br><span class=\"line\">api.add_resource(Hello, &#39;&#x2F;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    app.run(port&#x3D;4000, debug&#x3D;True)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200505002225.png\" alt=\"\"></p>\n<ol>\n<li><h4 id=\"使用flask-restful-获取相应值\"><a href=\"#使用flask-restful-获取相应值\" class=\"headerlink\" title=\"使用flask_restful 获取相应值\"></a>使用flask_restful 获取相应值</h4></li>\n</ol>\n<p>法一：使用原生的<code>request.values.get()</code>方法获取得到值。</p>\n<p>法二：使用reqparse 来请求解析数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, request</span><br><span class=\"line\">from flask_restful import reqparse, Resource, Api</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建一个实例对象</span><br><span class=\"line\">app &#x3D; Flask(__name__)</span><br><span class=\"line\">api &#x3D; Api(app)</span><br><span class=\"line\"># 使用捆绑错误选项调用RequestParser， 让错误可以一次全部输出</span><br><span class=\"line\">parser &#x3D; reqparse.RequestParser(bundle_errors&#x3D;True)</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加请求参数验证， help为类型检查错误时出现的东西</span><br><span class=\"line\">parser.add_argument(&quot;number&quot;, type&#x3D;int, help&#x3D;&#39;number should be int&#39;)</span><br><span class=\"line\">parser.add_argument(&quot;name&quot;, type&#x3D;str)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 该类继承自 Resource 类</span><br><span class=\"line\">class Hello(Resource):</span><br><span class=\"line\">    # 假如这个使用的是get方法就会进入这个视图函数里面</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        # 取出请求中所有的数据</span><br><span class=\"line\">        args &#x3D; parser.parse_args()</span><br><span class=\"line\">        # 使用args[] 方法可以取出数据</span><br><span class=\"line\">        return &#123;&#39;number&#39;: args[&#39;number&#39;], &#39;name&#39;: args[&#39;name&#39;]&#125;, 200</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将Hello 这个资源类分配路由</span><br><span class=\"line\">api.add_resource(Hello, &#39;&#x2F;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    app.run(port&#x3D;4000, debug&#x3D;True)</span><br></pre></td></tr></table></figure>\n\n<p>不符合验证规则的请求</p>\n<p><img src=\"http://photo.jomeswang.top/20200505003359.png\" alt=\"\"></p>\n<p>符合验证规则的请求</p>\n<p><img src=\"http://photo.jomeswang.top/20200505003511.png\" alt=\"\"></p>\n","categories":["python"],"tags":["python","flask"]},{"title":"Matlab学习（五）之函数","url":"/posts/918ca5be/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>之前我们学习了如何编写脚本文件了，现在我们来学习一下如何编写函数文件</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：内容\"><a href=\"#二：内容\" class=\"headerlink\" title=\"二：内容\"></a>二：内容</h2><p>我们先看看什么是函数文件</p>\n<blockquote>\n<p> 供其它M文件调用，通常带输入参数和输出参数</p>\n</blockquote>\n<h3 id=\"2-1-编写函数文件和子函数\"><a href=\"#2-1-编写函数文件和子函数\" class=\"headerlink\" title=\"2.1 编写函数文件和子函数\"></a>2.1 编写函数文件和子函数</h3><p>创建函数文件</p>\n<p>法一：直接创建<img src=\"http://photo.jomeswang.top/20200502231202.png\" alt=\"\"></p>\n<p>法二：先创建脚本文件输入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function    输出形参列表&#x3D;函数名(形参列表)</span><br><span class=\"line\">% 注释说明部分(可选)</span><br><span class=\"line\">函数体语句(必须)</span><br><span class=\"line\"></span><br><span class=\"line\">% 当输出形参多于一个时，用方括号括起来</span><br><span class=\"line\">% 函数文件名必须与函数名一致</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<p><img src=\"http://photo.jomeswang.top/20200502231605.png\" alt=\"\"></p>\n<p><strong>子函数</strong>：</p>\n<ol>\n<li>一个函数文件中可以含有一个或多个函数，  其中第一个称为主函数，其它函数称为子函数</li>\n<li>子函数由 function 语句引导</li>\n<li>主函数必须位于最前面，子函数出现的次序任意。子函数只能被主函数和位于同一个函数文件中的其它子函数调用</li>\n</ol>\n<p>例子：</p>\n<p><img src=\"http://photo.jomeswang.top/20200502232027.png\" alt=\"\"></p>\n<h3 id=\"2-2-局部变量和全局变量\"><a href=\"#2-2-局部变量和全局变量\" class=\"headerlink\" title=\"2.2 局部变量和全局变量\"></a>2.2 局部变量和全局变量</h3><ol>\n<li>函数文件中的变量都是局部的，即一个函数文件中定义的变量不能被另一个函数文件或其它 M 文件使用</li>\n<li>当函数调用完毕后，该函数文件中定义的所有局部变量都将被释放，即全部被清除</li>\n<li>全局变量的定义: global 变量名列表</li>\n<li>全局变量的变量名列表中的各个变量用空格隔开，不能用逗号！</li>\n</ol>\n<h3 id=\"2-3-函数句柄和内联函数和匿名函数\"><a href=\"#2-3-函数句柄和内联函数和匿名函数\" class=\"headerlink\" title=\"2.3 函数句柄和内联函数和匿名函数\"></a>2.3 函数句柄和内联函数和匿名函数</h3><p>1.函数句柄</p>\n<p><img src=\"http://photo.jomeswang.top/20200502232158.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>内联函数</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200502232257.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>匿名函数</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200502232337.png\" alt=\"\"></p>\n","categories":["Matlab"],"tags":["Matlab","Matlab学习特辑"]},{"title":"Matlab学习（四）之脚本","url":"/posts/5c742b42/","content":"<h2 id=\"一：-前言\"><a href=\"#一：-前言\" class=\"headerlink\" title=\"一： 前言\"></a>一： 前言</h2><p>本章主要来介绍一下什么是脚本文件，如何编写脚本文件，以及Matlab的基本运算和控制结构</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：主要内容\"><a href=\"#二：主要内容\" class=\"headerlink\" title=\"二：主要内容\"></a>二：主要内容</h2><h3 id=\"2-1-什么是脚本以及如何创建\"><a href=\"#2-1-什么是脚本以及如何创建\" class=\"headerlink\" title=\"2.1 什么是脚本以及如何创建\"></a>2.1 什么是脚本以及如何创建</h3><blockquote>\n<p>利用 Matlab 的程序控制功能，将相关 Matlab 命令编成程序存储在一个文件中（M 文件），然后在命令窗口中运行该文件，Matlab 就会自动依次执行文件中的命令，直到全部命令执行完毕</p>\n<p>M 文件以 .m 为扩展名</p>\n</blockquote>\n<p>创建文件：点击主页新建脚本文件，记得还要设置路径。</p>\n<p><img src=\"http://photo.jomeswang.top/20200502214123.png\" alt=\"\"></p>\n<p>运行文件：可以直接点开运行，也可以先打开文件再在编辑器选项卡中点击运行。</p>\n<p><img src=\"http://photo.jomeswang.top/20200502214341.png\" alt=\"\"></p>\n<h3 id=\"2-2-基本运算\"><a href=\"#2-2-基本运算\" class=\"headerlink\" title=\"2.2  基本运算\"></a>2.2  基本运算</h3><blockquote>\n<p>算术，关系，逻辑</p>\n</blockquote>\n<ol>\n<li>关系运算符</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>&lt;</strong></th>\n<th><strong>小于</strong></th>\n<th><strong>&lt;=</strong></th>\n<th><strong>小于等于</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>&gt;</strong></td>\n<td><strong>大于</strong></td>\n<td><strong>&gt;=</strong></td>\n<td><strong>大于等于</strong></td>\n</tr>\n<tr>\n<td><strong>==</strong></td>\n<td><strong>等于</strong></td>\n<td><strong>~=</strong></td>\n<td><strong>不等于</strong></td>\n</tr>\n</tbody></table>\n<p>比较大小，如果结论是 真 则返回 1 ，否则返回 0</p>\n<ol start=\"2\">\n<li>逻辑运算</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>&amp;</strong></th>\n<th><strong>与</strong> (<strong>Elementwise</strong> <strong>AND)</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>|</strong></td>\n<td><strong>或</strong> (<strong>Elementwise</strong> <strong>OR)</strong></td>\n</tr>\n<tr>\n<td><strong>~</strong></td>\n<td><strong>非</strong></td>\n</tr>\n<tr>\n<td><strong>xor(x,y)</strong></td>\n<td><strong>异或</strong></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>&amp;&amp;</strong></th>\n<th><strong>与</strong> (Short-circuit AND)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>||</strong></td>\n<td><strong>或 (Short-circuitOR)</strong></td>\n</tr>\n</tbody></table>\n<p>逻辑运算函数：</p>\n<p><img src=\"http://photo.jomeswang.top/20200502215354.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200502215413.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>运算优先级</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200502215626.png\" alt=\"\"></p>\n<h3 id=\"2-3-数据输入和输出\"><a href=\"#2-3-数据输入和输出\" class=\"headerlink\" title=\"2.3 数据输入和输出\"></a>2.3 数据输入和输出</h3><ol>\n<li>c = input(‘提示信息’)</li>\n</ol>\n<p>其中 提示信息 为字符串，<br> 该命令要求用户输入 A 的值 (可以是数或字符串)</p>\n<blockquote>\n<p>输入字符串时必须带单引号<br> 单引号的输出：两个连续的单引号</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>数据的输出：</p>\n<p> disp(X)</p>\n</li>\n</ol>\n<blockquote>\n<p> 输出变量 X 的值，X 可以是数值、矩阵或字符串<br> 一次只能输出一个变量<br> 复杂的输出必须用合并的方式实现</p>\n</blockquote>\n<p>复合输出disp([‘You have ‘,num2str(n), ‘ apples.’])</p>\n<p>​    数据的格式化输出：fprintf</p>\n<p>​    fprintf(fid,format,variables)</p>\n<p><img src=\"http://photo.jomeswang.top/20200502221243.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200502221322.png\" alt=\"\"></p>\n<h3 id=\"2-4-控制结构\"><a href=\"#2-4-控制结构\" class=\"headerlink\" title=\"2.4 控制结构\"></a>2.4 控制结构</h3><ol>\n<li><p>顺序结构</p>\n</li>\n<li><p>选择结构（if switch）</p>\n<p><strong>If 语句</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200502222812.png\" alt=\"\"></p>\n<p><strong>switch 语句</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200502222914.png\" alt=\"\"></p>\n</li>\n<li><p>循环结构</p>\n<p><strong>for 循环</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200502223418.png\" alt=\"\"></p>\n<p>例子：</p>\n<p><img src=\"http://photo.jomeswang.top/20200502223459.png\" alt=\"\"></p>\n<p><strong>while 循环</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200502223820.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"2-5-其他控制语句\"><a href=\"#2-5-其他控制语句\" class=\"headerlink\" title=\"2.5 其他控制语句\"></a>2.5 其他控制语句</h3><ol>\n<li><p>break 和 continue</p>\n<p>break 语句用于终止循环的执行，即跳出最内层循环<br>continue 语句用于结束本次循环，进行下一次循环<br>break 和 continue 一般与 if 语句配合使用</p>\n</li>\n<li><p>return</p>\n<p>return 语句用于退出正在运行的脚本或函数，通常用在函数文件中</p>\n</li>\n</ol>\n","categories":["Matlab"],"tags":["Matlab","Matlab学习特辑"]},{"title":"pandas搭配openpyxl进行excel读写操作","url":"/posts/7af05105/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>因为有个项目需要批量处理excel 文件，进行分组导出并求和。因此我就想到使用pandas 来进行数据的处理， 使openpyxl 来进行数据的保存，以及导出excel文件并且对excel 文件进行格式化以及美化操作。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-使用pandas进行分组求和\"><a href=\"#2-1-使用pandas进行分组求和\" class=\"headerlink\" title=\"2.1 使用pandas进行分组求和\"></a>2.1 使用pandas进行分组求和</h3><p>有着像这样的数据</p>\n<p><img src=\"http://photo.jomeswang.top/20200501212229.png\" alt=\"\"></p>\n<p>我要做的就n是将每个客户的数据导出到独立的文件夹中，并计算金额</p>\n<p>首先，使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data_g &#x3D; data.groupby(&quot;客户名称&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以分出每一个客户了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data_g_sum &#x3D; data_g[&quot;金额&quot;].sum()</span><br></pre></td></tr></table></figure>\n\n<p>保存写入数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for i in data_g:</span><br><span class=\"line\">    i[1].to_excel(dir) # dir为目标xlsx文件路径</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-2-使用openpyxl-进行打开文件并保存文件\"><a href=\"#2-2-使用openpyxl-进行打开文件并保存文件\" class=\"headerlink\" title=\"2.2  使用openpyxl 进行打开文件并保存文件\"></a>2.2  使用openpyxl 进行打开文件并保存文件</h3><h4 id=\"2-2-1-如果使用未创建的excel-需要先创建\"><a href=\"#2-2-1-如果使用未创建的excel-需要先创建\" class=\"headerlink\" title=\"2.2.1 如果使用未创建的excel 需要先创建\"></a>2.2.1 如果使用未创建的excel 需要先创建</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from openpyxl import Workbook</span><br><span class=\"line\"></span><br><span class=\"line\">wb &#x3D; Workbook() # 创建一个Workbook对象</span><br><span class=\"line\">ws &#x3D; wb.active # 选取wb对象中活动的对象，默认为第一个sheet</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者 ws1 &#x3D; wb.create_sheet(&quot;Sheet&quot;, 0) 插入第一张sheet</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-如果打开已经存在的文件\"><a href=\"#2-2-2-如果打开已经存在的文件\" class=\"headerlink\" title=\"2.2.2 如果打开已经存在的文件\"></a>2.2.2 如果打开已经存在的文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wb &#x3D; openpyxl.load_workbook(dir)</span><br><span class=\"line\">sheet &#x3D; wb.active</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-保存文件\"><a href=\"#2-2-3-保存文件\" class=\"headerlink\" title=\"2.2.3 保存文件\"></a>2.2.3 保存文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#使用</span><br><span class=\"line\">wb.save(dir)  # dir 为输出的xlsx文件路径</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-3-增删改查单元格的值\"><a href=\"#2-3-增删改查单元格的值\" class=\"headerlink\" title=\"2.3  增删改查单元格的值\"></a>2.3  增删改查单元格的值</h3><h4 id=\"2-3-1-一个单元格的值\"><a href=\"#2-3-1-一个单元格的值\" class=\"headerlink\" title=\"2.3.1 一个单元格的值\"></a>2.3.1 一个单元格的值</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 方法一</span><br><span class=\"line\"># 直接使用列名</span><br><span class=\"line\">ws[&#39;A4&#39;] &#x3D; 4</span><br><span class=\"line\"></span><br><span class=\"line\">2. 方法二</span><br><span class=\"line\"># 使用 cell 方法，传入行列（注意全部从1开始数），还可以传入value 值</span><br><span class=\"line\">d &#x3D; ws.cell(row&#x3D;4, column&#x3D;2, value&#x3D;10)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-多个单元格的值\"><a href=\"#2-3-2-多个单元格的值\" class=\"headerlink\" title=\"2.3.2 多个单元格的值\"></a>2.3.2 多个单元格的值</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">一：使用切片方式</span><br><span class=\"line\">cell_range &#x3D; ws[&#39;A1&#39;:&#39;C2&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">二：使用列名</span><br><span class=\"line\">colC &#x3D; ws[&#39;C&#39;]</span><br><span class=\"line\">col_range &#x3D; ws[&#39;C:D&#39;]</span><br><span class=\"line\">row10 &#x3D; ws[10]</span><br><span class=\"line\">row_range &#x3D; ws[5:10]</span><br><span class=\"line\"></span><br><span class=\"line\">三：使用Worksheet.columns  || Worksheet.rows 来产生可迭代对象 </span><br><span class=\"line\"> tuple(ws.rows)</span><br><span class=\"line\">((&lt;Cell Sheet.A1&gt;, &lt;Cell Sheet.B1&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A2&gt;, &lt;Cell Sheet.B2&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A3&gt;, &lt;Cell Sheet.B3&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A4&gt;, &lt;Cell Sheet.B4&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A5&gt;, &lt;Cell Sheet.B5&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A6&gt;, &lt;Cell Sheet.B6&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A7&gt;, &lt;Cell Sheet.B7&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A8&gt;, &lt;Cell Sheet.B8&gt;, </span><br><span class=\"line\">(&lt;Cell Sheet.A9&gt;, &lt;Cell Sheet.B9&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\">for 循环再用.value方法取值</span><br><span class=\"line\">（注意好像不能用这个改变他的格式）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-增加-删除-行列\"><a href=\"#2-3-3-增加-删除-行列\" class=\"headerlink\" title=\"2.3.3 增加/删除 行列\"></a>2.3.3 增加/删除 行列</h4><ol>\n<li>插入行列</li>\n</ol>\n<p>ws.insert_rows(n) # 在第n行插入一行</p>\n<p>ws.insert_cols(m,n) # 从第m列开始插入n列</p>\n<ol start=\"2\">\n<li>删除行列</li>\n</ol>\n<p>ws.delete_cols(m, n) # 从第m列开始，删除n列</p>\n<p>ws.delete_rows(n) # 删除第n行</p>\n<p>上述两种方式<strong>删除行（列）后，下（后）面的表格将自动上（前）移</strong>。</p>\n<h4 id=\"2-4-单元格格式\"><a href=\"#2-4-单元格格式\" class=\"headerlink\" title=\"2.4  单元格格式\"></a>2.4  单元格格式</h4><p>首先先引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import openpyxl</span><br><span class=\"line\">from openpyxl.styles import Font, PatternFill, Border, Side, Alignment</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-4-1-字体\"><a href=\"#2-4-1-字体\" class=\"headerlink\" title=\"2.4.1 字体\"></a>2.4.1 字体</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 设置单元格字体样式</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">Font(</span><br><span class=\"line\">    name&#x3D;None,      # 字体名，可以用字体名字的字符串</span><br><span class=\"line\">    strike&#x3D;None,    # 删除线，True&#x2F;False</span><br><span class=\"line\">    color&#x3D;None,     # 文字颜色</span><br><span class=\"line\">    size&#x3D;None,      # 字号</span><br><span class=\"line\">    bold&#x3D;None,      # 加粗, True&#x2F;False</span><br><span class=\"line\">    italic&#x3D;None,    # 倾斜，Tue&#x2F;False</span><br><span class=\"line\">    underline&#x3D;None # 下划线, &#39;singleAccounting&#39;, &#39;double&#39;, &#39;single&#39;, &#39;doubleAccounting&#39;</span><br><span class=\"line\">)</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"># 1) 创建字体对象</span><br><span class=\"line\">font1 &#x3D; Font(</span><br><span class=\"line\">        size&#x3D;20,</span><br><span class=\"line\">        italic&#x3D;True,</span><br><span class=\"line\">        color&#x3D;&#39;ff0000&#39;,</span><br><span class=\"line\">        bold&#x3D;True,</span><br><span class=\"line\">        strike&#x3D;True</span><br><span class=\"line\">)</span><br><span class=\"line\"># 2) 设置指定单元格的字体</span><br><span class=\"line\"># 单元格对象.font &#x3D; 字体对象</span><br><span class=\"line\">sheet[&#39;B2&#39;].font &#x3D; font1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-对齐样式\"><a href=\"#2-4-2-对齐样式\" class=\"headerlink\" title=\"2.4.2 对齐样式\"></a>2.4.2 对齐样式</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）创建对象</span><br><span class=\"line\">al &#x3D; Alignment(</span><br><span class=\"line\">        horizontal&#x3D;&#39;right&#39;,     # 水平方向:center, left, right</span><br><span class=\"line\">        vertical&#x3D;&#39;top&#39;       # 垂直方向: center, top, bottom</span><br><span class=\"line\">)</span><br><span class=\"line\"># 2） 设置单元格的对齐方式</span><br><span class=\"line\">sheet[&#39;B2&#39;].alignment &#x3D; al</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-3-设置边框样式\"><a href=\"#2-4-3-设置边框样式\" class=\"headerlink\" title=\"2.4.3  设置边框样式\"></a>2.4.3  设置边框样式</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1）设置边对象（四个边的边可以是一样的也可以不同，如果不同就创建对个Side对象）</span><br><span class=\"line\">side &#x3D; Side(border_style&#x3D;&#39;thin&#39;, color&#x3D;&#39;000000&#39;)</span><br><span class=\"line\"># 2) 设置边框对象</span><br><span class=\"line\"># 这儿的left、right、top、bottom表示的是边框的四个边，这儿四个边使用的是一个边对象</span><br><span class=\"line\">bd &#x3D; Border(left&#x3D;side, right&#x3D;side, top&#x3D;side, bottom&#x3D;side)</span><br><span class=\"line\"># 3）设置单元格的边框</span><br><span class=\"line\">sheet[&#39;B2&#39;].border &#x3D; bd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-4-设置单元格的宽度和高度\"><a href=\"#2-4-4-设置单元格的宽度和高度\" class=\"headerlink\" title=\"2.4.4  设置单元格的宽度和高度\"></a>2.4.4  <em>设置单元格的宽度和高度</em></h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. # 设置指定列的宽度</span><br><span class=\"line\">sheet.column_dimensions[&#39;A&#39;].width &#x3D; 20</span><br><span class=\"line\">2. # 设置指定行的高度</span><br><span class=\"line\">sheet.row_dimensions[1].height &#x3D; 45</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-5-格式化字符串\"><a href=\"#2-4-5-格式化字符串\" class=\"headerlink\" title=\"2.4.5 格式化字符串\"></a>2.4.5 格式化字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">form openpyxl import numbers</span><br><span class=\"line\">sheet.cell(row&#x3D;cell + 2, column&#x3D;1).number_format &#x3D; numbers.FORMAT_DATE_YYYYMMDD2</span><br></pre></td></tr></table></figure>\n\n<p>其他格式：请看<a href=\"https://openpyxl.readthedocs.io/en/stable/_modules/openpyxl/styles/numbers.html#NumberFormat\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"2-5-Worksheet-的其他属性\"><a href=\"#2-5-Worksheet-的其他属性\" class=\"headerlink\" title=\"2.5 Worksheet 的其他属性\"></a>2.5 Worksheet 的其他属性</h3><p>Worksheet </p>\n<p>title：表格的标题<br>max_row：表格的最大行<br>min_row：表格的最小行<br>max_column：表格的最大列<br>min_column：表格的最小列<br>rows：按行获取单元格(Cell对象) - 生成器<br>columns：按列获取单元格(Cell对象) - 生成器<br>values：按行获取表格的内容(数据) - 生成器</p>\n<h2 id=\"三：总结\"><a href=\"#三：总结\" class=\"headerlink\" title=\"三：总结\"></a>三：总结</h2><p>太累了，写这篇，这篇大致汇总了大部分需要用到的openpyxl的属性如果还要看看其他的属性，可以到<a href=\"https://openpyxl.readthedocs.io/en/stable/tutorial.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>去查阅。</p>\n","categories":["数据分析"],"tags":["pandas","openpyxl"]},{"title":"视听说刷题","url":"/posts/202646e8/","content":"<p>今天我来安利一波脚本啦！！</p>\n<p>今天安利的脚本是  <code>U校园答案++</code> 和 <code>U校园增强体验</code> 这两个脚本可以让你的视听说体验像飞一样地感觉。</p>\n<a id=\"more\"></a>\n\n<p>效果图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200613124310.png\" alt=\"\"></p>\n<p>总而言之：一句话香。</p>\n<h2 id=\"一：安装油猴插件\"><a href=\"#一：安装油猴插件\" class=\"headerlink\" title=\"一：安装油猴插件\"></a>一：安装油猴插件</h2><h3 id=\"1-1-科学安Chrome插件\"><a href=\"#1-1-科学安Chrome插件\" class=\"headerlink\" title=\"1.1 科学安Chrome插件\"></a>1.1 科学安Chrome插件</h3><p><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">点击</a>进入安装页面  安装Tampermonkey  油猴插件</p>\n<p><img src=\"http://photo.jomeswang.top/20200429102256.png\" alt=\"\"></p>\n<h3 id=\"1-2-无科学安装Chrome插件\"><a href=\"#1-2-无科学安装Chrome插件\" class=\"headerlink\" title=\"1.2 无科学安装Chrome插件\"></a>1.2 无科学安装Chrome插件</h3><p><a href=\"https://tczmh.gitee.io/crx/crx/dhdgffkkebhmkfjojejmpbldmpobfkfo/dhdgffkkebhmkfjojejmpbldmpobfkfo.zip\" target=\"_blank\" rel=\"noopener\">点击这里</a>下载插件，</p>\n<p>下载完之后将它解压到C盘中并更名为Chrome插件</p>\n<p><img src=\"http://photo.jomeswang.top/20200429102630.png\" alt=\"\"></p>\n<p><a href=\"chrome://extensions/\">点击进入</a>Chrome插件列表并打开开发者模式。</p>\n<p><img src=\"http://photo.jomeswang.top/20200429103120.png\" alt=\"\"></p>\n<p>拖动.crx文件至插件列表安装完成</p>\n<p><img src=\"http://photo.jomeswang.top/20200429104109.png\" alt=\"\"></p>\n<h3 id=\"1-3-其他方法安装插件\"><a href=\"#1-3-其他方法安装插件\" class=\"headerlink\" title=\"1.3 其他方法安装插件\"></a>1.3 其他方法安装插件</h3><p>请看这里   <a href=\"https://chrome.zzzmh.cn/help?token=setup\" target=\"_blank\" rel=\"noopener\">https://chrome.zzzmh.cn/help?token=setup</a> </p>\n<h3 id=\"1-4-安装完成：\"><a href=\"#1-4-安装完成：\" class=\"headerlink\" title=\"1.4 安装完成：\"></a>1.4 安装完成：</h3><p><img src=\"http://photo.jomeswang.top/20200429104434.png\" alt=\"\"></p>\n<h2 id=\"二：安装脚本\"><a href=\"#二：安装脚本\" class=\"headerlink\" title=\"二：安装脚本\"></a>二：安装脚本</h2><p>进入这个网站安装 <a href=\"https://greasyfork.org/zh-CN\" target=\"_blank\" rel=\"noopener\">https://greasyfork.org/zh-CN</a> </p>\n<h3 id=\"2-1-U校园答案\"><a href=\"#2-1-U校园答案\" class=\"headerlink\" title=\"2.1 U校园答案++\"></a>2.1 U校园答案++</h3><p>在搜索框中搜索<code>U校园答案++</code></p>\n<p><img src=\"http://photo.jomeswang.top/20200429104715.png\" alt=\"\"></p>\n<p>安装这个</p>\n<p><img src=\"http://photo.jomeswang.top/20200613123844.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200613123912.png\" alt=\"\"></p>\n<p>页面会跳转后点击安装</p>\n<p><img src=\"http://photo.jomeswang.top/20200429104926.png\" alt=\"\"></p>\n<p>接着就可以刷刷刷了</p>\n<p>进入网站试一下效果吧 <a href=\"https://u.unipus.cn/index.html/\" target=\"_blank\" rel=\"noopener\">https://u.unipus.cn/index.html/</a> </p>\n<p><img src=\"http://photo.jomeswang.top/20200613123930.png\" alt=\"\"></p>\n<p><strong>注意事项：</strong> 防止查水表，不要一下子全部刷完，也不要一下子快速刷，否则。。。。。。</p>\n<p><img src=\"http://photo.jomeswang.top/20200613124019.png\" alt=\"\"></p>\n<h2 id=\"三：总结\"><a href=\"#三：总结\" class=\"headerlink\" title=\"三：总结\"></a>三：总结</h2><p>还有其他好玩地插件，你们慢慢地探索哦！！！</p>\n<p>进入这里 <a href=\"https://greasyfork.org/zh-CN/\" target=\"_blank\" rel=\"noopener\">https://greasyfork.org/zh-CN/</a> </p>\n<p>新的世界向你敞开。</p>\n<p>我看看后面有空地话能不能出一份我自己用的插件和脚本。ヾ(≧▽≦*)o</p>\n","categories":["教程"],"tags":["脚本"]},{"title":"Matlab 学习（三）之绘图","url":"/posts/fa3c0602/","content":"<h2 id=\"一：二维绘图\"><a href=\"#一：二维绘图\" class=\"headerlink\" title=\"一：二维绘图\"></a>一：二维绘图</h2><a id=\"more\"></a>\n\n<h3 id=\"1-1-plot-直角系绘图\"><a href=\"#1-1-plot-直角系绘图\" class=\"headerlink\" title=\"1.1 plot 直角系绘图\"></a>1.1 plot 直角系绘图</h3><p>首先要先绘图，日常绘图就要先描点，然后连点成线。在Matlab中绘图也是如此。</p>\n<ol>\n<li><h4 id=\"plot-x-y\"><a href=\"#plot-x-y\" class=\"headerlink\" title=\"plot(x,y)\"></a>plot(x,y)</h4></li>\n</ol>\n<blockquote>\n<p> 这里 x, y 都是向量，以 x 中的元素为横坐标， y 中的元素为纵坐标，作平面曲线。<br>向量 x, y 的长度必须相同。</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420115634.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><h4 id=\"plot-y\"><a href=\"#plot-y\" class=\"headerlink\" title=\"plot(y)\"></a>plot(y)</h4><blockquote>\n<p>即以下标为横坐标，y 中的元素为纵坐标，等价于：</p>\n<p>x=[1:length(y)];  plot(x,y);</p>\n</blockquote>\n</li>\n<li><h4 id=\"plot-x-A\"><a href=\"#plot-x-A\" class=\"headerlink\" title=\"plot(x,A)\"></a>plot(x,A)</h4><blockquote>\n<p>这里 x 是向量，A是矩阵。若 x 的长度与 A 的行数相等，则将 x与 A中的各列相对应，绘制多条平面曲线；否则，若 x  的长度与 A的列数相等，则将 x 与 A 中的各行相对应，绘制多条平面曲线。 。<br> x的长度必须等于 A 的行数或列数。</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420115915.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"plot-x-y-string\"><a href=\"#plot-x-y-string\" class=\"headerlink\" title=\"plot(x,y,string)\"></a>plot(x,y,string)</h4><blockquote>\n<p>其中 string 是用 单引号 括起来的字符串，用来指定图形的属性（点、线的形状和颜色）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>线型</strong></th>\n<th><strong>点标记</strong></th>\n<th><strong>颜色</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>-</strong>-   实线<br/>:   虚线<br/>-.  点划线<br/>–  间断线<br/>     空白</td>\n<td>.   点<br/>o   小圆圈<br/>x   叉子符<br/>+   加号<br/>*   星号<br/>s   方格<br/>d   菱形<br/>^   朝上三角<br/>v   朝下三角<br/>&gt;   朝右三角<br/>&lt;   朝左三角<br/>p   五角星<br/>h   六角星</td>\n<td>y   黄色 <br/>m   棕色  <br/>c   青色<br/>r   红色<br/>g   绿色<br/>b   蓝色<br/>w   白色<br/>k   黑色</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200420120452.png\" alt=\"\"></p>\n<h3 id=\"1-2-极坐标作图\"><a href=\"#1-2-极坐标作图\" class=\"headerlink\" title=\"1.2 极坐标作图\"></a>1.2 极坐标作图</h3><blockquote>\n<p>polar(theta,r, string)</p>\n</blockquote>\n<blockquote>\n<p>以 theta 为极角， r 是极径作图，string 与上面的一样（可选）</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420121119.png\" alt=\"\"></p>\n<h3 id=\"1-3-对数图\"><a href=\"#1-3-对数图\" class=\"headerlink\" title=\"1.3 对数图\"></a>1.3 对数图</h3><blockquote>\n<p> 按指数规律变化的数据可用对数坐标表示</p>\n</blockquote>\n<ol>\n<li><p>semilogx(x,y)</p>\n<p>创建单对数坐标图，x 轴为对数坐标，y轴为线性坐标</p>\n</li>\n<li><p>semilogy(x,y)</p>\n<p>创建单对数坐标图，x 轴为线性坐标，y轴为对数坐标</p>\n</li>\n<li><p>loglog(x,y)</p>\n<p>创建双对数坐标图，x 轴、y轴均为对数坐标</p>\n</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200420131213.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li><h3 id=\"图表\"><a href=\"#图表\" class=\"headerlink\" title=\"图表\"></a>图表</h3><p><strong>MATLAB includes a whole family of bar graphs and pie charts</strong><br>bar(x) – vertical bar graph<br>barh(x) – horizontal bar graph<br>bar3(x) – 3-D vertical bar graph<br>bar3h(x) – 3-D horizontal bar graph<br>pie(x) – pie chart<br>pie3(x) – 3-D pie chart</p>\n<p><img src=\"http://photo.jomeswang.top/20200420131801.png\" alt=\"\"></p>\n</li>\n<li><h3 id=\"双y轴图\"><a href=\"#双y轴图\" class=\"headerlink\" title=\"双y轴图\"></a>双y轴图</h3><blockquote>\n<p> 将两个二维曲线输出到同一坐标图中 </p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>plotyy(x1,y1,x2,y2)</p>\n</li>\n<li><p>plotyy(x1,y1,x2,y2,function)</p>\n<p> function是指定的绘图函数，可取 plot, stem, semilogx, semilogy, loglog等</p>\n</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200420133346.png\" alt=\"\"></p>\n<h2 id=\"二：图像属性\"><a href=\"#二：图像属性\" class=\"headerlink\" title=\"二：图像属性\"></a>二：图像属性</h2><h3 id=\"2-1-添加标题\"><a href=\"#2-1-添加标题\" class=\"headerlink\" title=\"2.1 添加标题\"></a>2.1 添加标题</h3><blockquote>\n<p>title(‘text’, ‘Property1’,  value1,  ‘ Property2’, value2, …)</p>\n<p>Property: linewidth, markersize, fontsize, fontweight, fontname, …</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420142426.png\" alt=\"\"></p>\n<h3 id=\"2-2-添加坐标轴标注\"><a href=\"#2-2-添加坐标轴标注\" class=\"headerlink\" title=\"2.2 添加坐标轴标注\"></a>2.2 添加坐标轴标注</h3><blockquote>\n<p>xlabel(‘text’)</p>\n<p>ylabel(‘text’)</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420142355.png\" alt=\"\"></p>\n<h3 id=\"2-3坐标轴控制\"><a href=\"#2-3坐标轴控制\" class=\"headerlink\" title=\"2.3坐标轴控制\"></a>2.3坐标轴控制</h3><blockquote>\n<p>axis([xmin, xmax, ymin, ymax, zmin, zmax])</p>\n<p>作用：指定坐标轴的显示范围</p>\n</blockquote>\n<p> 其它调用方式：</p>\n<p>axis auto           自动模式，使得图形的坐标满足图中的一切元素<br>axis equal      各坐标轴采用等长刻度<br>axis square     使绘图区域为正方形<br>axis on/off    恢复/取消对坐标轴的一切设置<br>axis manual    以当前的坐标限制图形的绘制（多图时）<br>  …  …                更多参见 axis 的联机帮助</p>\n<h3 id=\"2-4绘制多个函数图像\"><a href=\"#2-4绘制多个函数图像\" class=\"headerlink\" title=\"2.4绘制多个函数图像\"></a>2.4绘制多个函数图像</h3><ol>\n<li><p>plot(x1,y1,s1,x2,y2,s2, … ,xn,yn,sn)</p>\n<p>s1，s2,..属性选项，可以省略</p>\n</li>\n<li><p>hold on</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hold on</span><br><span class=\"line\">plot(x1,y1,s1)</span><br><span class=\"line\">plot(x2,y2,s2)</span><br><span class=\"line\">...</span><br><span class=\"line\">plot(xn,yn,sn)</span><br><span class=\"line\">hold off</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"2-5-添加图例\"><a href=\"#2-5-添加图例\" class=\"headerlink\" title=\"2.5 添加图例\"></a>2.5 添加图例</h3><blockquote>\n<p>legend(string1,string2, …)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt; x &#x3D; 0 : pi&#x2F;10 : 4*pi;</span><br><span class=\"line\">&gt;&gt; y1 &#x3D; cos(x); </span><br><span class=\"line\">&gt;&gt; y2 &#x3D; sin(x);</span><br><span class=\"line\">&gt;&gt; plot(x,y1,x,y2);</span><br><span class=\"line\">&gt;&gt; legend(&#39;cos(x)&#39;,&#39;sin(x)&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200420142042.png\" alt=\"\"></p>\n<h3 id=\"2-6-添加文本\"><a href=\"#2-6-添加文本\" class=\"headerlink\" title=\"2.6 添加文本\"></a>2.6 添加文本</h3><blockquote>\n<p> 在任何指定的地方添加文本</p>\n<p>text(x,y,string) % 该函数需要事先设定放置的位置</p>\n<p>gtext(string)  % 改函数可以在图像中用鼠标选择放置的位置</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420141910.png\" alt=\"\"></p>\n<h3 id=\"2-7划分绘图窗口\"><a href=\"#2-7划分绘图窗口\" class=\"headerlink\" title=\"2.7划分绘图窗口\"></a>2.7划分绘图窗口</h3><blockquote>\n<p>subplot(m,n,p)</p>\n<p>将一个绘图窗口分割成 m*n 个子区域，并 按行 从左至右 依次编号 ，p 表示第 p 个绘图子区域。</p>\n</blockquote>\n<h3 id=\"2-8-其他相关命令\"><a href=\"#2-8-其他相关命令\" class=\"headerlink\" title=\"2.8 其他相关命令\"></a>2.8 其他相关命令</h3><p><img src=\"http://photo.jomeswang.top/20200420140747.png\" alt=\"\"></p>\n<h2 id=\"三：三维视图\"><a href=\"#三：三维视图\" class=\"headerlink\" title=\"三：三维视图\"></a>三：三维视图</h2><h3 id=\"3-1-三维曲线\"><a href=\"#3-1-三维曲线\" class=\"headerlink\" title=\"3.1 三维曲线\"></a>3.1 三维曲线</h3><blockquote>\n<p> plot3（x,y,z）</p>\n<p>设三维曲线的参数方程为：x=x(t)，y=y(t)，z=z(t)，<br> plot3 只能绘制参数方程表示的三维曲线<br> plot3 的用法与 plot 类似</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt; t &#x3D; 0 : pi&#x2F;100 : 10*pi;</span><br><span class=\"line\">&gt;&gt; x &#x3D; sin(t); </span><br><span class=\"line\">&gt;&gt; y &#x3D; cos(t); </span><br><span class=\"line\">&gt;&gt; z &#x3D; 2*t;</span><br><span class=\"line\">&gt;&gt; plot3(x,y,z);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200420143602.png\" alt=\"\"></p>\n<h3 id=\"3-2-三维曲面\"><a href=\"#3-2-三维曲面\" class=\"headerlink\" title=\"3.2 三维曲面\"></a>3.2 三维曲面</h3><p><img src=\"http://photo.jomeswang.top/20200420143706.png\" alt=\"\"></p>\n<ol>\n<li><h4 id=\"网格生成函数-：-X-Y-meshgrid-x-y-（）\"><a href=\"#网格生成函数-：-X-Y-meshgrid-x-y-（）\" class=\"headerlink\" title=\"网格生成函数 ：[ X, Y ] =  meshgrid(x,y)（）\"></a>网格生成函数 ：[ X, Y ] =  meshgrid(x,y)（）</h4><blockquote>\n<p><strong>meshgrid用于从数组a和b产生网格。生成的网格矩阵A和B大小是相同的。它也可以是更高维的。这里的大小指的是，size()函数的大小，size()函数返回的是一个向量， 那么size(A) = size(B).</strong></p>\n<p>若 x = y, 则可简写为：  [ X, Y ] = meshgrid(x)</p>\n<p>[A,B]=Meshgrid(a,b)<br>生成size(b)Xsize(a)大小的矩阵A和B。它相当于a从一行重复增加到size(b)行，把b转置成一列再重复增加到size(a)列。</p>\n<p>因此命令等效于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#96;A&#x3D;ones(size(b))*a;&#96;&#96;B&#x3D;b&#39;*ones(size(a))&#96;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200420145229.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><h4 id=\"绘图命令-mesh-X-Y-Z\"><a href=\"#绘图命令-mesh-X-Y-Z\" class=\"headerlink\" title=\"绘图命令 mesh(X,Y,Z)\"></a>绘图命令 mesh(X,Y,Z)</h4></li>\n</ol>\n<blockquote>\n<p>绘制由矩阵 X, Y, Z  所确定的曲面网格图</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420145703.png\" alt=\"\"></p>\n<ul>\n<li><p>显式方程：z=z(x,y), a=&lt; x &gt;=b, c=&lt; y &gt;=d</p>\n<blockquote>\n<p>x=a:hx:b; y=c:hy:d;<br>[X,Y]=meshgrid(x,y);<br>Z=z(X,Y);<br>mesh(X,Y,Z)    </p>\n</blockquote>\n</li>\n<li><p>参数方程：x=x(u,v),y=y(u,v),x=z(u,v)  a=&lt; u &gt;=b, c=&lt; v &gt;=d</p>\n<blockquote>\n<p>u=a:hu:b; y=c:hv:d;<br>[U,V]=meshgrid(u,v);<br>X=x(U,V); Y=y(U,V); Z=z(U,V);<br>mesh(X,Y,Z)</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"3-meshc-meshz\"><a href=\"#3-meshc-meshz\" class=\"headerlink\" title=\"3. meshc,meshz\"></a>3. meshc,meshz<img src=\"http://photo.jomeswang.top/20200420150258.png\" alt=\"\"></h4><ol start=\"4\">\n<li><p>空间曲面其它作图命令 </p>\n<p>surf(X,Y,Z)    绘制由矩阵 X,Y,Z 所确定的曲面图，参数含义同 mesh</p>\n</li>\n</ol>\n<blockquote>\n<p>mesh 绘制网格图，surf 绘制表面着色的曲面图</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420151304.png\" alt=\"\"></p>\n<p> contour(X,Y,Z)     绘制由矩阵 X,Y,Z 所确定的等高线</p>\n<p>pcolor(X,Y,Z)      绘制由矩阵 X,Y,Z 所确定的伪色图（带栅格的二维阴影图）</p>\n<h2 id=\"四：符号画图\"><a href=\"#四：符号画图\" class=\"headerlink\" title=\"四：符号画图\"></a>四：符号画图</h2><blockquote>\n<p>符号作图时要注意 使用 单引号！</p>\n</blockquote>\n<p><img src=\"http://photo.jomeswang.top/20200420152037.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200420152117.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200420152137.png\" alt=\"\"></p>\n","categories":["Matlab"],"tags":["Matlab","Matlab学习特辑"]},{"title":"Matlab 学习(二)之向量和矩阵","url":"/posts/d856937a/","content":"<h2 id=\"一：创建矩阵和向量\"><a href=\"#一：创建矩阵和向量\" class=\"headerlink\" title=\"一：创建矩阵和向量\"></a>一：创建矩阵和向量</h2><blockquote>\n<p>可以将向量当成一维数组，将矩阵看成多维数组</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"1-1-直接输入\"><a href=\"#1-1-直接输入\" class=\"headerlink\" title=\"1.1 直接输入\"></a>1.1 直接输入</h3><ul>\n<li>矩阵用方括号 “[ ]” 括起</li>\n<li>矩阵同一行中的元素之间用 空格 或 逗号 分隔</li>\n<li>矩阵行与行之间用 分号 分开</li>\n<li>直接输入法中，分号可以用 回车 代替</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200419214928.png\" alt=\"\"></p>\n<h3 id=\"1-2-使用特殊矩阵函数来构建\"><a href=\"#1-2-使用特殊矩阵函数来构建\" class=\"headerlink\" title=\"1.2 使用特殊矩阵函数来构建\"></a>1.2 使用特殊矩阵函数来构建</h3><p><img src=\"http://photo.jomeswang.top/20200419215304.png\" alt=\"\"></p>\n<h3 id=\"1-3-使用冒号运算符创建\"><a href=\"#1-3-使用冒号运算符创建\" class=\"headerlink\" title=\"1.3 使用冒号运算符创建\"></a>1.3 使用冒号运算符创建</h3><p><code>a : b : c</code></p>\n<p>产生一个由等差序列组成的向量：</p>\n<ul>\n<li>a 是首项，b 是公差，c 确定最后一项；</li>\n<li>若 b = 1，则 b 和其前面的冒号可以省略（若省略步长默认值为1）</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200419220012.png\" alt=\"\"></p>\n<h3 id=\"1-4-使用-linspace-函数构建向量\"><a href=\"#1-4-使用-linspace-函数构建向量\" class=\"headerlink\" title=\"1.4 使用  linspace 函数构建向量\"></a>1.4 使用  linspace 函数构建向量</h3><p>用法：linspace(x1,x2,N)</p>\n<p>功能：linspace是Matlab中的均分计算指令，用于产生x1,x2之间的N点行线性的矢量。其中x1、x2、N分别为起始值、终止值、元素个数。若默认N，默认点数为100。</p>\n<p><img src=\"http://photo.jomeswang.top/20200419220445.png\" alt=\"\"></p>\n<h2 id=\"二：矩阵运算\"><a href=\"#二：矩阵运算\" class=\"headerlink\" title=\"二：矩阵运算\"></a>二：矩阵运算</h2><h3 id=\"2-1-提取矩阵部分元素\"><a href=\"#2-1-提取矩阵部分元素\" class=\"headerlink\" title=\"2.1 提取矩阵部分元素\"></a>2.1 提取矩阵部分元素</h3><p><img src=\"http://photo.jomeswang.top/20200419220830.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200419220915.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200419221033.png\" alt=\"\"></p>\n<h3 id=\"2-2矩阵的基本运算\"><a href=\"#2-2矩阵的基本运算\" class=\"headerlink\" title=\"2.2矩阵的基本运算\"></a>2.2矩阵的基本运算</h3><p><code>运算符</code> </p>\n<p><img src=\"http://photo.jomeswang.top/20200419222203.png\" alt=\"\"></p>\n<blockquote>\n<p>数组运算是指数组对应元素之间的运算,也称点运算。</p>\n<p>矩阵的乘法、乘方和除法有特殊的数学含义，并不是数组对应元素的运算，所以数组乘法、乘方和除法的运算符前特别加了一个点。</p>\n</blockquote>\n<ol>\n<li><h4 id=\"矩阵乘积\"><a href=\"#矩阵乘积\" class=\"headerlink\" title=\"矩阵乘积\"></a>矩阵乘积</h4></li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200419222751.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><h4 id=\"矩阵除法\"><a href=\"#矩阵除法\" class=\"headerlink\" title=\"矩阵除法\"></a>矩阵除法</h4><p><img src=\"http://photo.jomeswang.top/20200419223725.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"矩阵的转置\"><a href=\"#矩阵的转置\" class=\"headerlink\" title=\"矩阵的转置\"></a>矩阵的转置</h4><p><img src=\"http://photo.jomeswang.top/20200419224358.png\" alt=\"\"></p>\n<p> 　　<a href=\"https://www.baidu.com/s?wd=共轭转置&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener\">共轭转置</a>:矩阵有实数矩阵和复数矩阵.<a href=\"https://www.baidu.com/s?wd=转置矩阵&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener\">转置矩阵</a>仅仅是将矩阵的行与列对换,而<a href=\"https://www.baidu.com/s?wd=共轭转置&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener\">共轭转置</a>矩阵在将行与列对换后还要讲每个元zd素共轭一下.共轭你应该知道,就是将形如a+bi的数变成a-bi,实数的共轭是它本身.所以,实数矩阵版的<a href=\"https://www.baidu.com/s?wd=共轭转置&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener\">共轭转置</a>矩阵就是<a href=\"https://www.baidu.com/s?wd=转置矩阵&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener\">转置矩阵</a>,复数矩阵的共轭转置矩阵就是上面所说的行列互换后每个元素权取共轭。 </p>\n</li>\n<li><h4 id=\"矩阵的旋转\"><a href=\"#矩阵的旋转\" class=\"headerlink\" title=\"矩阵的旋转\"></a>矩阵的旋转</h4><ul>\n<li>fliplr(A)   左右旋转</li>\n<li>flipud(A)   上下旋转</li>\n<li>rot90(A)   逆时针旋转 90 度；</li>\n<li>rot90(A,k) 逆时针旋转 k×90 度</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200419224750.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"查看矩阵的大小\"><a href=\"#查看矩阵的大小\" class=\"headerlink\" title=\"查看矩阵的大小\"></a>查看矩阵的大小</h4><ul>\n<li>size(A)         返回矩阵 A 的行数和列数</li>\n<li>size(A,1)  返回矩阵 A 的行数</li>\n<li>size(A,2)  返回矩阵 A 的列</li>\n<li>length(x)  返回向量 X 的长度</li>\n<li>length(A)  等价于 max(size(A))</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200419225333.png\" alt=\"\"></p>\n</li>\n<li><h4 id=\"矩阵的比较运算\"><a href=\"#矩阵的比较运算\" class=\"headerlink\" title=\"矩阵的比较运算\"></a>矩阵的比较运算</h4><blockquote>\n<p>, &gt;=, &lt;, &lt;=, ==,~=, find(), all(), any()</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>find(A&gt;8)   ％大于或等于8元素的下标  </li>\n<li>all(A&gt;8)   ％某列元素全大于或等于8时，相应元素为1，否则为0。</li>\n<li>any(A&gt;8)   ％某列元素中含有大于或等于8时，相应元素为1，否则为0。</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200419225814.png\" alt=\"\"></p>\n<ol start=\"7\">\n<li><h4 id=\"矩阵的逻辑运算\"><a href=\"#矩阵的逻辑运算\" class=\"headerlink\" title=\"矩阵的逻辑运算\"></a>矩阵的逻辑运算</h4><p><img src=\"http://photo.jomeswang.top/20200419230017.png\" alt=\"\"></p>\n</li>\n</ol>\n<h4 id=\"8-特殊函数\"><a href=\"#8-特殊函数\" class=\"headerlink\" title=\"8.特殊函数\"></a>8.特殊函数</h4><p><img src=\"http://photo.jomeswang.top/20200419233727.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200419233815.png\" alt=\"\"></p>\n","categories":["Matlab"],"tags":["Matlab","Matlab学习特辑"]},{"title":"Matlab 学习（一）之基础语法","url":"/posts/cb62ad6c/","content":"<h2 id=\"一：变量\"><a href=\"#一：变量\" class=\"headerlink\" title=\"一：变量\"></a>一：变量</h2><a id=\"more\"></a>\n\n<h3 id=\"1-1-变量命名\"><a href=\"#1-1-变量命名\" class=\"headerlink\" title=\"1.1 变量命名\"></a>1.1 变量命名</h3><p>（1）变量名必须是不含空格的单个词；<br>（2）变量名区分大小写；<br>（3）变量名长度不超过 63 个字符（6.5 版本以前为 19 个）<br>（4）变量名必须以字母打头，之后可以是<br>          任意字母、数字或下划线，变量名中<br>         不允许使用标点符号</p>\n<h3 id=\"1-2-保留变量\"><a href=\"#1-2-保留变量\" class=\"headerlink\" title=\"1.2 保留变量\"></a>1.2 保留变量</h3><p><img src=\"http://photo.jomeswang.top/20200419180220.png\" alt=\"\"></p>\n<h3 id=\"1-3-变量的查看\"><a href=\"#1-3-变量的查看\" class=\"headerlink\" title=\"1.3 变量的查看\"></a>1.3 变量的查看</h3><ol>\n<li>查看已定义的变量：who、whos<ul>\n<li>who    显示工作空间中的所有变量</li>\n<li>whos  显示变量的详细属性</li>\n</ul>\n</li>\n<li>.清除变量：clear<ul>\n<li>clear                 清除工作空间中的所有变量</li>\n<li>clear 变量名    清除指定的变量</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200419180733.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>使用行尾<code>;</code>抑制输出: 在一行命令后使用<code>;</code>抑制输出,否则运算结果将被显示在终端上. </li>\n</ol>\n<h3 id=\"1-4-变量类型\"><a href=\"#1-4-变量类型\" class=\"headerlink\" title=\"1.4 变量类型\"></a>1.4 变量类型</h3><p>MATLAB中的变量类型有: <code>logical</code>,<code>char</code>,<code>numeric</code>,<code>cell</code>,<code>struct</code>以及由他们组成的数组或矩阵.</p>\n<p><img src=\"http://photo.jomeswang.top/20200419181015.png\" alt=\"\"></p>\n<h4 id=\"数字型变量的显示格式\"><a href=\"#数字型变量的显示格式\" class=\"headerlink\" title=\"数字型变量的显示格式\"></a>数字型变量的显示格式</h4><p>我们直接定义的数字型变量,默认是以<code>double</code>形式存储的.</p>\n<p>我们可以通过<code>format &lt;显示格式&gt;</code>改变数字型变量的显示格式.</p>\n<table>\n<thead>\n<tr>\n<th>显示格式</th>\n<th>说明</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>short</code></td>\n<td>短定点格式.显示小数点后4位</td>\n<td><code>3.1416</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>长定点格式.对<code>double</code>类型变量显示小数点后15位,对<code>float</code>类型变量显示小数点后7位.</td>\n<td><code>3.141592653589793</code></td>\n</tr>\n<tr>\n<td><code>shortE</code></td>\n<td>短科学计数法,显示小数点后4位.并带有科学计数法标记.</td>\n<td><code>3.1416e+00</code></td>\n</tr>\n<tr>\n<td><code>longE</code></td>\n<td>长科学计数法.对<code>double</code>类型变量显示小数点后15位,对<code>float</code>类型变量显示小数点后7位.并带有科学计数法标记.</td>\n<td><code>3.141592653589793e+00</code></td>\n</tr>\n<tr>\n<td><code>bank</code></td>\n<td>银行格式.显示小数点后2位.</td>\n<td><code>3.14</code></td>\n</tr>\n<tr>\n<td><code>hex</code></td>\n<td>十六进制格式.</td>\n<td><code>400921fb54442d18</code></td>\n</tr>\n<tr>\n<td><code>rat</code></td>\n<td>比例格式</td>\n<td><code>355/113</code></td>\n</tr>\n</tbody></table>\n<p><img src=\"http://photo.jomeswang.top/20200419182007.png\" alt=\"\"></p>\n<h2 id=\"2-通用命令\"><a href=\"#2-通用命令\" class=\"headerlink\" title=\"2.通用命令\"></a>2.通用命令</h2><p><img src=\"http://photo.jomeswang.top/20200419185822.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200419185841.png\" alt=\"\"></p>\n<h2 id=\"3-数学运算符号及标点符号\"><a href=\"#3-数学运算符号及标点符号\" class=\"headerlink\" title=\"3.数学运算符号及标点符号\"></a>3.数学运算符号及标点符号</h2><p>（1）MATLAB的每条命令后，若为逗号或无标点符号，则显示命令的结果；若命令后为分号，则禁止显示结果. </p>\n<p>（2）“%”  后面所有文字为注释. </p>\n<p>（3） “…”表示续行.</p>\n<p><img src=\"http://photo.jomeswang.top/20200419190032.png\" alt=\"\"></p>\n","categories":["Matlab"],"tags":["Matlab","Matlab学习特辑"]},{"title":"记录一次前途迷茫的选择","url":"/posts/f8d52aac/","content":"<p>​                                     夜空星星闪过<br>​                                    孤独陪我醒着<br>​                                    所有失眠的夜<br>​                                    是你给的落魄<br>​                                    没有人会心疼我 </p>\n<p>​                                                                        —— 陈雪凝</p>\n<a id=\"more\"></a>\n\n<p>昨晚前一个项目，现在我觉得有些迷茫，不知道我的前路在何方，是走硬件这条路，还是走软件这条路呢！！！！！</p>\n<p>我的路在哪里呢？？？？</p>\n<p>我的矛盾在于我害怕错失一个个的机会，但又不敢真正的走出去，那该怎么办呢？？？</p>\n<p>而且这一次的机会应该也算是挺好的一个机会，我可以把握住吗？？？</p>\n<p>我也不知道啊！！！    </p>\n<p>摆在我面前的道路有两条，一条看起来充满着阳光与美好，一条路看起来永远的没有尽头。。。。。。</p>\n<p>现在把我的思路理清一点。</p>\n<p>首先，如果走软件这条路的话。我的方向：</p>\n<ol>\n<li><p>MYSQL 数据库要搞好。。。。</p>\n</li>\n<li><p>小程序也要弄好</p>\n</li>\n<li><p>数据结构</p>\n</li>\n<li><p>做项目：一个数据管理网站</p>\n</li>\n</ol>\n<p>走硬件的话：</p>\n<p>  1.单片机要搞好，多参加些比赛。</p>\n<ol start=\"2\">\n<li>焊板子要好</li>\n<li>五一单片机要先学好，后面是32 单片机，后面入袭嵌入式</li>\n</ol>\n<p>但无论走那条路都是好艰辛的啊！！</p>\n<p>虽然我不断的劝自己要静下心来先搞好学习，再去弄课外的东西，可是我现在什么都想搞，搞得我现在东凑西拼，每一件事都弄得不是那么精通，那我该怎么办呢？？</p>\n<p>每一条路都充满着荆轲啊！！！</p>\n<p>迷茫，不解。</p>\n<p>就决定先搞搞硬件，冲冲冲！！！！</p>\n","categories":["随笔"],"tags":["随笔"]},{"title":"好看的图片接口","url":"/posts/4083288/","content":"<h3 id=\"超级好看的图片接口\"><a href=\"#超级好看的图片接口\" class=\"headerlink\" title=\"超级好看的图片接口\"></a>超级好看的图片接口</h3><p>每次写文章给博文配图是一件很麻烦的事情，一张张地找，有时候质量还不好，于是乎，我就去寻找了一波背景图api接口，这下妈妈再也不用担心我文章不会配图了，</p>\n<p>废话不多说，直接上干货，</p>\n<a id=\"more\"></a>\n\n<p><strong>必应背景图</strong></p>\n<p>大家应该都知道必应每日一图吧，分辨率高而且质量好，每张图都很有意义。</p>\n<h3 id=\"api接口\"><a href=\"#api接口\" class=\"headerlink\" title=\"api接口\"></a><strong>api接口</strong></h3><p>1366*768分辨率图片地址</p>\n<p><img src=\"http://photo.jomeswang.top/20200407185730.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;api.dujin.org&#x2F;bing&#x2F;1366.php</span><br></pre></td></tr></table></figure>\n\n<p>1920*1080分辨率图片地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;api.dujin.org&#x2F;bing&#x2F;1920.php</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以上接口整理自缙哥哥博客\"><a href=\"#以上接口整理自缙哥哥博客\" class=\"headerlink\" title=\"以上接口整理自缙哥哥博客\"></a><strong>以上接口整理自</strong><a href=\"https://link.zhihu.com/?target=https%3A//www.dujin.org/3618.html\">缙哥哥博客</a></h3><p><strong>小歪API</strong></p>\n<p>目前系统共收录 1000+ 张图片 API最后更新时间:2018-08-20</p>\n<p>图片均为https，采用新浪图片，高速访问.</p>\n<p>二次元动漫</p>\n<p><img src=\"http://photo.jomeswang.top/20200407194549.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;api.ixiaowai.cn&#x2F;api&#x2F;api.php</span><br></pre></td></tr></table></figure>\n\n<p>menhear酱</p>\n<p><img src=\"http://photo.jomeswang.top/20200407194614.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;api.ixiaowai.cn&#x2F;mcapi&#x2F;mcapi.php</span><br></pre></td></tr></table></figure>\n\n<p>风景</p>\n<p><img src=\"http://photo.jomeswang.top/20200407194632.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;api.ixiaowai.cn&#x2F;gqapi&#x2F;gqapi.php</span><br></pre></td></tr></table></figure>\n\n<p>参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">type&#x3D;json</span><br></pre></td></tr></table></figure>\n\n<p>JSON调用格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">列：https:&#x2F;&#x2F;api.ixiaowai.cn&#x2F;api&#x2F;api.php?return&#x3D;json</span><br></pre></td></tr></table></figure>\n\n<p>JSON数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;code&quot;:&quot;200&quot; #图片状态码</span><br><span class=\"line\">    &quot;acgurl&quot;:&quot;https:\\&#x2F;\\&#x2F;ws1.sinaimg.cn\\&#x2F;large\\&#x2F;0072Vf1pgy1foxkjcneg1j31kw0w0hbs.jpg&quot; #图片地址</span><br><span class=\"line\">    &quot;width&quot;:&quot;2048&quot; #图片宽</span><br><span class=\"line\">    &quot;height&quot;:&quot;1152&quot; #图片高</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以上链接整理自小歪API-随机图片API-随心所动-不再单调\"><a href=\"#以上链接整理自小歪API-随机图片API-随心所动-不再单调\" class=\"headerlink\" title=\"以上链接整理自小歪API - 随机图片API 随心所动 不再单调\"></a><strong>以上链接整理自</strong><a href=\"https://link.zhihu.com/?target=https%3A//api.ixiaowai.cn/\">小歪API - 随机图片API 随心所动 不再单调</a></h3><p><strong>后宫学长</strong></p>\n<p>给大家介绍一个大佬，后宫学长，本站主题就来自于大佬之手，先来膜拜下。大佬们总是能根本上解决问，本人在向后宫学长求助时，学长直接给出搭建属于自己的随即图服务的教程</p>\n<p>在此直接附上连接：<a href=\"https://link.zhihu.com/?target=https%3A//haremu.com/p/349\">教程</a></p>\n<p>与此同时，学长也提供了自己搭建的api接口，供大家使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;acg.sx&#x2F;images</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以上整理自后宫学长\"><a href=\"#以上整理自后宫学长\" class=\"headerlink\" title=\"以上整理自后宫学长\"></a><strong>以上整理自</strong><a href=\"https://link.zhihu.com/?target=https%3A//haremu.com/\">后宫学长</a></h3><p><strong>下面列举一些获取随即图片的api接口</strong>（质量未检查，请大家自行查看）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;lorempixel.com&#x2F;1600&#x2F;900</span><br><span class=\"line\">https:&#x2F;&#x2F;unsplash.it&#x2F;1600&#x2F;900?random（国内加载略慢）</span><br><span class=\"line\"></span><br><span class=\"line\">https:&#x2F;&#x2F;uploadbeta.com&#x2F;api&#x2F;pictures&#x2F;random&#x2F;?key&#x3D;BingEverydayWallpaperPicture【返回必应图片】</span><br><span class=\"line\"></span><br><span class=\"line\">https:&#x2F;&#x2F;uploadbeta.com&#x2F;api&#x2F;pictures&#x2F;random&#x2F;?key&#x3D;%E6%8E%A8%E5%A5%B3%E9%83%8E【随机美女图片】</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;http:&#x2F;&#x2F;cn.bing.com&#x2F;HPImageArchive.aspx?format&#x3D;js&amp;idx&#x3D;0&amp;n&#x3D;1&gt;（必应返回JSON数据，具体百度）</span><br></pre></td></tr></table></figure>\n\n<p><em>######</em> 以上接口均来自于互联网，大部分已标明出处，如有侵权，请联系博主删除。</p>\n<p>更多资源请访问博主个人博客：<a href=\"[https://iwalyou.com](https://link.zhihu.com/?target=https%3A//iwalyou.com)\">马同学的blog</a></p>\n<p>​                                                                                  —–转载至知乎作者Sailim</p>\n","categories":["图片"]},{"title":"记录vue做前端django做后端的一个导航网站的经历","url":"/posts/5f768f4c/","content":"<p>之前在寒假的时候，无聊着学习vue，突然突发奇想地想去做一个导航页面，说干就干，于是开始了一番痛苦地历程，先是div居中对齐，不会，并排不太会，配色选择，不太会。感觉自己就是个垃圾，啥都学了，可是还是啥都不会，那怎么办呢，于是，只能一步一步地走，感觉非常疲惫，但是学习地路上，总是要有挫折地不是吗？一步一步地走，脚踏实地地走，终有一天，你可以成为那个自己想成为地那个人，希望下一年，我再看这篇文章时，我可以说一句，大千世界，有我更好。</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200407204251.png\" alt=\"\"></p>\n<p>这个页面好看吗？？？是的好好看哦！！！</p>\n<p>看来我的一个月的坚持，从入门到入手，过程确实很艰辛，但是我会一直努力的哦！！</p>\n<p>现在已有功能后台处理数据，收录几大搜索引擎api</p>\n<p><img src=\"http://photo.jomeswang.top/20200407204856.png\" alt=\"\"></p>\n<p>随机图片api，搜索提示框。</p>\n<p><img src=\"http://photo.jomeswang.top/20200407205109.png\" alt=\"\"></p>\n<p>现在web开发要不就先告一段落？？？？？？</p>\n<p>搞不搞硬件！！！！！</p>\n","categories":["随笔"],"tags":["django","vue"]},{"title":"记录一次将django项目成功部署到宝塔面板上","url":"/posts/40c55697/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>之前已经部署过一次django项目写过一次博客（ <a href=\"https://hexo.jomeswang.top/posts/c2d74008/\">https://hexo.jomeswang.top/posts/c2d74008/</a> ），但这次再次部署又出现新的问题和新的发现，并写下此篇博客记录部署时踩过的坑。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-事先准备\"><a href=\"#2-1-事先准备\" class=\"headerlink\" title=\"2.1 事先准备\"></a>2.1 事先准备</h3><h3 id=\"2-1-1-bt面板安装和环境包\"><a href=\"#2-1-1-bt面板安装和环境包\" class=\"headerlink\" title=\"2.1.1 bt面板安装和环境包\"></a>2.1.1 bt面板安装和环境包</h3><p>这里只描述，不详写，详情可看这篇（ <a href=\"https://hexo.jomeswang.top/posts/c2d74008/\">https://hexo.jomeswang.top/posts/c2d74008/</a> ）。</p>\n<p>环境：使用的是 </p>\n<p>1.Nginx1.16.1</p>\n<ol start=\"2\">\n<li>bt面板的python项目管理器</li>\n<li>python3.7.2</li>\n<li>django3.0</li>\n</ol>\n<h3 id=\"2-2-上传并部署django文件\"><a href=\"#2-2-上传并部署django文件\" class=\"headerlink\" title=\"2.2 上传并部署django文件\"></a>2.2 上传并部署django文件</h3><ol>\n<li>生成依赖包文件</li>\n</ol>\n<p>在上传项目文件的时候，我们需要先配置好项目所有的环境依赖包，所以，在本地开发的时候建议使用虚拟环境，这样我们创建依赖文件的时候，能减少引入一些不必要的包。在本地项目环境目录中(如果是虚拟环境，需要激活虚拟环境再进入项目目录)【django项目目录，即是在manage.py文件所处的路径】输入下方命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br><span class=\"line\"><span class=\"comment\"># 注意当前是 pip 还是 pip3</span></span><br></pre></td></tr></table></figure>\n\n<p>会生成一个 requirements.txt 文件，里面就会包含我们当前环境下所有的python包。</p>\n<ol start=\"2\">\n<li>先要上传django文件夹的全部到，/www/wwwroot/ 上的文件夹中，之后打开python项目管理器</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200407123827.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>配置python项目管理器</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200407124650.png\" alt=\"\"></p>\n<ol start=\"4\">\n<li>映射域名（注意一定要域名，如果是端口后面django后台样式将会不见）</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200407125014.png\" alt=\"\"></p>\n<h3 id=\"2-3-踩坑开始\"><a href=\"#2-3-踩坑开始\" class=\"headerlink\" title=\"2.3 踩坑开始\"></a>2.3 踩坑开始</h3><h4 id=\"2-3-1-Internal-Server-Error\"><a href=\"#2-3-1-Internal-Server-Error\" class=\"headerlink\" title=\"2.3.1 Internal Server Error\"></a>2.3.1 Internal Server Error</h4><p>打开之后发现页面显示Internal Server Error , 这个不出我所料。因此别慌</p>\n<p><img src=\"http://photo.jomeswang.top/20200407125152.png\" alt=\"\"></p>\n<p>出现这个问题，一般是wsgi 出错</p>\n<ol>\n<li><p>首先先看一下能不能运行django</p>\n<p>进入虚拟环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source xxx_venv&#x2F;bin&#x2F;activate</span><br><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200407134556.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>发现可以成功运行。如果不可以成功运行有一下错误</p>\n<p><img src=\"http://photo.jomeswang.top/20200406232754.png\" alt=\"\"></p>\n<p>这是python版本错误，通常是python3版本没有安装好，重新安装即可，也有可能是之前选择python版本时，选择了一个错误的python版本，因此需要重新上传部署。</p>\n<p>还有另外一个错误是，如果你的数据库是sqlite3的话，也会有报错，因为centos7默认的数据库版本较低，可参照（ <a href=\"https://hexo.jomeswang.top/posts/c2d74008/\">https://hexo.jomeswang.top/posts/c2d74008/</a> ）重新安装部署sqlite3数据库</p>\n<ol start=\"2\">\n<li><p>配置wsgi日志，配置wsgi文件</p>\n<p>建议先停止项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsgi-file &#x3D; 你的文件路径</span><br><span class=\"line\">daemonize &#x3D; 日志文件路径</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200407135535.png\" alt=\"\"></p>\n</li>\n<li><p>再次打开页面</p>\n<p>发现还是</p>\n<p><img src=\"http://photo.jomeswang.top/20200407135929.png\" alt=\"\"></p>\n</li>\n</ol>\n<h4 id=\"2-3-2-查看日志文件发现问题\"><a href=\"#2-3-2-查看日志文件发现问题\" class=\"headerlink\" title=\"2.3.2 查看日志文件发现问题\"></a>2.3.2 查看日志文件发现问题</h4><ol>\n<li><p>发现错误</p>\n<p><img src=\"http://photo.jomeswang.top/20200407141925.png\" alt=\"\"></p>\n</li>\n<li><p>发现是django版本和sqlite3 版本不对</p>\n<p>我有点迷茫我的sqlite3版本已经升级成3.27了啊，为什么还是错误。可能重新安装python，重新安装sqlite3可以 <a href=\"https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/55674176/django-cant-find-new-sqlite-version-sqlite-3-8-3-or-later-is-required-found</a> </p>\n<p>有点不懂。于是我只有选择降django版本了</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">卸载django:   pip uninstall django</span><br><span class=\"line\">安装低版本：   pip install django&#x3D;&#x3D;2.1.8</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-发现后台的样式不见了。。。。\"><a href=\"#2-3-3-发现后台的样式不见了。。。。\" class=\"headerlink\" title=\"2.3.3 发现后台的样式不见了。。。。\"></a>2.3.3 发现后台的样式不见了。。。。</h4><p>现在我们通过 侧边栏 文件 菜单 进入项目文件，找到 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Fsetting.py\" target=\"_blank\" rel=\"noopener\">setting.py</a> 文件，进行编辑。</p>\n<p>DEBUG模式设置为False，ALLOWED_HOST 添加 ‘*’</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">DEBUG = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">ALLOWED_HOSTS = [<span class=\"string\">'*'</span>]</span><br></pre></td></tr></table></figure>\n\n<p>配置静态文件地址为<code>/home/xxx_static/static/</code>，后面会统一把静态文件移至该目录</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">STATIC_URL = <span class=\"string\">'/static/'</span></span><br><span class=\"line\">STATICFILES_DIR = [</span><br><span class=\"line\">    os.path.<span class=\"keyword\">join</span>(BASE_DIR,<span class=\"string\">'static'</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\">STATIC_ROOT = os.path.<span class=\"keyword\">join</span>(BASE_DIR,<span class=\"string\">'static'</span>),</span><br></pre></td></tr></table></figure>\n\n<p>这里也有一个坑，我之前弄好之后，访问网站老是提示：Bad Request (400)，后来一检查，才发现自己的ALLOWED_HOSTS这里设置有问题。修改之后，在python项目管理器中重启一下就好了。</p>\n<p><strong>配置nginx代理</strong></p>\n<p>在网站中点击我们映射出的域名或ip，会出现一个弹窗，选择 反向代理-》配置文件</p>\n<p>找个缝隙，来添加静态文件和媒体资源的配置。</p>\n<p><img src=\"http://photo.jomeswang.top/20200407162808.png\" alt=\"\"></p>\n<p>关于静态文件：就是存放css，js文件的位置。django框架中以static命名的。</p>\n<p>关于媒体资源：比如用户上传图片的存放位置，一般命名有 media。 你设置的什么名字就写什么名字。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">location /<span class=\"keyword\">static</span>/ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">alias</span> /www/wwwroot/test/<span class=\"keyword\">static</span>/;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location /media/ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">alias</span> /www/wwwroot/test/media/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照文件路径设置即可，只需要替换红色框内的，换成你的路径，其他的不用动。如果保存的时候出现报错，就把空格啥的删除一下。</p>\n<p><img src=\"http://photo.jomeswang.top/20200407164105.png\" alt=\"\"></p>\n<p>完成之后需要在项目中执行以下如下命名收集admin后台的静态文件，不然通过<code>uwsgi</code>服务启动的django服务，会找不到admin的样式文件导致样式失效。</p>\n<ul>\n<li>进入项目根目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /www/wwwroot/xxx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入虚拟环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> xxx_venv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行如下命令（该命令将收集项目中所有静态资源，转移到上面配置的<code>/home/xxx_static/static/</code>目录）</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">manage</span><span class=\"selector-class\">.py</span> <span class=\"selector-tag\">collectstatic</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启python项目和nginx服务</li>\n</ul>\n<p>这样应该就可以了，记住不要用域名加端口号访问，需要用域名访问，否则后台的样式会消失的。这个问题暂且放下。</p>\n<p><img src=\"http://photo.jomeswang.top/20200408113256.png\" alt=\"\"></p>\n<h2 id=\"三：总结\"><a href=\"#三：总结\" class=\"headerlink\" title=\"三：总结\"></a>三：总结</h2><p>搞这个django后台确实非常累，总会遇到形形色色的问题，因此我又写下一篇篇文章，这些文章记录我的成长，希望我的经验可以让看到的人少走一些路，观者共勉。</p>\n","categories":["python"],"tags":["django"]},{"title":"在服务器上使用docker安装Jupyter Notebook","url":"/posts/65c8dfc1/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>使用docker快速安装Jupyter Notebook，来在远程快速编写python代码并运行</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><p>本文仅简略描述安装过程，对于安装那个版本请看<a href=\"https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html\" target=\"_blank\" rel=\"noopener\">官网</a>，本文采用<code>jupyter/datascience-notebook:9b06df75e445</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm -p 8003:8888 --name &#39;jupyter_notebook&#39; -dit -e JUPYTER_ENABLE_LAB&#x3D;yes -v &quot;$PWD&quot;:&#x2F;home&#x2F;jovyan&#x2F;work jupyter&#x2F;datascience-notebook:9b06df75e445</span><br></pre></td></tr></table></figure>\n\n<p>本代码指定8003的服务器端口连接容器的8888端口，并取名<code>&#39;jupyter_notebook&#39;</code></p>\n<p>同时使用<code>-dit</code> 来让docker容器在后端运行。-v 挂载本机的/home/www 至容器的/home/jovyan/work ，因此存储在此文件夹的文件在容器消失后仍在本机中。</p>\n<p>在浏览器中输入   <code>IP:8003</code> 进行访问，会出现如下页面。</p>\n<p><img src=\"http://photo.jomeswang.top/20200405204712.png\" alt=\"\"></p>\n<p>它要求token，可是他在后端运行，该怎么办呢.</p>\n<ol>\n<li>于是 使用 <code>docker ps</code>命令来查看该容器的<code>id</code> 并获取 </li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200405204843.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>再用 <code>docker logs id</code>  来获取这个容器的后台日志，如此就可以获得token，并在页面中输入并设置密码了。</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200405204938.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>之后就可以看见页面了</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200405205225.png\" alt=\"\"></p>\n","categories":["docker"],"tags":["docker","Jupyter Notebook"]},{"title":"python 的文件操作os和正则表达式re","url":"/posts/608ff6ff/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>最近在学爬虫，需要用到文件操作来存储数据，和用正则表达式来对数据进行挑选，</p>\n<p>因此使用python的os库来进行文件操作和正则表达式库re来进行</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-使用os库来进行文件操作\"><a href=\"#2-1-使用os库来进行文件操作\" class=\"headerlink\" title=\"2.1 使用os库来进行文件操作\"></a>2.1 使用os库来进行文件操作</h3><h4 id=\"2-1-1-读文件\"><a href=\"#2-1-1-读文件\" class=\"headerlink\" title=\"2.1.1    读文件\"></a>2.1.1    读文件</h4><p>在 Python 中，读文件主要分为三个步骤：</p>\n<ul>\n<li>打开文件</li>\n<li>读取内容</li>\n<li>关闭文件</li>\n</ul>\n<p>一般使用形式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    f = open(<span class=\"string\">'/path/to/file'</span>, <span class=\"string\">'r'</span>)    <span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">    data = f.read()                   <span class=\"comment\"># 读取文件内容</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f:</span><br><span class=\"line\">        f.close()                     <span class=\"comment\"># 确保文件被关闭</span></span><br></pre></td></tr></table></figure>\n\n<p>注意到，我们在代码中加了 <code>try...finally</code>，这是因为，如果打开和读取文件时出现错误，文件就没有被关闭。为了确保在任何情况下，文件都能被关闭，我们加了 <code>try...finally</code>。</p>\n<p>上面的代码中，’r’ 模式表示读模式，<code>open</code> 函数的常用模式主要有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">‘r’</th>\n<th align=\"center\">读模式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">‘w’</td>\n<td align=\"center\">写模式</td>\n</tr>\n<tr>\n<td align=\"center\">‘a’</td>\n<td align=\"center\">追加模式</td>\n</tr>\n<tr>\n<td align=\"center\">‘b’</td>\n<td align=\"center\">二进制模式（可添加到其他模式中使用）</td>\n</tr>\n<tr>\n<td align=\"center\">‘+’</td>\n<td align=\"center\">读/写模式（可添加到其他模式中使用）</td>\n</tr>\n</tbody></table>\n<p>上面的读文件做法很繁琐，我们可以使用 Python 的 <code>with</code> 语句来帮我们自动调用 <code>close</code> 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/path/to/file'</span>, <span class=\"string\">'r'</span>, encoding = <span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = f.read()</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这种方式很简洁，而且还能在出现异常的情况下自动关闭文件。</p>\n<p>通常而言，读取文件有以下几种方式：</p>\n<ul>\n<li>一次性读取所有内容，使用 <code>read()</code> 或 <code>readlines()</code>；</li>\n<li>按字节读取，使用 <code>read(size)</code>；</li>\n<li>按行读取，使用 <code>readline()</code>；</li>\n</ul>\n<h4 id=\"2-1-2-读取所有内容\"><a href=\"#2-1-2-读取所有内容\" class=\"headerlink\" title=\"2.1.2   读取所有内容\"></a>2.1.2   读取所有内容</h4><p>读取所有内容可以使用 <code>read()</code> 或 <code>readlines()</code>。我们在上面已经介绍过 <code>read()</code> 了，现在，让我们看看 <code>readlines()</code>。</p>\n<p><code>readlines()</code> 方法会把文件读入一个字符串列表，在列表中每个字符串就是一行。</p>\n<p>假设有一个文件 data.txt，它的文件内容如下（数字之间的间隔符是’\\t’）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>  <span class=\"number\">1</span>   <span class=\"number\">9</span>   <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"number\">3</span>   <span class=\"number\">2</span>   <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">20</span>  <span class=\"number\">10</span>  <span class=\"number\">3</span>   <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">4</span>   <span class=\"number\">1</span>   <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span>  <span class=\"number\">8</span>   <span class=\"number\">6</span>   <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">10</span>  <span class=\"number\">2</span>   <span class=\"number\">1</span>   <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p>我们使用 <code>readlines()</code> 将文件读入一个字符串列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    lines = f.readlines()</span><br><span class=\"line\">    line_num = len(lines)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> lines</span><br><span class=\"line\">    <span class=\"keyword\">print</span> line_num</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&#39;10\\t1\\t9\\t9\\n&#39;, &#39;6\\t3\\t2\\t8\\n&#39;, &#39;20\\t10\\t3\\t23\\n&#39;, &#39;1\\t4\\t1\\t10\\n&#39;, &#39;10\\t8\\t6\\t3\\n&#39;, &#39;10\\t2\\t1\\t6&#39;]</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，列表中的每个元素都是一个字符串，刚好对应文件中的每一行。</p>\n<h4 id=\"2-1-3-按字节读取\"><a href=\"#2-1-3-按字节读取\" class=\"headerlink\" title=\"2.1.3   按字节读取\"></a>2.1.3   按字节读取</h4><p>如果文件较小，一次性读取所有内容确实比较方便。但是，如果文件很大，比如有 100G，那就不能一次性读取所有内容了。这时，我们构造一个固定长度的缓冲区，来不断读取文件内容。</p>\n<p>看看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'path/to/file'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        piece = f.read(<span class=\"number\">1024</span>)        <span class=\"comment\"># 每次读取 1024 个字节（即 1 KB）的内容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> piece:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> piece</span><br></pre></td></tr></table></figure>\n\n<p>在上面，我们使用 <code>f.read(1024)</code> 来每次读取 1024 个字节（1KB） 的文件内容，将其存到 piece，再对 piece 进行处理。</p>\n<p>事实上，我们还可以结合 yield 来使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_in_chunks</span><span class=\"params\">(file_object, chunk_size=<span class=\"number\">1024</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Lazy function (generator) to read a file piece by piece.</span></span><br><span class=\"line\"><span class=\"string\">    Default chunk size: 1k.\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        data = file_object.read(chunk_size)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'path/to/file'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> piece <span class=\"keyword\">in</span> read_in_chunks(f):</span><br><span class=\"line\">        <span class=\"keyword\">print</span> piece</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-4-逐行读取\"><a href=\"#2-1-4-逐行读取\" class=\"headerlink\" title=\"2.1.4    逐行读取\"></a>2.1.4    逐行读取</h4><p>在某些情况下，我们希望逐行读取文件，这时可以使用 <code>readline()</code> 方法。</p>\n<p>看看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        line = f.readline()     <span class=\"comment\"># 逐行读取</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> line:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> line,             <span class=\"comment\"># 这里加了 ',' 是为了避免 print 自动换行</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">10  1   9   9</span><br><span class=\"line\">6   3   2   8</span><br><span class=\"line\">20  10  3   23</span><br><span class=\"line\">1   4   1   10</span><br><span class=\"line\">10  8   6   3</span><br><span class=\"line\">10  2   1   6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-5-文件迭代器\"><a href=\"#2-1-5-文件迭代器\" class=\"headerlink\" title=\"2.1.5    文件迭代器\"></a>2.1.5    文件迭代器</h4><p>在 Python 中，<strong>文件对象是可迭代的</strong>，这意味着我们可以直接在 for 循环中使用它们，而且是逐行迭代的，也就是说，效果和 <code>readline()</code> 是一样的，而且更简洁。</p>\n<p>看看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> line,</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，f 就是一个文件迭代器，因此我们可以直接使用 <code>for line in f</code>，它是逐行迭代的。</p>\n<p>看看执行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>  <span class=\"number\">1</span>   <span class=\"number\">9</span>   <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"number\">3</span>   <span class=\"number\">2</span>   <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">20</span>  <span class=\"number\">10</span>  <span class=\"number\">3</span>   <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">4</span>   <span class=\"number\">1</span>   <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span>  <span class=\"number\">8</span>   <span class=\"number\">6</span>   <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">10</span>  <span class=\"number\">2</span>   <span class=\"number\">1</span>   <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p>再看一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(file_path, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    lines = list(f)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> lines</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'10\\t1\\t9\\t9\\n'</span>, <span class=\"string\">'6\\t3\\t2\\t8\\n'</span>, <span class=\"string\">'20\\t10\\t3\\t23\\n'</span>, <span class=\"string\">'1\\t4\\t1\\t10\\n'</span>, <span class=\"string\">'10\\t8\\t6\\t3\\n'</span>, <span class=\"string\">'10\\t2\\t1\\t6'</span>]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我们可以对文件迭代器执行和普通迭代器相同的操作，比如上面使用 <code>list(open(filename))</code> 将 f 转为一个字符串列表，这样所达到的效果和使用 <code>readlines</code> 是一样的。</p>\n<h4 id=\"2-1-6-写文件\"><a href=\"#2-1-6-写文件\" class=\"headerlink\" title=\"2.1.6   写文件\"></a>2.1.6   写文件</h4><p>写文件使用 <code>write</code> 方法，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/ethan/data2.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">'one\\n'</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">'two'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果上述文件已存在，则会清空原内容并覆盖掉；</li>\n<li>如果上述路径是正确的（比如存在 /Users/ethan 的路径），但是文件不存在（data2.txt 不存在），则会新建一个文件，并写入上述内容；</li>\n<li>如果上述路径是不正确的（比如将路径写成 /Users/eth ），这时会抛出 IOError；</li>\n</ul>\n<p>如果我们想往已存在的文件追加内容，可以使用 ‘a’ 模式，如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/ethan/data2.txt'</span>, <span class=\"string\">'a'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">'three\\n'</span>)</span><br><span class=\"line\">    f.write(<span class=\"string\">'four'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-7-小结\"><a href=\"#2-1-7-小结\" class=\"headerlink\" title=\"2.1.7    小结\"></a>2.1.7    小结</h4><ul>\n<li>推荐使用 with 语句操作文件 IO。</li>\n<li>如果文件较大，可以按字节读取或按行读取。</li>\n<li>使用文件迭代器进行逐行迭代。</li>\n</ul>\n<h4 id=\"2-1-8-os模块操作文件\"><a href=\"#2-1-8-os模块操作文件\" class=\"headerlink\" title=\"2.1.8 os模块操作文件\"></a>2.1.8 os模块操作文件</h4><p> Python 的 os 模块封装了常见的文件和目录操作，本文只列出部分常用的方法，更多的方法可以查看<a href=\"https://docs.python.org/3/library/os.path.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。 </p>\n<p>下面是部分常见的用法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方法</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">os.mkdir</td>\n<td align=\"center\">创建目录</td>\n</tr>\n<tr>\n<td align=\"center\">os.rmdir</td>\n<td align=\"center\">删除目录</td>\n</tr>\n<tr>\n<td align=\"center\">os.rename</td>\n<td align=\"center\">重命名</td>\n</tr>\n<tr>\n<td align=\"center\">os.remove</td>\n<td align=\"center\">删除文件</td>\n</tr>\n<tr>\n<td align=\"center\">os.getcwd</td>\n<td align=\"center\">获取当前工作路径</td>\n</tr>\n<tr>\n<td align=\"center\">os.walk</td>\n<td align=\"center\">遍历目录</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.join</td>\n<td align=\"center\">连接目录与文件名</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.split</td>\n<td align=\"center\">分割文件名与目录</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.abspath</td>\n<td align=\"center\">获取绝对路径</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.dirname</td>\n<td align=\"center\">获取路径</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.basename</td>\n<td align=\"center\">获取文件名或文件夹名</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.splitext</td>\n<td align=\"center\">分离文件名与扩展名</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.isfile</td>\n<td align=\"center\">判断给出的路径是否是一个文件</td>\n</tr>\n<tr>\n<td align=\"center\">os.path.isdir</td>\n<td align=\"center\">判断给出的路径是否是一个目录</td>\n</tr>\n</tbody></table>\n<p>下面给出几种常见的用法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bk_dir &#x3D; os.path.join(&#39;123&#39;, &#39;234&#39;) #可以创建多级目录的路径，拼接路径</span><br><span class=\"line\">if not os.path.exists(bk_dir): # 判断是否存在，不存在就创建，</span><br><span class=\"line\">   os.mkdir(bk_dir)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用re正则表达式进行正则匹配\"><a href=\"#2-2-使用re正则表达式进行正则匹配\" class=\"headerlink\" title=\"2.2 使用re正则表达式进行正则匹配\"></a>2.2 使用re正则表达式进行正则匹配</h3><p>正则表达式就是描述一种字符串匹配模式的表达式<br>可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>\n<p><strong>在编写处理字符串的程序或者网页时会频繁使用，比如爬虫</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200405175109.png\" alt=\"\"></p>\n<h4 id=\"2-2-1-反斜杠的困扰\"><a href=\"#2-2-1-反斜杠的困扰\" class=\"headerlink\" title=\"2.2.1 反斜杠的困扰\"></a>2.2.1 反斜杠的困扰</h4><p>有一点需要特别注意的是，正则表达式使用 <code>\\</code> 对特殊字符进行转义，比如，为了匹配字符串 ‘python.org’，我们需要使用正则表达式 <code>&#39;python\\.org&#39;</code>，而 Python 的字符串本身也用 <code>\\</code> 转义，所以上面的正则表达式在 Python 中应该写成 <code>&#39;python\\\\.org&#39;</code>，这会很容易陷入 <code>\\</code> 的困扰中，因此，我们建议使用 Python 的原始字符串，只需加一个 r 前缀，上面的正则表达式可以写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">r&#39;python\\.org&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-re模块的使用方法\"><a href=\"#2-2-2-re模块的使用方法\" class=\"headerlink\" title=\"2.2.2 re模块的使用方法\"></a>2.2.2 re模块的使用方法</h4><p>使用 re 模块有两种方式：</p>\n<ul>\n<li>使用 re.compile 函数生成一个 Pattern 对象，然后使用 Pattern 对象的一系列方法对文本进行匹配查找；</li>\n<li>直接使用 re.match, re.search 和 re.findall 等函数直接对文本匹配查找；<img src=\"http://photo.jomeswang.top/20200405182701.png\" alt=\"\"></li>\n</ul>\n<p>我比较喜欢第二种写法，所以就用第二种写法写这篇博客</p>\n<h4 id=\"2-2-3-安装并导入re\"><a href=\"#2-2-3-安装并导入re\" class=\"headerlink\" title=\"2.2.3  安装并导入re\"></a>2.2.3  安装并导入re</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install re</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在文件中使用</span><br><span class=\"line\">import re</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-re的语法-pattern-是正则表达式\"><a href=\"#2-2-4-re的语法-pattern-是正则表达式\" class=\"headerlink\" title=\"2.2.4 re的语法(pattern 是正则表达式)\"></a>2.2.4 re的语法(pattern 是正则表达式)</h4><ol>\n<li><p>re.findall(pattern, string[, flags])</p>\n<p><strong>findall 以列表形式返回全部能匹配的子串，# 如果没有匹配，则返回一个空列表。</strong></p>\n</li>\n<li><p>re.match(pattern, string[, flags]):</p>\n<p><strong>match 方法用于查找字符串的头部（也可以指定起始位置），它是一次匹配，只要找到了一个匹配的结果就返回， 而不是查找所有匹配的结果。它的一般使用形式如下：</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200405183810.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>re.sub(pattern, repl, string[, count])</li>\n</ol>\n<p><code>count 用于指定最多替换次数，不指定时全部替换。</code></p>\n<p><code>pattern：匹配正则表达式</code></p>\n<p><code>repl:  匹配后替换的字符串</code></p>\n<p><code>string： 要被匹配的字符串</code></p>\n<ol start=\"4\">\n<li>re.subn(pattern, repl, string[, count])</li>\n</ol>\n<p><code>subn 方法跟 sub 方法的行为类似，也用于替换。它的使用形式如下：</code></p>\n<p><img src=\"http://photo.jomeswang.top/20200405192351.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>参考链接：</p>\n<p> <a href=\"https://wiki.jikexueyuan.com/project/explore-python/File-Directory/text_file_io.html\" target=\"_blank\" rel=\"noopener\">https://wiki.jikexueyuan.com/project/explore-python/File-Directory/text_file_io.html</a> </p>\n","categories":["python"],"tags":["python_os","python_re"]},{"title":"lxml 中文输出","url":"/posts/3d441074/","content":"<p>lxml 中文输出</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># encoding&#x3D;utf8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from lxml import etree</span><br><span class=\"line\"></span><br><span class=\"line\"># url 是古诗文网的</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;so.gushiwen.org&#x2F;guwen&#x2F;Default.aspx?p&#x3D;1&amp;type&#x3D;%e6%ad%a3%e5%8f%b2%e7%b1%bb&#39;</span><br><span class=\"line\">html &#x3D; requests.get(url)</span><br><span class=\"line\">print(&#39;该响应状态码:&#39;, html.status_code)</span><br><span class=\"line\">et &#x3D; etree.HTML(html.content)</span><br><span class=\"line\"># tostring   转换为字符串输出，并设计编码</span><br><span class=\"line\">t &#x3D; etree.tostring(et, encoding &#x3D; &quot;utf-8&quot;, pretty_print &#x3D; True, method &#x3D; &quot;html&quot;)</span><br><span class=\"line\">print(t.decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>\n\n","categories":["lxml"],"tags":["lxml"]},{"title":"CTRL C失效修复方法","url":"/posts/c42bcc71/","content":"<p>方法一：在运行窗口重新注册以下DLL文件。<br>regsvr32 Shdocvw.dll<br>regsvr32 Shell32.dll （注意这个命令，先不用输）<br>regsvr32 Oleaut32.dll<br>regsvr32 Actxprxy.dll<br>regsvr32 Mshtml.dll<br>regsvr32 Urlmon.dll </p>\n<a id=\"more\"></a>\n\n<p>第二个命令可以先不用输，输完这些命令后重新启动windows，如果发现无效，再<br>重新输入一遍，这次输入第二个命令。 </p>\n<p>方法二：COMCTL32.DLL文件产生的问题。<br>在升级IE或windows时这个文件可能被替换了，也许新版本的COMCTL32.DLL文件有<br>BUG。<br>找一张windows安装光盘，搜索它，找到一个名为COMCTL32.DL_的文件，把它拷贝<br>出来，用 winrar提取 这个文件为COMCTL32.DLL文件，并覆盖现有文件。</p>\n"},{"title":"Python 爬虫入门 requests lxml bs4","url":"/posts/2eacf9a/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>正式学习爬虫的第一天，感觉信息量巨大。用此篇博客来快速入门爬虫并爬取古诗文网的内容。(使用    requests lxml bs4)</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://photo.jomeswang.top/20200404194240.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200404194302.png\" alt=\"\"></p>\n<h2 id=\"二：过程\"><a href=\"#二：过程\" class=\"headerlink\" title=\"二：过程\"></a>二：过程</h2><h3 id=\"2-1-获取-url-中的-html-代码\"><a href=\"#2-1-获取-url-中的-html-代码\" class=\"headerlink\" title=\"2.1 获取  url  中的  html  代码\"></a>2.1 获取  url  中的  html  代码</h3><p> 中文官方文档指引（<a href=\"https://link.zhihu.com/?target=http%3A//docs.python-requests.org/zh_CN/latest/user/quickstart.html\">http://docs.python-requests.org/zh_CN/latest/user/quickstart.html</a>），内容繁琐比较多，本文精简整理必要内容。 </p>\n<p><img src=\"http://photo.jomeswang.top/20200404195315.png\" alt=\"\"></p>\n<p>先安装<code>requests</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n\n<p>在文档中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\"># url 是古诗文网的</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;so.gushiwen.org&#x2F;guwen&#x2F;Default.aspx?p&#x3D;1&amp;type&#x3D;%e6%ad%a3%e5%8f%b2%e7%b1%bb&#39;</span><br><span class=\"line\">html &#x3D; requests.get(url)</span><br><span class=\"line\">print(&#39;该响应状态码:&#39;, html.status_code)</span><br><span class=\"line\">print(&#39;相应内容:&#39;,  html.text)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200404195951.png\" alt=\"\"></p>\n<p>如此获得到相应页面的html代码</p>\n<p><img src=\"http://photo.jomeswang.top/20200404200053.png\" alt=\"\"></p>\n<h3 id=\"2-2-解析所需要的HTML代码-beautifulsoup-和lxml是两种解析方式，推荐lxml方式，简单快速\"><a href=\"#2-2-解析所需要的HTML代码-beautifulsoup-和lxml是两种解析方式，推荐lxml方式，简单快速\" class=\"headerlink\" title=\"2.2 解析所需要的HTML代码(beautifulsoup 和lxml是两种解析方式，推荐lxml方式，简单快速)\"></a>2.2 解析所需要的HTML代码(beautifulsoup 和lxml是两种解析方式，推荐lxml方式，简单快速)</h3><h4 id=\"2-2-1-使用BeautifulSoup来解析\"><a href=\"#2-2-1-使用BeautifulSoup来解析\" class=\"headerlink\" title=\"2.2.1 使用BeautifulSoup来解析\"></a>2.2.1 使用BeautifulSoup来解析</h4><p>先安装bs4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install bs4</span><br></pre></td></tr></table></figure>\n\n<p>用靓汤来对response进行解析，获取网页源代码</p>\n<p><img src=\"http://photo.jomeswang.top/20200404202843.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200404203934.png\" alt=\"\"></p>\n<p>方法：</p>\n<p>1.find(name,attrs,recursive,text,**wargs)      find(‘p’)即寻找第一个匹配的p节点</p>\n<p> 2.find_all(name,attrs,recursive,text,**wargs)  find_all(‘p’)即寻找所有p节点</p>\n<p>attrs<br>有两种情况则要用到参数attrs:一是标签字符中带有-，比如data-custom;二是class不能看作标签属性。解决的办法是在attrs属性用字典进行传递参数</p>\n<p>css选择器 select()</p>\n<p><img src=\"http://photo.jomeswang.top/20200409201905.png\" alt=\"\"></p>\n<p>实例解析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 首先引入BeautifulSoup</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"># url 是古诗文网的</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;so.gushiwen.org&#x2F;guwen&#x2F;Default.aspx?p&#x3D;1&amp;type&#x3D;%e6%ad%a3%e5%8f%b2%e7%b1%bb&#39;</span><br><span class=\"line\">html &#x3D; requests.get(url)</span><br><span class=\"line\">print(&#39;该响应状态码:&#39;, html.status_code)</span><br><span class=\"line\"># print(html.content)</span><br><span class=\"line\">bs &#x3D; BeautifulSoup(html.content, &#39;html.parser&#39;)</span><br><span class=\"line\">b &#x3D; bs.select(&#39;a&#39;)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200404203544.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200409201938.png\" alt=\"\"></p>\n<h4 id=\"2-2-2-使用lxml来解析\"><a href=\"#2-2-2-使用lxml来解析\" class=\"headerlink\" title=\"2.2.2  使用lxml来解析\"></a>2.2.2  使用lxml来解析</h4><p>先安装lxml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n\n<p> requests是用来获取网页源代码，lxml.etree是用来解析网页的，和beautifulsoup中的html.parser或者lxml解析是一个作用。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># encoding&#x3D;utf8</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from lxml import etree</span><br><span class=\"line\"></span><br><span class=\"line\"># url 是古诗文网的</span><br><span class=\"line\">url &#x3D; &#39;https:&#x2F;&#x2F;so.gushiwen.org&#x2F;guwen&#x2F;Default.aspx?p&#x3D;1&amp;type&#x3D;%e6%ad%a3%e5%8f%b2%e7%b1%bb&#39;</span><br><span class=\"line\">html &#x3D; requests.get(url)</span><br><span class=\"line\">print(&#39;该响应状态码:&#39;, html.status_code)</span><br><span class=\"line\">et &#x3D; etree.HTML(html.content)</span><br><span class=\"line\">t &#x3D; et.xpath(&#39;&#x2F;html&#x2F;body&#x2F;div[2]&#x2F;div[1]&#x2F;div[3]&#x2F;div[1]&#x2F;p[2]&#x2F;text()&#39;)</span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"http://photo.jomeswang.top/20200409203535.png\" alt=\"\"></p>\n<p>如何获取xpath：</p>\n<p><strong>1.打开F12 ，选取所需要的元素</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200404211857.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li><strong>复制xpath</strong></li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200404212019.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li><p><strong>替换，发现没有效果。。。。</strong></p>\n</li>\n<li><p><strong>原来是开头那里有一个这个东西</strong></p>\n<p><img src=\"http://photo.jomeswang.top/20200404213612.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>导致爬下来的内容中缺了这东西导致爬下来的内容不对称（可能是标签iframe爬不下来。。。。。。）</p>\n<p><img src=\"http://photo.jomeswang.top/20200404214010.png\" alt=\"\"></p>\n<p>所以它的xpath应该改一改</p>\n<p><img src=\"http://photo.jomeswang.top/20200404214256.png\" alt=\"\"></p>\n<p>这样就可以弄下来了。</p>\n<p><strong>xpath语法：</strong></p>\n<p>Xpath的使用要用到lxml库解析<br>@lang   使用@获取属性<br>@href<br>详细语法： <a href=\"https://www.runoob.com/xpath/xpath-syntax.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/xpath/xpath-syntax.html</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200404214506.png\" alt=\"\"></p>\n<h3 id=\"2-3-装饰器\"><a href=\"#2-3-装饰器\" class=\"headerlink\" title=\"2.3  装饰器\"></a>2.3  装饰器</h3><p><img src=\"http://photo.jomeswang.top/20200404215148.png\" alt=\"\"></p>\n<h2 id=\"三：总结\"><a href=\"#三：总结\" class=\"headerlink\" title=\"三：总结\"></a>三：总结</h2><p>最后发现爬虫也太难搞了吧，一不小心就掉坑里了，找了好久才发现问题。</p>\n<p>这个可能要多练习，多熟悉套路啊！！</p>\n<p><img src=\"http://photo.jomeswang.top/20200404214644.png\" alt=\"\"></p>\n<p>这几种方法多练习吧，一种不行就换另一种。</p>\n","categories":["python 爬虫"],"tags":["python","爬虫"]},{"title":"Ubuntu 配置阿里源和安装图形界面","url":"/posts/e832a134/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>之前搞了一个华为云的服务器想学习一下ubuntu，于是安装了一个Ubuntu系统。</p>\n<p>想搞一个图形界面。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：过程\"><a href=\"#二：过程\" class=\"headerlink\" title=\"二：过程\"></a>二：过程</h2><h3 id=\"2-1配置阿里源\"><a href=\"#2-1配置阿里源\" class=\"headerlink\" title=\"2.1配置阿里源\"></a>2.1配置阿里源</h3><p>ubuntu 的本身的apt源不在国内，因此下载速度非常慢，于是配置阿里云的镜像源，这样可以加速下载的速度。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ubuntu:~$ cd &#x2F;etc&#x2F;apt</span><br><span class=\"line\">ubuntu:&#x2F;etc&#x2F;apt$ sudo mv sources.list sources.list.bak</span><br><span class=\"line\">ubuntu:&#x2F;etc&#x2F;apt$ vim sources.list  </span><br><span class=\"line\">按i 在复制粘贴 之后按esc结束， 按:wq 保存并退出</span><br></pre></td></tr></table></figure>\n\n<p>将这个复制进去（注意此版本是Ubuntu 18.04 ）如果是其他版本，请看<a href=\"https://developer.aliyun.com/mirror/ubuntu\" target=\"_blank\" rel=\"noopener\">阿里云镜像源的配置</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class=\"line\"></span><br><span class=\"line\">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p>之后更新镜像源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ubuntu:~$ sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-安装图形界面\"><a href=\"#2-2-安装图形界面\" class=\"headerlink\" title=\"2.2 安装图形界面\"></a>2.2 安装图形界面</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get update # 更新软件库</span><br><span class=\"line\">apt-get upgrade # 升级软件(记得有一个要Y的)</span><br><span class=\"line\">apt-get install ubuntu-desktop #安装ubuntu默认的图形化操作界面(记得有一个要Y的)</span><br></pre></td></tr></table></figure>\n\n<p>将这三条命令逐一运行，之后就是等待等待再等待了。</p>\n<p>安装好之后记得重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-配置图形界面\"><a href=\"#2-3-配置图形界面\" class=\"headerlink\" title=\"2.3 配置图形界面\"></a>2.3 配置图形界面</h3><p>之后按照提示设置账户用户名等信息。</p>\n<p>然后直接下载按照teamviewer</p>\n<h4 id=\"2-3-1-开启桌面共享\"><a href=\"#2-3-1-开启桌面共享\" class=\"headerlink\" title=\"2.3.1    开启桌面共享\"></a>2.3.1    开启桌面共享</h4><p>进入系统-&gt;首选项-&gt;桌面共享-&gt;开启远程桌面，设置登陆密码</p>\n<p><img src=\"http://photo.jomeswang.top/20200403122317.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200403122449.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200403122523.png\" alt=\"\"></p>\n<h4 id=\"3-2-2-安装vncserver基础服务\"><a href=\"#3-2-2-安装vncserver基础服务\" class=\"headerlink\" title=\"3.2.2    安装vncserver基础服务\"></a>3.2.2    安装vncserver基础服务</h4><p><code>sudo apt-get install xrdp vnc4server xbase-clients</code></p>\n<h4 id=\"3-2-3-安装dconf-editor-取消权限限制\"><a href=\"#3-2-3-安装dconf-editor-取消权限限制\" class=\"headerlink\" title=\"3.2.3    安装dconf-editor(取消权限限制)\"></a>3.2.3    安装dconf-editor(取消权限限制)</h4><p><code>sudo apt-get install dconf-editor</code><br>打开dconf-editor工具-&gt;依次展开org-&gt;gnome-&gt;desktop-&gt;remote-access，然后取消 “requlre-encryption”的勾选即可</p>\n<p><img src=\"http://photo.jomeswang.top/20200403124707.png\" alt=\"\"></p>\n<h4 id=\"3-2-4-登陆（记得要在安全组中先开放5900端口）\"><a href=\"#3-2-4-登陆（记得要在安全组中先开放5900端口）\" class=\"headerlink\" title=\"3.2.4    登陆（记得要在安全组中先开放5900端口）\"></a>3.2.4    登陆（记得要在安全组中先开放5900端口）</h4><p>使用windows自带mstsc（在运行端口中输入mstsc 即可打开），选择vnc-any模式，输入ip、密码</p>\n<p>参考链接 ： <a href=\"https://www.lizhongyi.com/archives/ubuntu-安装远程桌面/\" target=\"_blank\" rel=\"noopener\">https://www.lizhongyi.com/archives/ubuntu-%E5%AE%89%E8%A3%85%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</a> </p>\n","categories":["linux"],"tags":["ubuntu"]},{"title":"前端vue和django后端数据交互，跨域问题的解决","url":"/posts/b84be3d8/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>再前后端的数据交互问题上，经常会遇到跨域问题。即这个错误</p>\n<blockquote>\n<p> Access to XMLHttpRequest at ‘<a href=\"http://127.0.0.1/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1</a>:8000/api/test/‘ from origin ‘<a href=\"http://127.0.0.1/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1</a>:3000’ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. </p>\n</blockquote>\n<p> 翻译过来即是：从源地址 <a href=\"http://127.0.0.1/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1</a>:3000 发起的到<a href=\"http://127.0.0.1/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1</a>:8000/api/test/ 的XMLHttpRequest访问违反了同源策略：因为在请求头中没有Access-Control-Allow-Origin的值 </p>\n<a id=\"more\"></a>\n\n<p>现在来看一看什么是跨域问题。</p>\n<h3 id=\"1-1-什么是跨域\"><a href=\"#1-1-什么是跨域\" class=\"headerlink\" title=\"1.1 什么是跨域\"></a>1.1 什么是跨域</h3><blockquote>\n<p> 由于开发模式为前后端分离式开发，故而通常情况下，前端和后端可能运行不同的ip或者port下，导致出现跨域问题，故而单独说明 </p>\n</blockquote>\n<p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。<br>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p>\n<p>什么是同源策略？</p>\n<p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>\n<p>同源策略限制以下几种行为：</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>\n<li>DOM 和 Js对象无法获得</li>\n<li>AJAX 请求不能发送</li>\n</ol>\n<h3 id=\"二：解决方法\"><a href=\"#二：解决方法\" class=\"headerlink\" title=\"二：解决方法\"></a>二：解决方法</h3><h3 id=\"2-1-：-前端解决\"><a href=\"#2-1-：-前端解决\" class=\"headerlink\" title=\"2.1 ： 前端解决\"></a>2.1 ： 前端解决</h3><p>运用vue-jsonp</p>\n<p>详情可参考这篇博客：  <a href=\"https://hexo.jomeswang.top/posts/860a051a/\">https://hexo.jomeswang.top/posts/860a051a/</a> </p>\n<p>简单讲就是</p>\n<p>先安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用npm的用 npm install vue-jsonp -save</span><br><span class=\"line\"></span><br><span class=\"line\">使用yarn 的可用 yarn add vue-jsonp</span><br><span class=\"line\"></span><br><span class=\"line\">之后再vue-cli的入口文件 main.js 引入</span><br><span class=\"line\"></span><br><span class=\"line\">import VueJsonp from &#39;vue-jsonp&#39;</span><br><span class=\"line\">Vue.use(VueJsonp)</span><br></pre></td></tr></table></figure>\n\n<p>然后使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;访问地址&#39;url?q&#x3D;123&#39;</span><br><span class=\"line\">this.$jsonp(&#39;url&#39;,&#123;q: 123 &#125;)</span><br><span class=\"line\">\t.then( ( response ) &#x3D;&gt; &#123; console.log(response) &#125;)</span><br><span class=\"line\">\t.catch( (error) &#x3D;&gt; &#123; console.log(error)&#125; )</span><br></pre></td></tr></table></figure>\n\n<p> 详情可看<a href=\"https://github.com/LancerComet/vue-jsonp#readme\" target=\"_blank\" rel=\"noopener\">官网</a> </p>\n<h3 id=\"2-2：-后端解决\"><a href=\"#2-2：-后端解决\" class=\"headerlink\" title=\"2.2： 后端解决\"></a>2.2： 后端解决</h3><h4 id=\"2-2-1-安装-django-cors-headers\"><a href=\"#2-2-1-安装-django-cors-headers\" class=\"headerlink\" title=\"2.2.1  安装  django-cors-headers\"></a>2.2.1  安装  django-cors-headers</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install django-cors-headers</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-注册运用\"><a href=\"#2-2-2-注册运用\" class=\"headerlink\" title=\"2.2.2 注册运用\"></a>2.2.2 注册运用</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在项目的文件中有个settings.py </span><br><span class=\"line\"></span><br><span class=\"line\">INSTALLED_APPS &#x3D; (</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    &#39;corsheaders&#39;,\t\t# 加入这个应用描述</span><br><span class=\"line\">    ...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-添加中间件\"><a href=\"#2-2-3-添加中间件\" class=\"headerlink\" title=\"2.2.3 添加中间件\"></a>2.2.3 添加中间件</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES &#x3D; (</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#39;corsheaders.middleware.CorsMiddleware&#39;,# 注意顺序！！！（可以放第一个） </span><br><span class=\"line\">    &#39;django.middleware.common.CommonMiddleware&#39;, </span><br><span class=\"line\">    ...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-4-允许跨域ip\"><a href=\"#2-2-4-允许跨域ip\" class=\"headerlink\" title=\"2.2.4 允许跨域ip\"></a>2.2.4 允许跨域ip</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">直接允许所有主机跨域</span><br><span class=\"line\"></span><br><span class=\"line\">CORS_ORIGIN_ALLOW_ALL &#x3D; True 默认为False</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-5允许携带cookie\"><a href=\"#2-2-5允许携带cookie\" class=\"headerlink\" title=\"2.2.5允许携带cookie\"></a>2.2.5允许携带cookie</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CORS_ALLOW_CREDENTIALS &#x3D; True</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-6-请求头和方法（直接复制到中间件的后面即可）\"><a href=\"#2-2-6-请求头和方法（直接复制到中间件的后面即可）\" class=\"headerlink\" title=\"2.2.6 请求头和方法（直接复制到中间件的后面即可）\"></a>2.2.6 请求头和方法（直接复制到中间件的后面即可）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CORS_ALLOW_METHODS &#x3D; (</span><br><span class=\"line\">    &#39;DELETE&#39;,</span><br><span class=\"line\">    &#39;GET&#39;,</span><br><span class=\"line\">    &#39;OPTIONS&#39;,</span><br><span class=\"line\">    &#39;PATCH&#39;,</span><br><span class=\"line\">    &#39;POST&#39;,</span><br><span class=\"line\">    &#39;PUT&#39;,</span><br><span class=\"line\">    &#39;VIEW&#39;,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">CORS_ALLOW_HEADERS &#x3D; (</span><br><span class=\"line\">    &#39;XMLHttpRequest&#39;,</span><br><span class=\"line\">    &#39;X_FILENAME&#39;,</span><br><span class=\"line\">    &#39;accept-encoding&#39;,</span><br><span class=\"line\">    &#39;authorization&#39;,</span><br><span class=\"line\">    &#39;content-type&#39;,</span><br><span class=\"line\">    &#39;dnt&#39;,</span><br><span class=\"line\">    &#39;origin&#39;,</span><br><span class=\"line\">    &#39;user-agent&#39;,</span><br><span class=\"line\">    &#39;x-csrftoken&#39;,</span><br><span class=\"line\">    &#39;x-requested-with&#39;,</span><br><span class=\"line\">    &#39;Pragma&#39;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-7-被csrf拦截-CSRF-Failed-CSRF-token-missing-or-incorrect\"><a href=\"#2-2-7-被csrf拦截-CSRF-Failed-CSRF-token-missing-or-incorrect\" class=\"headerlink\" title=\"2.2.7  被csrf拦截     CSRF Failed: CSRF token missing or incorrect\"></a>2.2.7  被csrf拦截     CSRF Failed: CSRF token missing or incorrect</h4><p>在所在的函数前面加上<code>@csrf_exempt</code>修饰器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.views.decorators.csrf import csrf_exempt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@csrf_exempt</span><br><span class=\"line\">def my_view(request):</span><br><span class=\"line\">    c &#x3D; &#123;&#125;</span><br><span class=\"line\">    # ...</span><br><span class=\"line\">    return render(request, &quot;a_template.html&quot;, c)</span><br></pre></td></tr></table></figure>\n\n<p>到此就可以完美解决跨域问题啦！！！</p>\n","categories":["vue","django"],"tags":["django","vue"]},{"title":"将django查询的查询集转化为json的三种方式","url":"/posts/640e5544/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>今天把工具箱的后台修一修，把前端vue到后台django的数据get方式弄好了，但其中有些坑，我再这里记录一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：过程\"><a href=\"#二：过程\" class=\"headerlink\" title=\"二：过程\"></a>二：过程</h2><h3 id=\"2-1-django查询出来的数据转为json\"><a href=\"#2-1-django查询出来的数据转为json\" class=\"headerlink\" title=\"2.1 django查询出来的数据转为json\"></a>2.1 django查询出来的数据转为json</h3><h4 id=\"2-1-1-第一种方式\"><a href=\"#2-1-1-第一种方式\" class=\"headerlink\" title=\"2.1.1 第一种方式\"></a>2.1.1 第一种方式</h4><p> 利用seriallizers<br>这个方法，官网的解释说：将复杂的数据结构变成json、xml或者其他的格式 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import json</span><br><span class=\"line\">from django.core import serializers</span><br><span class=\"line\">def area2(request,id):</span><br><span class=\"line\"> </span><br><span class=\"line\">    data &#x3D; &#123;&#125;</span><br><span class=\"line\">    province  &#x3D; serializers.serialize(&quot;json&quot;,AreaInfo.objects.filter(parea__isnull&#x3D;True))</span><br><span class=\"line\">    data[&quot;data&quot;] &#x3D; json.loads(province)</span><br><span class=\"line\"> </span><br><span class=\"line\">    return JsonResponse(data,safe&#x3D;False)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200331221609.png\" alt=\"\"></p>\n<h4 id=\"2-1-2，使用list，这也是最最简单的（最推荐）\"><a href=\"#2-1-2，使用list，这也是最最简单的（最推荐）\" class=\"headerlink\" title=\"2.1.2，使用list，这也是最最简单的（最推荐）\"></a>2.1.2，使用list，这也是最最简单的（最推荐）</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def area2(request,id):</span><br><span class=\"line\"> </span><br><span class=\"line\">    data &#x3D; &#123;&#125;</span><br><span class=\"line\">    province &#x3D; AreaInfo.objects.filter(parea__isnull&#x3D;True).values()</span><br><span class=\"line\">    data[&quot;data&quot;] &#x3D; list(province)</span><br><span class=\"line\"> </span><br><span class=\"line\">    return JsonResponse(data,safe&#x3D;False)</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def area2(request,id):</span><br><span class=\"line\">\tdata&#x3D;&#123;data:list(AreaInfo.objects.filter(parea__isnull&#x3D;True).values())&#125;</span><br><span class=\"line\">\treturn JsonResonse(data, safe &#x3D; False )</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200331221924.png\" alt=\"\"></p>\n<h4 id=\"2-1-3-第三种方法比较原始，利用for循环拼装\"><a href=\"#2-1-3-第三种方法比较原始，利用for循环拼装\" class=\"headerlink\" title=\"2.1.3  第三种方法比较原始，利用for循环拼装\"></a>2.1.3  第三种方法比较原始，利用for循环拼装</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def area2(request,id):</span><br><span class=\"line\"> </span><br><span class=\"line\">    data &#x3D; AreaInfo.objects.filter(parea__isnull&#x3D;True)</span><br><span class=\"line\">    list&#x3D;[]</span><br><span class=\"line\">    for province in data:</span><br><span class=\"line\">        list.append([province.id,province.title])</span><br><span class=\"line\">    data&#x3D;&#123;&#39;data&#39;:list&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return JsonResponse(data,safe&#x3D;False)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三：总结\"><a href=\"#三：总结\" class=\"headerlink\" title=\"三：总结\"></a>三：总结</h2><p>这个问题之前搞过，现在又忘了，写一个博客来记录一下。</p>\n","categories":["python"],"tags":["django"]},{"title":"配置七牛云图床和搭配使用picgo","url":"/posts/833e23de/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>之前一直使用路过图床，使用起来非常不方便，于是打算自建图床并搭配使用picgo, 这样搭配使用，写文章时感觉飞起. 使我可以专注于写作本身，而不用中途因为想去粘贴图片而去转移平台。使用千牛云免费的10G云存储空间，搭建一个私人图床。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：过程\"><a href=\"#二：过程\" class=\"headerlink\" title=\"二：过程\"></a>二：过程</h2><h3 id=\"2-1-首先注册七牛云\"><a href=\"#2-1-首先注册七牛云\" class=\"headerlink\" title=\"2.1  首先注册七牛云\"></a>2.1  首先注册七牛云</h3><p>​    这个你自己搞定  <a href=\"https://www.qiniu.com/events/free\" target=\"_blank\" rel=\"noopener\">千牛云官网</a></p>\n<h3 id=\"2-2-创建空间\"><a href=\"#2-2-创建空间\" class=\"headerlink\" title=\"2.2   创建空间\"></a>2.2   创建空间</h3><p><img src=\"http://photo.jomeswang.top/1.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200330200400.png\" alt=\"\"></p>\n<h3 id=\"2-3-绑定域名（可选）\"><a href=\"#2-3-绑定域名（可选）\" class=\"headerlink\" title=\"2.3  绑定域名（可选）\"></a>2.3  绑定域名（可选）</h3><p>七牛云的注册域名可以免费用一个月，但不持久，只能使用已经备案过的域名来绑定。因此这里讲述如何绑定</p>\n<p><img src=\"http://photo.jomeswang.top/20200330200811.png\" alt=\"\"></p>\n<p>先在七牛这里获取解析地址之后要 在 域名商 那里 解析 cname .</p>\n<p><img src=\"http://photo.jomeswang.top/4.png\" alt=\"\"></p>\n<p>我的域名是在阿里云的，于是做一个演示。</p>\n<p><img src=\"http://photo.jomeswang.top/20200330201230.png\" alt=\"\"></p>\n<p>过了几分钟之后发现解析成功了。</p>\n<p><img src=\"http://photo.jomeswang.top/20200330201326.png\" alt=\"\"></p>\n<h3 id=\"2-4-配置图片瘦身（可选）\"><a href=\"#2-4-配置图片瘦身（可选）\" class=\"headerlink\" title=\"2-4 配置图片瘦身（可选）\"></a>2-4 配置图片瘦身（可选）</h3><p>配置七牛云的图片瘦身，可以压缩图片，反正便宜。（0.1/千）</p>\n<p><img src=\"http://photo.jomeswang.top/7.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/8.png\" alt=\"\"></p>\n<p>尝试一下这个有什么用。= = </p>\n<h3 id=\"2-5-安装配置-picgo\"><a href=\"#2-5-安装配置-picgo\" class=\"headerlink\" title=\"2.5  安装配置 picgo\"></a>2.5  安装配置 picgo</h3><p>picgo 好处多多，非常方便</p>\n<p>推荐一个好看又好用的开源图床上传工具——PicGO. 拖拽图片就可以自动上传并复制外链到剪贴板。</p>\n<p>给出官方地址： <a href=\"https://github.com/Molunerfinn/PicGo\" target=\"_blank\" rel=\"noopener\">https://github.com/Molunerfinn/PicGo</a> </p>\n<p>先安装这个，可以<a href=\"https://github.com/Molunerfinn/PicGo/releases\" target=\"_blank\" rel=\"noopener\">点击这里下载</a>所需版本  </p>\n<p>之后在</p>\n<p><img src=\"http://photo.jomeswang.top/20200330202338.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200330202419.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/10.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/12.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/11.png\" alt=\"\"></p>\n<p>到此就可以快乐沉浸写写博客的本身上了。</p>\n<p>具体picgo 的用法可以参照官方文档</p>\n","categories":["blog"],"tags":["七牛云","图床"]},{"title":"hexo 博客配置valine 邮箱提醒","url":"/posts/84c51fe9/","content":"<p>首先需要确保 Valine 的基础功能是正常的，参考 <a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine Docs</a>。</p>\n<p>然后进入 <a href=\"https://leancloud.cn/dashboard/applist.html#/apps\" target=\"_blank\" rel=\"noopener\">Leancloud</a> 对应的 Valine 应用中。<a href=\"https://github.com/DesertsP/Valine-Admin\" target=\"_blank\" rel=\"noopener\">原项目github 地址</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"快速部署\"><a href=\"#快速部署\" class=\"headerlink\" title=\"快速部署\"></a>快速部署</h2><h3 id=\"1-在Leancloud云引擎设置界面，填写代码库并保存：https-github-com-DesertsP-Valine-Admin-git\"><a href=\"#1-在Leancloud云引擎设置界面，填写代码库并保存：https-github-com-DesertsP-Valine-Admin-git\" class=\"headerlink\" title=\"1.    在Leancloud云引擎设置界面，填写代码库并保存：https://github.com/DesertsP/Valine-Admin.git\"></a>1.    在<a href=\"https://leancloud.cn/dashboard/#/apps\" target=\"_blank\" rel=\"noopener\">Leancloud</a>云引擎设置界面，填写代码库并保存：<a href=\"https://github.com/DesertsP/Valine-Admin.git\" target=\"_blank\" rel=\"noopener\">https://github.com/DesertsP/Valine-Admin.git</a></h3><p><a href=\"https://imgchr.com/i/GVTsN4\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/29/GVTsN4.md.png\" alt=\"GVTsN4.md.png\"></a></p>\n<h3 id=\"2-在设置页面，设置环境变量以及-Web-二级域名。\"><a href=\"#2-在设置页面，设置环境变量以及-Web-二级域名。\" class=\"headerlink\" title=\"2.    在设置页面，设置环境变量以及 Web 二级域名。\"></a>2.    在设置页面，设置环境变量以及 Web 二级域名。</h3><p><a href=\"https://imgchr.com/i/GVTy4J\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/29/GVTy4J.md.png\" alt=\"GVTy4J.md.png\"></a></p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SITE_NAME</td>\n<td>Deserts</td>\n<td>[必填]博客名称</td>\n</tr>\n<tr>\n<td>SITE_URL</td>\n<td><a href=\"https://deserts.io/\" target=\"_blank\" rel=\"noopener\">https://deserts.io</a></td>\n<td>[必填]首页地址</td>\n</tr>\n<tr>\n<td><strong>SMTP_SERVICE</strong></td>\n<td>QQ</td>\n<td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href=\"https://nodemailer.com/smtp/well-known/#supported-services\" target=\"_blank\" rel=\"noopener\">更多</a></td>\n</tr>\n<tr>\n<td>SMTP_USER</td>\n<td><a href=\"mailto:xxxxxx@qq.com\">xxxxxx@qq.com</a></td>\n<td>[必填]SMTP登录用户</td>\n</tr>\n<tr>\n<td>SMTP_PASS</td>\n<td>ccxxxxxxxxch</td>\n<td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td>\n</tr>\n<tr>\n<td>SENDER_NAME</td>\n<td>Deserts</td>\n<td>[必填]发件人</td>\n</tr>\n<tr>\n<td>SENDER_EMAIL</td>\n<td><a href=\"mailto:xxxxxx@qq.com\">xxxxxx@qq.com</a></td>\n<td>[必填]发件邮箱</td>\n</tr>\n<tr>\n<td>ADMIN_URL</td>\n<td><a href=\"https://xxx.leanapp.cn/\" target=\"_blank\" rel=\"noopener\">https://xxx.leanapp.cn/</a></td>\n<td>[建议]Web主机二级域名，用于自动唤醒    <a href=\"https://service.mail.qq.com/cgi-bin/help?subtype=1&&no=1001256&&id=28\" target=\"_blank\" rel=\"noopener\">qq的看这</a></td>\n</tr>\n<tr>\n<td>BLOGGER_EMAIL</td>\n<td><a href=\"mailto:xxxxx@gmail.com\">xxxxx@gmail.com</a></td>\n<td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td>\n</tr>\n<tr>\n<td>AKISMET_KEY</td>\n<td>xxxxxxxxxxxx</td>\n<td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td>\n</tr>\n</tbody></table>\n<p><strong>以上必填参数请务必正确设置。</strong></p>\n<h4 id=\"2-2-二级域名用于评论后台管理，如https-deserts-leanapp-cn-。\"><a href=\"#2-2-二级域名用于评论后台管理，如https-deserts-leanapp-cn-。\" class=\"headerlink\" title=\"2.2  二级域名用于评论后台管理，如https://deserts.leanapp.cn 。\"></a>2.2  二级域名用于评论后台管理，如<a href=\"https://deserts.leanapp.cn/\" target=\"_blank\" rel=\"noopener\">https://deserts.leanapp.cn</a> 。</h4><ol>\n<li>切换到部署标签页，分支使用master，点击部署即可</li>\n</ol>\n<p><a href=\"https://camo.githubusercontent.com/fa5f1d143d0e7657f75e8653627fb76c712fcb72/68747470733a2f2f636c6f75642e70616e6a756e77656e2e636f6d2f323031382f30392f70696e672d6d752d6b7561692d7a68616f2d323031382d30392d31352d7869612d77752d31322d35362d35302e706e67\" target=\"_blank\" rel=\"noopener\"><img src=\"https://camo.githubusercontent.com/fa5f1d143d0e7657f75e8653627fb76c712fcb72/68747470733a2f2f636c6f75642e70616e6a756e77656e2e636f6d2f323031382f30392f70696e672d6d752d6b7561692d7a68616f2d323031382d30392d31352d7869612d77752d31322d35362d35302e706e67\" alt=\"一键部署\"></a></p>\n<p>第一次部署需要花点时间。</p>\n<ol>\n<li>评论管理。访问设置的二级域名<code>https://二级域名.leanapp.cn/sign-up</code>，注册管理员登录信息，如：<a href=\"https://deserts.leanapp.cn/sign-up\" target=\"_blank\" rel=\"noopener\">https://deserts.leanapp.cn/sign-up</a> </li>\n</ol>\n<p>此后，可以通过<code>https://二级域名.leanapp.cn/</code>管理评论。</p>\n<h3 id=\"3-定时任务设置\"><a href=\"#3-定时任务设置\" class=\"headerlink\" title=\"3    定时任务设置\"></a>3    定时任务设置</h3><p>目前实现了两种云函数定时任务：(1)自动唤醒，定时访问Web APP二级域名防止云引擎休眠；(2)每天定时检查24小时内漏发的邮件通知。</p>\n<p>进入云引擎-定时任务中，创建定时器，创建两个定时任务。</p>\n<p>选择self-wake云函数，Cron表达式为<code>0 0/30 7-23 * * ?</code>，表示每天早6点到晚23点每隔30分钟访问云引擎，<code>ADMIN_URL</code>环境变量务必设置正确：</p>\n<p><a href=\"https://imgchr.com/i/GV7YVO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/29/GV7YVO.png\" alt=\"GV7YVO.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/GV7GqK\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/29/GV7GqK.png\" alt=\"GV7GqK.png\"></a></p>\n<p>选择resend-mails云函数，Cron表达式为<code>0 0 8 * * ?</code>，表示每天早8点检查过去24小时内漏发的通知邮件并补发：</p>\n<p><a href=\"https://imgchr.com/i/GV7GqK\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2020/03/29/GV7GqK.png\" alt=\"GV7GqK.png\"></a></p>\n<p><strong>添加定时器后记得点击启动方可生效。</strong></p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"hexo博客本地搜索失效，一直转圈","url":"/posts/ca3d1d6d/","content":"<h3 id=\"关于-Hexo-的-Local-Search-失效的问题\"><a href=\"#关于-Hexo-的-Local-Search-失效的问题\" class=\"headerlink\" title=\"关于 Hexo 的 Local Search 失效的问题\"></a>关于 Hexo 的 Local Search 失效的问题</h3><blockquote>\n<p>问题描述:</p>\n</blockquote>\n<p>你会发现一开始你的Blog搜索功能还是正常的，搜索出结果一直在转圈圈等待，或者 搜索功能能搜索但是不能跳转过去，随着添加了几篇文章以后，搜索就不正常了，访问你的博客 <code>http://你的博客域名/search.xml</code> 的时候，提示有存在不可解析的字节的错误，大致如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">This page contains the following errors:error on line 66 at column 35: Input is not proper UTF-8, indicate encoding !Bytes: 0x08 0xE8 0xAF 0x84Below is a rendering of the page up to the first error.</span><br></pre></td></tr></table></figure>\n\n<p>此时，是因为你的xml解析有问题，换成json来解析即可，编辑你的站点配置文件 <code>_config.yml</code></p>\n<p>找到搜索的地方 把 Search的xml解析改成json解析，具体改完后 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">search:  path: search.json  field: post  format: html  limit: 10000</span><br></pre></td></tr></table></figure>\n\n<p>完美解决搜索问题。</p>\n","tags":["hexo"]},{"title":"docker 可视管理面板portainer 的部署","url":"/posts/c7474bc9/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>之前觉得一直黑面板管理docker项目很不好并且很多项目要去查找，最近发现了一个docker的可视面板，非常就像搞一下中文版的。（默认已经安装好docker了）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-拉取portainer-镜像\"><a href=\"#2-1-拉取portainer-镜像\" class=\"headerlink\" title=\"2.1 拉取portainer 镜像\"></a>2.1 拉取portainer 镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull portainer&#x2F;portainer</span><br></pre></td></tr></table></figure>\n\n<p>并用<code>docker images</code> 查看是否拉取成功</p>\n<p><code>[root@iZwz9ci7skvj0jt7t5mwdpZ ~]# docker images</code><br><code>REPOSITORY                TAG       IMAGE ID     CREATED      SIZE</code><br><code>portainer/portainer    latest   2869fc110bf7   7 days ago  78.6MB</code></p>\n<h3 id=\"2-2-原版portainer（推荐）\"><a href=\"#2-2-原版portainer（推荐）\" class=\"headerlink\" title=\"2.2 原版portainer（推荐）\"></a>2.2 原版portainer（推荐）</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker volume create portainer_data</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8000:9000 --restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data --name portainer-test portainer&#x2F;portainer</span><br></pre></td></tr></table></figure>\n\n<p><code>参数说明：</code><br><code>-d：容器在后台运行；</code><br><code>-p 8000:9000 ：宿主机9000端口映射容器中的8000端口</code><br><code>–restart 标志会检查容器的退出代码，并据此来决定是否要重启容器，默认是不会重启。``–restart=always：自动重启该容器</code><br><code>-v /var/run/docker.sock:/var/run/docker.sock ：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中</code><br><code>-v portainer_data:/data ：把宿主机portainer_data数据卷挂载到容器/data目录</code><br><code>–name portainer ： 给容器起名为portainer</code></p>\n<h3 id=\"2-3-中文版portainer（翻译的不太友好）\"><a href=\"#2-3-中文版portainer（翻译的不太友好）\" class=\"headerlink\" title=\"2.3    中文版portainer（翻译的不太友好）\"></a>2.3    中文版portainer（翻译的不太友好）</h3><h4 id=\"2-3-1-下载汉化包并放置\"><a href=\"#2-3-1-下载汉化包并放置\" class=\"headerlink\" title=\"2.3.1 下载汉化包并放置\"></a>2.3.1 下载汉化包并放置</h4><p>可以下载<a href=\"https://pan.baidu.com/s/1BLXMSmJFcgESeNMhQL26Mg&shfl=sharepset\" target=\"_blank\" rel=\"noopener\">汉化包</a>（提取码：6vjr），之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401151628.png\" alt=\"\"></p>\n<h4 id=\"2-3-2-创建portainer容器\"><a href=\"#2-3-2-创建portainer容器\" class=\"headerlink\" title=\"2.3 .2    创建portainer容器\"></a>2.3 .2    创建portainer容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker volume create portainer_data</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 8000:9000 --restart&#x3D;always  -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data -v &#x2F;public:&#x2F;public --name portainer  portainer&#x2F;portainer</span><br><span class=\"line\">（如果已部署，需要将之前的容器删除）</span><br></pre></td></tr></table></figure>\n\n<p><code>参数说明：</code><br><code>-d：容器在后台运行；</code><br><code>-p 8000:9000 ：宿主机9000端口映射容器中的8000端口</code><br><code>–restart 标志会检查容器的退出代码，并据此来决定是否要重启容器，默认是不会重启。``–restart=always：自动重启该容器</code><br><code>-v /var/run/docker.sock:/var/run/docker.sock ：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中</code><br><code>-v portainer_data:/data ：把宿主机portainer_data数据卷挂载到容器/data目录</code><br><code>–name portainer ： 给容器起名为portainer</code></p>\n<p>使用<code>docker    ps</code> 看是否在运行中</p>\n<p>采用 <code>IP:8000</code>访问</p>\n<h3 id=\"2-4-Portainer-的web页面访问设置\"><a href=\"#2-4-Portainer-的web页面访问设置\" class=\"headerlink\" title=\"2.4    Portainer   的web页面访问设置\"></a>2.4    Portainer   的web页面访问设置</h3><p><img src=\"http://photo.jomeswang.top/20200401151703.png\" alt=\"\"></p>\n<p>由于是本地docker，所有选择local</p>\n<p><img src=\"http://photo.jomeswang.top/20200401151720.png\" alt=\"\"></p>\n<p>之后点击“Connect”，成功后跳转到主页界面（汉化后），如下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401151744.png\" alt=\"\"></p>\n<p> 点击“local”，进入该docker内，展示相关容器、堆栈、镜像等信息，如下图所示：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401151800.png\" alt=\"\"></p>\n<p>可以安装speedtest<code>docker</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8002:80 ilemonrain&#x2F;html5-speedtest:alpine</span><br></pre></td></tr></table></figure>\n\n","categories":["docker"],"tags":["docker"]},{"title":"Docker 的使用和部署（Daocloud）","url":"/posts/e43ebf58/","content":"<h2 id=\"一：Docker的安装和Daocloud的使用\"><a href=\"#一：Docker的安装和Daocloud的使用\" class=\"headerlink\" title=\"一：Docker的安装和Daocloud的使用\"></a>一：Docker的安装和Daocloud的使用</h2><h3 id=\"1-1-docker安装\"><a href=\"#1-1-docker安装\" class=\"headerlink\" title=\"1.1 docker安装\"></a>1.1 docker安装</h3><h4 id=\"1-1-1-主流-Linux-发行版上安装\"><a href=\"#1-1-1-主流-Linux-发行版上安装\" class=\"headerlink\" title=\"1.1.1 主流 Linux 发行版上安装\"></a>1.1.1 主流 Linux 发行版上安装</h4><p>Docker 的<a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">安装资源文件</a>存放在Amazon S3，国内下载速度极其缓慢。您可以通过执行下面的命令，使用 DaoCloud 镜像站点，高速安装Docker。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure>\n\n<p>该安装包适用于 Ubuntu，Debian，Centos 等大部分主流 Linux 发行版，DaoCloud 后台会每隔 3 小时同步一次 Docker 官方资源，确保您第一时间获取最新的 Docker 安装文件。</p>\n<p>您也可以安装<a href=\"https://github.com/docker/docker/tree/master/experimental\" target=\"_blank\" rel=\"noopener\">体验版</a>或测试版，体验最新 Docker。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker-experimental | sh</span><br><span class=\"line\">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker-test | sh</span><br></pre></td></tr></table></figure>\n\n<p>如果安装不成功，可以选择使用二进制包安装方式，点击<a href=\"https://get.daocloud.io/docker/builds\" target=\"_blank\" rel=\"noopener\">下载二进制包</a>，DaoCloud 安装镜像也提供了各种历史版本的安装包。</p>\n<p>检测docker 是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用 docker --version</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-2-Windows\"><a href=\"#1-1-2-Windows\" class=\"headerlink\" title=\"1.1.2  Windows\"></a>1.1.2  Windows</h4><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>首先，在 <a href=\"http://get.daocloud.io/\" target=\"_blank\" rel=\"noopener\">get.daocloud.io</a> 下载 Windows 版本的 Docker Toolbox，这是 Docker 提供的一个完整的开发组件，适用于 Mac OS X 10.8+ 和 Windows 7 &amp; 8.1，Docker Toolbox 包含：</p>\n<ul>\n<li>Docker Client</li>\n<li>Docker Machine</li>\n<li>Docker Compose (Mac only)</li>\n<li>Docker Kitematic</li>\n<li>VirtualBox</li>\n</ul>\n<p>Docker Toolbox 安装文件尺寸在 200M 左右，如果从 Docker 主站下载，速度会非常缓慢，建议您在 <a href=\"http://get.daocloud.io/\" target=\"_blank\" rel=\"noopener\">get.daocloud.io</a> 的镜像上下载。</p>\n<p> Docker Toolbox 启动了一个运行在 VirtualBox 虚拟机之上的 Linux，并通过类似 ssh 的方式，使 Windows 用户连接进入这个虚拟机的终端，进行各类 Docker 操作。有关 Docker Toolbox 的使用细节，可以参考 Docker 的<a href=\"https://docs.docker.com/engine/installation/windows/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。 </p>\n<h3 id=\"1-2-daocloud-加速器的安装\"><a href=\"#1-2-daocloud-加速器的安装\" class=\"headerlink\" title=\"1.2  daocloud 加速器的安装\"></a>1.2  daocloud 加速器的安装</h3><h4 id=\"1-2-1-Linux\"><a href=\"#1-2-1-Linux\" class=\"headerlink\" title=\"1.2.1 Linux\"></a>1.2.1 Linux</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;daotools&#x2F;set_mirror.sh | sh -s http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>\n\n<p>该脚本可以将 –registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。更多详情请访问文档。</p>\n<h4 id=\"1-2-2-Windows\"><a href=\"#1-2-2-Windows\" class=\"headerlink\" title=\"1.2.2  Windows\"></a>1.2.2  Windows</h4><p>Docker For Windows</p>\n<p>在桌面右下角状态栏中右键 docker 图标，修改在 Docker Daemon 标签页中的 json ，把下面的地址:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>\n\n<p>加到” <code>registry-mirrors</code>“的数组里。点击 Apply 。</p>\n<p>Docker Toolbox 等配置方法请参考<a href=\"http://guide.daocloud.io/dcs/daocloud-9153151.html#docker-toolbox\" target=\"_blank\" rel=\"noopener\">帮助文档</a>。</p>\n<p>Docker 镜像站是什么，我需要使用吗？</p>\n<p> <strong>Docker 镜像站是什么，我需要使用吗？</strong> 使用 Docker 的时候，需要经常从官方获取镜像，但是由于显而易见的网络原因，拉取镜像的过程非常耗时，严重影响使用 Docker 的体验。因此 DaoCloud 推出了镜像站工具解决这个难题，通过智能路由和缓存机制，极大提升了国内网络访问 Docker Hub 的速度，目前已经拥有了广泛的用户群体，并得到了 Docker 官方的大力推荐。如果您是在国内的网络环境使用 Docker，那么 Docker 镜像站一定能帮助到您。</p>\n<h2 id=\"二：Daocloud-界面的配置\"><a href=\"#二：Daocloud-界面的配置\" class=\"headerlink\" title=\"二：Daocloud 界面的配置\"></a>二：Daocloud 界面的配置</h2><h3 id=\"2-1-GitHub，微信绑定\"><a href=\"#2-1-GitHub，微信绑定\" class=\"headerlink\" title=\"2.1 GitHub，微信绑定\"></a>2.1 GitHub，微信绑定</h3><h3 id=\"2-2-在集群管理处增加管理主机-方便管理docker主机\"><a href=\"#2-2-在集群管理处增加管理主机-方便管理docker主机\" class=\"headerlink\" title=\"2.2 在集群管理处增加管理主机 方便管理docker主机\"></a>2.2 在集群管理处增加管理主机 方便管理docker主机</h3><p>daocloud帮助文档： <a href=\"http://guide.daocloud.io/dcs/daocloud-9153148.html\" target=\"_blank\" rel=\"noopener\">http://guide.daocloud.io/dcs/daocloud-9153148.html</a> </p>\n<p>daocloud镜像市场：  <a href=\"https://hub.daocloud.io/\" target=\"_blank\" rel=\"noopener\">https://hub.daocloud.io/</a> </p>\n<h2 id=\"三：Docker-的使用\"><a href=\"#三：Docker-的使用\" class=\"headerlink\" title=\"三：Docker 的使用\"></a>三：Docker 的使用</h2><h3 id=\"3-1：Docker的拉取和部署\"><a href=\"#3-1：Docker的拉取和部署\" class=\"headerlink\" title=\"3.1：Docker的拉取和部署\"></a>3.1：Docker的拉取和部署</h3><h4 id=\"3-1-1-2048Docker拉取\"><a href=\"#3-1-1-2048Docker拉取\" class=\"headerlink\" title=\"3.1.1     2048Docker拉取\"></a>3.1.1     2048Docker拉取</h4><p><a href=\"https://hub.daocloud.io/repos/6f7a340c-b193-4a36-a765-4e660ddebd1c\" target=\"_blank\" rel=\"noopener\">网页版2048docker</a></p>\n<p>进去后发现镜像地址和版本以及说明</p>\n<p>最新版本:    latest</p>\n<p>镜像地址:    daocloud.io/daocloud/dao-2048</p>\n<p>然后在终端中运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dao pull daocloud.io&#x2F;daocloud&#x2F;dao-2048:latest</span><br></pre></td></tr></table></figure>\n\n<p>dao pull命令是daocloud的拉取命令</p>\n<p>看是否拉取成功(看本机中是否有2048 docker)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-2-2048-的部署\"><a href=\"#3-1-2-2048-的部署\" class=\"headerlink\" title=\"3.1.2 2048 的部署\"></a>3.1.2 2048 的部署</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -it --name 2048 -p 9094:80 daocloud.io&#x2F;daocloud&#x2F;dao-2048</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\">-d: 后台运行容器，并返回容器ID；</span><br><span class=\"line\"></span><br><span class=\"line\">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class=\"line\"></span><br><span class=\"line\">-P: 随机端口映射，容器内部端口随机映射到主机的高端口</span><br><span class=\"line\"></span><br><span class=\"line\">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口(小写)</span><br><span class=\"line\"></span><br><span class=\"line\">-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class=\"line\"></span><br><span class=\"line\">--name&#x3D;&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br></pre></td></tr></table></figure>\n\n<p>之后就可以打开 <code>主机ip:9094</code> 看到轻松部署的网页版2048了，是不是很简单啊！</p>\n","categories":["docker"],"tags":["docker"]},{"title":"部署django 到宝塔服务器上","url":"/posts/c2d74008/","content":"<h2 id=\"一、服务器安装宝塔面板并进行基础设置\"><a href=\"#一、服务器安装宝塔面板并进行基础设置\" class=\"headerlink\" title=\"一、服务器安装宝塔面板并进行基础设置\"></a>一、服务器安装宝塔面板并进行基础设置</h2><p>宝塔面板有很多实用的功能，具体可以去<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%3A%2F%2Fwww.bt.cn%2F\" target=\"_blank\" rel=\"noopener\">宝塔官网</a>查看。我们的服务器使用的是 centos8 的系统，所以安装 linux 免费版的宝塔。</p>\n<a id=\"more\"></a>\n\n<p>安装方法很简单，远程到服务器，输入命令进行安装即可</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 安装命令</span></span><br><span class=\"line\">yum install -y wget &amp;&amp; wget -O install.sh http:<span class=\"comment\">//download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span></span><br></pre></td></tr></table></figure>\n\n<p>中途会有一次确认，按照操作提示输入 y 即可。</p>\n<p>安装成功后，控制台会显示出宝塔面板的登录地址、用户名、密码。如下图所示，将内容记录好。</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220250.png\" alt=\"\"></p>\n<p>进行登录后，会提示推荐安装套件，直接关闭即可。然后点击左侧菜单栏中的面板设置，调整面板的 端口、安全入口、用户名及密码。修改完成后，记得点击最下方的保存。</p>\n<p>注：安全入口：是拼接在登录地址之后的。之前系统会自动设置一个随机字符，更改安全入口后，将登录地址中的随机字符换成你更改后的内容。例如：安装后的登录地址为： <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2F10.10.10.10%3A8888%2Ff5165b61\" target=\"_blank\" rel=\"noopener\">http://10.10.10.10:8888/f5165b61</a> 修改安全入口的内容为： /btmb 以后宝塔面板的登录地址变为：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2F10.10.10.10%3A8888%2Fbtmb\" target=\"_blank\" rel=\"noopener\">http://10.10.10.10:8888/btmb</a></p>\n<p><img src=\"http://photo.jomeswang.top/20200406220325.png\" alt=\"\"></p>\n<h2 id=\"二、安装环境包\"><a href=\"#二、安装环境包\" class=\"headerlink\" title=\"二、安装环境包\"></a>二、安装环境包</h2><p>宝塔的基础设置搞完了，接下来我们安装环境部署的一些必要软件程序：python、nginx、mysql（如果用到了就安装）<br> <strong>注意：这里我们用的是Django3的版本，从Django2.0起就不支持mysql5.5了，所以这里要安装高版本的mysql，推荐<code>mysql5.6</code></strong></p>\n<p>在宝塔左侧菜单栏 点击 软件商店，第一页我们就可以看到nginx，点击安装选择急速安装即可。</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220341.png\" alt=\"\"></p>\n<p>与此同时，我们选择 宝塔插件 类别，在该类别下 选择 Python项目管理器 进行安装</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220400.png\" alt=\"\"></p>\n<p>安装成功后，会有一个 首页显示 的开关，我们打开这个开关，记得nginx也要打开这个哦。这个时候 我们在首页就可以看到了，因为后面我们会经常使用，所以最好要展示在首页。</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220416.png\" alt=\"\"></p>\n<p>接下来，我们该安装 python 了，在首页点击 python项目管理器，会出现一个弹窗，点击版本管理，选择一下你项目开发时使用的 python 版本。我使用的是 python 3.6.5 所以我安装这个版本。</p>\n<p>注：python 2.7.5 显示已安装，这是系统自带的，我们不用管他。</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220427.png\" alt=\"\"></p>\n<h2 id=\"三、上传项目文件并创建python项目\"><a href=\"#三、上传项目文件并创建python项目\" class=\"headerlink\" title=\"三、上传项目文件并创建python项目\"></a>三、上传项目文件并创建python项目</h2><p>在上传项目文件的时候，我们需要先配置好项目所有的环境依赖包，所以，在本地开发的时候建议使用虚拟环境，这样我们创建依赖文件的时候，能减少引入一些不必要的包。在本地项目环境目录中(如果是虚拟环境，需要激活虚拟环境再进入项目目录)【django项目目录，即是在manage.py文件所处的路径】输入下方命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip freeze &gt; requirements.txt</span><br><span class=\"line\"><span class=\"comment\"># 注意当前是 pip 还是 pip3</span></span><br></pre></td></tr></table></figure>\n\n<p>会生成一个 requirements.txt 文件，里面就会包含我们当前环境下所有的python包。</p>\n<p>接下来，打开宝塔面板，点击 文件 ，</p>\n<p>此时注意路径需要在/www/wwwroot/下</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220446.png\" alt=\"\"></p>\n<p>点击上传按钮，选择目录，将我们项目的整个目录都上传上来<em>（可以不用上传venv目录，这个是虚拟环境目录，会自动生成）。</em> 我的项目在电脑路径为D:/xzbcx_1.11，此时上传就选择django_test目录。上传弹窗需要加载一会才能展示出文件,之后点击弹窗底部的开始上传，在右上角有一个进度条，等上传完成后就可以关闭该弹窗。</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220500.png\" alt=\"\"></p>\n<p>项目文件大的话上传时间就会比较长，是的，我上传了三十多分钟。</p>\n<p>好了，现在我们开始创建 python 项目。打开首页的 python 项目管理器，点击 添加项目。填充数据：</p>\n<p><img src=\"http://photo.jomeswang.top/20200406220520.png\" alt=\"\"></p>\n<ul>\n<li>项目名称： 自定义就行，你开心就好</li>\n<li>路径： 定位到项目目录即可</li>\n<li>Python 版本： 选择你项目对应的 python 版本</li>\n<li>框架： 选择 django</li>\n<li>启动方式： uswgi（自测了一下只有uswgi启动方式可行，其他的都没用，添加后服务启动不起来，除非自己去服务器手动启动）</li>\n<li>启动文件/文件加： 定位到 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Fwsgi.py\" target=\"_blank\" rel=\"noopener\">wsgi.py</a> 所在的路径</li>\n<li>端口： 自定义就行，你开心就好，注意不要和系统端口冲突，设置1024端口号之后的，不然就算你开心也没用。</li>\n<li>勾选上 是否安装模块依赖 与 开机启动</li>\n</ul>\n<p>点击确定，然后等待创建。</p>\n<h5 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h5><p>注意： 选择的框架是 django 的时候，不需要设置</p>\n<p>创建成功后，点击配置，增加一行wsgi.py的位置（<code>注意此步必做，否则会爆 Internal Server Error</code><br>如果出现的是Internal Server Error，则应该是uwsgi的配置问题。<br>如果出现Server Error (500)则表示在其他方面出现了问题。<br>另外，经测试，如果数据库连接错误也会显示Server Error (500)。 ）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsgi-file &#x3D; 你的文件路径</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200406220630.png\" alt=\"\"></p>\n<p><code>502 Bad Gateway nginx错误的解决方法：</code></p>\n<p>这里有一个坑，改了上面的代码之后，有时会提示端口已经被占用，需要更改端口。<br>有时会造成这里改了端口，而nginx那里没有改，出现上面的错误。</p>\n<p>这时只要保证二者的端口一致就可以了。</p>\n<h2 id=\"四、创建并同步数据库\"><a href=\"#四、创建并同步数据库\" class=\"headerlink\" title=\"四、创建并同步数据库\"></a>四、创建并同步数据库</h2><h3 id=\"4-1-MYSQL-数据库\"><a href=\"#4-1-MYSQL-数据库\" class=\"headerlink\" title=\"4.1 MYSQL 数据库\"></a>4.1 MYSQL 数据库</h3><p>​    在宝塔面板左边菜单选择数据库，然后添加一个数据库：</p>\n<p>创建完数据库后，把你项目中的数据库导出然后上传。如果你不从本地同步数据库导入，也可以直接在服务器上根据django规则来重新生成数据库。生成数据库步骤如下：</p>\n<ul>\n<li>打开宝塔SSH终端</li>\n<li>定位到项目目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/www/wwwroot/xxx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入虚拟环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> xxx_venv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步数据库</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">manage</span><span class=\"selector-class\">.py</span> <span class=\"selector-tag\">makemigrations</span></span><br><span class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">manage</span><span class=\"selector-class\">.py</span> <span class=\"selector-tag\">migrate</span></span><br></pre></td></tr></table></figure>\n\n<p>创建完数据库之后，宝塔会自动生成用户名和一个随机密码</p>\n<p>为了能连接数据库，这个时候需要把项目中的数据库配置修改一下。进入setting.py文件进行编辑，将下面的<code>NAME</code>、<code>USER</code>和<code>PASSWORD</code>修改成上图中的对应值之后保存。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATABASES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'default'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.mysql'</span>,</span><br><span class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'数据库名称'</span>,</span><br><span class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'用户名'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'数据库密码'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-sqlite3数据库\"><a href=\"#4-2-sqlite3数据库\" class=\"headerlink\" title=\"4.2.sqlite3数据库\"></a>4.2.sqlite3数据库</h3><p> 发现服务器本身的sqlite3数据库版本较低，为3.7 但django2.2版本以上的最低sqlite3版本为3.8以上，所以有两种方法解决</p>\n<h4 id=\"4-2-1-降django版本（最简单的方法）\"><a href=\"#4-2-1-降django版本（最简单的方法）\" class=\"headerlink\" title=\"4.2.1 降django版本（最简单的方法）\"></a>4.2.1 降django版本（最简单的方法）</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">卸载django:   pip uninstall django</span><br><span class=\"line\">安装低版本：   pip install django&#x3D;&#x3D;2.1.8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-2-更新sqlite3版本\"><a href=\"#4-2-2-更新sqlite3版本\" class=\"headerlink\" title=\"4.2.2 更新sqlite3版本\"></a>4.2.2 更新sqlite3版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">＃更新SQLite 3</span><br><span class=\"line\">＃获取源代码（在主目录中运行）</span><br><span class=\"line\">[root@djangoServer ~]# cd ~</span><br><span class=\"line\">[root@djangoServer ~]# wget https:&#x2F;&#x2F;www.sqlite.org&#x2F;2019&#x2F;sqlite-autoconf-3270200.tar.gz</span><br><span class=\"line\">[root@djangoServer ~]# tar -zxvf sqlite-autoconf-3270200.tar.gz</span><br><span class=\"line\"> </span><br><span class=\"line\">＃构建并安装</span><br><span class=\"line\">[root@djangoServer ~]# cd sqlite-autoconf-3270200</span><br><span class=\"line\">[root@djangoServer sqlite-autoconf-3270200]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;sqlite</span><br><span class=\"line\">[root@djangoServer sqlite-autoconf-3270200]# make &amp;&amp; make install</span><br><span class=\"line\"> </span><br><span class=\"line\">＃检查版本</span><br><span class=\"line\">## 最新安装的sqlite3版本</span><br><span class=\"line\">[root@djangoServer ~]# &#x2F;usr&#x2F;local&#x2F;sqlite&#x2F;bin&#x2F;sqlite3 --version</span><br><span class=\"line\">3.27.2 2019-02-25 16:06:06 bd49a8271d650fa89e446b42e513b595a717b9212c91dd384aab871fc1d0f6d7</span><br><span class=\"line\">[root@djangoServer ~]# </span><br><span class=\"line\"> </span><br><span class=\"line\">## Centos7自带的sqlite3版本</span><br><span class=\"line\">[root@djangoServer ~]# &#x2F;usr&#x2F;bin&#x2F;sqlite3 --version</span><br><span class=\"line\">3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668</span><br><span class=\"line\">[root@djangoServer ~]# </span><br><span class=\"line\"> </span><br><span class=\"line\">## 可以看到sqlite3的版本还是旧版本，那么需要更新一下。</span><br><span class=\"line\">[root@djangoServer ~]# sqlite3 --version</span><br><span class=\"line\">3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668</span><br><span class=\"line\">[root@djangoServer ~]# </span><br><span class=\"line\"> </span><br><span class=\"line\">## 更改旧的sqlite3</span><br><span class=\"line\">[root@djangoServer ~]# mv &#x2F;usr&#x2F;bin&#x2F;sqlite3  &#x2F;usr&#x2F;bin&#x2F;sqlite3_old</span><br><span class=\"line\"> </span><br><span class=\"line\">## 软链接将新的sqlite3设置到&#x2F;usr&#x2F;bin目录下</span><br><span class=\"line\">[root@djangoServer ~]# ln -s &#x2F;usr&#x2F;local&#x2F;sqlite&#x2F;bin&#x2F;sqlite3   &#x2F;usr&#x2F;bin&#x2F;sqlite3</span><br><span class=\"line\"> </span><br><span class=\"line\">## 查看当前全局sqlite3的版本</span><br><span class=\"line\">[root@djangoServer ~]# sqlite3 --version</span><br><span class=\"line\">3.27.2 2019-02-25 16:06:06 bd49a8271d650fa89e446b42e513b595a717b9212c91dd384aab871fc1d0f6d7</span><br><span class=\"line\">[root@djangoServer ~]# </span><br><span class=\"line\"> </span><br><span class=\"line\">＃将路径传递给共享库</span><br><span class=\"line\"># 设置开机自启动执行，可以将下面的export语句写入 ~&#x2F;.bashrc 文件中，如果如果你想立即生效，可以执行source 〜&#x2F;.bashrc 将在每次启动终端时执行</span><br><span class=\"line\">[root@djangoServer ~]# export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sqlite&#x2F;lib</span><br><span class=\"line\">[root@djangoServer ~]# vim ~&#x2F;.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">    # .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">    # User specific aliases and functions</span><br><span class=\"line\"></span><br><span class=\"line\">    alias rm&#x3D;&#39;rm -i&#39;</span><br><span class=\"line\">    alias cp&#x3D;&#39;cp -i&#39;</span><br><span class=\"line\">    alias mv&#x3D;&#39;mv -i&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">    # Source global definitions</span><br><span class=\"line\">    if [ -f &#x2F;etc&#x2F;bashrc ]; then</span><br><span class=\"line\">            . &#x2F;etc&#x2F;bashrc</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    . &quot;&#x2F;root&#x2F;.acme.sh&#x2F;acme.sh.env&quot;</span><br><span class=\"line\">    # 在这里加上这一行，位置要对</span><br><span class=\"line\">    export LD_LIBRARY_PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;sqlite&#x2F;lib&quot;</span><br><span class=\"line\">    export PATH&#x3D;~&#x2F;.pyenv&#x2F;bin:$PATH</span><br><span class=\"line\">    </span><br><span class=\"line\"> [root@djangoServer ~]# source ~&#x2F;.bashrc</span><br><span class=\"line\"> [root@djangoServer ~]# python3</span><br><span class=\"line\">Python 3.6.8 (default, Aug  7 2019, 17:28:10) </span><br><span class=\"line\">[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import sqlite3</span><br><span class=\"line\">&gt;&gt;&gt; sqlite3.sqlite_version</span><br><span class=\"line\">&#39;3.27.2&#39;</span><br><span class=\"line\"># 成功完成，踩坑许多，特来记录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、检查项目是否运行成功\"><a href=\"#五、检查项目是否运行成功\" class=\"headerlink\" title=\"五、检查项目是否运行成功\"></a>五、检查项目是否运行成功</h2><p>经过上面的操作之后，项目已经在本地服务器运行起来了，这个时候先检查一下项目运行的状况，是否有报错。</p>\n<p>在面板中Python项目管理器 ，点击右侧的日志选项，查看你项目的运行状况，我这边项目的日志如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20200406221116.png\" alt=\"\"></p>\n<p>发现有报错，查阅资料发现是Django2.2之后内部的一个版本限制在作怪，相关文章在<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fweixin_45476498%2Farticle%2Fdetails%2F100098297\" target=\"_blank\" rel=\"noopener\">这里</a>查看，解决方案如下：</p>\n<ul>\n<li>找到 <code>venv(虚拟环境路径)/lib/python/site-packages/django/db/backends/mysql/base.py</code> </li>\n<li>注释掉下面两行代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">version = Database.version_info</span><br><span class=\"line\"><span class=\"comment\"># if version &lt; (1, 3, 13):</span></span><br><span class=\"line\"><span class=\"comment\">#     raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启python项目</li>\n</ul>\n<p>继续观察日志，直到没有新的报错日志出现就说明项目运行成功了！</p>\n<h2 id=\"六、关闭DEBUG模式，调整静态设置\"><a href=\"#六、关闭DEBUG模式，调整静态设置\" class=\"headerlink\" title=\"六、关闭DEBUG模式，调整静态设置\"></a>六、关闭DEBUG模式，调整静态设置</h2><p>现在我们通过 侧边栏 文件 菜单 进入项目文件，找到 <a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Fsetting.py\" target=\"_blank\" rel=\"noopener\">setting.py</a> 文件，进行编辑。</p>\n<p>DEBUG模式设置为False，ALLOWED_HOST 添加 ‘*’</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">DEBUG = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">ALLOWED_HOSTS = [<span class=\"string\">'*'</span>]</span><br></pre></td></tr></table></figure>\n\n<p>配置静态文件地址为<code>/home/xxx_static/static/</code>，后面会统一把静态文件移至该目录</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">STATIC_URL = <span class=\"string\">'/static/'</span></span><br><span class=\"line\">STATICFILES_DIR = [</span><br><span class=\"line\">    os.path.<span class=\"keyword\">join</span>(BASE_DIR,<span class=\"string\">'static'</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\">STATIC_ROOT = <span class=\"string\">'/home/xxx_static/static/'</span></span><br></pre></td></tr></table></figure>\n\n<p>这里也有一个坑，我之前弄好之后，访问网站老是提示：Bad Request (400)，后来一检查，才发现自己的ALLOWED_HOSTS这里设置有问题。修改之后，在python项目管理器中重启一下就好了。</p>\n<h2 id=\"七、设置网站服务，并配置nginx代理\"><a href=\"#七、设置网站服务，并配置nginx代理\" class=\"headerlink\" title=\"七、设置网站服务，并配置nginx代理\"></a>七、设置网站服务，并配置nginx代理</h2><p>上述操作，我们已经在内部启动了，接下来就是设置成网站服务，提供外部访问，并设置 nginx 代理加载静态文件。</p>\n<p>在 python 项目管理器 中点击 映射，设置域名 或者外网IP<code>（注意端口号要与之前的管理器上的端口号一致否则会爆400error）</code>。映射成功后在面板侧边栏 网站 菜单中查看。（此时已经可以在外部访问了。但是是没有静态文件的）</p>\n<p>在网站中点击我们刚才映射出的域名或ip，会出现一个弹窗，选择 反向代理-》配置文件</p>\n<p>找个缝隙，来添加静态文件和媒体资源的配置。</p>\n<p>关于静态文件：就是存放css，js文件的位置。django框架中以static命名的。</p>\n<p>关于媒体资源：比如用户上传图片的存放位置，一般命名有 media。 你设置的什么名字就写什么名字。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">location /<span class=\"keyword\">static</span>/ &#123;</span><br><span class=\"line\">    root /home/xzbcx1_static/;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location /media/ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">alias</span> /www/wwwroot/xzbcx1<span class=\"number\">.11</span>/media/;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照文件路径设置即可，只需要替换红色框内的，换成你的路径，其他的不用动。如果保存的时候出现报错，就把空格啥的删除一下。</p>\n<p><img src=\"http://photo.jomeswang.top/20200406230854.png\" alt=\"\"></p>\n<p>完成之后需要在项目中执行以下如下命名收集admin后台的静态文件，不然通过<code>uwsgi</code>服务启动的django服务，会找不到admin的样式文件导致样式失效。</p>\n<ul>\n<li>进入项目根目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/www/wwwroot/xxx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入虚拟环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> xxx_venv/bin/activate</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行如下命令（该命令将收集项目中所有静态资源，转移到上面配置的<code>/home/xxx_static/static/</code>目录）</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">manage</span><span class=\"selector-class\">.py</span> <span class=\"selector-tag\">collectstatic</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启python项目和nginx服务</li>\n</ul>\n<p>到此，万事大吉！可以通过你设置的域名或ip进行访问了。</p>\n<p>如果不行尝试在虚拟环境下手动执行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">newsgirl<span class=\"literal\">-d</span> -<span class=\"literal\">-ini</span> /www/wwwroot/boxdata/uwsgi.ini <span class=\"literal\">-w</span> boxdata.wsgi.application</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://blog.csdn.net/qq_31024823/article/details/87703974\" target=\"_blank\" rel=\"noopener\">Django+Nginx+uWSGI部署到服务器Django admin后台样式消失</a></p>\n<p><a href=\"https://blog.dyboy.cn/program/144.html#title-9\" target=\"_blank\" rel=\"noopener\">宝塔面板成功部署Django项目流程</a></p>\n","categories":["python"],"tags":["python","django","宝塔面板"]},{"title":"白熊网盘，白嫖网盘","url":"/posts/3f457dd8/","content":"<p>白熊云盘：一款免费无限速的5T网盘</p>\n<a id=\"more\"></a>\n\n<p>今天在不死鸟大佬博客看到这个免费5t的不限速网盘，于是乎注册了几个号耍耍，用了一番还挺不错的，这里给大家推荐一下。</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_502c6d7c_7398_3618@2554x1430.jpeg.m.jpg\" alt=\"img\"></p>\n<h3 id=\"网盘主界面\"><a href=\"#网盘主界面\" class=\"headerlink\" title=\"网盘主界面\"></a>网盘主界面</h3><p>这个是登陆后主界面，目测有点像owocloud，不知道是不是用这个搭建的还挺清爽干净，用着舒心。注册就有5T，比某云强多了！</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_c9a429a4_7398_362@2014x1220.png.m.jpg\" alt=\"img\"></p>\n<p>这是我家测速</p>\n<p>下载不限速，基本跑满带宽。</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_7275912e_7398_3621@543x445.jpeg.m.jpg\" alt=\"img\"></p>\n<p>这是群里大佬测速，80M/s，恐怖如斯</p>\n<p>再来看下上传速度</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_76e921cd_7398_3623@1450x878.png.m.jpg\" alt=\"img\"></p>\n<p>大文件上传</p>\n<p>也非常好，基本跑满，我最高测试时可以跑到5m/s，几乎跑满家里的上传。</p>\n<p>而且可以支持视频、音乐和图片的在线预览，而且经本人测速，支持原片播放，不会压缩视频文件。</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_7e570f0d_7398_3625@2526x1420.jpeg.m.jpg\" alt=\"img\"></p>\n<p>原片播放无卡顿</p>\n<p>我上传了电影，基本上拖动无卡顿，观影效果爽的一批。</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_13cd9ed3_7398_3627@1022x370.png.m.jpg\" alt=\"img\"></p>\n<p>4k60帧视频在线播放</p>\n<p>来，我们暴力测试下，我上传了一个索尼电视的测试样品，4K 60fbs的视频，基本上只要你家网速跟得上，随便拖动</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_ea4b7c32_7398_3629@2546x1338.jpeg.m.jpg\" alt=\"img\"></p>\n<p>电影在线看原片不压缩它不香吗</p>\n<p>看下视频参数，基本上和本地差不多，码率也很高，而且无压缩！真是神器！</p>\n<p>========假装是分割线======</p>\n<h3 id=\"第一缺点：\"><a href=\"#第一缺点：\" class=\"headerlink\" title=\"第一缺点：\"></a>第一缺点：</h3><p>不过嘛缺点也是有的，首先作为一款新网盘，没有时间验证可靠性，存储安全尚待考察。我国网盘间的商业斗争可谓波谲云诡，从115、360，到新浪微盘，百度网盘，盛大网盘，到小米华为手机厂商的云盘，再到坚果云这样的同步盘，以至于各种网赚云盘，可以说此起彼伏，目前虽然刚出，但是站长说只要低调就不怕消失。</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_2d96c5c0_7398_3631@1080x1920.jpeg.m.jpg\" alt=\"img\"></p>\n<p>这是站长的原话</p>\n<h3 id=\"第二是大文件上传和预览有限制，\"><a href=\"#第二是大文件上传和预览有限制，\" class=\"headerlink\" title=\"第二是大文件上传和预览有限制，\"></a>第二是大文件上传和预览有限制，</h3><p>众所周知，网盘是非常烧钱的，云存储和带宽是比家用价格贵的多，为了维持使用体验和降低开支，限制大小也无可厚非，比如大家常用的蓝奏云就是限制文件种类和大小，这款云盘经我测试暂时未发现限制种类，但是对上传大小有限制，最大支持10240mb大小的文件，也就是10G左右，其实一般也够用了，毕竟只有少量电影原盘有那么大的体积。</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_e3bee40e_7404_1433@1436x648.png.m.jpg\" alt=\"img\"></p>\n<p>预览文件体积限制</p>\n<p>另外根据我的使用，白熊云盘对在线预览的文件体积也有限制，我传了一个8G多的电影却显示无法预览，大家可以试试具体限制大小。我问了开发者，他没有正面回复我,估计也是为了省钱，毕竟这网盘视频是原片预览的，几十个G的电影换成带宽的钱烧一下就没了嘛!</p>\n<p>第三就是暂时还没上线分享转存，不过站长说很快就会支持了，这个问题不大。</p>\n<p>最后值得一提的是，白熊云盘支持WebDAV挂载，用windows可以挂载在虚拟盘上，Mac可以挂载在网络硬盘上，我用的Macbookpro，就用WIN10 给大家演示下。</p>\n<h3 id=\"win10-挂载示例\"><a href=\"#win10-挂载示例\" class=\"headerlink\" title=\"win10   挂载示例\"></a><strong>win10   挂载示例</strong></h3><ol>\n<li>点击桌面图标“这台电脑”</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200410110036.png\" alt=\"\"></p>\n<p>\\2. 点击计算机里的“映射网络驱动器”，将会弹出标题为“映射网络驱动器”的弹出窗口</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-9f21331de76b7c8e81a7d62fefbda8a0_1440w.jpg\" alt=\"img\"></p>\n<p>\\3. 在标题为“映射网络驱动器”的弹出窗口的文件夹输入框内填写示例中的网络地址</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-ebb4627c2a697880cc5bb968422a01cb_1440w.jpg\" alt=\"img\"></p>\n<p>\\4. 点击上一步弹窗内的完成按钮，在弹出的登录弹框内输入示例中的用户名和密码</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-be7643b5788df7a3a8e86b64a0aba758_1440w.jpg\" alt=\"img\"></p>\n<p>点击弹框内的确定按钮后，看是不是在“这台电脑”的页面里多出了一块硬盘？</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-6b41a2761601e152eab18efad2bb9779_1440w.jpg\" alt=\"img\"></p>\n<p>WebDAV挂载成功</p>\n<p>最后，说了这么多，有些同学早就不耐烦了，想要网址吗？其实直接百度就哦可!</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_dbc258c9_7404_1443@1630x828.jpeg.m.jpg\" alt=\"img\"></p>\n<h3 id=\"站长计划容量\"><a href=\"#站长计划容量\" class=\"headerlink\" title=\"站长计划容量\"></a>站长计划容量</h3><p>说个福利哈，目前注册推广期，可以参加站长计划获得50T的空间。条件如下：如果你是个人站长，可直接申请（最好是发帖宣传）。如果是个人用户想申请，可以邀请5个好友，并邀请成功后记下他们的uid，并和你们自己的uid一起发给站长QQ，审核通过就会提升用户组权限，获得50T容量。</p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_5c6c1dc7_7404_1445@2052x750.jpeg.m.jpg\" alt=\"img\"></p>\n<p>怎么查找自己的uid</p>\n<p>uid是该云盘唯一身份识别，进入网盘后点击右上角齿轮图标进入设置，第二行就能看到uid了<br>最后给你们看看提升站长计划后的容量吧<img src=\"http://static.coolapk.com/emoticons/v9/coolapk_emotion_1016_hecha.png\" alt=\"喝茶\"></p>\n<p><img src=\"http://image.coolapk.com/feed/2020/0311/22/1075433_b44e4f99_7404_1447@1390x1404.jpeg.m.jpg\" alt=\"img\"></p>\n<p>以后会上线付费单独空间，也就是一个人一个云存储容灾，不和其他普通用户文件放一起。听说月底会上线离线功能，哈哈我也是很期待呢，到时候看能不能把白熊云盘和某度还有115、比特球的离线做个横评!</p>\n","categories":["网盘"],"tags":["网盘"]},{"title":"Django 入门之模板","url":"/posts/470d3cd3/","content":"<p>在Django中，将前端的内容定义在模板中，然后再把模板交给视图调用，各种漂亮、炫酷的效果就出现了。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p><strong>如何向请求者返回一个漂亮的页面呢？</strong></p>\n<p>肯定需要用到html、css，如果想要更炫的效果还要加入js，问题来了，这么一堆字段串全都写到视图中，作为HttpResponse()的参数吗？这样定义就太麻烦了吧，因为定义字符串是不会出任何效果和错误的，如果有一个专门定义前端页面的地方就好了。</p>\n<p>解决问题的技术来了：<strong>模板</strong>。</p>\n<p>在Django中，将前端的内容定义在模板中，然后再把模板交给视图调用，各种漂亮、炫酷的效果就出现了。</p>\n<h4 id=\"创建模板\"><a href=\"#创建模板\" class=\"headerlink\" title=\"创建模板\"></a>创建模板</h4><p>为应用booktest下的视图index创建模板index.html，目录结构如下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401144747.png\" alt=\"\"></p>\n<p>设置查找模板的路径：打开test1/settings.py文件，设置TEMPLATES的DIRS值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401144812.png\" alt=\"\"></p>\n<h4 id=\"定义模板\"><a href=\"#定义模板\" class=\"headerlink\" title=\"定义模板\"></a>定义模板</h4><p>打开templtes/booktest/index.html文件，定义代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;图书列表&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&#123;%for i in list%&#125;</span><br><span class=\"line\">&#123;&#123;i&#125;&#125;&lt;br&gt;</span><br><span class=\"line\">&#123;%endfor%&#125;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在模板中输出变量语法如下，变量可能是从视图中传递过来的，也可能是在模板中定义的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;变量名&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在模板中编写代码段语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;%代码段%&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"视图调用模板\"><a href=\"#视图调用模板\" class=\"headerlink\" title=\"视图调用模板\"></a>视图调用模板</h4><p>调用模板分为三步骤：</p>\n<ul>\n<li>1.找到模板</li>\n<li>2.定义上下文</li>\n<li>3.渲染模板</li>\n</ul>\n<p>打开booktst/views.py文件，调用上面定义的模板文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.http import HttpResponse</span><br><span class=\"line\">from django.template import loader,RequestContext</span><br><span class=\"line\"></span><br><span class=\"line\">def index(request):</span><br><span class=\"line\">    # 1.获取模板</span><br><span class=\"line\">    template&#x3D;loader.get_template(&#39;booktest&#x2F;index.html&#39;)</span><br><span class=\"line\">    # 2.定义上下文</span><br><span class=\"line\">    context&#x3D;RequestContext(request,&#123;&#39;title&#39;:&#39;图书列表&#39;,&#39;list&#39;:range(10)&#125;)</span><br><span class=\"line\">    # 3.渲染模板</span><br><span class=\"line\">    return HttpResponse(template.render(context))</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器刷新页面，显示效果如下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401144834.png\" alt=\"\"></p>\n<h4 id=\"视图调用模板简写\"><a href=\"#视图调用模板简写\" class=\"headerlink\" title=\"视图调用模板简写\"></a>视图调用模板简写</h4><p>视图调用模板都要执行以上三部分，于是Django提供了一个函数render封装了以上代码。 方法render包含3个参数：</p>\n<ul>\n<li>第一个参数为request对象</li>\n<li>第二个参数为模板文件路径</li>\n<li>第三个参数为字典，表示向模板中传递的上下文数据</li>\n</ul>\n<p>打开booktst/views.py文件，调用render的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.shortcuts import render</span><br><span class=\"line\"></span><br><span class=\"line\">def index(request):</span><br><span class=\"line\">    context&#x3D;&#123;&#39;title&#39;:&#39;图书列表&#39;,&#39;list&#39;:range(10)&#125;</span><br><span class=\"line\">    return render(request,&#39;booktest&#x2F;index.html&#39;,context)</span><br></pre></td></tr></table></figure>\n\n","categories":["python"],"tags":["python","django"]},{"title":"Django 入门之后台管理","url":"/posts/848a9d34/","content":"<p>Django能够根据定义的模型类自动地生成管理页面。</p>\n<a id=\"more\"></a>\n\n<p>假设我们要设计一个新闻网站，我们需要编写展示给用户的页面，网页上展示的新闻信息是从哪里来的呢？<strong>是从数据库中查找到新闻的信息，然后把它展示在页面上</strong>。但是我们的网站上的新闻每天都要更新，这就意味着对数据库的增、删、改、查操作，那么我们需要每天写sql语句\b操作数据库吗? 如果这样的话，是不是非常繁琐，所以我们可以设计一个页面，通过对这个页面的操作来实现对新闻数据库的增删改查操作。那么问题来了，老板说我们需要在建立一个新网站，是不是还要设计一个页面来实现对新网站数据库的增删改查操作，但是这样的页面具有一个很大的重复性，那有没有一种方法能够让我们很快的生成管理数据库表的页面呢？<strong>有，那就是我们接下来要给大家讲的Django的后台管理</strong>。使用Django的管理模块，需要按照如下步骤操作：</p>\n<ul>\n<li>1.管理界面本地化</li>\n<li>2.创建管理员</li>\n<li>3.注册模型类</li>\n<li>4.自定义管理页面</li>\n</ul>\n<h4 id=\"1-管理界面本地化\"><a href=\"#1-管理界面本地化\" class=\"headerlink\" title=\"1.管理界面本地化\"></a>1.管理界面本地化</h4><p>本地化是将显示的语言、时间等使用本地的习惯，这里的本地化就是进行中国化，中国大陆地区使用简体中文，时区使用亚洲/上海时区，注意这里不使用北京时区表示。</p>\n<p>打开test1/settings.py文件，找到语言编码、时区的设置项，将内容改为如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE &#x3D; &#39;zh-hans&#39; #使用中国语言</span><br><span class=\"line\">TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39; #使用中国上海时间</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建管理员\"><a href=\"#2-创建管理员\" class=\"headerlink\" title=\"2.创建管理员\"></a>2.创建管理员</h4><p>创建管理员的命令如下，按提示输入用户名、邮箱、密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n\n<p>接下来启动服务器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器，在地址栏中输入如下地址后回车。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;admin&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>输入前面创建的用户名、密码完成登录。</p>\n<p>登录成功后界面如下，但是并没有图书、英雄的管理入口，接下来进行第三步操作。</p>\n<h4 id=\"3-注册模型类\"><a href=\"#3-注册模型类\" class=\"headerlink\" title=\"3.注册模型类\"></a>3.注册模型类</h4><p>登录后台管理后，默认没有我们创建的应用中定义的模型类，需要在自己应用中的admin.py文件中注册，才可以在后台管理中看到，并进行增删改查操作。</p>\n<p>打开booktest/admin.py文件，编写如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from booktest.models import BookInfo,HeroInfo</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(BookInfo)</span><br><span class=\"line\">admin.site.register(HeroInfo)</span><br></pre></td></tr></table></figure>\n\n<p>到浏览器中刷新页面，可以看到模型类BookInfo和HeroInfo的管理了。</p>\n<p>点击类名称”BookInfo”可以进入列表页，默认只有一列。</p>\n<p>在列表页中点击”增加”可以进入增加页，Django会根据模型类的不同，生成不同的表单控件，按提示填写表单内容后点击”保存”，完成数据创建，创建成功后返回列表页。</p>\n<p>在列表页中点击某行的第一列可以进入修改页。</p>\n<p>按照提示进行内容的修改，修改成功后进入列表页。在修改页点击“删除”可以删除一项。</p>\n<p>删除：在列表页勾选想要删除的复选框，可以删除多项。</p>\n<p>点击执行后进入确认页面，删除后回来列表页面。</p>\n<p>数据都删除了，接下来手动造一些数据出来。</p>\n<h4 id=\"4-自定义管理页面\"><a href=\"#4-自定义管理页面\" class=\"headerlink\" title=\"4.自定义管理页面\"></a>4.自定义管理页面</h4><p>在列表页只显示出了BookInfo object，对象的其它属性并没有列出来，查看非常不方便。 Django提供了自定义管理页面的功能，比如列表页要显示哪些值。</p>\n<p>打开booktest/admin.py文件，自定义类，继承自admin.ModelAdmin类。</p>\n<ul>\n<li>属性list_display表示要显示哪些属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class BookInfoAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    list_display &#x3D; [&#39;id&#39;, &#39;btitle&#39;, &#39;bpub_date&#39;]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改模型类BookInfo的注册代码如下</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin.site.register(BookInfo, BookInfoAdmin)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>刷新BookInfo的列表页，所有属性都显示出来了</p>\n</li>\n<li><p>最终booktest/admin.py文件代码如下</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from booktest.models import BookInfo,HeroInfo</span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfoAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    list_display &#x3D; [&#39;id&#39;, &#39;btitle&#39;, &#39;bpub_date&#39;]</span><br><span class=\"line\">class HeroInfoAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    list_display &#x3D; [&#39;id&#39;, &#39;hname&#39;,&#39;hgender&#39;,&#39;hcomment&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(BookInfo,BookInfoAdmin)</span><br><span class=\"line\">admin.site.register(HeroInfo,HeroInfoAdmin)</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python","django"]},{"title":"Django 模型之查询函数和条件","url":"/posts/8a5cf313/","content":"<p>Django 模型之查询函数和条件</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-查询函数\"><a href=\"#1-查询函数\" class=\"headerlink\" title=\"1. 查询函数\"></a>1. 查询函数</h2><p>通过模型类.objects属性可以调用如下函数，实现对模型类对应的数据表的查询。</p>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>功能</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get</td>\n<td>返回表中满足条件的一条且只能有一条数据。</td>\n<td>返回值是一个模型类对象。</td>\n<td>参数中写查询条件。1) 如果查到多条数据，则抛异常MultipleObjectsReturned。2)查询不到数据，则抛异常：DoesNotExist。</td>\n</tr>\n<tr>\n<td>all</td>\n<td>返回模型类对应表格中的所有数据。</td>\n<td>返回值是QuerySet类型</td>\n<td>查询集</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>返回满足条件的数据。</td>\n<td>返回值是QuerySet类型</td>\n<td>参数写查询条件。</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>返回不满足条件的数据。</td>\n<td>返回值是QuerySet类型</td>\n<td>参数写查询条件。</td>\n</tr>\n<tr>\n<td>order_by</td>\n<td>对查询结果进行排序。</td>\n<td>返回值是QuerySet类型</td>\n<td>参数中写根据哪些字段进行排序。</td>\n</tr>\n</tbody></table>\n<h3 id=\"get-示例：\"><a href=\"#get-示例：\" class=\"headerlink\" title=\"get   示例：\"></a>get   示例：</h3><p>例：查询图书id为3的图书信息。</p>\n<p>BookInfo.objects.get(id = 3)</p>\n<h3 id=\"all-方法示例：\"><a href=\"#all-方法示例：\" class=\"headerlink\" title=\"all   方法示例：\"></a>all   方法示例：</h3><p>例：查询图书所有信息。</p>\n<p>BookInfo.objects.all()</p>\n<h3 id=\"filter-方法示例：\"><a href=\"#filter-方法示例：\" class=\"headerlink\" title=\"filter   方法示例：\"></a>filter   方法示例：</h3><p>条件格式：</p>\n<p>​    模型类属性名__条件名=值</p>\n<p>查询图书评论量为34的图书的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(bcomment__exact&#x3D;34)</span><br><span class=\"line\">BookInfo.objects.filter(bcomment&#x3D;34)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询条件\"><a href=\"#查询条件\" class=\"headerlink\" title=\"查询条件\"></a>查询条件</h3><h4 id=\"a-判等条件名-exact。\"><a href=\"#a-判等条件名-exact。\" class=\"headerlink\" title=\"a)判等条件名:exact。\"></a>a)判等条件名:exact。</h4><p>例：查询编号为1的图书。</p>\n<p>BookInfo.objects.get(id=1)</p>\n<h4 id=\"b-模糊查询\"><a href=\"#b-模糊查询\" class=\"headerlink\" title=\"b)模糊查询\"></a>b)模糊查询</h4><p>例：查询书名包含’传’的图书。contains</p>\n<p>BookInfo.objects.filter(btitle__contains=’传’)</p>\n<p>例：查询书名以’部’结尾的图书 endswith 开头:startswith</p>\n<p>BookInfo.objects.filter(btitle__endswith=’部’)</p>\n<h4 id=\"c-空查询-isnull\"><a href=\"#c-空查询-isnull\" class=\"headerlink\" title=\"c)空查询 isnull\"></a>c)空查询 isnull</h4><p>例：查询书名不为空的图书。isnull </p>\n<p>select * from booktest_bookinfo where btitle is not null;</p>\n<p>BookInfo.objects.filter(btitle__isnull=False)</p>\n<h4 id=\"d-范围查询-in\"><a href=\"#d-范围查询-in\" class=\"headerlink\" title=\"d)范围查询  in\"></a>d)范围查询  in</h4><p>例：查询id为1或3或5的图书。</p>\n<p>select * from booktest_bookinfo where id in (1,3,5);</p>\n<p>BookInfo.objects.filter(id__in = [1,3,5])</p>\n<h4 id=\"e-比较查询-gt-greate-than-lt-less-than-gte-equal-大于等于\"><a href=\"#e-比较查询-gt-greate-than-lt-less-than-gte-equal-大于等于\" class=\"headerlink\" title=\"e)比较查询  gt(greate than) lt(less  than) gte(equal) 大于等于\"></a>e)比较查询  gt(greate than) lt(less  than) gte(equal) 大于等于</h4><p>lte 小于等于</p>\n<p>例：查询id大于3的图书。</p>\n<p>Select * from booktest_bookinfo where id&gt;3;</p>\n<p>BookInfo.objects.filter(id__gt=3)</p>\n<h4 id=\"f-日期查询\"><a href=\"#f-日期查询\" class=\"headerlink\" title=\"f)日期查询\"></a>f)日期查询</h4><p>例：查询1980年发表的图书。</p>\n<p>BookInfo.objects.filter(bpub_date__year=1980)</p>\n<p>例：查询1980年1月1日后发表的图书。</p>\n<p>from datetime import date</p>\n<p>BookInfo.objects.filter(bpub_date__gt=date(1980,1,1))</p>\n<h4 id=\"g-exclude方法示例：\"><a href=\"#g-exclude方法示例：\" class=\"headerlink\" title=\"g)exclude方法示例：\"></a>g)exclude方法示例：</h4><p>例：查询id不为3的图书信息。</p>\n<p>BookInfo.objects.exclude(id=3)</p>\n<h4 id=\"h-order-by方法示例：\"><a href=\"#h-order-by方法示例：\" class=\"headerlink\" title=\"h)order_by方法示例：\"></a>h)order_by方法示例：</h4><p>作用：进行查询结果进行排序。</p>\n<p>例：查询所有图书的信息，按照id从小到大进行排序。</p>\n<p>BookInfo.objects.all().order_by(‘id’)</p>\n<p>例：查询所有图书的信息，按照id从大到小进行排序。</p>\n<p>BookInfo.objects.all().order_by(‘-id’)</p>\n<p>例：把id大于3的图书信息按阅读量从大到小排序显示。</p>\n<p>BookInfo.objects.filter(id__gt=3).order_by(‘-bread’)</p>\n<h2 id=\"2-F对象\"><a href=\"#2-F对象\" class=\"headerlink\" title=\"2. F对象\"></a><strong>2.</strong> F对象</h2><p>作用：用于类属性之间的比较。</p>\n<h3 id=\"使用之前需要先导入：\"><a href=\"#使用之前需要先导入：\" class=\"headerlink\" title=\"使用之前需要先导入：\"></a>使用之前需要先导入：</h3><p><code>from django.db.models import F</code></p>\n<p>例：查询图书阅读量大于评论量图书信息。</p>\n<p>BookInfo.objects.filter(bread__gt=F(‘bcomment’))</p>\n<p>例：查询图书阅读量大于2倍评论量图书信息。</p>\n<p>BookInfo.objects.filter(bread__gt=F(‘bcomment’)*2)</p>\n<h2 id=\"3-Q对象\"><a href=\"#3-Q对象\" class=\"headerlink\" title=\"3. Q对象\"></a><strong>3.</strong> Q对象</h2><p>作用：用于查询时条件之间的逻辑关系。not and or，可以对Q对象进行 &amp;|~ 操作。</p>\n<h3 id=\"使用之前需要先导入：-1\"><a href=\"#使用之前需要先导入：-1\" class=\"headerlink\" title=\"使用之前需要先导入：\"></a>使用之前需要先导入：</h3><p><code>from django.db.models import Q</code></p>\n<p>例：查询id大于3且阅读量大于30的图书的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(id__ gt&#x3D;3, bread__gt&#x3D;30)</span><br><span class=\"line\"></span><br><span class=\"line\">BookInfo.objects.filter(Q(id__gt&#x3D;3)&amp;Q(bread__gt&#x3D;30))</span><br></pre></td></tr></table></figure>\n\n<p>例：查询id大于3或者阅读量大于30的图书的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(Q(id__gt&#x3D;3)|Q(bread__gt&#x3D;30))</span><br></pre></td></tr></table></figure>\n\n<p>例：查询id不等于3图书的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(~Q(id&#x3D;3))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-聚合函数\"><a href=\"#4-聚合函数\" class=\"headerlink\" title=\"4. 聚合函数\"></a><strong>4.</strong> 聚合函数</h2><p>作用：对查询结果进行聚合操作。</p>\n<p><code>sum count avg max min</code></p>\n<p><strong><em>\\</em>aggregate：调用这个函数来使用聚合。**</strong> <strong><em>\\</em>返回值是一个字典**</strong></p>\n<p><strong><em>\\</em>使用前需先导入*****</strong>*聚合类*<strong>**</strong>*：**** </p>\n<p><code>from django.db.models import Sum,Count,Max,Min,Avg</code></p>\n<p>例：查询所有图书的数目。</p>\n<p>BookInfo.objects.all().aggregate(Count(‘id’))</p>\n<p>{‘id__count’: 5}</p>\n<p><strong><em>\\</em>count函数**</strong> <strong><em>\\</em>返回值是一个数字**</strong></p>\n<p>作用：统计满足条件数据的数目。</p>\n<p>例：统计所有图书的数目。</p>\n<p>BookInfo.objects.all().count()</p>\n<p>BookInfo.objects.count()</p>\n<p>例：统计id大于3的所有图书的数目。</p>\n<p>BookInfo.objects.filter(id__gt=3).count()</p>\n<p>小结:</p>\n<p><img src=\"http://photo.jomeswang.top/20200331171513.png\" alt=\"\"></p>\n<p><strong><em>参考文档：</em></strong></p>\n<p>​    <a href=\"http://python.usyiyi.cn/translate/django_182/ref/models/querysets.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/translate/django_182/ref/models/querysets.html</a></p>\n","categories":["python"],"tags":["python","django"]},{"title":"Django  模型之定义属性","url":"/posts/8427434f/","content":"<p>Django 模型之定义属性</p>\n<p>Django根据属性的类型确定以下信息：</p>\n<ul>\n<li><p>当前选择的数据库支持字段的类型</p>\n</li>\n<li><p>渲染管理表单时使用的默认html控件</p>\n</li>\n<li><p>在管理站点最低限度的验证</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<p>django会为表创建自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后django不会再创建自动增长的主键列。</p>\n<p>默认创建的主键列属性为id，可以使用pk代替，pk全拼为primary key。</p>\n<blockquote>\n<p>注意：pk是主键的别名，若主键名为id2，那么pk是id2的别名。</p>\n</blockquote>\n<p>属性命名限制：</p>\n<ul>\n<li>不能是python的保留关键字。</li>\n<li>不允许使用连续的下划线，这是由django的查询方式决定的，在第4节会详细讲解查询。</li>\n<li>定义属性时需要指定字段类型，通过字段类型的参数指定选项，语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">属性&#x3D;models.字段类型(选项)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字段类型\"><a href=\"#字段类型\" class=\"headerlink\" title=\"字段类型\"></a>字段类型</h4><p>使用时需要引入django.db.models包，字段类型如下：</p>\n<ul>\n<li>AutoField：自动增长的IntegerField，通常不用指定，不指定时Django会自动创建属性名为id的自动增长属性。</li>\n<li>BooleanField：布尔字段，值为True或False。</li>\n<li>NullBooleanField：支持Null、True、False三种值。</li>\n<li>CharField(max_length=字符长度)：字符串。<ul>\n<li>参数max_length表示最大字符个数。</li>\n</ul>\n</li>\n<li>TextField：大文本字段，一般超过4000个字符时使用。</li>\n<li>IntegerField：整数。</li>\n<li>DecimalField(max_digits=None, decimal_places=None)：十进制浮点数。<ul>\n<li>参数max_digits表示总位数。</li>\n<li>参数decimal_places表示小数位数。</li>\n</ul>\n</li>\n<li>FloatField：浮点数。</li>\n<li>DateField[auto_now=False, auto_now_add=False])：日期。<ul>\n<li>参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，它总是使用当前日期，默认为false。</li>\n<li>参数auto_now_add表示当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false。</li>\n<li>参数auto_now_add和auto_now是相互排斥的，组合将会发生错误。</li>\n</ul>\n</li>\n<li>TimeField：时间，参数同DateField。</li>\n<li>DateTimeField：日期时间，参数同DateField。</li>\n<li>FileField：上传文件字段。</li>\n<li>ImageField：继承于FileField，对上传的内容进行校验，确保是有效的图片。</li>\n</ul>\n<h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><p>通过选项实现对字段的约束，选项如下：</p>\n<ul>\n<li>null：如果为True，表示允许为空，默认值是False。</li>\n<li>blank：如果为True，则该字段允许为空白，默认值是False。</li>\n<li><strong>对比：null是数据库范畴的概念，blank是表单验证范畴的</strong>。</li>\n<li>db_column：字段的名称，如果未指定，则使用属性的名称。</li>\n<li>db_index：若值为True, 则在表中会为此字段创建索引，默认值是False。</li>\n<li>default：默认值。</li>\n<li>primary_key：若为True，则该字段会成为模型的主键字段，默认值是False，一般作为AutoField的选项使用。</li>\n<li>unique：如果为True, 这个字段在表中必须有唯一值，默认值是False。</li>\n</ul>\n<h4 id=\"综合演示\"><a href=\"#综合演示\" class=\"headerlink\" title=\"综合演示\"></a>综合演示</h4><p>修改booktest/models.py中的模型类，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.db import models</span><br><span class=\"line\"></span><br><span class=\"line\">#定义图书模型类BookInfo</span><br><span class=\"line\">class BookInfo(models.Model):</span><br><span class=\"line\">    #btitle &#x3D; models.CharField(max_length&#x3D;20)#图书名称</span><br><span class=\"line\">    btitle &#x3D; models.CharField（max_length&#x3D;20, db_column&#x3D;&#39;title&#39;)#通过db_column指定btitle对应表格中字段的名字为title</span><br><span class=\"line\">    bpub_date &#x3D; models.DateField()#发布日期</span><br><span class=\"line\">    bread &#x3D; models.IntegerField(default&#x3D;0)#阅读量</span><br><span class=\"line\">    bcomment &#x3D; models.IntegerField(default&#x3D;0)#评论量</span><br><span class=\"line\">    isDelete &#x3D; models.BooleanField(default&#x3D;False)#逻辑删除</span><br><span class=\"line\"></span><br><span class=\"line\">#定义英雄模型类HeroInfo</span><br><span class=\"line\">class HeroInfo(models.Model):</span><br><span class=\"line\">    hname &#x3D; models.CharField(max_length&#x3D;20)#英雄姓名</span><br><span class=\"line\">    hgender &#x3D; models.BooleanField(default&#x3D;True)#英雄性别</span><br><span class=\"line\">    isDelete &#x3D; models.BooleanField(default&#x3D;False)#逻辑删除</span><br><span class=\"line\">    #hcomment &#x3D; models.CharField(max_length&#x3D;200)#英雄描述信息</span><br><span class=\"line\">    hcomment &#x3D; models.CharField(max_length&#x3D;200, null&#x3D;True, blank&#x3D;False) #hcomment对应的数据库中的字段可以为空，但通过后台管理页面添加英雄信息时hcomment对应的输入框不能为空</span><br><span class=\"line\">    hbook &#x3D; models.ForeignKey(&#39;BookInfo&#39;)#英雄与图书表的关系为一对多，所以属性定义在英雄模型类中</span><br></pre></td></tr></table></figure>\n\n<p>然后生成迁移文件并执行迁移命令，最后查看test2数据库中的内容。</p>\n","categories":["python"],"tags":["python","django"]},{"title":"Django 入门之视图","url":"/posts/e1a974bc/","content":"<p>对于django的设计框架MVT，用户在URL中请求的是视图，视图接收请求后进行处理，并将处理的结果返回给请求者。</p>\n<a id=\"more\"></a>\n\n<p>后台管理页面做好了，接下来就要做公共访问的页面了。当我们刚刚在浏览器中输入 <a href=\"http://127.0.0.1:8000/admin/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/admin/</a> 之后，浏览器显示出了后台管理的登录页面，那有没有同学想过这个服务器是怎么给我们找到这个页面并返回呢？/admin/是我们想要请求的页面，服务器在收到这个请求之后，就一定对应着一个处理动作，这个处理动作就是帮我们产生页面内容并返回回来，这个过程是由<strong>视图</strong>来做的。</p>\n<p>使用视图时需要进行两步操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 1.定义视图函数</span><br><span class=\"line\">* 2.配置URLconf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-定义视图\"><a href=\"#1-定义视图\" class=\"headerlink\" title=\"1.定义视图\"></a>1.定义视图</h4><p>视图就是一个Python函数，被定义在views.py中。</p>\n<p>视图的必须有一个参数，一般叫request，视图必须返回HttpResponse对象，HttpResponse中的参数内容会显示在浏览器的页面上。</p>\n<p>打开booktest/views.py文件，定义视图index如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.http import HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\">def index(request):</span><br><span class=\"line\">    return HttpResponse(&quot;index&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-配置URLconf\"><a href=\"#2-配置URLconf\" class=\"headerlink\" title=\"2.配置URLconf\"></a>2.配置URLconf</h4><h5 id=\"查找视图的过程\"><a href=\"#查找视图的过程\" class=\"headerlink\" title=\"查找视图的过程\"></a>查找视图的过程</h5><p>请求者在浏览器地址栏中输入url，请求到网站后，获取url信息，然后与编写好的URLconf逐条匹配，如果匹配成功则调用对应的视图函数，如果所有的URLconf都没有匹配成功，则返回404错误。</p>\n<p>一条URLconf包括url规则、视图两部分：</p>\n<ul>\n<li>url规则使用正则表达式定义。</li>\n<li>视图就是在views.py中定义的视图函数。</li>\n</ul>\n<p>需要两步完成URLconf配置：</p>\n<ul>\n<li>1.在应用中定义URLconf</li>\n<li>2.包含到项目的URLconf中</li>\n</ul>\n<p>在booktest/应用下创建urls.py文件，定义代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import url</span><br><span class=\"line\">from booktest import views</span><br><span class=\"line\">urlpatterns &#x3D; [</span><br><span class=\"line\">    url(r&#39;^$&#39;, views.index),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>包含到项目中：打开test1/urls.py文件，为urlpatterns列表增加项如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">url(r&#39;^&#39;, include(&#39;booktest.urls&#39;)),</span><br></pre></td></tr></table></figure>\n\n<p>test1/urls.py文件完整代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import include, url</span><br><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns &#x3D; [</span><br><span class=\"line\">    url(r&#39;^admin&#x2F;&#39;, include(admin.site.urls)),</span><br><span class=\"line\">    url(r&#39;^&#39;, include(&#39;booktest.urls&#39;)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"请求访问\"><a href=\"#请求访问\" class=\"headerlink\" title=\"请求访问\"></a>请求访问</h4><p>视图和URLconf都定义好了，接下来在浏览器地址栏中输入网址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>网页显示效果如下图，视图被成功执行了。</p>\n<p><img src=\"http://photo.jomeswang.top/20200401151250.png\" alt=\"\"></p>\n","categories":["python"],"tags":["python","django"]},{"title":"Django 模型之 简介","url":"/posts/19a59d6d/","content":"<p>Django 模型之 简介</p>\n<a id=\"more\"></a>\n\n<p>ORM，全拼Object-Relation Mapping，中文意为对象-关系映射，是随着面向对象的软件开发方法发展而产生的。面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，对象-关系映射ORM系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。面向对象是从软件工程基本原则(如耦合、聚合、封装)的基础上发展起来的，而关系数据库则是从数学理论发展而来的，两套理论存在显著的区别。为了解决这个不匹配的现象,对象关系映射技术应运而生。O/R中字母O起源于”对象”(Object),而R则来自于”关系”(Relational)。几乎所有的程序里面，都存在对象和关系数据库。在业务逻辑层和用户界面层中，我们是面向对象的。当对象信息发生变化的时候，我们需要把对象的信息保存在关系数据库中。目前流行的ORM产品如Java的Hibernate，.Net的EntityFormerWork等。</p>\n<p>在MVC框架中的Model模块中都包括ORM，对于开发人员主要带来了如下好处：</p>\n<ul>\n<li>实现了数据模型与数据库的解耦，通过简单的配置就可以轻松更换数据库，而不需要修改代码。</li>\n<li>只需要面向对象编程，不需要面向数据库编写代码。</li>\n<li>在MVC中Model中定义的类，通过ORM与关系型数据库中的表对应，对象的属性体现对象间的关系，这种关系也被映射到数据表中。</li>\n</ul>\n<p>Django框架中ORM示意图如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401144407.png\" alt=\"\"></p>\n<h1 id=\"创建项目test2\"><a href=\"#创建项目test2\" class=\"headerlink\" title=\"创建项目test2\"></a>创建项目test2</h1><p>今天演示使用MySQL数据库，这是Web项目首选的数据库。</p>\n<p>创建项目test2。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">django-admin startproject test2</span><br></pre></td></tr></table></figure>\n\n<p>打开test2/settings.py文件，找到DATABASES项，默认使用SQLite3数据库</p>\n<p><img src=\"http://photo.jomeswang.top/20200401144442.png\" alt=\"\"></p>\n<p>修改为使用MySQL数据库，代码如下:</p>\n<blockquote>\n<p>将引擎改为mysql，提供连接的主机HOST、端口PORT、数据库名NAME、用户名USER、密码PASSWORD。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATABASES &#x3D; &#123;</span><br><span class=\"line\">    &#39;default&#39;: &#123;</span><br><span class=\"line\">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class=\"line\">        &#39;NAME&#39;: &#39;test2&#39;, #数据库名字，</span><br><span class=\"line\">        &#39;USER&#39;: &#39;root&#39;, #数据库登录用户名</span><br><span class=\"line\">        &#39;PASSWORD&#39;: &#39;mysql&#39;, #数据库登录密码</span><br><span class=\"line\">        &#39;HOST&#39;: &#39;localhost&#39;, #数据库所在主机</span><br><span class=\"line\">        &#39;PORT&#39;: &#39;3306&#39;, #数据库端口</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：数据库test2 Django框架不会自动生成，需要我们自己进入mysql数据库去创建。</p>\n</blockquote>\n<p>返回第一个终端，进入test2目录，创建应用booktest。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd test2</span><br><span class=\"line\">python manage.py startapp booktest</span><br></pre></td></tr></table></figure>\n\n<p>将应用booktest注册到项目中：打开test2/settings.py文件，找到INSTALLED_APPS项，加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#39;booktest&#39;,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401144502.png\" alt=\"\"></p>\n","categories":["python"],"tags":["python","django"]},{"title":"Django 模型之模型类查询","url":"/posts/b97af40/","content":"<p>Django 模型之模型类查询</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-查询集\"><a href=\"#1-查询集\" class=\"headerlink\" title=\"1. 查询集\"></a><strong>1.</strong> <strong><em>查询集</em></strong></h2><p>all, filter, exclude, order_by调用这些函数会产生一个查询集，QuerySet类对象可以继续调用上面的所有函数。</p>\n<h3 id=\"1-1查询集特性\"><a href=\"#1-1查询集特性\" class=\"headerlink\" title=\"1.1查询集特性\"></a>1.1查询集特性</h3><p>1） 惰性查询：只有在实际使用查询集中的数据的时候才会发生对数据库的真正查询。</p>\n<p>2） 缓存：当使用的是同一个查询集时，第一次使用的时候会发生实际数据库的查询，然后把结果缓存起来，之后再使用这个查询集时，使用的是缓存中的结果。</p>\n<h3 id=\"2-2限制查询集\"><a href=\"#2-2限制查询集\" class=\"headerlink\" title=\"2.2限制查询集\"></a>2.2限制查询集</h3><p>可以对一个查询集进行取下标或者切片操作来限制查询集的结果。</p>\n<p>对一个查询集进行切片操作<strong><em>\\</em>会产生一个新的查询集**</strong>，下标不允许为负数。</p>\n<p>取出查询集第一条数据的两种方式:</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b[0]</td>\n<td>如果b[0]不存在，会抛出IndexError异常</td>\n</tr>\n<tr>\n<td>b[0:1].get()</td>\n<td>如果b[0:1].get()不存在，会抛出DoesNotExist异常。</td>\n</tr>\n</tbody></table>\n<p><strong><em>exists:判断一个查询集中是否有数据。True False</em></strong></p>\n<h2 id=\"2-模型类关系\"><a href=\"#2-模型类关系\" class=\"headerlink\" title=\"2.模型类关系\"></a>2.模型类关系</h2><h3 id=\"1）-一对多关系\"><a href=\"#1）-一对多关系\" class=\"headerlink\" title=\"1） 一对多关系\"></a>1） 一对多关系</h3><p>例：图书类-英雄类 </p>\n<p>models.ForeignKey() 定义在多的类中。</p>\n<h3 id=\"2）-多对多关系\"><a href=\"#2）-多对多关系\" class=\"headerlink\" title=\"2） 多对多关系\"></a>2） 多对多关系</h3><p>例：新闻类-新闻类型类 体育新闻 国际新闻</p>\n<p>models.ManyToManyField() 定义在哪个类中都可以。</p>\n<h3 id=\"3）-一对一关系\"><a href=\"#3）-一对一关系\" class=\"headerlink\" title=\"3） 一对一关系\"></a>3） 一对一关系</h3><p>例：员工基本信息类-员工详细信息类. 员工工号</p>\n<p>models.OneToOneField定义在哪个类中都可以。</p>\n<h2 id=\"3-关联查询（一对多）\"><a href=\"#3-关联查询（一对多）\" class=\"headerlink\" title=\"3. 关联查询（一对多）\"></a>3. 关联查询（一对多）</h2><h3 id=\"11-1-查询和对象关联的数据\"><a href=\"#11-1-查询和对象关联的数据\" class=\"headerlink\" title=\"11.1 查询和对象关联的数据\"></a>11.1 查询和对象关联的数据</h3><p>在一对多关系中，一对应的类我们把它叫做一类，多对应的那个类我们把它叫做多类，我们把多类中定义的建立关联的类属性叫做关联属性。</p>\n<p>例：查询id为1的图书关联的英雄的信息。</p>\n<p>​    b=BookInfo.objects.get(id=1)</p>\n<p>​    b.heroinfo_set.all()</p>\n<p>通过模型类查询：</p>\n<p>​    HeroInfo.objects.filter(hbook__id=1)</p>\n<p>例：查询id为1的英雄关联的图书信息。</p>\n<p>​    h = HeroInfo.objects.get(id=1)</p>\n<p>​    h.hbook</p>\n<p>通过模型类查询：</p>\n<p>​    BookInfo.objects.filter(heroinfo__id=1)</p>\n<p>格式：</p>\n<p><img src=\"http://photo.jomeswang.top/20200331171856.png\" alt=\"\"></p>\n<p>由一类的对象查询多类的时候：</p>\n<p>​    一类的对象.多类名小写_set.all() #查询所用数据</p>\n<p>由多类的对象查询一类的时候：</p>\n<p>​    多类的对象.关联属性  #查询多类的对象对应的一类的对象</p>\n<p>由多类的对象查询一类对象的id时候：</p>\n<p>​    多类的对象. 关联属性_id</p>\n<h3 id=\"11-2通过模型类实现关联查询\"><a href=\"#11-2通过模型类实现关联查询\" class=\"headerlink\" title=\"11.2通过模型类实现关联查询\"></a>11.2通过模型类实现关联查询</h3><p><img src=\"http://photo.jomeswang.top/20200331171950.png\" alt=\"\"></p>\n<p>例：查询图书信息，要求图书关联的英雄的描述包含’八’。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(heroinfo__hcomment__contains&#x3D;&#39;八&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>例：查询图书信息，要求图书中的英雄的id大于3.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.filter(heroinfo__id__gt&#x3D;3)</span><br></pre></td></tr></table></figure>\n\n<p>例：查询书名为“天龙八部”的所有英雄。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">HeroInfo.objects.filter(hbook__btitle&#x3D;&#39;天龙八部&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>通过多类的条件查询一类的数据：</p>\n<p>​    <code>一类名.objects.filter(多类名小写__多类属性名__条件名)</code> </p>\n<p>通过一类的条件查询多类的数据：</p>\n<p>​    <code>多类名.objects.filter(关联属性__一类属性名__条件名)</code></p>\n<h2 id=\"4-插入、更新和删除\"><a href=\"#4-插入、更新和删除\" class=\"headerlink\" title=\"4.插入、更新和删除\"></a>4.插入、更新和删除</h2><p>调用一个模型类对象的save方法的时候就可以实现对模型类对应数据表的插入和更新。</p>\n<p>调用一个模型类对象的delete方法的时候就可以实现对模型类对应数据表数据的删除。</p>\n<h2 id=\"5-自关联\"><a href=\"#5-自关联\" class=\"headerlink\" title=\"5.自关联\"></a>5.自关联</h2><p><img src=\"http://photo.jomeswang.top/20200331172048.png\" alt=\"\"></p>\n<p>自关联是一种特殊的一对多的关系。</p>\n<p>案例：显示广州市的上级地区和下级地区。</p>\n<p>地区表：id, atitle, aParent_id;</p>\n<p>对于地区信息、分类信息等数据，表结构非常类似，每个表的数据量十分有限，为了充分利用数据表的大量数据存储功能，可以设计成一张表，内部的关系字段指向本表的主键，这就是自关联的表结构。</p>\n<p>打开booktest/models.py文件，定义AreaInfo类。</p>\n<blockquote>\n<p>说明：关系属性使用self指向本类，要求null和blank允许为空，因为一级数据是没有父级的。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#定义地区模型类，存储省、市、区县信息</span><br><span class=\"line\">class AreaInfo(models.Model):</span><br><span class=\"line\">    atitle&#x3D;models.CharField(max_length&#x3D;30)#名称</span><br><span class=\"line\">    aParent&#x3D;models.ForeignKey(&#39;self&#39;,null&#x3D;True,blank&#x3D;True)#关系</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-管理器\"><a href=\"#6-管理器\" class=\"headerlink\" title=\"6.管理器\"></a>6.管理器</h2><p>BookInfo.objects.all()-&gt;objects是一个什么东西呢？</p>\n<p>答：objects是Django帮我自动生成的管理器对象，通过这个管理器可以实现对数据的查询。</p>\n<p>objects是models.Manger类的一个对象。自定义管理器之后Django不再帮我们生成默认的objects管理器。</p>\n<h3 id=\"14-1-自定义模型管理器类\"><a href=\"#14-1-自定义模型管理器类\" class=\"headerlink\" title=\"14.1 自定义模型管理器类\"></a>14.1 自定义模型管理器类</h3><p>1) 自定义一个管理器类，这个类继承models.Manger类。</p>\n<p>2) 再在具体的模型类里定义一个自定义管理器类的对象。</p>\n<h3 id=\"14-2自定义管理器类的应用场景\"><a href=\"#14-2自定义管理器类的应用场景\" class=\"headerlink\" title=\"14.2自定义管理器类的应用场景\"></a>14.2自定义管理器类的应用场景</h3><p>1） 改变查询的结果集。</p>\n<p>比如调用BookInfo.books.all()返回的是没有删除的图书的数据。</p>\n<p>2） 添加额外的方法。</p>\n<p>管理器类中定义一个方法帮我们操作模型类对应的数据表。</p>\n<p>使用self.model()就可以创建一个跟自定义管理器对应的模型类对象。</p>\n<p>.在管理器类中定义创建对象的方法</p>\n<p>对模型类对应的数据表进行操作时，推荐将这些操作数据表的方法封装起来，放到模型管理器类中。</p>\n<p>a）打开booktest/models.py文件，定义方法create。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class BookInfoManager(models.Manager):</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    #创建模型类，接收参数为属性赋值</span><br><span class=\"line\">    def create_book(self, title, pub_date):</span><br><span class=\"line\">        #创建模型类对象self.model可以获得模型类</span><br><span class=\"line\">        book &#x3D; self.model()</span><br><span class=\"line\">        book.btitle &#x3D; title</span><br><span class=\"line\">        book.bpub_date &#x3D; pub_date</span><br><span class=\"line\">        book.bread&#x3D;0</span><br><span class=\"line\">        book.bcommet&#x3D;0</span><br><span class=\"line\">        book.isDelete &#x3D; False</span><br><span class=\"line\">        # 将数据插入进数据表</span><br><span class=\"line\">        book.save()</span><br><span class=\"line\">        return book</span><br></pre></td></tr></table></figure>\n\n<p>b）为模型类BookInfo定义管理器books语法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class BookInfo(models.Model):</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    books &#x3D; BookInfoManager()</span><br></pre></td></tr></table></figure>\n\n<p>c）调用语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">调用：book&#x3D;BookInfo.books.create_book(&quot;abc&quot;,date(1980,1,1))</span><br></pre></td></tr></table></figure>\n\n<p>小结:</p>\n<p><img src=\"http://photo.jomeswang.top/20200331172201.png\" alt=\"\"></p>\n<h2 id=\"7-元选项\"><a href=\"#7-元选项\" class=\"headerlink\" title=\"7.元选项\"></a>7.元选项</h2><p>在模型类中定义类Meta，用于设置元信息，如使用db_table自定义表的名字。</p>\n<p>数据表的默认名称为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;app_name&gt;_&lt;model_name&gt;</span><br><span class=\"line\">例：</span><br><span class=\"line\">booktest_bookinfo</span><br></pre></td></tr></table></figure>\n\n<p><strong>例：指定BookInfo模型类生成的数据表名为bookinfo。</strong></p>\n<p>在BookInfo模型类中添加如下内容，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#定义图书模型类BookInfo</span><br><span class=\"line\">class BookInfo(models.Model):</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    #定义元选项</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">      db_table&#x3D;&#39;bookinfo&#39; #指定BookInfo生成的数据表名为bookinfo</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python","django"]},{"title":"Django 入门之设计模型 ","url":"/posts/ef702095/","content":"<p>我们之前操作数据库是通过写sql语句，那么能不能不写sql语句就可以操作数据库呢？ 可以，就是通过接下来要给大家讲的<strong>ORM框架</strong>。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"ORM框架\"><a href=\"#ORM框架\" class=\"headerlink\" title=\"ORM框架\"></a>ORM框架</h3><p>O是object，也就<strong>类对象</strong>的意思，R是relation，翻译成中文是关系，也就是关系数据库中<strong>数据表</strong>的意思，M是mapping，是<strong>映射</strong>的意思。在ORM框架中，它帮我们把类和数据表进行了一个映射，可以让我们<strong>通过类和类对象就能操作它所对应的表格中的数据</strong>。ORM框架还有一个功能，它可以<strong>根据我们设计的类自动帮我们生成数据库中的表格</strong>，省去了我们自己建表的过程。</p>\n<p>django中内嵌了ORM框架，不需要直接面向数据库编程，而是定义模型类，通过模型类和对象完成数据表的增删改查操作。</p>\n<p>使用django进行数据库开发的步骤如下：</p>\n<ul>\n<li>1.在models.py中定义模型类</li>\n<li>2.迁移</li>\n<li>3.通过类和对象完成数据增删改查操作</li>\n</ul>\n<p>下面我们以保存图书信息为例来给大家介绍Django中进行数据库开发的整个流程。</p>\n<h3 id=\"1-定义模型类\"><a href=\"#1-定义模型类\" class=\"headerlink\" title=\"1.定义模型类\"></a>1.定义模型类</h3><p>模型类定义在models.py文件中，继承自models.Model类。</p>\n<blockquote>\n<p>说明：不需要定义主键列，在生成时会自动添加，并且值为自动增长。</p>\n</blockquote>\n<h5 id=\"设计图书类\"><a href=\"#设计图书类\" class=\"headerlink\" title=\"设计图书类\"></a>设计图书类</h5><p>图书类：</p>\n<ul>\n<li>类名：BookInfo</li>\n<li>图书名称：btitle</li>\n<li>图书发布日期：bpub_date</li>\n</ul>\n<h5 id=\"模型类的设计\"><a href=\"#模型类的设计\" class=\"headerlink\" title=\"模型类的设计\"></a>模型类的设计</h5><p>根据设计，在models.py中定义模型类如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from django.db import models</span><br><span class=\"line\"></span><br><span class=\"line\">class BookInfo(models.Model):</span><br><span class=\"line\">    btitle &#x3D; models.CharField(max_length&#x3D;20)</span><br><span class=\"line\">    bpub_date &#x3D; models.DateField()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-迁移\"><a href=\"#2-迁移\" class=\"headerlink\" title=\"2.迁移\"></a>2.迁移</h3><p>迁移由两步完成:</p>\n<ul>\n<li>1.生成迁移文件：根据模型类生成创建表的迁移文件。</li>\n<li>2.执行迁移：根据第一步生成的迁移文件在数据库中创建表。</li>\n</ul>\n<p>生成迁移文件命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py makemigrations</span><br></pre></td></tr></table></figure>\n\n<p>执行生成迁移文件命令后，会在应用booktest目录下的migrations目录中生成迁移文件。</p>\n<p>生成迁移文件后的目录结构： <img src=\"http://photo.jomeswang.top/20200401145008.png\" alt=\"\"></p>\n<p>打开上图中的迁移文件，内容如下： <img src=\"http://photo.jomeswang.top/20200401145024.png\" alt=\"\"></p>\n<p>Django框架根据我们设计的模型类生成了迁移文件，在迁移文件中我们可以看到fields列表中每一个元素跟BookInfo类属性名以及属性的类型是一致的。同时我们发现多了一个id项，这一项是Django框架帮我们自动生成的，在创建表的时候id就会作为对应表的主键列，并且主键列自动增长。</p>\n<p>执行迁移命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401145049.png\" alt=\"\"></p>\n<p>当执行迁移命令后，Django框架会读取迁移文件自动帮我们在数据库中生成对应的表格。</p>\n<p>迁移后目录结构如下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401145109.png\" alt=\"\"></p>\n<p>Django默认采用sqlite3数据库，上图中的db.sqlite3就是Django框架帮我们自动生成的数据库文件。 sqlite3是一个很小的数据库，通常用在手机中，它跟mysql一样，我们也可以通过sql语句来操作它。</p>\n<p>下面使用sqliteman打开db.sqlite3文件进行查看。如果没有安装sqliteman，需要先使用如下命令进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install sqliteman</span><br></pre></td></tr></table></figure>\n\n<p>安装成功之后，在终端输入sqliteman命令，敲击回车即可打开软件。</p>\n<p>sqliteman界面如下： <img src=\"http://photo.jomeswang.top/20200401145136.png\" alt=\"\"></p>\n<p>按照下图的步骤找到要打开的数据库文件。</p>\n<p><img src=\"http://photo.jomeswang.top/20200401145147.png\" alt=\"\"></p>\n<p>点击打开之后，点开Tables找到booktest_bookinfo，可以发现这个表中有三个列，列名跟BookInfo中类属性的名字是一样的。</p>\n<p><img src=\"http://photo.jomeswang.top/20200401145200.png\" alt=\"\"></p>\n<p>双击上图中的booktest_bookinfo表，可以在右侧的Full View窗口中查看表格中的数据，这里表中还没有数据。</p>\n<p><img src=\"http://photo.jomeswang.top/20200401145211.png\" alt=\"\"></p>\n<h5 id=\"默认生成的表名称\"><a href=\"#默认生成的表名称\" class=\"headerlink\" title=\"默认生成的表名称\"></a>默认生成的表名称</h5><p>细心的同学会发现我们上面生成的表的名字叫做booktest_bookinfo，booktest是应用的名字，bookinfo是模型类的名字。</p>\n<p>数据表的默认名称为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;app_name&gt;_&lt;model_name&gt;</span><br><span class=\"line\">例：</span><br><span class=\"line\">booktest_bookinfo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设计英雄类\"><a href=\"#设计英雄类\" class=\"headerlink\" title=\"设计英雄类\"></a>设计英雄类</h4><p>英雄类：</p>\n<ul>\n<li>类名：HeroInfo</li>\n<li>英雄姓名：hname</li>\n<li>英雄性别：hgender</li>\n<li>英雄简介：hcomment</li>\n<li>英雄所属图书：hbook</li>\n<li>图书-英雄的关系为一对多</li>\n</ul>\n<p>打开booktest/models.py，定义英雄类代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class HeroInfo(models.Model):</span><br><span class=\"line\">    hname &#x3D; models.CharField(max_length&#x3D;20)</span><br><span class=\"line\">    hgender &#x3D; models.BooleanField()</span><br><span class=\"line\">    hcomment &#x3D; models.CharField(max_length&#x3D;100)</span><br><span class=\"line\">    hbook &#x3D; models.ForeignKey(&#39;BookInfo&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>这里要说明的是，BookInfo类和HeroInfo类之间具有一对多的关系，这个一对多的关系应该定义在多的那个类，也就是HeroInfo类中。</p>\n<blockquote>\n<p>hbook = models.ForeignKey(‘BookInfo’)这句代码就让BookInfo类和HeroInfo类之间建立了一对多的关系。</p>\n</blockquote>\n<p><strong>在我们之后迁移生成表的时候，Django框架就会自动帮我们在图书表和英雄表之间建立一个外键关系。</strong></p>\n<p>生成迁移文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py makemigrations</span><br></pre></td></tr></table></figure>\n\n<p>结果如下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401150249.png\" alt=\"\"></p>\n<p>项目目录结构：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401150331.png\" alt=\"\"></p>\n<p>执行迁移的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n\n<p>最后我们可以看到数据库中生成的英雄表如下图：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401150402.png\" alt=\"\"></p>\n<p>注意上图中booktest_heroinfo表中有一列hbook_id，这一列名为什么不叫hbook？ hbook_id是根据HeroInfo类的关系属性hbook生成的，对应着图书表中的主键id。</p>\n<h4 id=\"3-数据操作\"><a href=\"#3-数据操作\" class=\"headerlink\" title=\"3.数据操作\"></a>3.数据操作</h4><p>完成数据表的迁移之后，下面就可以通过进入项目的shell，进行简单的API操作。如果需要退出项目，可以使用ctrl+d快捷键或输入quit()。</p>\n<p>进入项目shell的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py shell</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401150416.png\" alt=\"\"></p>\n<p>首先引入booktest/models中的类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from booktest.models import BookInfo,HeroInfo</span><br></pre></td></tr></table></figure>\n\n<p>查询所有图书信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.all()</span><br></pre></td></tr></table></figure>\n\n<p>因为当前并没有数据，所以返回空列表</p>\n<p><img src=\"http://photo.jomeswang.top/20200401150617.png\" alt=\"\"></p>\n<p>新建图书对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">b&#x3D;BookInfo()</span><br><span class=\"line\">b.btitle&#x3D;&quot;射雕英雄传&quot;</span><br><span class=\"line\">from datetime import date</span><br><span class=\"line\">b.bpub_date&#x3D;date(1991,1,31)</span><br><span class=\"line\">b.save()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401150640.png\" alt=\"\"></p>\n<p>再次查询所有图书信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BookInfo.objects.all()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401150656.png\" alt=\"\"></p>\n<p>查找图书信息并查看值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">b&#x3D;BookInfo.objects.get(id&#x3D;1)</span><br><span class=\"line\">b</span><br><span class=\"line\">b.id</span><br><span class=\"line\">b.btitle</span><br><span class=\"line\">b.bpub_date</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401150717.png\" alt=\"\"></p>\n<p>修改图书信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">b.bpub_date&#x3D;date(2017,1,1)</span><br><span class=\"line\">b.save()</span><br><span class=\"line\">b.bpub_date</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401150756.png\" alt=\"\"></p>\n<p>删除图书信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">b.delete()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401150813.png\" alt=\"\"></p>\n<h4 id=\"对象的关联操作\"><a href=\"#对象的关联操作\" class=\"headerlink\" title=\"对象的关联操作\"></a>对象的关联操作</h4><p>对于HeroInfo可以按照上面的方式进行增删改查操作。</p>\n<p>创建一个BookInfo对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">b&#x3D;BookInfo()</span><br><span class=\"line\">b.btitle&#x3D;&#39;abc&#39;</span><br><span class=\"line\">b.bpub_date&#x3D;date(2017,1,1)</span><br><span class=\"line\">b.save()</span><br></pre></td></tr></table></figure>\n\n<p>创建一个HeroInfo对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">h&#x3D;HeroInfo()</span><br><span class=\"line\">h.hname&#x3D;&#39;a1&#39;</span><br><span class=\"line\">h.hgender&#x3D;False</span><br><span class=\"line\">h.hcomment&#x3D;&#39;he is a boy&#39;</span><br><span class=\"line\">h.hbook&#x3D;b</span><br><span class=\"line\">h.save()</span><br></pre></td></tr></table></figure>\n\n<p>图书与英雄是一对多的关系，django中提供了关联的操作方式。</p>\n<p>获得关联集合：返回当前book对象的所有hero。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">b.heroinfo_set.all()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://photo.jomeswang.top/20200401150824.png\" alt=\"\"></p>\n","categories":["python"],"tags":["python","django"]},{"title":"Django 入门之创建项目","url":"/posts/f79083f/","content":"<p>我们以一个电商网站为例，网站上有跟用户有关的页面，有跟商品有关的页面，还有跟订单有关的页面，这样的一块内容其实就是网站的一个功能模块。</p>\n<p>在django中，项目的组织结构为一个项目包含多个应用，一个应用对应一个业务模块。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>创建项目的名称为test1，完成”图书-英雄”信息的维护，创建应用名称为booktest。</p>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><blockquote>\n<p>在当前用户的某个目录下创建项目，这样不会发生权限问题。</p>\n</blockquote>\n<p>在一个命令行中输入创建项目的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">django-admin startproject 项目名称</span><br><span class=\"line\">例：</span><br><span class=\"line\">django-admin startproject test1</span><br></pre></td></tr></table></figure>\n\n<p>接下来可以使用IDE打开此目录，开发项目了，此处使用pycharm打开test1目录。</p>\n<h4 id=\"项目默认目录说明\"><a href=\"#项目默认目录说明\" class=\"headerlink\" title=\"项目默认目录说明\"></a>项目默认目录说明</h4><p>进入test1目录，查看目录树形结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd test1</span><br><span class=\"line\">tree</span><br></pre></td></tr></table></figure>\n\n<p>目录结构如下图：</p>\n<p><a href=\"https://imgchr.com/i/3zvx0O\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/09/3zvx0O.png\" alt=\"3zvx0O.png\"></a></p>\n<ul>\n<li>manage.py是项目管理文件，通过它管理项目。</li>\n<li>与项目同名的目录，此处为test1。</li>\n<li><em>*init</em>*.py是一个空文件，作用是这个目录test1可以被当作包使用。</li>\n<li>settings.py是项目的整体配置文件。</li>\n<li>urls.py是项目的URL配置文件。</li>\n<li>wsgi.py是项目与WSGI兼容的Web服务器入口，详细内容会在布署中讲到。</li>\n</ul>\n<h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><p>使用一个应用开发一个业务模块，此处创建应用名称为booktest，完成图书－英雄的信息维护。</p>\n<p>创建应用的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py startapp booktest</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3zvXX6\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/09/3zvXX6.png\" alt=\"3zvXX6.png\"></a></p>\n<ul>\n<li><em>*init.py</em>*是一个空文件，表示当前目录booktest可以当作一个python包使用。</li>\n<li>tests.py文件用于开发测试用例，在实际开发中会有专门的测试人员，这个事情不需要我们来做。</li>\n<li>models.py文件跟数据库操作相关。</li>\n<li>views.py文件跟接收浏览器请求，进行处理，返回页面相关。</li>\n<li>admin.py文件跟网站的后台管理相关。</li>\n<li>migrations文件夹之后给大家介绍。</li>\n</ul>\n<h3 id=\"安装应用\"><a href=\"#安装应用\" class=\"headerlink\" title=\"安装应用\"></a>安装应用</h3><p>应用创建成功后，需要安装才可以使用，也就是建立应用和项目之间的关联，在test1/settings.py中INSTALLED_APPS下添加应用的名称就可以完成安装。</p>\n<p>接下来在元组中添加一个新的项，当前示例为booktest</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#39;booktest&#39;,</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3zvqpR\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/09/3zvqpR.png\" alt=\"3zvqpR.png\"></a></p>\n<h3 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h3><p>在开发阶段，为了能够快速预览到开发的效果，django提供了一个纯python编写的轻量级web服务器，仅在开发阶段使用。</p>\n<p>运行服务器命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python manage.py runserver ip:端口</span><br><span class=\"line\">例：</span><br><span class=\"line\">python manage.py runserver</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以不写IP和端口，默认IP是127.0.0.1，默认端口为8000</strong>。</p>\n<p>紧接着在浏览器中输入网址“127.0.0.1:8000”，或者按着ctrl键点击上图中标示出来的地址，可以查看当前站点开发效果。</p>\n<blockquote>\n<p>如果增加、修改、删除文件，服务器会自动重启;<br>按ctrl+c停止服务器。</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/3zx9tH\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/09/3zx9tH.png\" alt=\"3zx9tH.png\"></a></p>\n","categories":["python"],"tags":["python"]},{"title":"python django 入门","url":"/posts/4d06c6c3/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>使用Django框架进行web开发，方便管理后端与数据库。先介绍一下web框架的MVC和Django的 MVT 框架。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：基本介绍\"><a href=\"#二：基本介绍\" class=\"headerlink\" title=\"二：基本介绍\"></a>二：基本介绍</h2><h4 id=\"软件框架\"><a href=\"#软件框架\" class=\"headerlink\" title=\"软件框架\"></a>软件框架</h4><p>问题1:什么是软件框架？</p>\n<p>举个简单的例子，对于一个公司来说，公司中有各个职能部门，每个部门各司其职，通过部门之间的配合来完成工作，这些部门就形成了一个公司的组织架构。从某种意义上来说，公司就是一种框架。那么对应到软件设计上来说，软件框架是由其中的各个模块组成的，每个模块负责特定的功能，模块与模块之间相互协作来完成软件开发。</p>\n<p>一个公司，它是针对某一市场而成立的，而软件框架的设计，也是针对某一类软件问题而设计的，其目的主要是提高软件开发效率。</p>\n<h4 id=\"MVC简介\"><a href=\"#MVC简介\" class=\"headerlink\" title=\"MVC简介\"></a>MVC简介</h4><p>MVC的全拼为Model-View-Controller，最早由TrygveReenskaug在1978年提出，是施乐帕罗奥多研究中心(Xerox PARC)在20世纪80年代为程序语言Smalltalk发明的一种软件设计模式，是为了将传统的输入（input）、处理（processing）、输出（output）任务运用到图形化用户交互模型中而设计的。随着标准输入输出设备的出现，开发人员只需要将精力集中在业务逻辑的分析与实现上。后来被推荐为Oracle旗下Sun公司Java EE平台的设计模式，并且受到越来越多的使用ColdFusion和PHP的开发者的欢迎。现在虽然不再使用原来的分工方式，但是这种<strong>分工的思想</strong>被沿用下来，广泛应用于软件工程中，是一种典型并且应用广泛的软件架构模式。后来，MVC的思想被应用在了Ｗeb开发方面，被称为Ｗeb MVC框架。</p>\n<p>MVC框架的核心思想是：<strong>解耦</strong>，让不同的代码块之间降低耦合，增强代码的可扩展性和可移植性，实现向后兼容。</p>\n<p>当前主流的开发语言如Java、PHP、Python中都有MVC框架。</p>\n<h4 id=\"Web-MVC各部分的功能\"><a href=\"#Web-MVC各部分的功能\" class=\"headerlink\" title=\"Ｗeb MVC各部分的功能\"></a>Ｗeb MVC各部分的功能</h4><p>M全拼为Model，主要封装对数据库层的访问，对数据库中的数据进行增、删、改、查操作。</p>\n<p>V全拼为View，用于封装结果，生成页面展示的html内容。</p>\n<p>C全拼为Controller，用于接收请求，处理业务逻辑，与Model和View交互，返回结果。</p>\n<p><img src=\"http://photo.jomeswang.top/20200410110449.png\" alt=\"\"></p>\n<h4 id=\"Django简介\"><a href=\"#Django简介\" class=\"headerlink\" title=\"Django简介\"></a>Django简介</h4><p>Django，发音为[`dʒæŋɡəʊ]，是用python语言写的开源web开发框架，并遵循MVC设计。劳伦斯出版集团为了开发以新闻内容为主的网站，而开发出来了这个框架，于2005年7月在BSD许可证下发布。这个名称来源于比利时的爵士音乐家DjangoReinhardt，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SDTimes评选为2013SDTimes100，位列”API、库和框架”分类第6位，被认为是该领域的佼佼者。Django的主要目的是简便、快速的开发数据库驱动的网站。它强调代码复用，多个组件可以很方便的以”插件”形式服务于整个框架，Django有许多功能强大的第三方插件，你甚至可以很方便的开发出自己的工具包。这使得Django具有很强的可扩展性。它还强调快速开发和DRY(DoNotRepeatYourself)原则。</p>\n<blockquote>\n<p>点击查看<a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">django官方网站</a><br>点击查看<a href=\"https://github.com/django/django\" target=\"_blank\" rel=\"noopener\">django源码</a><br>点击查看<a href=\"http://python.usyiyi.cn/django/index.html\" target=\"_blank\" rel=\"noopener\">1.8.2官方中文文档</a></p>\n</blockquote>\n<p>Django框架遵循MVC设计，并且有一个专有名词：MVT</p>\n<h4 id=\"MVT各部分的功能\"><a href=\"#MVT各部分的功能\" class=\"headerlink\" title=\"MVT各部分的功能\"></a>MVT各部分的功能</h4><p>M全拼为Model，与MVC中的M功能相同，负责和数据库交互，进行数据处理。</p>\n<p>V全拼为View，与MVC中的C功能相同，接收请求，进行业务处理，返回应答。</p>\n<p>T全拼为Template，与MVC中的V功能相同，负责封装构造要返回的html。</p>\n<ul>\n<li>差异就在于黑线黑箭头标识出来的部分</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200410110522.png\" alt=\"\"></p>\n","categories":["python_django"],"tags":["python","django"]},{"title":"Anaconda 入坑记 解决pythonwarning","url":"/posts/fa71d059/","content":"<p>法一：</p>\n<a id=\"more\"></a>\n\n<p>1、确定当前环境</p>\n<p>　　使用终端或Anaconda提示符执行以下步骤。</p>\n<p>　　默认情况下，活动环境—您当前使用的环境—显示在命令提示符开头的括号（）或括号[]中：(myenv) $</p>\n<p>　　如果您没有看到这个，请运行：<code>conda info --envs</code></p>\n<p>　　在显示的环境列表中，当前环境以星号（*）突出显示。</p>\n<p>　　<img src=\"http://photo.jomeswang.top/20200410110708.png\" alt=\"\"></p>\n<p>　　2、激活环境</p>\n<p>　　<code>conda activate d:\\Tools\\Anaconda2</code></p>\n<p>　<img src=\"http://photo.jomeswang.top/20200410110802.png\" alt=\"\"></p>\n<p>法二：</p>\n<p>直接运行    <code>activate</code></p>\n","categories":["python"],"tags":["python"]},{"title":"python 之eval 函数","url":"/posts/2561c392/","content":"<p><code>eval()</code> 函数十分强大 —— <strong>将字符串</strong> 当成 <strong>有效的表达式</strong> 来求值 并 <strong>返回计算结果</strong></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基本的数学计算</span></span><br><span class=\"line\">In [<span class=\"number\">1</span>]: eval(<span class=\"string\">\"1 + 1\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">1</span>]: <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串重复</span></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: eval(<span class=\"string\">\"'*' * 10\"</span>)</span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"string\">'**********'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字符串转换成列表</span></span><br><span class=\"line\">In [<span class=\"number\">3</span>]: type(eval(<span class=\"string\">\"[1, 2, 3, 4, 5]\"</span>))</span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字符串转换成字典</span></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: type(eval(<span class=\"string\">\"&#123;'name': 'xiaoming', 'age': 18&#125;\"</span>))</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: dict</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例-计算器\"><a href=\"#案例-计算器\" class=\"headerlink\" title=\"案例 - 计算器\"></a>案例 - 计算器</h2><p><strong>需求</strong></p>\n<ol>\n<li>提示用户输入一个 <strong>加减乘除混合运算</strong></li>\n<li>返回计算结果</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">input_str = input(<span class=\"string\">\"请输入一个算术题：\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(eval(input_str))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不要滥用-eval\"><a href=\"#不要滥用-eval\" class=\"headerlink\" title=\"不要滥用 eval\"></a>不要滥用 <code>eval</code></h2><blockquote>\n<p>在开发时千万不要使用 <code>eval</code> 直接转换 <code>input</code> 的结果</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">__import__(<span class=\"string\">'os'</span>).system(<span class=\"string\">'ls'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等价代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os.system(<span class=\"string\">\"终端命令\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行成功，返回 0</li>\n<li>执行失败，返回错误信息</li>\n</ul>\n","categories":["python"],"tags":["python"]},{"title":"python 之 文件操作","url":"/posts/966149a/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>文件的概念</p>\n</li>\n<li><p>文件的基本操作</p>\n</li>\n<li><p>文件/文件夹的常用操作</p>\n</li>\n<li><p>文本文件的编码方式</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-文件的概念\"><a href=\"#01-文件的概念\" class=\"headerlink\" title=\"01. 文件的概念\"></a>01. 文件的概念</h2><h3 id=\"1-1-文件的概念和作用\"><a href=\"#1-1-文件的概念和作用\" class=\"headerlink\" title=\"1.1 文件的概念和作用\"></a>1.1 文件的概念和作用</h3><ul>\n<li>计算机的 <strong>文件</strong>，就是存储在某种 <strong>长期储存设备</strong> 上的一段 <strong>数据</strong></li>\n<li>长期存储设备包括：硬盘、U 盘、移动硬盘、光盘…</li>\n</ul>\n<p><strong>文件的作用</strong></p>\n<p>将数据长期保存下来，在需要的时候使用</p>\n<h3 id=\"1-2-文件的存储方式\"><a href=\"#1-2-文件的存储方式\" class=\"headerlink\" title=\"1.2 文件的存储方式\"></a>1.2 文件的存储方式</h3><ul>\n<li>在计算机中，文件是以 <strong>二进制</strong> 的方式保存在磁盘上的</li>\n</ul>\n<h4 id=\"文本文件和二进制文件\"><a href=\"#文本文件和二进制文件\" class=\"headerlink\" title=\"文本文件和二进制文件\"></a>文本文件和二进制文件</h4><ul>\n<li>文本文件<ul>\n<li>可以使用 <strong>文本编辑软件</strong> 查看</li>\n<li>本质上还是二进制文件</li>\n<li>例如：python 的源程序</li>\n</ul>\n</li>\n<li>二进制文件<ul>\n<li>保存的内容 不是给人直接阅读的，而是 <strong>提供给其他软件使用的</strong></li>\n<li>例如：图片文件、音频文件、视频文件等等</li>\n<li>二进制文件不能使用 <strong>文本编辑软件</strong> 查看</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"02-文件的基本操作\"><a href=\"#02-文件的基本操作\" class=\"headerlink\" title=\"02. 文件的基本操作\"></a>02. 文件的基本操作</h2><h3 id=\"2-1-操作文件的套路\"><a href=\"#2-1-操作文件的套路\" class=\"headerlink\" title=\"2.1 操作文件的套路\"></a>2.1 操作文件的套路</h3><p>在 <strong>计算机</strong> 中要操作文件的套路非常固定，一共包含<strong>三个步骤</strong>：</p>\n<ol>\n<li>打开文件</li>\n<li>读、写文件<ul>\n<li><strong>读</strong> 将文件内容读入内存</li>\n<li><strong>写</strong> 将内存内容写入文件</li>\n</ul>\n</li>\n<li>关闭文件</li>\n</ol>\n<h3 id=\"2-2-操作文件的函数-方法\"><a href=\"#2-2-操作文件的函数-方法\" class=\"headerlink\" title=\"2.2 操作文件的函数/方法\"></a>2.2 操作文件的函数/方法</h3><ul>\n<li>在 <code>Python</code> 中要操作文件需要记住 1 个函数和 3 个方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">函数/方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">open</td>\n<td align=\"left\">打开文件，并且返回文件操作对象</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">read</td>\n<td align=\"left\">将文件内容读取到内存</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">write</td>\n<td align=\"left\">将指定内容写入文件</td>\n</tr>\n<tr>\n<td align=\"left\">04</td>\n<td align=\"left\">close</td>\n<td align=\"left\">关闭文件</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>open</code> 函数负责打开文件，并且返回文件对象</li>\n<li><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</li>\n</ul>\n<h3 id=\"2-3-read-方法-——-读取文件\"><a href=\"#2-3-read-方法-——-读取文件\" class=\"headerlink\" title=\"2.3 read 方法 —— 读取文件\"></a>2.3 read 方法 —— 读取文件</h3><ul>\n<li><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写） <ul>\n<li>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong></li>\n<li>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></li>\n</ul>\n</li>\n<li><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></li>\n<li><code>close</code> 方法负责 <strong>关闭文件</strong> <ul>\n<li>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></li>\n</ul>\n</li>\n<li><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 打开 - 文件名需要注意大小写</span></span><br><span class=\"line\">file = open(<span class=\"string\">\"README\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 读取</span></span><br><span class=\"line\">text = file.read()</span><br><span class=\"line\">print(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 关闭</span></span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示</strong></p>\n<ul>\n<li>在开发中，通常会先编写 <strong>打开</strong> 和 <strong>关闭</strong> 的代码，再编写中间针对文件的 <strong>读/写</strong> 操作！</li>\n</ul>\n<h4 id=\"文件指针（知道）\"><a href=\"#文件指针（知道）\" class=\"headerlink\" title=\"文件指针（知道）\"></a>文件指针（知道）</h4><ul>\n<li><strong>文件指针</strong> 标记 <strong>从哪个位置开始读取数据</strong></li>\n<li><strong>第一次打开</strong> 文件时，通常 <strong>文件指针会指向文件的开始位置</strong></li>\n<li>当执行了 <code>read</code> 方法后，<strong>文件指针</strong> 会移动到 <strong>读取内容的末尾</strong> <ul>\n<li>默认情况下会移动到 <strong>文件末尾</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>思考</strong></p>\n<ul>\n<li>如果执行了一次 <code>read</code> 方法，读取了所有内容，那么再次调用 <code>read</code> 方法，还能够获得到内容吗？</li>\n</ul>\n<p><strong>答案</strong></p>\n<ul>\n<li>不能</li>\n<li>第一次读取之后，文件指针移动到了文件末尾，再次调用不会读取到任何的内容</li>\n</ul>\n<h3 id=\"2-4-打开文件的方式\"><a href=\"#2-4-打开文件的方式\" class=\"headerlink\" title=\"2.4 打开文件的方式\"></a>2.4 打开文件的方式</h3><ul>\n<li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li>\n</ul>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">\"文件名\"</span>, <span class=\"string\">\"访问方式\"</span>)</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">访问方式</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r</td>\n<td align=\"left\">以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td align=\"center\">w</td>\n<td align=\"left\">以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"left\">以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n<tr>\n<td align=\"center\">r+</td>\n<td align=\"left\">以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td>\n</tr>\n<tr>\n<td align=\"center\">w+</td>\n<td align=\"left\">以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td>\n</tr>\n<tr>\n<td align=\"center\">a+</td>\n<td align=\"left\">以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td>\n</tr>\n</tbody></table>\n<p><strong>提示</strong></p>\n<ul>\n<li>频繁的移动文件指针，<strong>会影响文件的读写效率</strong>，开发中更多的时候会以 <strong>只读</strong>、<strong>只写</strong> 的方式来操作文件</li>\n</ul>\n<p><strong>写入文件示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">f = open(<span class=\"string\">\"README\"</span>, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">f.write(<span class=\"string\">\"hello python！\\n\"</span>)</span><br><span class=\"line\">f.write(<span class=\"string\">\"今天天气真好\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭文件</span></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-按行读取文件内容\"><a href=\"#2-5-按行读取文件内容\" class=\"headerlink\" title=\"2.5 按行读取文件内容\"></a>2.5 按行读取文件内容</h3><ul>\n<li><code>read</code> 方法默认会把文件的 <strong>所有内容</strong> <strong>一次性读取到内存</strong></li>\n<li>如果文件太大，对内存的占用会非常严重</li>\n</ul>\n<h4 id=\"readline-方法\"><a href=\"#readline-方法\" class=\"headerlink\" title=\"readline 方法\"></a><code>readline</code> 方法</h4><ul>\n<li><code>readline</code> 方法可以一次读取一行内容</li>\n<li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li>\n</ul>\n<p><strong>读取大文件的正确姿势</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开文件</span></span><br><span class=\"line\">file = open(<span class=\"string\">\"README\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 读取一行内容</span></span><br><span class=\"line\">    text = file.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否读到内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> text:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 每读取一行的末尾已经有了一个 `\\n`</span></span><br><span class=\"line\">    print(text, end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭文件</span></span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-6-文件读写案例-——-复制文件\"><a href=\"#2-6-文件读写案例-——-复制文件\" class=\"headerlink\" title=\"2.6 文件读写案例 —— 复制文件\"></a>2.6 文件读写案例 —— 复制文件</h3><p><strong>目标</strong></p>\n<p>用代码的方式，来实现文件复制过程</p>\n<p><a href=\"https://imgchr.com/i/3qoWS1\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/06/3qoWS1.png\" alt=\"3qoWS1.png\"></a></p>\n<h4 id=\"小文件复制\"><a href=\"#小文件复制\" class=\"headerlink\" title=\"小文件复制\"></a>小文件复制</h4><ul>\n<li>打开一个已有文件，读取完整内容，并写入到另外一个文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 打开文件</span></span><br><span class=\"line\">file_read = open(<span class=\"string\">\"README\"</span>)</span><br><span class=\"line\">file_write = open(<span class=\"string\">\"README[复件]\"</span>, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 读取并写入文件</span></span><br><span class=\"line\">text = file_read.read()</span><br><span class=\"line\">file_write.write(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 关闭文件</span></span><br><span class=\"line\">file_read.close()</span><br><span class=\"line\">file_write.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"大文件复制\"><a href=\"#大文件复制\" class=\"headerlink\" title=\"大文件复制\"></a>大文件复制</h4><ul>\n<li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 打开文件</span></span><br><span class=\"line\">file_read = open(<span class=\"string\">\"README\"</span>)</span><br><span class=\"line\">file_write = open(<span class=\"string\">\"README[复件]\"</span>, <span class=\"string\">\"w\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 读取并写入文件</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 每次读取一行</span></span><br><span class=\"line\">    text = file_read.readline()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否读取到内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> text:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    file_write.write(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 关闭文件</span></span><br><span class=\"line\">file_read.close()</span><br><span class=\"line\">file_write.close()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-文件-目录的常用管理操作\"><a href=\"#03-文件-目录的常用管理操作\" class=\"headerlink\" title=\"03. 文件/目录的常用管理操作\"></a>03. 文件/目录的常用管理操作</h2><ul>\n<li>在 <strong>终端</strong> / <strong>文件浏览器</strong>、 中可以执行常规的 <strong>文件</strong> / <strong>目录</strong> 管理操作，例如： <ul>\n<li>创建、重命名、删除、改变路径、查看目录内容、……</li>\n</ul>\n</li>\n<li>在 <code>Python</code> 中，如果希望通过程序实现上述功能，需要导入 <code>os</code> 模块</li>\n</ul>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法名</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">rename</td>\n<td align=\"left\">重命名文件</td>\n<td align=\"left\"><code>os.rename(源文件名, 目标文件名)</code></td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">remove</td>\n<td align=\"left\">删除文件</td>\n<td align=\"left\"><code>os.remove(文件名)</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"目录操作\"><a href=\"#目录操作\" class=\"headerlink\" title=\"目录操作\"></a>目录操作</h3><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法名</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">listdir</td>\n<td align=\"left\">目录列表</td>\n<td align=\"left\"><code>os.listdir(目录名)</code></td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">mkdir</td>\n<td align=\"left\">创建目录</td>\n<td align=\"left\"><code>os.mkdir(目录名)</code></td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">rmdir</td>\n<td align=\"left\">删除目录</td>\n<td align=\"left\"><code>os.rmdir(目录名)</code></td>\n</tr>\n<tr>\n<td align=\"left\">04</td>\n<td align=\"left\">getcwd</td>\n<td align=\"left\">获取当前目录</td>\n<td align=\"left\"><code>os.getcwd()</code></td>\n</tr>\n<tr>\n<td align=\"left\">05</td>\n<td align=\"left\">chdir</td>\n<td align=\"left\">修改工作目录</td>\n<td align=\"left\"><code>os.chdir(目标目录)</code></td>\n</tr>\n<tr>\n<td align=\"left\">06</td>\n<td align=\"left\">path.isdir</td>\n<td align=\"left\">判断是否是文件</td>\n<td align=\"left\"><code>os.path.isdir(文件路径)</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p>\n</blockquote>\n<h2 id=\"04-文本文件的编码格式（科普）\"><a href=\"#04-文本文件的编码格式（科普）\" class=\"headerlink\" title=\"04. 文本文件的编码格式（科普）\"></a>04. 文本文件的编码格式（科普）</h2><ul>\n<li>文本文件存储的内容是基于 <strong>字符编码</strong> 的文件，常见的编码有 <code>ASCII</code> 编码，<code>UNICODE</code> 编码等</li>\n</ul>\n<blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<h3 id=\"4-1-ASCII-编码和-UNICODE-编码\"><a href=\"#4-1-ASCII-编码和-UNICODE-编码\" class=\"headerlink\" title=\"4.1 ASCII 编码和 UNICODE 编码\"></a>4.1 ASCII 编码和 UNICODE 编码</h3><h4 id=\"ASCII-编码\"><a href=\"#ASCII-编码\" class=\"headerlink\" title=\"ASCII 编码\"></a><code>ASCII</code> 编码</h4><ul>\n<li>计算机中只有 <code>256</code> 个 <code>ASCII</code> 字符</li>\n<li>一个 <code>ASCII</code> 在内存中占用 <strong>1 个字节</strong> 的空间 <ul>\n<li><code>8</code> 个 <code>0/1</code> 的排列组合方式一共有 <code>256</code> 种，也就是 <code>2 ** 8</code></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3q7A4H\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/06/3q7A4H.jpg\" alt=\"3q7A4H.jpg\"></a></p>\n<h4 id=\"UTF-8-编码格式\"><a href=\"#UTF-8-编码格式\" class=\"headerlink\" title=\"UTF-8 编码格式\"></a><code>UTF-8</code> 编码格式</h4><ul>\n<li>计算机中使用 <strong>1~6 个字节</strong> 来表示一个 <code>UTF-8</code> 字符，涵盖了 <strong>地球上几乎所有地区的文字</strong></li>\n<li>大多数汉字会使用 <strong>3 个字节</strong> 表示</li>\n<li><code>UTF-8</code> 是 <code>UNICODE</code> 编码的一种编码格式</li>\n</ul>\n<h3 id=\"4-2-Ptyhon-2-x-中如何使用中文\"><a href=\"#4-2-Ptyhon-2-x-中如何使用中文\" class=\"headerlink\" title=\"4.2 Ptyhon 2.x 中如何使用中文\"></a>4.2 Ptyhon 2.x 中如何使用中文</h3><blockquote>\n<p>Python 2.x 默认使用 <code>ASCII</code> 编码格式<br>Python 3.x 默认使用 <code>UTF-8</code> 编码格式</p>\n</blockquote>\n<ul>\n<li>在 Python 2.x 文件的 <strong>第一行</strong> 增加以下代码，解释器会以 <code>utf-8</code> 编码来处理 python 文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># *-* coding:utf8 *-*</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这方式是官方推荐使用的！</p>\n</blockquote>\n<ul>\n<li>也可以使用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf8</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"unicode-字符串\"><a href=\"#unicode-字符串\" class=\"headerlink\" title=\"unicode 字符串\"></a>unicode 字符串</h4><ul>\n<li>在 <code>Python 2.x</code> 中，即使指定了文件使用 <code>UTF-8</code> 的编码格式，但是在遍历字符串时，仍然会 <strong>以字节为单位遍历</strong> 字符串</li>\n<li>要能够 <strong>正确的遍历字符串</strong>，在定义字符串时，需要 <strong>在字符串的引号前</strong>，增加一个小写字母 <code>u</code>，告诉解释器这是一个 <code>unicode</code> 字符串（使用 <code>UTF-8</code> 编码格式的字符串）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># *-* coding:utf8 *-*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在字符串前，增加一个 `u` 表示这个字符串是一个 utf8 字符串</span></span><br><span class=\"line\">hello_str = <span class=\"string\">u\"你好世界\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(hello_str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> hello_str:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 模块和包","url":"/posts/d02db393/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>模块</p>\n</li>\n<li><p>包</p>\n</li>\n<li><p>发布模块</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-模块\"><a href=\"#01-模块\" class=\"headerlink\" title=\"01. 模块\"></a>01. 模块</h2><h3 id=\"1-1-模块的概念\"><a href=\"#1-1-模块的概念\" class=\"headerlink\" title=\"1.1 模块的概念\"></a>1.1 模块的概念</h3><blockquote>\n<p><strong>模块是 Python 程序架构的一个核心概念</strong></p>\n</blockquote>\n<ul>\n<li>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></li>\n<li><strong>模块名</strong> 同样也是一个 <strong>标识符</strong>，需要符合标识符的命名规则</li>\n<li>在模块中定义的 <strong>全局变量</strong> 、<strong>函数</strong>、<strong>类</strong> 都是提供给外界直接使用的 <strong>工具</strong></li>\n<li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要先 <strong>导入</strong> 这个模块</li>\n</ul>\n<h3 id=\"1-2-模块的两种导入方式\"><a href=\"#1-2-模块的两种导入方式\" class=\"headerlink\" title=\"1.2 模块的两种导入方式\"></a>1.2 模块的两种导入方式</h3><h4 id=\"1）import-导入\"><a href=\"#1）import-导入\" class=\"headerlink\" title=\"1）import 导入\"></a>1）import 导入</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 模块名<span class=\"number\">1</span>, 模块名<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：在导入模块时，每个导入应该独占一行</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 模块名<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> 模块名<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入之后<ul>\n<li>通过 <code>模块名.</code> 使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"使用-as-指定模块的别名\"><a href=\"#使用-as-指定模块的别名\" class=\"headerlink\" title=\"使用 as 指定模块的别名\"></a>使用 <code>as</code> 指定模块的别名</h5><blockquote>\n<p><strong>如果模块的名字太长</strong>，可以使用 <code>as</code> 指定模块的名称，以方便在代码中的使用</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 模块名<span class=\"number\">1</span> <span class=\"keyword\">as</span> 模块别名</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<strong>模块别名</strong> 应该符合 <strong>大驼峰命名法</strong></p>\n</blockquote>\n<h4 id=\"2）from…import-导入\"><a href=\"#2）from…import-导入\" class=\"headerlink\" title=\"2）from…import 导入\"></a>2）from…import 导入</h4><ul>\n<li>如果希望 <strong>从某一个模块</strong> 中，导入 <strong>部分</strong> 工具，就可以使用 <code>from ... import</code> 的方式</li>\n<li><code>import 模块名</code> 是 <strong>一次性</strong> 把模块中 <strong>所有工具全部导入</strong>，并且通过 <strong>模块名/别名</strong> 访问</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从 模块 导入 某一个工具</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> 模块名<span class=\"number\">1</span> <span class=\"keyword\">import</span> 工具名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导入之后<ul>\n<li><strong>不需要</strong> 通过 <code>模块名.</code></li>\n<li>可以直接使用 <strong>模块提供的工具</strong> —— <strong>全局变量</strong>、<strong>函数</strong>、<strong>类</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>注意</strong></p>\n<blockquote>\n<p>如果 <strong>两个模块</strong>，存在 <strong>同名的函数</strong>，那么 <strong>后导入模块的函数</strong>，会 <strong>覆盖掉先导入的函数</strong></p>\n</blockquote>\n<ul>\n<li>开发时 <code>import</code> 代码应该统一写在 <strong>代码的顶部</strong>，更容易及时发现冲突</li>\n<li>一旦发现冲突，可以使用 <code>as</code> 关键字 <strong>给其中一个工具起一个别名</strong></li>\n</ul>\n<h5 id=\"from…import-（知道）\"><a href=\"#from…import-（知道）\" class=\"headerlink\" title=\"from…import *（知道）\"></a>from…import *（知道）</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从 模块 导入 所有工具</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> 模块名<span class=\"number\">1</span> <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<blockquote>\n<p>这种方式不推荐使用，因为函数重名并没有任何的提示，出现问题不好排查</p>\n</blockquote>\n<h3 id=\"1-3-模块的搜索顺序-扩展\"><a href=\"#1-3-模块的搜索顺序-扩展\" class=\"headerlink\" title=\"1.3 模块的搜索顺序[扩展]\"></a>1.3 模块的搜索顺序[扩展]</h3><p><code>Python</code> 的解释器在 <strong>导入模块</strong> 时，会：</p>\n<ol>\n<li>搜索 <strong>当前目录</strong> 指定模块名的文件，<strong>如果有就直接导入</strong></li>\n<li>如果没有，再搜索 <strong>系统目录</strong></li>\n</ol>\n<blockquote>\n<p>在开发时，给文件起名，不要和 <strong>系统的模块文件</strong> <strong>重名</strong></p>\n</blockquote>\n<p><code>Python</code> 中每一个模块都有一个内置属性 <code>__file__</code> 可以 <strong>查看模块</strong> 的 <strong>完整路径</strong></p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成一个 0～10 的数字</span></span><br><span class=\"line\">rand = random.randint(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(rand)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果当前目录下，存在一个 <code>random.py</code> 的文件，程序就无法正常执行了！</p>\n</blockquote>\n<ul>\n<li>这个时候，<code>Python</code> 的解释器会 <strong>加载当前目录</strong> 下的 <code>random.py</code> 而不会加载 <strong>系统的</strong> <code>random</code> 模块</li>\n</ul>\n<h3 id=\"1-4-原则-——-每一个文件都应该是可以被导入的\"><a href=\"#1-4-原则-——-每一个文件都应该是可以被导入的\" class=\"headerlink\" title=\"1.4 原则 —— 每一个文件都应该是可以被导入的\"></a>1.4 原则 —— 每一个文件都应该是可以被导入的</h3><ul>\n<li>一个 <strong>独立的 <code>Python</code> 文件</strong> 就是一个 <strong>模块</strong></li>\n<li>在导入文件时，文件中 <strong>所有没有任何缩进的代码</strong> 都会被执行一遍！</li>\n</ul>\n<p><strong>实际开发场景</strong></p>\n<ul>\n<li>在实际开发中，每一个模块都是独立开发的，大多都有专人负责</li>\n<li><strong>开发人员</strong> 通常会在 <strong>模块下方</strong> <strong>增加一些测试代码</strong> <ul>\n<li>仅在模块内使用，而被导入到其他文件中不需要执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"name-属性\"><a href=\"#name-属性\" class=\"headerlink\" title=\"__name__ 属性\"></a><code>__name__</code> 属性</h4><blockquote>\n<ul>\n<li><code>__name__</code> 属性可以做到，测试模块的代码 <strong>只在测试情况下被运行</strong>，而在 <strong>被导入时不会被执行</strong>！</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>__name__</code> 是 <code>Python</code> 的一个内置属性，记录着一个 <strong>字符串</strong></li>\n<li>如果 <strong>是被其他文件导入的</strong>，<code>__name__</code> 就是 <strong>模块名</strong></li>\n<li>如果 <strong>是当前执行的程序</strong> <code>__name__</code> 是 <strong><code>__main__</code></strong></li>\n</ul>\n<p><strong>在很多 <code>Python</code> 文件中都会看到以下格式的代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"comment\"># 定义全局变量</span></span><br><span class=\"line\"><span class=\"comment\"># 定义类</span></span><br><span class=\"line\"><span class=\"comment\"># 定义函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在代码的最下方</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据 __name__ 判断是否执行下方代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"02-包（Package）\"><a href=\"#02-包（Package）\" class=\"headerlink\" title=\"02. 包（Package）\"></a>02. 包（Package）</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li><strong>包</strong> 是一个 <strong>包含多个模块</strong> 的 <strong>特殊目录</strong></li>\n<li>目录下有一个 <strong>特殊的文件</strong> <code>__init__.py</code></li>\n<li>包名的 <strong>命名方式</strong> 和变量名一致，<strong>小写字母</strong> + <code>_</code></li>\n</ul>\n<p><strong>好处</strong></p>\n<ul>\n<li>使用 <code>import 包名</code> 可以一次性导入 <strong>包</strong> 中 <strong>所有的模块</strong></li>\n</ul>\n<h3 id=\"案例演练\"><a href=\"#案例演练\" class=\"headerlink\" title=\"案例演练\"></a>案例演练</h3><ol>\n<li>新建一个 <code>hm_message</code> 的 <strong>包</strong></li>\n<li>在目录下，新建两个文件 <code>send_message</code> 和 <code>receive_message</code></li>\n<li>在 <code>send_message</code> 文件中定义一个 <code>send</code> 函数</li>\n<li>在 <code>receive_message</code> 文件中定义一个 <code>receive</code> 函数</li>\n<li>在外部直接导入 <code>hm_message</code> 的包</li>\n</ol>\n<h3 id=\"init-py\"><a href=\"#init-py\" class=\"headerlink\" title=\"__init__.py\"></a><code>__init__.py</code></h3><ul>\n<li>要在外界使用 <strong>包</strong> 中的模块，需要在 <code>__init__.py</code> 中指定 <strong>对外界提供的模块列表</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从 当前目录 导入 模块列表</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> send_message</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> receive_message</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-发布模块（知道）\"><a href=\"#03-发布模块（知道）\" class=\"headerlink\" title=\"03. 发布模块（知道）\"></a>03. 发布模块（知道）</h2><ul>\n<li>如果希望自己开发的模块，<strong>分享</strong> 给其他人，可以按照以下步骤操作</li>\n</ul>\n<h3 id=\"3-1-制作发布压缩包步骤\"><a href=\"#3-1-制作发布压缩包步骤\" class=\"headerlink\" title=\"3.1 制作发布压缩包步骤\"></a>3.1 制作发布压缩包步骤</h3><h4 id=\"1-创建-setup-py\"><a href=\"#1-创建-setup-py\" class=\"headerlink\" title=\"1) 创建 setup.py\"></a>1) 创建 setup.py</h4><ul>\n<li><code>setup.py</code> 的文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> distutils.core <span class=\"keyword\">import</span> setup</span><br><span class=\"line\"></span><br><span class=\"line\">setup(name=<span class=\"string\">\"hm_message\"</span>,  <span class=\"comment\"># 包名</span></span><br><span class=\"line\">      version=<span class=\"string\">\"1.0\"</span>,  <span class=\"comment\"># 版本</span></span><br><span class=\"line\">      description=<span class=\"string\">\"itheima's 发送和接收消息模块\"</span>,  <span class=\"comment\"># 描述信息</span></span><br><span class=\"line\">      long_description=<span class=\"string\">\"完整的发送和接收消息模块\"</span>,  <span class=\"comment\"># 完整描述信息</span></span><br><span class=\"line\">      author=<span class=\"string\">\"itheima\"</span>,  <span class=\"comment\"># 作者</span></span><br><span class=\"line\">      author_email=<span class=\"string\">\"itheima@itheima.com\"</span>,  <span class=\"comment\"># 作者邮箱</span></span><br><span class=\"line\">      url=<span class=\"string\">\"www.itheima.com\"</span>,  <span class=\"comment\"># 主页</span></span><br><span class=\"line\">      py_modules=[<span class=\"string\">\"hm_message.send_message\"</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"hm_message.receive_message\"</span>])</span><br></pre></td></tr></table></figure>\n\n<p>有关字典参数的详细信息，可以参阅官方网站：</p>\n<p><a href=\"https://docs.python.org/2/distutils/apiref.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/distutils/apiref.html</a></p>\n<h4 id=\"2-构建模块\"><a href=\"#2-构建模块\" class=\"headerlink\" title=\"2) 构建模块\"></a>2) 构建模块</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python3 setup.py build</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-生成发布压缩包\"><a href=\"#3-生成发布压缩包\" class=\"headerlink\" title=\"3) 生成发布压缩包\"></a>3) 生成发布压缩包</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ python3 setup.py sdist</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！</p>\n</blockquote>\n<h3 id=\"3-2-安装模块\"><a href=\"#3-2-安装模块\" class=\"headerlink\" title=\"3.2 安装模块\"></a>3.2 安装模块</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ tar -zxvf hm_message-1.0.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure>\n\n<p><strong>卸载模块</strong></p>\n<p>直接从安装目录下，把安装模块的 <strong>目录</strong> 删除就可以</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd /usr/local/lib/python3<span class=\"number\">.5</span>/dist-packages/</span><br><span class=\"line\">$ sudo rm -r hm_message*</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-pip-安装第三方模块\"><a href=\"#3-3-pip-安装第三方模块\" class=\"headerlink\" title=\"3.3 pip 安装第三方模块\"></a>3.3 <code>pip</code> 安装第三方模块</h3><ul>\n<li><strong>第三方模块</strong> 通常是指由 <strong>知名的第三方团队</strong> <strong>开发的</strong> 并且被 <strong>程序员广泛使用</strong> 的 <code>Python</code> 包 / 模块 <ul>\n<li>例如 <code>pygame</code> 就是一套非常成熟的 <strong>游戏开发模块</strong></li>\n</ul>\n</li>\n<li><code>pip</code> 是一个现代的，通用的 <code>Python</code> 包管理工具</li>\n<li>提供了对 <code>Python</code> 包的查找、下载、安装、卸载等功能</li>\n</ul>\n<p>安装和卸载命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将模块安装到 Python 2.x 环境</span></span><br><span class=\"line\">$ sudo pip install pygame</span><br><span class=\"line\">$ sudo pip uninstall pygame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将模块安装到 Python 3.x 环境</span></span><br><span class=\"line\">$ sudo pip3 install pygame</span><br><span class=\"line\">$ sudo pip3 uninstall pygame</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-Mac-下安装-iPython\"><a href=\"#在-Mac-下安装-iPython\" class=\"headerlink\" title=\"在 Mac 下安装 iPython\"></a>在 <code>Mac</code> 下安装 <code>iPython</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pip install ipython</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-Linux-下安装-iPython\"><a href=\"#在-Linux-下安装-iPython\" class=\"headerlink\" title=\"在 Linux 下安装 iPython\"></a>在 <code>Linux</code> 下安装 <code>iPython</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt install ipython</span><br><span class=\"line\">$ sudo apt install ipython3</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 异常处理","url":"/posts/2baf6fe/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>异常的概念</p>\n</li>\n<li><p>捕获异常</p>\n</li>\n<li><p>异常的传递</p>\n</li>\n<li><p>抛出异常</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-异常的概念\"><a href=\"#01-异常的概念\" class=\"headerlink\" title=\"01. 异常的概念\"></a>01. 异常的概念</h2><ul>\n<li>程序</li>\n<li>在运行时，如果 <code>Python 解释器</code> <strong>遇到</strong> 到一个错误，<strong>会停止程序的执行，并且提示一些错误信息</strong>，这就是 <strong>异常</strong></li>\n<li><strong>程序停止执行并且提示错误信息</strong> 这个动作，我们通常称之为：<strong>抛出(raise)异常</strong></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3bcVJS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/06/3bcVJS.png\" alt=\"3bcVJS.png\"></a></p>\n<blockquote>\n<p>程序开发时，很难将 <strong>所有的特殊情况</strong> 都处理的面面俱到，通过 <strong>异常捕获</strong> 可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性</strong></p>\n</blockquote>\n<h2 id=\"02-捕获异常\"><a href=\"#02-捕获异常\" class=\"headerlink\" title=\"02. 捕获异常\"></a>02. 捕获异常</h2><h3 id=\"2-1-简单的捕获异常语法\"><a href=\"#2-1-简单的捕获异常语法\" class=\"headerlink\" title=\"2.1 简单的捕获异常语法\"></a>2.1 简单的捕获异常语法</h3><ul>\n<li>在程序开发中，如果 <strong>对某些代码的执行不能确定是否正确</strong>，可以增加 <code>try(尝试)</code> 来 <strong>捕获异常</strong></li>\n<li>捕获异常最简单的语法格式：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    尝试执行的代码</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    出现错误的处理</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>try</code> <strong>尝试</strong>，下方编写要尝试代码，不确定是否能够正常执行的代码</li>\n<li><code>except</code> <strong>如果不是</strong>，下方编写尝试失败的代码</li>\n</ul>\n<h4 id=\"简单异常捕获演练-——-要求用户输入整数\"><a href=\"#简单异常捕获演练-——-要求用户输入整数\" class=\"headerlink\" title=\"简单异常捕获演练 —— 要求用户输入整数\"></a>简单异常捕获演练 —— 要求用户输入整数</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 提示用户输入一个数字</span></span><br><span class=\"line\">    num = int(input(<span class=\"string\">\"请输入数字：\"</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"请输入正确的数字\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-错误类型捕获\"><a href=\"#2-2-错误类型捕获\" class=\"headerlink\" title=\"2.2 错误类型捕获\"></a>2.2 错误类型捕获</h3><ul>\n<li>在程序执行时，可能会遇到 <strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了</li>\n<li>语法如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 尝试执行的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> 错误类型<span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 针对错误类型1，对应的代码处理</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> (错误类型<span class=\"number\">2</span>, 错误类型<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 针对错误类型2 和 3，对应的代码处理</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> result:</span><br><span class=\"line\">    print(<span class=\"string\">\"未知错误 %s\"</span> % result)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当 <code>Python</code> 解释器 <strong>抛出异常</strong> 时，<strong>最后一行错误信息的第一个单词，就是错误类型</strong></li>\n</ul>\n<h4 id=\"异常类型捕获演练-——-要求用户输入整数\"><a href=\"#异常类型捕获演练-——-要求用户输入整数\" class=\"headerlink\" title=\"异常类型捕获演练 —— 要求用户输入整数\"></a>异常类型捕获演练 —— 要求用户输入整数</h4><p><strong>需求</strong></p>\n<ol>\n<li>提示用户输入一个整数</li>\n<li>使用 <code>8</code> 除以用户输入的整数并且输出</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    num = int(input(<span class=\"string\">\"请输入整数：\"</span>))</span><br><span class=\"line\">    result = <span class=\"number\">8</span> / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    print(<span class=\"string\">\"请输入正确的整数\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(<span class=\"string\">\"除 0 错误\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"捕获未知错误\"><a href=\"#捕获未知错误\" class=\"headerlink\" title=\"捕获未知错误\"></a>捕获未知错误</h4><ul>\n<li>在开发时，<strong>要预判到所有可能出现的错误</strong>，还是有一定难度的</li>\n<li>如果希望程序 <strong>无论出现任何错误</strong>，都不会因为 <code>Python</code> 解释器 <strong>抛出异常而被终止</strong>，可以再增加一个 <code>except</code></li>\n</ul>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> result:</span><br><span class=\"line\">    print(<span class=\"string\">\"未知错误 %s\"</span> % result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-异常捕获完整语法\"><a href=\"#2-3-异常捕获完整语法\" class=\"headerlink\" title=\"2.3 异常捕获完整语法\"></a>2.3 异常捕获完整语法</h3><ul>\n<li>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</li>\n</ul>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>有关完整语法的应用场景，在后续学习中，<strong>结合实际的案例</strong>会更好理解</li>\n<li>现在先对这个语法结构有个印象即可</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 尝试执行的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> 错误类型<span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 针对错误类型1，对应的代码处理</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> 错误类型<span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 针对错误类型2，对应的代码处理</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> (错误类型<span class=\"number\">3</span>, 错误类型<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 针对错误类型3 和 4，对应的代码处理</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> result:</span><br><span class=\"line\">    <span class=\"comment\"># 打印错误信息</span></span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 没有异常才会执行的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 无论是否有异常，都会执行的代码</span></span><br><span class=\"line\">    print(<span class=\"string\">\"无论是否有异常，都会执行的代码\"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>else</code> 只有在没有异常时才会执行的代码</li>\n<li><code>finally</code> 无论是否有异常，都会执行的代码</li>\n<li>之前一个演练的 <strong>完整捕获异常</strong> 的代码如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    num = int(input(<span class=\"string\">\"请输入整数：\"</span>))</span><br><span class=\"line\">    result = <span class=\"number\">8</span> / num</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    print(<span class=\"string\">\"请输入正确的整数\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(<span class=\"string\">\"除 0 错误\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> result:</span><br><span class=\"line\">    print(<span class=\"string\">\"未知错误 %s\"</span> % result)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"正常执行\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"执行完成，但是不保证正确\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-异常的传递\"><a href=\"#03-异常的传递\" class=\"headerlink\" title=\"03. 异常的传递\"></a>03. 异常的传递</h2><ul>\n<li><strong>异常的传递</strong> —— 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给 函数/方法 的 <strong>调用一方</strong></li>\n<li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>，程序才会被终止</li>\n</ul>\n<blockquote>\n<p>提示</p>\n</blockquote>\n<ul>\n<li>在开发中，可以在主函数中增加 <strong>异常捕获</strong></li>\n<li>而在主函数中调用的其他函数，只要出现异常，都会传递到主函数的 <strong>异常捕获</strong> 中</li>\n<li>这样就不需要在代码中，增加大量的 <strong>异常捕获</strong>，能够保证代码的整洁</li>\n</ul>\n<p><strong>需求</strong></p>\n<ol>\n<li>定义函数 <code>demo1()</code> <strong>提示用户输入一个整数并且返回</strong></li>\n<li>定义函数 <code>demo2()</code> 调用 <code>demo1()</code></li>\n<li>在主程序中调用 <code>demo2()</code></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> int(input(<span class=\"string\">\"请输入一个整数：\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> demo1()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    print(demo2())</span><br><span class=\"line\"><span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">    print(<span class=\"string\">\"请输入正确的整数\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> result:</span><br><span class=\"line\">    print(<span class=\"string\">\"未知错误 %s\"</span> % result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"04-抛出-raise-异常\"><a href=\"#04-抛出-raise-异常\" class=\"headerlink\" title=\"04. 抛出 raise 异常\"></a>04. 抛出 <code>raise</code> 异常</h2><h3 id=\"4-1-应用场景\"><a href=\"#4-1-应用场景\" class=\"headerlink\" title=\"4.1 应用场景\"></a>4.1 应用场景</h3><ul>\n<li>在开发中，除了 <strong>代码执行出错</strong> <code>Python</code> 解释器会 <strong>抛出</strong> 异常之外</li>\n<li>还可以根据 <strong>应用程序</strong> <strong>特有的业务需求</strong> <strong>主动抛出异常</strong></li>\n</ul>\n<p><strong>示例</strong></p>\n<ul>\n<li>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于 8</strong>，抛出 <strong>异常</strong></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3bckIf\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/06/3bckIf.md.png\" alt=\"3bckIf.md.png\"></a></p>\n<p><strong>注意</strong></p>\n<ul>\n<li>当前函数 <strong>只负责</strong> 提示用户输入密码，如果 <strong>密码长度不正确，需要其他的函数进行额外处理</strong></li>\n<li>因此可以 <strong>抛出异常</strong>，由其他需要处理的函数 <strong>捕获异常</strong></li>\n</ul>\n<h3 id=\"4-2-抛出异常\"><a href=\"#4-2-抛出异常\" class=\"headerlink\" title=\"4.2 抛出异常\"></a>4.2 抛出异常</h3><ul>\n<li><code>Python</code> 中提供了一个 <code>Exception</code> <strong>异常类</strong></li>\n<li>在开发时，如果满足 <strong>特定业务需求时</strong>，希望 <strong>抛出异常</strong>，可以： <ol>\n<li><strong>创建</strong> 一个 <code>Exception</code> 的 <strong>对象</strong></li>\n<li>使用 <code>raise</code> <strong>关键字</strong> 抛出 <strong>异常对象</strong></li>\n</ol>\n</li>\n</ul>\n<p><strong>需求</strong></p>\n<ul>\n<li>定义 <code>input_password</code> 函数，提示用户输入密码</li>\n<li>如果用户输入长度 &lt; 8，抛出异常</li>\n<li>如果用户输入长度 &gt;=8，返回输入的密码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">input_password</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1. 提示用户输入密码</span></span><br><span class=\"line\">    pwd = input(<span class=\"string\">\"请输入密码：\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(pwd) &gt;= <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pwd</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3. 密码长度不够，需要抛出异常</span></span><br><span class=\"line\">    <span class=\"comment\"># 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span></span><br><span class=\"line\">    ex = Exception(<span class=\"string\">\"密码长度不够\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2&gt; 抛出异常对象</span></span><br><span class=\"line\">    <span class=\"keyword\">raise</span> ex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    user_pwd = input_password()</span><br><span class=\"line\">    print(user_pwd)</span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> result:</span><br><span class=\"line\">    print(<span class=\"string\">\"发现错误：%s\"</span> % result)</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 单例","url":"/posts/c21aa6c8/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>单例设计模式</p>\n</li>\n<li><p><code>__new__</code> 方法</p>\n</li>\n<li><p>Python 中的单例</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-单例设计模式\"><a href=\"#01-单例设计模式\" class=\"headerlink\" title=\"01. 单例设计模式\"></a>01. 单例设计模式</h2><ul>\n<li>设计模式<ul>\n<li><strong>设计模式</strong> 是 <strong>前人工作的总结和提炼</strong>，通常，被人们广泛流传的设计模式都是针对 <strong>某一特定问题</strong> 的成熟的解决方案</li>\n<li>使用 <strong>设计模式</strong> 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性</li>\n</ul>\n</li>\n<li>单例设计模式<ul>\n<li><strong>目的</strong> —— 让 <strong>类</strong> 创建的对象，在系统中 <strong>只有</strong> <strong>唯一的一个实例</strong></li>\n<li>每一次执行 <code>类名()</code> 返回的对象，<strong>内存地址是相同的</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"单例设计模式的应用场景\"><a href=\"#单例设计模式的应用场景\" class=\"headerlink\" title=\"单例设计模式的应用场景\"></a>单例设计模式的应用场景</h3><ul>\n<li><strong>音乐播放</strong> 对象</li>\n<li><strong>回收站</strong> 对象</li>\n<li><strong>打印机</strong> 对象</li>\n<li>……</li>\n</ul>\n<h2 id=\"02-new-方法\"><a href=\"#02-new-方法\" class=\"headerlink\" title=\"02. __new__ 方法\"></a>02. <code>__new__</code> 方法</h2><ul>\n<li>使用 <strong>类名()</strong> 创建对象时，<code>Python</code> 的解释器 <strong>首先</strong> 会 调用 <code>__new__</code> 方法为对象 <strong>分配空间</strong></li>\n<li><code>__new__</code> 是一个 由 <code>object</code> 基类提供的 <strong>内置的静态方法</strong>，主要作用有两个： <ul>\n<li>1) 在内存中为对象 <strong>分配空间</strong></li>\n<li>2) <strong>返回</strong> 对象的引用</li>\n</ul>\n</li>\n<li><code>Python</code> 的解释器获得对象的 <strong>引用</strong> 后，将引用作为 <strong>第一个参数</strong>，传递给 <code>__init__</code> 方法</li>\n</ul>\n<blockquote>\n<p>重写 <code>__new__</code> 方法 的代码非常固定！</p>\n</blockquote>\n<ul>\n<li>重写 <code>__new__</code> 方法 <strong>一定要</strong> <code>return super().__new__(cls)</code></li>\n<li>否则 Python 的解释器 <strong>得不到</strong> 分配了空间的 <strong>对象引用</strong>，<strong>就不会调用对象的初始化方法</strong></li>\n<li>注意：<code>__new__</code> 是一个静态方法，在调用时需要 <strong>主动传递</strong> <code>cls</code> 参数</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3bD6AS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/06/3bD6AS.png\" alt=\"3bD6AS.png\"></a></p>\n<p><strong>示例代码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicPlayer</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果不返回任何结果，</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super().__new__(cls)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化音乐播放对象\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">player = MusicPlayer()</span><br><span class=\"line\"></span><br><span class=\"line\">print(player)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-Python-中的单例\"><a href=\"#03-Python-中的单例\" class=\"headerlink\" title=\"03. Python 中的单例\"></a>03. Python 中的单例</h2><ul>\n<li><strong>单例</strong> —— 让 <strong>类</strong> 创建的对象，在系统中 <strong>只有</strong> <strong>唯一的一个实例</strong> <ol>\n<li>定义一个 <strong>类属性</strong>，初始值是 <code>None</code>，用于记录 <strong>单例对象的引用</strong></li>\n<li>重写 <code>__new__</code> 方法</li>\n<li>如果 <strong>类属性</strong> <code>is None</code>，调用父类方法分配空间，并在类属性中记录结果</li>\n<li>返回 <strong>类属性</strong> 中记录的 <strong>对象引用</strong></li>\n</ol>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3bys76\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/06/3bys76.png\" alt=\"3bys76.png\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicPlayer</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义类属性记录单例对象引用</span></span><br><span class=\"line\">    instance = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1. 判断类属性是否已经被赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls.instance <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            cls.instance = super().__new__(cls)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 2. 返回类属性的单例引用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls.instance</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只执行一次初始化工作\"><a href=\"#只执行一次初始化工作\" class=\"headerlink\" title=\"只执行一次初始化工作\"></a>只执行一次初始化工作</h3><ul>\n<li>在每次使用 <code>类名()</code> 创建对象时，<code>Python</code> 的解释器都会自动调用两个方法： <ul>\n<li><code>__new__</code> 分配空间</li>\n<li><code>__init__</code> 对象初始化</li>\n</ul>\n</li>\n<li>在上一小节对 <code>__new__</code> 方法改造之后，每次都会得到 <strong>第一次被创建对象的引用</strong></li>\n<li>但是：<strong>初始化方法还会被再次调用</strong></li>\n</ul>\n<p><strong>需求</strong></p>\n<ul>\n<li>让 <strong>初始化动作</strong> 只被 <strong>执行一次</strong></li>\n</ul>\n<p><strong>解决办法</strong></p>\n<ol>\n<li>定义一个类属性 <code>init_flag</code> 标记是否 <strong>执行过初始化动作</strong>，初始值为 <code>False</code></li>\n<li>在 <code>__init__</code> 方法中，判断 <code>init_flag</code>，如果为 <code>False</code> 就执行初始化动作</li>\n<li>然后将 <code>init_flag</code> 设置为 <code>True</code></li>\n<li>这样，再次 <strong>自动</strong> 调用 <code>__init__</code> 方法时，<strong>初始化动作就不会被再次执行</strong> 了</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicPlayer</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 记录第一个被创建对象的引用</span></span><br><span class=\"line\">    instance = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录是否执行过初始化动作</span></span><br><span class=\"line\">    init_flag = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1. 判断类属性是否是空对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls.instance <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 2. 调用父类的方法，为第一个对象分配空间</span></span><br><span class=\"line\">            cls.instance = super().__new__(cls)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 3. 返回类属性保存的对象引用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls.instance</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> MusicPlayer.init_flag:</span><br><span class=\"line\">            print(<span class=\"string\">\"初始化音乐播放器\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            MusicPlayer.init_flag = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建多个对象</span></span><br><span class=\"line\">player1 = MusicPlayer()</span><br><span class=\"line\">print(player1)</span><br><span class=\"line\"></span><br><span class=\"line\">player2 = MusicPlayer()</span><br><span class=\"line\">print(player2)</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 类属性和类方法","url":"/posts/c632d013/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>类的结构</p>\n</li>\n<li><p>类属性和实例属性</p>\n</li>\n<li><p>类方法和静态方法</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-类的结构\"><a href=\"#01-类的结构\" class=\"headerlink\" title=\"01. 类的结构\"></a>01. 类的结构</h2><h3 id=\"1-1-术语-——-实例\"><a href=\"#1-1-术语-——-实例\" class=\"headerlink\" title=\"1.1 术语 —— 实例\"></a>1.1 术语 —— 实例</h3><ol>\n<li>使用面相对象开发，<strong>第 1 步</strong> 是设计 <strong>类</strong></li>\n<li>使用类名()创建对象，创建对象的动作有两步：<ul>\n<li>1) 在内存中为对象 <strong>分配空间</strong></li>\n<li>2) 调用初始化方法 <code>__init__</code> 为 <strong>对象初始化</strong></li>\n</ul>\n</li>\n<li>对象创建后，<strong>内存</strong> 中就有了一个对象的 <strong>实实在在</strong> 的存在 —— <strong>实例</strong></li>\n</ol>\n<p><a href=\"https://imgchr.com/i/3oMd7F\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/3oMd7F.md.png\" alt=\"3oMd7F.md.png\"></a></p>\n<p>因此，通常也会把：</p>\n<ol>\n<li>创建出来的 <strong>对象</strong> 叫做 <strong>类</strong> 的 <strong>实例</strong></li>\n<li>创建对象的 <strong>动作</strong> 叫做 <strong>实例化</strong></li>\n<li><strong>对象的属性</strong> 叫做 <strong>实例属性</strong></li>\n<li><strong>对象调用的方法</strong> 叫做 <strong>实例方法</strong></li>\n</ol>\n<p>在程序执行时：</p>\n<ol>\n<li>对象各自拥有自己的 <strong>实例属性</strong></li>\n<li>调用对象方法，可以通过<code>self.</code><ul>\n<li>访问自己的属性</li>\n<li>调用自己的方法</li>\n</ul>\n</li>\n</ol>\n<p><strong>结论</strong></p>\n<ul>\n<li><strong>每一个对象</strong> 都有自己 <strong>独立的内存空间</strong>，<strong>保存各自不同的属性</strong></li>\n<li><strong>多个对象的方法</strong>，<strong>在内存中只有一份</strong>，在调用方法时，<strong>需要把对象的引用</strong> 传递到方法内部</li>\n</ul>\n<h3 id=\"1-2-类是一个特殊的对象\"><a href=\"#1-2-类是一个特殊的对象\" class=\"headerlink\" title=\"1.2 类是一个特殊的对象\"></a>1.2 类是一个特殊的对象</h3><blockquote>\n<p><code>Python</code> 中 <strong>一切皆对象</strong>：</p>\n<ul>\n<li><code>class AAA:</code> 定义的类属于 <strong>类对象</strong></li>\n<li><code>obj1 = AAA()</code> 属于 <strong>实例对象</strong></li>\n</ul>\n</blockquote>\n<ul>\n<li>在程序运行时，<strong>类</strong> 同样 <strong>会被加载到内存</strong></li>\n<li>在 <code>Python</code> 中，<strong>类</strong> 是一个特殊的对象 —— <strong>类对象</strong></li>\n<li>在程序运行时，<strong>类对象</strong> 在内存中 <strong>只有一份</strong>，使用 <strong>一个类</strong> 可以创建出 <strong>很多个对象实例</strong></li>\n<li>除了封装实例的属性和方法外，类对象还可以拥有自己的属性和方法<ol>\n<li><strong>类属性</strong></li>\n<li><strong>类方法</strong></li>\n</ol>\n</li>\n<li>通过 <strong>类名.</strong> 的方式可以 <strong>访问类的属性</strong> 或者 <strong>调用类的方法</strong></li>\n</ul>\n<h2 id=\"02-类属性和实例属性\"><a href=\"#02-类属性和实例属性\" class=\"headerlink\" title=\"02. 类属性和实例属性\"></a>02. 类属性和实例属性</h2><h3 id=\"2-1-概念和使用\"><a href=\"#2-1-概念和使用\" class=\"headerlink\" title=\"2.1 概念和使用\"></a>2.1 概念和使用</h3><ul>\n<li><strong>类属性</strong> 就是给 <strong>类对象</strong> 中定义的 <strong>属性</strong></li>\n<li>通常用来记录 <strong>与这个类相关</strong> 的特征</li>\n<li><strong>类属性</strong> <strong>不会用于</strong>记录 <strong>具体对象的特征</strong></li>\n</ul>\n<p><strong>示例需求</strong></p>\n<ul>\n<li>定义一个 <strong>工具类</strong></li>\n<li>每件工具都有自己的 <code>name</code></li>\n<li><strong>需求</strong> —— 知道使用这个类，创建了多少个工具对象？</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/03/04/NLtSdiJpCzVPreB.png\" alt=\"018_类属性案例I.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tool</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 针对类属性做一个计数+1</span></span><br><span class=\"line\">        Tool.count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建工具对象</span></span><br><span class=\"line\">tool1 = Tool(<span class=\"string\">\"斧头\"</span>)</span><br><span class=\"line\">tool2 = Tool(<span class=\"string\">\"榔头\"</span>)</span><br><span class=\"line\">tool3 = Tool(<span class=\"string\">\"铁锹\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 知道使用 Tool 类到底创建了多少个对象?</span></span><br><span class=\"line\">print(<span class=\"string\">\"现在创建了 %d 个工具\"</span> % Tool.count)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-属性的获取机制（科普）\"><a href=\"#2-2-属性的获取机制（科普）\" class=\"headerlink\" title=\"2.2 属性的获取机制（科普）\"></a>2.2 属性的获取机制（科普）</h3><ul>\n<li>在 <code>Python</code> 中 <strong>属性的获取</strong> 存在一个 <strong>向上查找机制</strong></li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/03/04/QHYEP9nuy28tvCG.png\" alt=\"019_通过对象访问类属性.png\"></p>\n<ul>\n<li>因此，要访问类属性有两种方式：<ol>\n<li><strong>类名.类属性</strong></li>\n<li><strong>对象.类属性</strong> （不推荐）</li>\n</ol>\n</li>\n</ul>\n<p><strong>注意</strong></p>\n<ul>\n<li>如果使用 <code>对象.类属性 = 值</code> 赋值语句，只会 <strong>给对象添加一个属性</strong>，而不会影响到 <strong>类属性的值</strong></li>\n</ul>\n<h2 id=\"03-类方法和静态方法\"><a href=\"#03-类方法和静态方法\" class=\"headerlink\" title=\"03. 类方法和静态方法\"></a>03. 类方法和静态方法</h2><h3 id=\"3-1-类方法\"><a href=\"#3-1-类方法\" class=\"headerlink\" title=\"3.1 类方法\"></a>3.1 类方法</h3><ul>\n<li>类属性就是针对类对象定义的属性<ul>\n<li>使用 <strong>赋值语句</strong> 在 <code>class</code> 关键字下方可以定义 <strong>类属性</strong></li>\n<li><strong>类属性</strong> 用于记录 <strong>与这个类相关</strong> 的特征</li>\n</ul>\n</li>\n<li>类方法就是针对类对象定义的方法<ul>\n<li>在 <strong>类方法</strong> 内部可以直接访问 <strong>类属性</strong> 或者调用其他的 <strong>类方法</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>语法如下</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 类方法名<span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类方法需要用 <strong>修饰器</strong> <code>@classmethod</code> 来标识，<strong>告诉解释器这是一个类方法</strong></li>\n<li>类方法的第一个参数应该是  <code>cls</code><ul>\n<li>由 <strong>哪一个类</strong> 调用的方法，方法内的 <code>cls</code> 就是 <strong>哪一个类的引用</strong></li>\n<li>这个参数和 <strong>实例方法</strong> 的第一个参数是 <code>self</code> 类似</li>\n<li><strong>提示</strong> 使用其他名称也可以，不过习惯使用 <code>cls</code></li>\n</ul>\n</li>\n<li>通过 <strong>类名.</strong> 调用 <strong>类方法</strong>，<strong>调用方法时</strong>，不需要传递 <code>cls</code> 参数</li>\n<li>在方法内部<ul>\n<li>可以通过 <code>cls.</code> <strong>访问类的属性</strong></li>\n<li>也可以通过 <code>cls.</code> <strong>调用其他的类方法</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>示例需求</strong></p>\n<ul>\n<li>定义一个 <strong>工具类</strong></li>\n<li>每件工具都有自己的 <code>name</code></li>\n<li><strong>需求</strong> —— 在 <strong>类</strong> 封装一个 <code>show_tool_count</code> 的类方法，输出使用当前这个类，创建的对象个数</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/03/04/12WyEO9mMfetzKT.png\" alt=\"020_类方法案例.png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_tool_count</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"显示工具对象的总数\"\"\"</span></span><br><span class=\"line\">    print(<span class=\"string\">\"工具对象的总数 %d\"</span> % cls.count)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在类方法内部，可以直接使用 <code>cls</code> 访问 <strong>类属性</strong> 或者 <strong>调用类方法</strong></p>\n</blockquote>\n<h3 id=\"3-2-静态方法\"><a href=\"#3-2-静态方法\" class=\"headerlink\" title=\"3.2 静态方法\"></a>3.2 静态方法</h3><ul>\n<li>在开发时，如果需要在 <strong>类</strong> 中封装一个方法，这个方法：<ul>\n<li>既 <strong>不需要</strong> 访问 <strong>实例属性</strong> 或者调用 <strong>实例方法</strong></li>\n<li>也 <strong>不需要</strong> 访问 <strong>类属性</strong> 或者调用 <strong>类方法</strong></li>\n</ul>\n</li>\n<li>这个时候，可以把这个方法封装成一个 <strong>静态方法</strong></li>\n</ul>\n<p><strong>语法如下</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 静态方法名<span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>静态方法</strong> 需要用 <strong>修饰器</strong> <code>@staticmethod</code> 来标识，<strong>告诉解释器这是一个静态方法</strong></li>\n<li>通过 <strong>类名.</strong> 调用 <strong>静态方法</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 狗对象计数</span></span><br><span class=\"line\">    dog_count = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 不需要访问实例属性也不需要访问类属性的方法</span></span><br><span class=\"line\">        print(<span class=\"string\">\"狗在跑...\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-方法综合案例\"><a href=\"#3-3-方法综合案例\" class=\"headerlink\" title=\"3.3 方法综合案例\"></a>3.3 方法综合案例</h3><p><strong>需求</strong></p>\n<ol>\n<li>设计一个 <code>Game</code> 类</li>\n<li>属性：<ul>\n<li>定义一个 <strong>类属性</strong> <code>top_score</code> 记录游戏的 <strong>历史最高分</strong></li>\n<li>定义一个 <strong>实例属性</strong> <code>player_name</code> 记录 <strong>当前游戏的玩家姓名</strong></li>\n</ul>\n</li>\n<li>方法：<ul>\n<li><strong>静态方法</strong> <code>show_help</code> 显示游戏帮助信息</li>\n<li><strong>类方法</strong> <code>show_top_score</code> 显示历史最高分</li>\n<li><strong>实例方法</strong> <code>start_game</code> 开始当前玩家的游戏</li>\n</ul>\n</li>\n<li>主程序步骤<ul>\n<li>1) 查看帮助信息</li>\n<li>2) 查看历史最高分</li>\n<li>3) 创建游戏对象，开始游戏</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://i.loli.net/2020/03/04/RgJCEWSyp1lQ4hv.png\" alt=\"021_方法综合案例.png\">￼</p>\n<h4 id=\"案例小结\"><a href=\"#案例小结\" class=\"headerlink\" title=\"案例小结\"></a>案例小结</h4><ol>\n<li>实例方法</li>\n</ol>\n<p>   —— 方法内部需要访问</p>\n<p>   实例属性</p>\n<ul>\n<li><strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</li>\n</ul>\n<ol start=\"2\">\n<li><p><strong>类方法</strong> —— 方法内部 <strong>只</strong> 需要访问 <strong>类属性</strong></p>\n</li>\n<li><p><strong>静态方法</strong> —— 方法内部，不需要访问 <strong>实例属性</strong> 和 <strong>类属性</strong></p>\n</li>\n</ol>\n<p><strong>提问</strong></p>\n<p>如果方法内部 即需要访问 <strong>实例属性</strong>，又需要访问 <strong>类属性</strong>，应该定义成什么方法？</p>\n<p><strong>答案</strong></p>\n<ul>\n<li>应该定义 <strong>实例方法</strong></li>\n<li>因为，<strong>类只有一个</strong>，在 <strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 游戏最高分，类属性</span></span><br><span class=\"line\">    top_score = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_help</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"帮助信息：让僵尸走进房间\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_top_score</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"游戏最高分是 %d\"</span> % cls.top_score)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, player_name)</span>:</span></span><br><span class=\"line\">        self.player_name = player_name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_game</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"[%s] 开始游戏...\"</span> % self.player_name)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 使用类名.修改历史最高分</span></span><br><span class=\"line\">        Game.top_score = <span class=\"number\">999</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 查看游戏帮助</span></span><br><span class=\"line\">Game.show_help()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 查看游戏最高分</span></span><br><span class=\"line\">Game.show_top_score()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 创建游戏对象，开始游戏</span></span><br><span class=\"line\">game = Game(<span class=\"string\">\"小明\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">game.start_game()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 游戏结束，查看游戏最高分</span></span><br><span class=\"line\">Game.show_top_score()</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 多态","url":"/posts/f43cdde6/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>多态</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<p><strong>面向对象三大特性</strong></p>\n<ol>\n<li><p><strong>封装</strong>  根据 <strong>职责</strong> 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中 </p>\n<ul>\n<li>定义类的准则 </li>\n</ul>\n</li>\n<li><p>继承 </p>\n<p>实现代码的重用，相同的代码不需要重复的编写</p>\n<ul>\n<li>设计类的技巧</li>\n<li>子类针对自己特有的需求，编写特定的代码</li>\n</ul>\n</li>\n<li><p><strong>多态</strong> 不同的 <strong>子类对象</strong> 调用相同的 <strong>父类方法</strong>，产生不同的执行结果</p>\n<ul>\n<li><strong>多态</strong> 可以 <strong>增加代码的灵活度</strong></li>\n<li>以 <strong>继承</strong> 和 <strong>重写父类方法</strong> 为前提</li>\n<li>是调用方法的技巧，<strong>不会影响到类的内部设计</strong></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"多态案例演练\"><a href=\"#多态案例演练\" class=\"headerlink\" title=\"多态案例演练\"></a>多态案例演练</h2><p><strong>需求</strong></p>\n<ol>\n<li>在 <code>Dog</code> 类中封装方法 <code>game</code> <ul>\n<li>普通狗只是简单的玩耍</li>\n</ul>\n</li>\n<li>定义 <code>XiaoTianDog</code> 继承自 <code>Dog</code>，并且重写 <code>game</code> 方法 <ul>\n<li>哮天犬需要在天上玩耍</li>\n</ul>\n</li>\n<li>定义 <code>Person</code> 类，并且封装一个 <strong>和狗玩</strong> 的方法 <ul>\n<li>在方法内部，直接让 <strong>狗对象</strong> 调用 <code>game</code> 方法</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/3Idbh6\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/3Idbh6.md.png\" alt=\"3Idbh6.md.png\"></a></p>\n<p><strong>案例小结</strong></p>\n<ul>\n<li><p><code>Person</code> 类中只需要让 调用 方法，而不关心具体是 </p>\n<ul>\n<li><code>game</code> 方法是在 <code>Dog</code> 父类中定义的</li>\n</ul>\n</li>\n<li><p>在程序执行时，传入不同的 <strong>狗对象</strong> 实参，就会产生不同的执行效果</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>多态</strong> 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化！</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">game</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 蹦蹦跳跳的玩耍...\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoTianDog</span><span class=\"params\">(Dog)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">game</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 飞到天上去玩耍...\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">game_with_dog</span><span class=\"params\">(self, dog)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 和 %s 快乐的玩耍...\"</span> % (self.name, dog.name))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 让狗玩耍</span></span><br><span class=\"line\">        dog.game()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 创建一个狗对象</span></span><br><span class=\"line\"><span class=\"comment\"># wangcai = Dog(\"旺财\")</span></span><br><span class=\"line\">wangcai = XiaoTianDog(<span class=\"string\">\"飞天旺财\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建一个小明对象</span></span><br><span class=\"line\">xiaoming = Person(<span class=\"string\">\"小明\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 让小明调用和狗玩的方法</span></span><br><span class=\"line\">xiaoming.game_with_dog(wangcai)</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 继承","url":"/posts/49a6fa20/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>单继承</p>\n</li>\n<li><p>多继承</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<p><strong>面向对象三大特性</strong></p>\n<ol>\n<li><strong>封装</strong> 根据 <strong>职责</strong> 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</li>\n<li><strong>继承</strong> <strong>实现代码的重用</strong>，相同的代码不需要重复的编写</li>\n<li><strong>多态</strong> 不同的对象调用相同的方法，产生不同的执行结果，<strong>增加代码的灵活度</strong></li>\n</ol>\n<h2 id=\"01-单继承\"><a href=\"#01-单继承\" class=\"headerlink\" title=\"01. 单继承\"></a>01. 单继承</h2><h3 id=\"1-1-继承的概念、语法和特点\"><a href=\"#1-1-继承的概念、语法和特点\" class=\"headerlink\" title=\"1.1 继承的概念、语法和特点\"></a>1.1 继承的概念、语法和特点</h3><p><strong>继承的概念</strong>：<strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></p>\n<p><a href=\"https://imgchr.com/i/3541fg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/3541fg.md.png\" alt=\"3541fg.md.png\"></a></p>\n<h4 id=\"1-继承的语法\"><a href=\"#1-继承的语法\" class=\"headerlink\" title=\"1) 继承的语法\"></a>1) 继承的语法</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名<span class=\"params\">(父类名)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>子类</strong> 继承自 <strong>父类</strong>，可以直接 <strong>享受</strong> 父类中已经封装好的方法，不需要再次开发</li>\n<li><strong>子类</strong> 中应该根据 <strong>职责</strong>，封装 <strong>子类特有的</strong> <strong>属性和方法</strong></li>\n</ul>\n<h4 id=\"2-专业术语\"><a href=\"#2-专业术语\" class=\"headerlink\" title=\"2) 专业术语\"></a>2) 专业术语</h4><ul>\n<li><code>Dog</code> 类是 <code>Animal</code> 类的<strong>子类</strong>，<code>Animal</code> 类是 <code>Dog</code> 类的<strong>父类</strong>，<code>Dog</code> 类从 <code>Animal</code> 类<strong>继承</strong></li>\n<li><code>Dog</code> 类是 <code>Animal</code> 类的<strong>派生类</strong>，<code>Animal</code> 类是 <code>Dog</code> 类的<strong>基类</strong>，<code>Dog</code> 类从 <code>Animal</code> 类<strong>派生</strong></li>\n</ul>\n<h4 id=\"3-继承的传递性\"><a href=\"#3-继承的传递性\" class=\"headerlink\" title=\"3) 继承的传递性\"></a>3) 继承的传递性</h4><ul>\n<li><code>C</code> 类从 <code>B</code> 类继承，<code>B</code> 类又从 <code>A</code> 类继承</li>\n<li>那么 <code>C</code> 类就具有 <code>B</code> 类和 <code>A</code> 类的所有属性和方法</li>\n</ul>\n<p><strong>子类</strong> 拥有 <strong>父类</strong> 以及 <strong>父类的父类</strong> 中封装的所有 <strong>属性</strong> 和 <strong>方法</strong></p>\n<p><strong>提问</strong></p>\n<p><strong>哮天犬</strong> 能够调用 <code>Cat</code> 类中定义的 <code>catch</code> 方法吗？</p>\n<p><strong>答案</strong></p>\n<p><strong>不能</strong>，因为 <strong>哮天犬</strong> 和 <code>Cat</code> 之间没有 <strong>继承</strong> 关系</p>\n<h3 id=\"1-2-方法的重写\"><a href=\"#1-2-方法的重写\" class=\"headerlink\" title=\"1.2 方法的重写\"></a>1.2 方法的重写</h3><ul>\n<li><strong>子类</strong> 拥有 <strong>父类</strong> 的所有 <strong>方法</strong> 和 <strong>属性</strong></li>\n<li><strong>子类</strong> 继承自 <strong>父类</strong>，可以直接 <strong>享受</strong> 父类中已经封装好的方法，不需要再次开发</li>\n</ul>\n<p><strong>应用场景</strong></p>\n<ul>\n<li>当 <strong>父类</strong> 的方法实现不能满足子类需求时，可以对方法进行 <strong>重写(override)</strong></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/354ltS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/354ltS.png\" alt=\"354ltS.png\"></a></p>\n<p><strong>重写</strong> 父类方法有两种情况：</p>\n<ol>\n<li><strong>覆盖</strong> 父类的方法</li>\n<li>对父类方法进行 <strong>扩展</strong></li>\n</ol>\n<h4 id=\"1-覆盖父类的方法\"><a href=\"#1-覆盖父类的方法\" class=\"headerlink\" title=\"1) 覆盖父类的方法\"></a>1) 覆盖父类的方法</h4><ul>\n<li>如果在开发中，<strong>父类的方法实现</strong> 和 <strong>子类的方法实现</strong>，<strong>完全不同</strong></li>\n<li>就可以使用 <strong>覆盖</strong> 的方式，<strong>在子类中</strong> <strong>重新编写</strong> 父类的方法实现</li>\n</ul>\n<blockquote>\n<p>具体的实现方式，就相当于在 <strong>子类中</strong> 定义了一个 <strong>和父类同名的方法并且实现</strong></p>\n</blockquote>\n<p>重写之后，在运行时，<strong>只会调用</strong> 子类中重写的方法，而不再会调用 <strong>父类封装的方法</strong></p>\n<h4 id=\"2-对父类方法进行-扩展\"><a href=\"#2-对父类方法进行-扩展\" class=\"headerlink\" title=\"2) 对父类方法进行 扩展\"></a>2) 对父类方法进行 <strong>扩展</strong></h4><ul>\n<li>如果在开发中，子类的方法实现中包含父类的方法实现<ul>\n<li><strong>父类原本封装的方法实现</strong> 是 <strong>子类方法的一部分</strong></li>\n</ul>\n</li>\n<li>就可以使用扩展的方式<ol>\n<li><strong>在子类中</strong> <strong>重写</strong> 父类的方法</li>\n<li>在需要的位置使用 <code>super().父类方法</code> 来调用父类方法的执行</li>\n<li>代码其他的位置针对子类的需求，编写 <strong>子类特有的代码实现</strong></li>\n</ol>\n</li>\n</ul>\n<h5 id=\"关于-super\"><a href=\"#关于-super\" class=\"headerlink\" title=\"关于 super\"></a>关于 <code>super</code></h5><ul>\n<li>在 <code>Python</code> 中 <code>super</code> 是一个 <strong>特殊的类</strong></li>\n<li><code>super()</code> 就是使用 <code>super</code> 类创建出来的对象</li>\n<li><strong>最常</strong> 使用的场景就是在 <strong>重写父类方法时</strong>，调用 <strong>在父类中封装的方法实现</strong></li>\n</ul>\n<h5 id=\"调用父类方法的另外一种方式（知道）\"><a href=\"#调用父类方法的另外一种方式（知道）\" class=\"headerlink\" title=\"调用父类方法的另外一种方式（知道）\"></a>调用父类方法的另外一种方式（知道）</h5><blockquote>\n<p>在 <code>Python 2.x</code> 时，如果需要调用父类的方法，还可以使用以下方式：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">父类名.方法(self)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这种方式，目前在 <code>Python 3.x</code> 还支持这种方式</li>\n<li>这种方法 <strong>不推荐使用</strong>，因为一旦 <strong>父类发生变化</strong>，方法调用位置的 <strong>类名</strong> 同样需要修改</li>\n</ul>\n<p><strong>提示</strong></p>\n<ul>\n<li>在开发时，<code>父类名</code> 和 <code>super()</code> 两种方式不要混用</li>\n<li>如果使用 <strong>当前子类名</strong> 调用方法，会形成递归调用，<strong>出现死循环</strong></li>\n</ul>\n<h3 id=\"1-3-父类的-私有属性-和-私有方法\"><a href=\"#1-3-父类的-私有属性-和-私有方法\" class=\"headerlink\" title=\"1.3 父类的 私有属性 和 私有方法\"></a>1.3 父类的 私有属性 和 私有方法</h3><ol>\n<li><strong>子类对象</strong> <strong>不能</strong> 在自己的方法内部，<strong>直接</strong> 访问 父类的 <strong>私有属性</strong> 或 <strong>私有方法</strong></li>\n<li><strong>子类对象</strong> 可以通过 <strong>父类</strong> 的 <strong>公有方法</strong> <strong>间接</strong> 访问到 <strong>私有属性</strong> 或 <strong>私有方法</strong></li>\n</ol>\n<blockquote>\n<ul>\n<li><strong>私有属性、方法</strong> 是对象的隐私，不对外公开，<strong>外界</strong> 以及 <strong>子类</strong> 都不能直接访问</li>\n<li><strong>私有属性、方法</strong> 通常用于做一些内部的事情</li>\n</ul>\n</blockquote>\n<p><strong>示例</strong></p>\n<p><a href=\"https://imgchr.com/i/354Qk8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/354Qk8.png\" alt=\"354Qk8.png\"></a></p>\n<ul>\n<li><code>B</code> 的对象不能直接访问 <code>__num2</code> 属性</li>\n<li><code>B</code> 的对象不能在 <code>demo</code> 方法内访问 <code>__num2</code> 属性</li>\n<li><code>B</code> 的对象可以在 <code>demo</code> 方法内，调用父类的 <code>test</code> 方法</li>\n<li>父类的 <code>test</code> 方法内部，能够访问 <code>__num2</code> 属性和 <code>__test</code> 方法</li>\n</ul>\n<h2 id=\"02-多继承\"><a href=\"#02-多继承\" class=\"headerlink\" title=\"02. 多继承\"></a>02. 多继承</h2><p><strong>概念</strong></p>\n<ul>\n<li><strong>子类</strong> 可以拥有 <strong>多个父类</strong>，并且具有 <strong>所有父类</strong> 的 <strong>属性</strong> 和 <strong>方法</strong></li>\n<li>例如：<strong>孩子</strong> 会继承自己 <strong>父亲</strong> 和 <strong>母亲</strong> 的 <strong>特性</strong></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/354u0P\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/354u0P.md.png\" alt=\"354u0P.md.png\"></a></p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 子类名<span class=\"params\">(父类名<span class=\"number\">1</span>, 父类名<span class=\"number\">2.</span>..)</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">pass</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-多继承的使用注意事项\"><a href=\"#2-1-多继承的使用注意事项\" class=\"headerlink\" title=\"2.1 多继承的使用注意事项\"></a>2.1 多继承的使用注意事项</h3><p><strong>问题的提出</strong></p>\n<ul>\n<li>如果 <strong>不同的父类</strong> 中存在 <strong>同名的方法</strong>，<strong>子类对象</strong> 在调用方法时，会调用 <strong>哪一个父类中</strong>的方法呢？</li>\n</ul>\n<blockquote>\n<p>提示：<strong>开发时，应该尽量避免这种容易产生混淆的情况！</strong> —— 如果 <strong>父类之间</strong> 存在 <strong>同名的属性或者方法</strong>，应该 <strong>尽量避免</strong> 使用多继承</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/354J6s\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/354J6s.md.png\" alt=\"354J6s.md.png\"></a></p>\n<h4 id=\"Python-中的-MRO-——-方法搜索顺序（知道）\"><a href=\"#Python-中的-MRO-——-方法搜索顺序（知道）\" class=\"headerlink\" title=\"Python 中的 MRO —— 方法搜索顺序（知道）\"></a>Python 中的 MRO —— 方法搜索顺序（知道）</h4><ul>\n<li><code>Python</code> 中针对 <strong>类</strong> 提供了一个 <strong>内置属性</strong> <code>__mro__</code> 可以查看 <strong>方法</strong> 搜索顺序</li>\n<li>MRO 是 <code>method resolution order</code>，主要用于 <strong>在多继承时判断 方法、属性 的调用 路径</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(C.__mro__)</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(&lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;object&#39;&gt;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在搜索方法时，是按照 <code>__mro__</code> 的输出结果 <strong>从左至右</strong> 的顺序查找的</li>\n<li>如果在当前类中 <strong>找到方法，就直接执行，不再搜索</strong></li>\n<li>如果 <strong>没有找到，就查找下一个类</strong> 中是否有对应的方法，<strong>如果找到，就直接执行，不再搜索</strong></li>\n<li>如果找到最后一个类，还没有找到方法，程序报错</li>\n</ul>\n<h3 id=\"2-2-新式类与旧式（经典）类\"><a href=\"#2-2-新式类与旧式（经典）类\" class=\"headerlink\" title=\"2.2 新式类与旧式（经典）类\"></a>2.2 新式类与旧式（经典）类</h3><blockquote>\n<p><code>object</code> 是 <code>Python</code> 为所有对象提供的 <strong>基类</strong>，提供有一些内置的属性和方法，可以使用 <code>dir</code> 函数查看</p>\n</blockquote>\n<ul>\n<li><strong>新式类</strong>：以 <code>object</code> 为基类的类，<strong>推荐使用</strong></li>\n<li><strong>经典类</strong>：不以 <code>object</code> 为基类的类，<strong>不推荐使用</strong></li>\n<li>在 <code>Python 3.x</code> 中定义类时，如果没有指定父类，会 <strong>默认使用</strong> <code>object</code> 作为该类的 <strong>基类</strong> —— <code>Python 3.x</code> 中定义的类都是 <strong>新式类</strong></li>\n<li>在 <code>Python 2.x</code> 中定义类时，如果没有指定父类，则不会以 <code>object</code> 作为 <strong>基类</strong></li>\n</ul>\n<blockquote>\n<p><strong>新式类</strong> 和 <strong>经典类</strong> 在多继承时 —— <strong>会影响到方法的搜索顺序</strong></p>\n</blockquote>\n<p>为了保证编写的代码能够同时在 <code>Python 2.x</code> 和 <code>Python 3.x</code> 运行！<br>今后在定义类时，<strong>如果没有父类，建议统一继承自 <code>object</code></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名<span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>"},{"title":"python 之 私有属性和私有方法","url":"/posts/23206741/","content":"<h2 id=\"01-应用场景及定义方式\"><a href=\"#01-应用场景及定义方式\" class=\"headerlink\" title=\"01. 应用场景及定义方式\"></a>01. 应用场景及定义方式</h2><a id=\"more\"></a>\n\n<p><strong>应用场景</strong></p>\n<ul>\n<li>在实际开发中，<strong>对象</strong> 的 <strong>某些属性或方法</strong> 可能只希望 <strong>在对象的内部被使用</strong>，而 <strong>不希望在外部被访问到</strong></li>\n<li><strong>私有属性</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>属性</strong></li>\n<li><strong>私有方法</strong> 就是 <strong>对象</strong> 不希望公开的 <strong>方法</strong></li>\n</ul>\n<p><strong>定义方式</strong></p>\n<ul>\n<li>在 <strong>定义属性或方法时</strong>，在 <strong>属性名或者方法名前</strong> 增加 <strong>两个下划线</strong>，定义的就是 <strong>私有</strong> 属性或方法</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/35f3E8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/35f3E8.png\" alt=\"35f3E8.png\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Women</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        <span class=\"comment\"># 不要问女生的年龄</span></span><br><span class=\"line\">        self.__age = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__secret</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"我的年龄是 %d\"</span> % self.__age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">xiaofang = Women(<span class=\"string\">\"小芳\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 私有属性，外部不能直接访问</span></span><br><span class=\"line\"><span class=\"comment\"># print(xiaofang.__age)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 私有方法，外部不能直接调用</span></span><br><span class=\"line\"><span class=\"comment\"># xiaofang.__secret()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"02-伪私有属性和私有方法（科普）\"><a href=\"#02-伪私有属性和私有方法（科普）\" class=\"headerlink\" title=\"02. 伪私有属性和私有方法（科普）\"></a>02. 伪私有属性和私有方法（科普）</h2><blockquote>\n<p>提示：在日常开发中，<strong>不要使用这种方式</strong>，<strong>访问对象的 私有属性 或 私有方法</strong></p>\n</blockquote>\n<p><code>Python</code> 中，并没有 <strong>真正意义</strong> 的 <strong>私有</strong></p>\n<ul>\n<li>在给 <strong>属性</strong>、<strong>方法</strong> 命名时，实际是对 <strong>名称</strong> 做了一些特殊处理，使得外界无法访问到</li>\n<li><strong>处理方式</strong>：在 <strong>名称</strong> 前面加上 <code>_类名</code> =&gt; <code>_类名__名称</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 私有属性，外部不能直接访问到</span></span><br><span class=\"line\">print(xiaofang._Women__age)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 私有方法，外部不能直接调用</span></span><br><span class=\"line\">xiaofang._Women__secret()</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 面向对象基础语法和案例","url":"/posts/4acc5623/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p><code>dir</code> 内置函数</p>\n</li>\n<li><p>定义简单的类（只包含方法）</p>\n</li>\n<li><p>方法中的 <code>self</code> 参数</p>\n</li>\n<li><p>初始化方法</p>\n</li>\n<li><p>内置方法和属性</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-dir-内置函数（知道）\"><a href=\"#01-dir-内置函数（知道）\" class=\"headerlink\" title=\"01. dir 内置函数（知道）\"></a>01. <code>dir</code> 内置函数（知道）</h2><ul>\n<li>在 <code>Python</code> 中 <strong>对象几乎是无所不在的</strong>，我们之前学习的 <strong>变量</strong>、<strong>数据</strong>、<strong>函数</strong> 都是对象</li>\n</ul>\n<p>在 <code>Python</code> 中可以使用以下两个方法验证：</p>\n<ol>\n<li>在 <strong>标识符</strong> / <strong>数据</strong> 后输入一个 <code>.</code>，然后按下 <code>TAB</code> 键，<code>iPython</code> 会提示该对象能够调用的 <strong>方法列表</strong></li>\n<li>使用内置函数 <code>dir</code> 传入 <strong>标识符</strong> / <strong>数据</strong>，可以查看对象内的 <strong>所有属性及方法</strong></li>\n</ol>\n<p><strong>提示</strong> <code>__方法名__</code> 格式的方法是 <code>Python</code> 提供的 <strong>内置方法 / 属性</strong>，稍后会给大家介绍一些常用的 内置方法 / 属性</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">方法名</th>\n<th align=\"center\">类型</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">01</td>\n<td align=\"center\"><code>__new__</code></td>\n<td align=\"center\">方法</td>\n<td align=\"left\"><strong>创建对象</strong>时，会被 <strong>自动</strong> 调用</td>\n</tr>\n<tr>\n<td align=\"center\">02</td>\n<td align=\"center\"><code>__init__</code></td>\n<td align=\"center\">方法</td>\n<td align=\"left\"><strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用</td>\n</tr>\n<tr>\n<td align=\"center\">03</td>\n<td align=\"center\"><code>__del__</code></td>\n<td align=\"center\">方法</td>\n<td align=\"left\"><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td>\n</tr>\n<tr>\n<td align=\"center\">04</td>\n<td align=\"center\"><code>__str__</code></td>\n<td align=\"center\">方法</td>\n<td align=\"left\">返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td>\n</tr>\n</tbody></table>\n<p><strong>提示</strong> 利用好 <code>dir()</code> 函数，在学习时很多内容就不需要死记硬背了</p>\n<h2 id=\"02-定义简单的类（只包含方法）\"><a href=\"#02-定义简单的类（只包含方法）\" class=\"headerlink\" title=\"02. 定义简单的类（只包含方法）\"></a>02. 定义简单的类（只包含方法）</h2><blockquote>\n<p><strong>面向对象</strong> 是 <strong>更大</strong> 的 <strong>封装</strong>，在 <strong>一个类中 封装 多个方法</strong>，这样 <strong>通过这个类创建出来的对象，就可以直接调用这些方法了</strong>！</p>\n</blockquote>\n<h3 id=\"2-1-定义只包含方法的类\"><a href=\"#2-1-定义只包含方法的类\" class=\"headerlink\" title=\"2.1 定义只包含方法的类\"></a>2.1 定义只包含方法的类</h3><ul>\n<li>在 <code>Python</code> 中要定义一个只包含方法的类，语法格式如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> 方法1<span class=\"params\">(self, 参数列表)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> 方法2<span class=\"params\">(self, 参数列表)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>方法</strong> 的定义格式和之前学习过的<strong>函数</strong> 几乎一样</li>\n<li>区别在于第一个参数必须是 <code>self</code>，大家暂时先记住，稍后介绍 <code>self</code></li>\n</ul>\n<blockquote>\n<p>注意：<strong>类名</strong> 的 命名规则 要符合 <strong>大驼峰命名法</strong></p>\n</blockquote>\n<h3 id=\"2-2-创建对象\"><a href=\"#2-2-创建对象\" class=\"headerlink\" title=\"2.2 创建对象\"></a>2.2 创建对象</h3><ul>\n<li>当一个类定义完成之后，要使用这个类来创建对象，语法格式如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">对象变量 = 类名()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-第一个面向对象程序\"><a href=\"#2-3-第一个面向对象程序\" class=\"headerlink\" title=\"2.3 第一个面向对象程序\"></a>2.3 第一个面向对象程序</h3><p><strong>需求</strong></p>\n<ul>\n<li><strong>小猫</strong> 爱 <strong>吃</strong> 鱼，<strong>小猫</strong> 要 <strong>喝</strong> 水</li>\n</ul>\n<p><strong>分析</strong></p>\n<ol>\n<li>定义一个猫类 <code>Cat</code></li>\n<li>定义两个方法 <code>eat</code> 和 <code>drink</code></li>\n<li>按照需求 —— 不需要定义属性</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"这是一个猫类\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"小猫爱吃鱼\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drink</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"小猫在喝水\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tom = Cat()</span><br><span class=\"line\">tom.drink()</span><br><span class=\"line\">tom.eat()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用概念的强调\"><a href=\"#引用概念的强调\" class=\"headerlink\" title=\"引用概念的强调\"></a>引用概念的强调</h4><blockquote>\n<p>在面向对象开发中，<strong>引用</strong>的概念是同样适用的！</p>\n</blockquote>\n<ul>\n<li>在 <code>Python</code> 中使用类 <strong>创建对象之后</strong>，<code>tom</code> 变量中 仍然记录的是 <strong>对象在内存中的地址</strong></li>\n<li>也就是 <code>tom</code> 变量 <strong>引用</strong> 了 <strong>新建的猫对象</strong></li>\n<li>使用 <code>print</code> 输出 <strong>对象变量</strong>，默认情况下，是能够输出这个变量 <strong>引用的对象</strong> 是 <strong>由哪一个类创建的对象</strong>，以及 <strong>在内存中的地址</strong>（<strong>十六进制表示</strong>）</li>\n</ul>\n<blockquote>\n<p>提示：在计算机中，通常使用 <strong>十六进制</strong> 表示 <strong>内存地址</strong></p>\n<ul>\n<li><strong>十进制</strong> 和 <strong>十六进制</strong> 都是用来表达数字的，只是表示的方式不一样</li>\n<li><strong>十进制</strong> 和 <strong>十六进制</strong> 的数字之间可以来回转换</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>%d</code> 可以以 <strong>10 进制</strong> 输出数字</li>\n<li><code>%x</code> 可以以 <strong>16 进制</strong> 输出数字</li>\n</ul>\n<h4 id=\"案例进阶-——-使用-Cat-类再创建一个对象\"><a href=\"#案例进阶-——-使用-Cat-类再创建一个对象\" class=\"headerlink\" title=\"案例进阶 —— 使用 Cat 类再创建一个对象\"></a>案例进阶 —— 使用 Cat 类再创建一个对象</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">lazy_cat = Cat()</span><br><span class=\"line\">lazy_cat.eat()</span><br><span class=\"line\">lazy_cat.drink()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提问：<code>tom</code> 和 <code>lazy_cat</code> 是同一个对象吗？</p>\n</blockquote>\n<h2 id=\"03-方法中的-self-参数\"><a href=\"#03-方法中的-self-参数\" class=\"headerlink\" title=\"03. 方法中的 self 参数\"></a>03. 方法中的 <code>self</code> 参数</h2><h3 id=\"3-1-案例改造-——-给对象增加属性\"><a href=\"#3-1-案例改造-——-给对象增加属性\" class=\"headerlink\" title=\"3.1 案例改造 —— 给对象增加属性\"></a>3.1 案例改造 —— 给对象增加属性</h3><ul>\n<li>在 <code>Python</code> 中，要 给对象设置属性，非常的容易，但是不推荐使用<ul>\n<li>因为：对象属性的封装应该封装在类的内部</li>\n</ul>\n</li>\n<li>只需要在 <strong>类的外部的代码</strong> 中直接通过 <code>.</code> 设置一个属性即可</li>\n</ul>\n<blockquote>\n<p>注意：这种方式虽然简单，但是不推荐使用！</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tom.name = <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">lazy_cat.name = <span class=\"string\">\"大懒猫\"</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-使用-self-在方法内部输出每一只猫的名字\"><a href=\"#3-2-使用-self-在方法内部输出每一只猫的名字\" class=\"headerlink\" title=\"3.2 使用 self 在方法内部输出每一只猫的名字\"></a>3.2 使用 <code>self</code> 在方法内部输出每一只猫的名字</h3><blockquote>\n<p>由 <strong>哪一个对象</strong> 调用的方法，方法内的 <code>self</code> 就是 <strong>哪一个对象的引用</strong></p>\n</blockquote>\n<ul>\n<li>在类封装的方法内部，<code>self</code> 就表示 <strong>当前调用方法的对象自己</strong></li>\n<li><strong>调用方法时</strong>，程序员不需要传递 <code>self</code> 参数</li>\n<li>在方法内部<ul>\n<li>可以通过 <code>self.</code> <strong>访问对象的属性</strong></li>\n<li>也可以通过 <code>self.</code> <strong>调用其他的对象方法</strong></li>\n</ul>\n</li>\n<li>改造代码如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 爱吃鱼\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">tom = Cat()</span><br><span class=\"line\">tom.name = <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">tom.eat()</span><br><span class=\"line\"></span><br><span class=\"line\">lazy_cat = Cat()</span><br><span class=\"line\">lazy_cat.name = <span class=\"string\">\"大懒猫\"</span></span><br><span class=\"line\">lazy_cat.eat()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 <strong>类的外部</strong>，通过 <code>变量名.</code> 访问对象的 <strong>属性和方法</strong></li>\n<li>在 <strong>类封装的方法中</strong>，通过 <code>self.</code> 访问对象的 <strong>属性和方法</strong></li>\n</ul>\n<h2 id=\"04-初始化方法\"><a href=\"#04-初始化方法\" class=\"headerlink\" title=\"04. 初始化方法\"></a>04. 初始化方法</h2><h3 id=\"4-1-之前代码存在的问题-——-在类的外部给对象增加属性\"><a href=\"#4-1-之前代码存在的问题-——-在类的外部给对象增加属性\" class=\"headerlink\" title=\"4.1 之前代码存在的问题 —— 在类的外部给对象增加属性\"></a>4.1 之前代码存在的问题 —— 在类的外部给对象增加属性</h3><ul>\n<li>将案例代码进行调整，<strong>先调用方法 再设置属性</strong>，观察一下执行效果</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tom = Cat()</span><br><span class=\"line\">tom.drink()</span><br><span class=\"line\">tom.eat()</span><br><span class=\"line\">tom.name = <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">print(tom)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>程序执行报错如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">AttributeError: &#39;Cat&#39; object has no attribute &#39;name&#39;</span><br><span class=\"line\">属性错误：&#39;Cat&#39; 对象没有 &#39;name&#39; 属性</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示</strong></p>\n<ul>\n<li>在日常开发中，不推荐在类的外部 给对象增加属性<ul>\n<li>如果<strong>在运行时，没有找到属性，程序会报错</strong></li>\n</ul>\n</li>\n<li>对象应该包含有哪些属性，应该 <strong>封装在类的内部</strong></li>\n</ul>\n<h3 id=\"4-2-初始化方法\"><a href=\"#4-2-初始化方法\" class=\"headerlink\" title=\"4.2 初始化方法\"></a>4.2 初始化方法</h3><ul>\n<li>当使用 <code>类名</code>()创建对象时，会 自动 执行以下操作：<ol>\n<li>为对象在内存中 <strong>分配空间</strong> —— 创建对象</li>\n<li>为对象的属性 <strong>设置初始值</strong> —— 初始化方法(<code>init</code>)</li>\n</ol>\n</li>\n<li>这个 <strong>初始化方法</strong> 就是 <code>__init__</code> 方法，<code>__init__</code> 是对象的<strong>内置方法</strong></li>\n</ul>\n<blockquote>\n<p><code>__init__</code> 方法是 <strong>专门</strong> 用来定义一个类 <strong>具有哪些属性的方法</strong>！</p>\n</blockquote>\n<p>在 <code>Cat</code> 中增加 <code>__init__</code> 方法，验证该方法在创建对象时会被自动调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"这是一个猫类\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化方法\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-在初始化方法内部定义属性\"><a href=\"#4-3-在初始化方法内部定义属性\" class=\"headerlink\" title=\"4.3 在初始化方法内部定义属性\"></a>4.3 在初始化方法内部定义属性</h3><ul>\n<li>在 <code>__init__</code> 方法内部使用 <code>self.属性名 = 属性的初始值</code> 就可以 <strong>定义属性</strong></li>\n<li>定义属性之后，再使用 <code>Cat</code> 类创建的对象，都会拥有该属性</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">\"这是一个初始化方法\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 定义用 Cat 类创建的猫对象都有一个 name 的属性</span></span><br><span class=\"line\">        self.name = <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 爱吃鱼\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用类名()创建对象的时候，会自动调用初始化方法 __init__</span></span><br><span class=\"line\">tom = Cat()</span><br><span class=\"line\"></span><br><span class=\"line\">tom.eat()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4-改造初始化方法-——-初始化的同时设置初始值\"><a href=\"#4-4-改造初始化方法-——-初始化的同时设置初始值\" class=\"headerlink\" title=\"4.4 改造初始化方法 —— 初始化的同时设置初始值\"></a>4.4 改造初始化方法 —— 初始化的同时设置初始值</h3><ul>\n<li>在开发中，如果希望在创建对象的同时，就设置对象的属性，可以对 <strong>init</strong>``方法进行改造<ol>\n<li>把希望设置的属性值，定义成 <code>__init__</code> 方法的参数</li>\n<li>在方法内部使用 <code>self.属性 = 形参</code> 接收外部传递的参数</li>\n<li>在创建对象时，使用 <code>类名(属性1, 属性2...)</code> 调用</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"初始化方法 %s\"</span> % name)</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">tom = Cat(<span class=\"string\">\"Tom\"</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">lazy_cat = Cat(<span class=\"string\">\"大懒猫\"</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"05-内置方法和属性\"><a href=\"#05-内置方法和属性\" class=\"headerlink\" title=\"05. 内置方法和属性\"></a>05. 内置方法和属性</h2><table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">方法名</th>\n<th align=\"center\">类型</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">01</td>\n<td align=\"center\"><code>__del__</code></td>\n<td align=\"center\">方法</td>\n<td align=\"left\"><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td>\n</tr>\n<tr>\n<td align=\"center\">02</td>\n<td align=\"center\"><code>__str__</code></td>\n<td align=\"center\">方法</td>\n<td align=\"left\">返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-1-del-方法（知道）\"><a href=\"#5-1-del-方法（知道）\" class=\"headerlink\" title=\"5.1 __del__ 方法（知道）\"></a>5.1 <code>__del__</code> 方法（知道）</h3><ul>\n<li>在 <code>Python</code> 中<ul>\n<li>当使用 <code>类名()</code> 创建对象时，为对象 <strong>分配完空间</strong>后，<strong>自动</strong> 调用 <code>__init__</code> 方法</li>\n<li>当一个 <strong>对象被从内存中销毁</strong> 前，会 <strong>自动</strong> 调用 <code>__del__</code> 方法</li>\n</ul>\n</li>\n<li><strong>应用场景</strong><ul>\n<li><code>__init__</code> 改造初始化方法，可以让创建对象更加灵活</li>\n<li><code>__del__</code> 如果希望在对象被销毁前，再做一些事情，可以考虑一下 <code>__del__</code> 方法</li>\n</ul>\n</li>\n<li><strong>生命周期</strong><ul>\n<li>一个对象从调用 <code>类名()</code> 创建，生命周期开始</li>\n<li>一个对象的 <code>__del__</code> 方法一旦被调用，生命周期结束</li>\n<li>在对象的生命周期内，可以访问对象属性，或者让对象调用方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, new_name)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.name = new_name</span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 来了\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 去了\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tom 是一个全局变量</span></span><br><span class=\"line\">tom = Cat(<span class=\"string\">\"Tom\"</span>)</span><br><span class=\"line\">print(tom.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># del 关键字可以删除一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> tom</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-str-方法\"><a href=\"#5-2-str-方法\" class=\"headerlink\" title=\"5.2 __str__ 方法\"></a>5.2 <code>__str__</code> 方法</h3><ul>\n<li>在 <code>Python</code> 中，使用 <code>print</code> 输出 <strong>对象变量</strong>，默认情况下，会输出这个变量 <strong>引用的对象</strong> 是 <strong>由哪一个类创建的对象</strong>，以及 <strong>在内存中的地址</strong>（<strong>十六进制表示</strong>）</li>\n<li>如果在开发中，希望使用 <code>print</code> 输出 <strong>对象变量</strong> 时，能够打印 <strong>自定义的内容</strong>，就可以利用 <code>__str__</code> 这个内置方法了</li>\n</ul>\n<blockquote>\n<p>注意：<code>__str__</code> 方法必须返回一个字符串</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, new_name)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.name = new_name</span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 来了\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__del__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        print(<span class=\"string\">\"%s 去了\"</span> % self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"我是小猫：%s\"</span> % self.name</span><br><span class=\"line\"></span><br><span class=\"line\">tom = Cat(<span class=\"string\">\"Tom\"</span>)</span><br><span class=\"line\">print(tom)</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"python 之 类和对象","url":"/posts/d2318593/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>类和对象的概念</p>\n</li>\n<li><p>类和对象的关系</p>\n</li>\n<li><p>类的设计</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-类和对象的概念\"><a href=\"#01-类和对象的概念\" class=\"headerlink\" title=\"01. 类和对象的概念\"></a>01. 类和对象的概念</h2><p><strong>类</strong> 和 <strong>对象</strong> 是 <strong>面向对象编程的 两个 核心概念</strong></p>\n<h3 id=\"1-1-类\"><a href=\"#1-1-类\" class=\"headerlink\" title=\"1.1 类\"></a>1.1 类</h3><ul>\n<li>类是对一群具有相同 特征或者行为的事物的一个统称，是抽象的，不能直接使用<ul>\n<li><strong>特征</strong> 被称为 <strong>属性</strong></li>\n<li><strong>行为</strong> 被称为 <strong>方法</strong></li>\n</ul>\n</li>\n<li><strong>类</strong> 就相当于制造飞机时的<strong>图纸</strong>，是一个 <strong>模板</strong>，是 <strong>负责创建对象的</strong></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/35ysl6\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/35ysl6.md.png\" alt=\"35ysl6.md.png\"></a></p>\n<h3 id=\"1-2-对象\"><a href=\"#1-2-对象\" class=\"headerlink\" title=\"1.2 对象\"></a>1.2 对象</h3><ul>\n<li><strong>对象</strong> 是 <strong>由类创建出来的一个具体存在</strong>，可以直接使用</li>\n<li>由哪一个类创建出来的对象，就拥有在哪一个类中定义的：<ul>\n<li>属性</li>\n<li>方法</li>\n</ul>\n</li>\n<li><strong>对象</strong> 就相当于用 <strong>图纸</strong> <strong>制造</strong> 的飞机</li>\n</ul>\n<blockquote>\n<p>在程序开发中，应该 <strong>先有类，再有对象</strong></p>\n</blockquote>\n<ul>\n<li><p><strong>类是模板</strong>，<strong>对象</strong> 是根据 <strong>类</strong> 这个模板创建出来的，应该 <strong>先有类，再有对象</strong></p>\n</li>\n<li><p>类</p>\n</li>\n</ul>\n<p>  只有一个，而对象可以有很多个</p>\n<ul>\n<li><strong>不同的对象</strong> 之间 <strong>属性</strong> 可能会各不相同</li>\n</ul>\n<ul>\n<li><strong>类</strong> 中定义了什么 <strong>属性和方法</strong>，<strong>对象</strong> 中就有什么属性和方法，<strong>不可能多，也不可能少</strong></li>\n</ul>\n<h2 id=\"03-类的设计\"><a href=\"#03-类的设计\" class=\"headerlink\" title=\"03. 类的设计\"></a>03. 类的设计</h2><p>在使用面相对象开发前，应该首先分析需求，确定一下，程序中需要包含哪些类！</p>\n<p><a href=\"https://imgchr.com/i/35yy6K\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/04/35yy6K.md.png\" alt=\"35yy6K.md.png\"></a></p>\n<p>在程序开发中，要设计一个类，通常需要满足一下三个要素：</p>\n<ol>\n<li><strong>类名</strong> 这类事物的名字，<strong>满足大驼峰命名法</strong></li>\n<li><strong>属性</strong> 这类事物具有什么样的特征</li>\n<li><strong>方法</strong> 这类事物具有什么样的行为</li>\n</ol>\n<h3 id=\"大驼峰命名法\"><a href=\"#大驼峰命名法\" class=\"headerlink\" title=\"大驼峰命名法\"></a>大驼峰命名法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CapWords</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>每一个单词的首字母大写</li>\n<li>单词与单词之间没有下划线</li>\n</ol>\n<h3 id=\"3-1-类名的确定\"><a href=\"#3-1-类名的确定\" class=\"headerlink\" title=\"3.1 类名的确定\"></a>3.1 类名的确定</h3><p><strong>名词提炼法</strong> 分析 <strong>整个业务流程</strong>，出现的 <strong>名词</strong>，通常就是找到的类</p>\n<h3 id=\"3-2-属性和方法的确定\"><a href=\"#3-2-属性和方法的确定\" class=\"headerlink\" title=\"3.2 属性和方法的确定\"></a>3.2 属性和方法的确定</h3><ul>\n<li>对 <strong>对象的特征描述</strong>，通常可以定义成 <strong>属性</strong></li>\n<li><strong>对象具有的行为</strong>（动词），通常可以定义成 <strong>方法</strong></li>\n</ul>\n<blockquote>\n<p>提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑</p>\n</blockquote>\n","categories":["python"],"tags":["python"]},{"title":"python 之 面向对象基本概念","url":"/posts/efb95b65/","content":"<p><strong>面向对象编程</strong> —— <code>Object Oriented Programming</code> 简写 <code>OOP</code></p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>了解 <strong>面向对象</strong> 基本概念</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-面向对象基本概念\"><a href=\"#01-面向对象基本概念\" class=\"headerlink\" title=\"01. 面向对象基本概念\"></a>01. 面向对象基本概念</h2><ul>\n<li>我们之前学习的编程方式就是 <strong>面向过程</strong> 的</li>\n<li><strong>面相过程</strong> 和 <strong>面相对象</strong>，是两种不同的 <strong>编程方式</strong></li>\n<li>对比 <strong>面向过程</strong> 的特点，可以更好地了解什么是 <strong>面向对象</strong></li>\n</ul>\n<h3 id=\"1-1-过程和函数（科普）\"><a href=\"#1-1-过程和函数（科普）\" class=\"headerlink\" title=\"1.1 过程和函数（科普）\"></a>1.1 过程和函数（科普）</h3><ul>\n<li><strong>过程</strong> 是早期的一个编程概念</li>\n<li><strong>过程</strong> 类似于函数，只能执行，但是没有返回值</li>\n<li><strong>函数</strong> 不仅能执行，还可以返回结果</li>\n</ul>\n<h3 id=\"1-2-面相过程-和-面相对象-基本概念\"><a href=\"#1-2-面相过程-和-面相对象-基本概念\" class=\"headerlink\" title=\"1.2 面相过程 和 面相对象 基本概念\"></a>1.2 面相过程 和 面相对象 基本概念</h3><h4 id=\"1-面相过程-——-怎么做？\"><a href=\"#1-面相过程-——-怎么做？\" class=\"headerlink\" title=\"1) 面相过程 —— 怎么做？\"></a>1) <strong>面相过程</strong> —— <strong>怎么做</strong>？</h4><ol>\n<li>把完成某一个需求的 <code>所有步骤</code> <code>从头到尾</code> 逐步实现</li>\n<li>根据开发需求，将某些 <strong>功能独立</strong> 的代码 <strong>封装</strong> 成一个又一个 <strong>函数</strong></li>\n<li>最后完成的代码，就是顺序地调用 <strong>不同的函数</strong></li>\n</ol>\n<p><strong>特点</strong></p>\n<ol>\n<li>注重 <strong>步骤与过程</strong>，不注重职责分工</li>\n<li>如果需求复杂，代码会变得很复杂</li>\n<li><strong>开发复杂项目，没有固定的套路，开发难度很大！</strong></li>\n</ol>\n<h4 id=\"2-面向对象-——-谁来做？\"><a href=\"#2-面向对象-——-谁来做？\" class=\"headerlink\" title=\"2) 面向对象 —— 谁来做？\"></a>2) <strong>面向对象</strong> —— <strong>谁来做</strong>？</h4><blockquote>\n<p>相比较函数，<strong>面向对象</strong> 是 <strong>更大</strong> 的 <strong>封装</strong>，根据 <strong>职责</strong> 在 <strong>一个对象中 封装 多个方法</strong></p>\n</blockquote>\n<ol>\n<li>在完成某一个需求前，首先确定 <strong>职责</strong> —— <strong>要做的事情（方法）</strong></li>\n<li>根据 <strong>职责</strong> 确定不同的 <strong>对象</strong>，在 <strong>对象</strong> 内部封装不同的 <strong>方法</strong>（多个）</li>\n<li>最后完成的代码，就是顺序地让 <strong>不同的对象</strong> 调用 <strong>不同的方法</strong></li>\n</ol>\n<p><strong>特点</strong></p>\n<ol>\n<li>注重 <strong>对象和职责</strong>，不同的对象承担不同的职责</li>\n<li>更加适合应对复杂的需求变化，<strong>是专门应对复杂项目开发，提供的固定套路</strong></li>\n<li><strong>需要在面向过程基础上，再学习一些面向对象的语法</strong></li>\n</ol>\n","categories":["python"],"tags":["python"]},{"title":"python 之 函数进阶","url":"/posts/bf52831c/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>函数参数和返回值的作用</p>\n</li>\n<li><p>函数的返回值 进阶</p>\n</li>\n<li><p>函数的参数 进阶</p>\n</li>\n<li><p>递归函数</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-函数参数和返回值的作用\"><a href=\"#01-函数参数和返回值的作用\" class=\"headerlink\" title=\"01. 函数参数和返回值的作用\"></a>01. 函数参数和返回值的作用</h2><p>函数根据 <strong>有没有参数</strong> 以及 <strong>有没有返回值</strong>，可以 <strong>相互组合</strong>，一共有 <strong>4 种</strong> 组合形式</p>\n<ol>\n<li>无参数，无返回值</li>\n<li>无参数，有返回值</li>\n<li>有参数，无返回值</li>\n<li>有参数，有返回值</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/3hX5Sf\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hX5Sf.md.png\" alt=\"3hX5Sf.md.png\"></a></p>\n<blockquote>\n<p>定义函数时，<strong>是否接收参数，或者是否返回结果</strong>，是根据 <strong>实际的功能需求</strong> 来决定的！</p>\n</blockquote>\n<ol>\n<li>如果函数 <strong>内部处理的数据不确定</strong>，就可以将外界的数据以参数传递到函数内部</li>\n<li>如果希望一个函数 <strong>执行完成后，向外界汇报执行结果</strong>，就可以增加函数的返回值</li>\n</ol>\n<h3 id=\"1-1-无参数，无返回值\"><a href=\"#1-1-无参数，无返回值\" class=\"headerlink\" title=\"1.1 无参数，无返回值\"></a>1.1 无参数，无返回值</h3><p>此类函数，不接收参数，也没有返回值，应用场景如下：</p>\n<ol>\n<li><strong>只是单纯地做一件事情</strong>，例如 <strong>显示菜单</strong></li>\n<li>在函数内部 <strong>针对全局变量进行操作</strong>，例如：<strong>新建名片</strong>，最终结果 <strong>记录在全局变量</strong> 中</li>\n</ol>\n<blockquote>\n<p>注意：</p>\n</blockquote>\n<ul>\n<li>如果全局变量的数据类型是一个 <strong>可变类型</strong>，在函数内部可以使用 <strong>方法</strong> 修改全局变量的内容 —— <strong>变量的引用不会改变</strong></li>\n<li>在</li>\n<li>函数内部，<strong>使用赋值语句</strong> 才会 <strong>修改变量的引用</strong></li>\n</ul>\n<h3 id=\"1-2-无参数，有返回值\"><a href=\"#1-2-无参数，有返回值\" class=\"headerlink\" title=\"1.2 无参数，有返回值\"></a>1.2 无参数，有返回值</h3><p>此类函数，不接收参数，但是有返回值，应用场景如下：</p>\n<ul>\n<li>采集数据，例如 <strong>温度计</strong>，返回结果就是当前的温度，而不需要传递任何的参数</li>\n</ul>\n<h3 id=\"1-3-有参数，无返回值\"><a href=\"#1-3-有参数，无返回值\" class=\"headerlink\" title=\"1.3 有参数，无返回值\"></a>1.3 有参数，无返回值</h3><p>此类函数，接收参数，没有返回值，应用场景如下：</p>\n<ul>\n<li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong></li>\n<li>例如 <strong>名片管理系统</strong> 针对 <strong>找到的名片</strong> 做 <strong>修改</strong>、<strong>删除</strong> 操作</li>\n</ul>\n<h3 id=\"1-4-有参数，有返回值\"><a href=\"#1-4-有参数，有返回值\" class=\"headerlink\" title=\"1.4 有参数，有返回值\"></a>1.4 有参数，有返回值</h3><p>此类函数，接收参数，同时有返回值，应用场景如下：</p>\n<ul>\n<li>函数内部的代码保持不变，针对 <strong>不同的参数 处理 不同的数据</strong>，并且 <strong>返回期望的处理结果</strong></li>\n<li>例如 <strong>名片管理系统</strong> 使用 <strong>字典默认值</strong> 和 <strong>提示信息</strong> 提示用户输入内容<ul>\n<li>如果输入，返回输入内容</li>\n<li>如果没有输入，返回字典默认值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"02-函数的返回值-进阶\"><a href=\"#02-函数的返回值-进阶\" class=\"headerlink\" title=\"02. 函数的返回值 进阶\"></a>02. 函数的返回值 进阶</h2><ul>\n<li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li>\n<li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li>\n<li>在函数中使用 <code>return</code> 关键字可以返回结果</li>\n<li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li>\n</ul>\n<blockquote>\n<p>问题：一个函数执行后能否返回多个结果？</p>\n</blockquote>\n<h3 id=\"示例-——-温度和湿度测量\"><a href=\"#示例-——-温度和湿度测量\" class=\"headerlink\" title=\"示例 —— 温度和湿度测量\"></a>示例 —— 温度和湿度测量</h3><ul>\n<li>假设要开发一个函数能够同时返回当前的温度和湿度</li>\n<li><strong>先完成返回温度</strong>的功能如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">measure</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"返回当前的温度\"\"\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"开始测量...\"</span>)</span><br><span class=\"line\">    temp = <span class=\"number\">39</span></span><br><span class=\"line\">    print(<span class=\"string\">\"测量结束...\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp</span><br><span class=\"line\"></span><br><span class=\"line\">result = measure()</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在利用 <strong>元组</strong> 在返回温度的同时，也能够返回 <strong>湿度</strong></li>\n<li>改造如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">measure</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"返回当前的温度\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"开始测量...\"</span>)</span><br><span class=\"line\">    temp = <span class=\"number\">39</span></span><br><span class=\"line\">    wetness = <span class=\"number\">10</span></span><br><span class=\"line\">    print(<span class=\"string\">\"测量结束...\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (temp, wetness)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：如果一个函数返回的是元组，括号可以省略</p>\n</blockquote>\n<p><strong>技巧</strong> </p>\n<ul>\n<li>在 <code>Python</code> 中，可以 <strong>将一个元组</strong> 使用 <strong>赋值语句</strong> 同时赋值给 <strong>多个变量</strong></li>\n<li>注意：变量的数量需要和元组中的元素数量保持一致</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = temp, wetness = measure()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"面试题-——-交换两个数字\"><a href=\"#面试题-——-交换两个数字\" class=\"headerlink\" title=\"面试题 —— 交换两个数字\"></a>面试题 —— 交换两个数字</h3><p><strong>题目要求</strong></p>\n<ol>\n<li>有两个整数变量 <code>a = 6</code>, <code>b = 100</code></li>\n<li>不使用其他变量，<strong>交换两个变量的值</strong></li>\n</ol>\n<h4 id=\"解法-1-——-使用其他变量\"><a href=\"#解法-1-——-使用其他变量\" class=\"headerlink\" title=\"解法 1 —— 使用其他变量\"></a>解法 1 —— 使用其他变量</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解法 1 - 使用临时变量</span></span><br><span class=\"line\">c = b</span><br><span class=\"line\">b = a</span><br><span class=\"line\">a = c</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解法-2-——-不使用临时变量\"><a href=\"#解法-2-——-不使用临时变量\" class=\"headerlink\" title=\"解法 2 —— 不使用临时变量\"></a>解法 2 —— 不使用临时变量</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解法 2 - 不使用临时变量</span></span><br><span class=\"line\">a = a + b</span><br><span class=\"line\">b = a - b</span><br><span class=\"line\">a = a - b</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解法-3-——-Python-专有，利用元组\"><a href=\"#解法-3-——-Python-专有，利用元组\" class=\"headerlink\" title=\"解法 3 —— Python 专有，利用元组\"></a>解法 3 —— Python 专有，利用元组</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a, b = b, a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-函数的参数-进阶\"><a href=\"#03-函数的参数-进阶\" class=\"headerlink\" title=\"03. 函数的参数 进阶\"></a>03. 函数的参数 进阶</h2><h3 id=\"3-1-不可变和可变的参数\"><a href=\"#3-1-不可变和可变的参数\" class=\"headerlink\" title=\"3.1. 不可变和可变的参数\"></a>3.1. 不可变和可变的参数</h3><blockquote>\n<p>问题 1：在函数内部，针对参数使用 <strong>赋值语句</strong>，会不会影响调用函数时传递的 <strong>实参变量</strong>？ —— 不会！</p>\n</blockquote>\n<ul>\n<li>无论传递的参数是 <strong>可变</strong> 还是 <strong>不可变</strong> <ul>\n<li>只要 <strong>针对参数</strong> 使用 <strong>赋值语句</strong>，会在 <strong>函数内部</strong> 修改 <strong>局部变量的引用</strong>，<strong>不会影响到 外部变量的引用</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">(num, num_list)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"函数内部\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 赋值语句</span></span><br><span class=\"line\">    num = <span class=\"number\">200</span></span><br><span class=\"line\">    num_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    print(num_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"函数代码完成\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gl_num = <span class=\"number\">99</span></span><br><span class=\"line\">gl_list = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">demo(gl_num, gl_list)</span><br><span class=\"line\">print(gl_num)</span><br><span class=\"line\">print(gl_list)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>问题 2：如果传递的参数是 <strong>可变类型</strong>，在函数内部，使用 <strong>方法</strong> 修改了数据的内容，<strong>同样会影响到外部的数据</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mutable</span><span class=\"params\">(num_list)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># num_list = [1, 2, 3]</span></span><br><span class=\"line\">    num_list.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(num_list)</span><br><span class=\"line\"></span><br><span class=\"line\">gl_list = [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">mutable(gl_list)</span><br><span class=\"line\">print(gl_list)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"面试题-——\"><a href=\"#面试题-——\" class=\"headerlink\" title=\"面试题 —— +=\"></a>面试题 —— <code>+=</code></h4><ul>\n<li>在 <code>python</code> 中，列表变量调用 <code>+=</code> 本质上是在执行列表变量的 <code>extend</code> 方法，不会修改变量的引用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">(num, num_list)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"函数内部代码\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># num = num + num</span></span><br><span class=\"line\">    num += num</span><br><span class=\"line\">    <span class=\"comment\"># num_list.extend(num_list) 由于是调用方法，所以不会修改变量的引用</span></span><br><span class=\"line\">    <span class=\"comment\"># 函数执行结束后，外部数据同样会发生变化</span></span><br><span class=\"line\">    num_list += num_list</span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    print(num_list)</span><br><span class=\"line\">    print(<span class=\"string\">\"函数代码完成\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gl_num = <span class=\"number\">9</span></span><br><span class=\"line\">gl_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">demo(gl_num, gl_list)</span><br><span class=\"line\">print(gl_num)</span><br><span class=\"line\">print(gl_list)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-缺省参数\"><a href=\"#3-2-缺省参数\" class=\"headerlink\" title=\"3.2 缺省参数\"></a>3.2 缺省参数</h3><ul>\n<li>定义函数时，可以给 <strong>某个参数</strong> 指定一个<strong>默认值</strong>，具有默认值的参数就叫做 <strong>缺省参数</strong></li>\n<li>调用函数时，如果没有传入 <strong>缺省参数</strong> 的值，则在函数内部使用定义函数时指定的 <strong>参数默认值</strong></li>\n<li>函数的缺省参数，<strong>将常见的值设置为参数的缺省值</strong>，从而 <strong>简化函数的调用</strong></li>\n<li>例如：对列表排序的方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">gl_num_list = [<span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认就是升序排序，因为这种应用需求更多</span></span><br><span class=\"line\">gl_num_list.sort()</span><br><span class=\"line\">print(gl_num_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只有当需要降序排序时，才需要传递 `reverse` 参数</span></span><br><span class=\"line\">gl_num_list.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(gl_num_list)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"指定函数的缺省参数\"><a href=\"#指定函数的缺省参数\" class=\"headerlink\" title=\"指定函数的缺省参数\"></a>指定函数的缺省参数</h4><ul>\n<li>在参数后使用赋值语句，可以指定参数的缺省值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_info</span><span class=\"params\">(name, gender=True)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    gender_text = <span class=\"string\">\"男生\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> gender:</span><br><span class=\"line\">        gender_text = <span class=\"string\">\"女生\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"%s 是 %s\"</span> % (name, gender_text))</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示</strong></p>\n<ol>\n<li>缺省参数，需要使用 <strong>最常见的值</strong> 作为默认值！</li>\n<li>如果一个参数的值 <strong>不能确定</strong>，则不应该设置默认值，具体的数值在调用函数时，由外界传递！</li>\n</ol>\n<h4 id=\"缺省参数的注意事项\"><a href=\"#缺省参数的注意事项\" class=\"headerlink\" title=\"缺省参数的注意事项\"></a>缺省参数的注意事项</h4><h5 id=\"1-缺省参数的定义位置\"><a href=\"#1-缺省参数的定义位置\" class=\"headerlink\" title=\"1) 缺省参数的定义位置\"></a>1) 缺省参数的定义位置</h5><ul>\n<li><strong>必须保证</strong> <strong>带有默认值的缺省参数</strong> <strong>在参数列表末尾</strong></li>\n<li>所以，以下定义是错误的！</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_info</span><span class=\"params\">(name, gender=True, title)</span>:</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-调用带有多个缺省参数的函数\"><a href=\"#2-调用带有多个缺省参数的函数\" class=\"headerlink\" title=\"2) 调用带有多个缺省参数的函数\"></a>2) 调用带有多个缺省参数的函数</h5><ul>\n<li>在 <strong>调用函数时</strong>，如果有 <strong>多个缺省参数</strong>，<strong>需要指定参数名</strong>，这样解释器才能够知道参数的对应关系！</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_info</span><span class=\"params\">(name, title=<span class=\"string\">\"\"</span>, gender=True)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param title: 职位</span></span><br><span class=\"line\"><span class=\"string\">    :param name: 班上同学的姓名</span></span><br><span class=\"line\"><span class=\"string\">    :param gender: True 男生 False 女生</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    gender_text = <span class=\"string\">\"男生\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> gender:</span><br><span class=\"line\">        gender_text = <span class=\"string\">\"女生\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"%s%s 是 %s\"</span> % (title, name, gender_text))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提示：在指定缺省参数的默认值时，应该使用最常见的值作为默认值！</span></span><br><span class=\"line\">print_info(<span class=\"string\">\"小明\"</span>)</span><br><span class=\"line\">print_info(<span class=\"string\">\"老王\"</span>, title=<span class=\"string\">\"班长\"</span>)</span><br><span class=\"line\">print_info(<span class=\"string\">\"小美\"</span>, gender=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-多值参数（知道）\"><a href=\"#3-3-多值参数（知道）\" class=\"headerlink\" title=\"3.3 多值参数（知道）\"></a>3.3 多值参数（知道）</h3><h4 id=\"定义支持多值参数的函数\"><a href=\"#定义支持多值参数的函数\" class=\"headerlink\" title=\"定义支持多值参数的函数\"></a>定义支持多值参数的函数</h4><ul>\n<li><p>有时可能需要 <strong>一个函数</strong> 能够处理的参数 <strong>个数</strong> 是不确定的，这个时候，就可以使用 <strong>多值参数</strong></p>\n</li>\n<li><p><code>python</code> 中有 <strong>两种</strong> 多值参数：</p>\n<ul>\n<li>参数名前增加 <strong>一个</strong> <code>*</code> 可以接收 <strong>元组</strong></li>\n<li>参数名前增加 <strong>两个</strong> <code>*</code> 可以接收 <strong>字典</strong></li>\n</ul>\n</li>\n<li><p>一般在给多值参数命名时，<strong>习惯</strong>使用以下两个名字</p>\n<ul>\n<li><code>*args</code> —— 存放 <strong>元组</strong> 参数，前面有一个 <code>*</code></li>\n<li><code>**kwargs</code> —— 存放 <strong>字典</strong> 参数，前面有两个 <code>*</code></li>\n</ul>\n</li>\n<li><p><code>args</code> 是 <code>arguments</code> 的缩写，有变量的含义</p>\n</li>\n<li><p><code>kw</code> 是 <code>keyword</code> 的缩写，<code>kwargs</code> 可以记忆 <strong>键值对参数</strong></p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">(num, *args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">demo(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, name=<span class=\"string\">\"小明\"</span>, age=<span class=\"number\">18</span>, gender=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：<strong>多值参数</strong> 的应用会经常出现在网络上一些大牛开发的框架中，知道多值参数，<strong>有利于我们能够读懂大牛的代码</strong></p>\n</blockquote>\n<h4 id=\"多值参数案例-——-计算任意多个数字的和\"><a href=\"#多值参数案例-——-计算任意多个数字的和\" class=\"headerlink\" title=\"多值参数案例 —— 计算任意多个数字的和\"></a>多值参数案例 —— 计算任意多个数字的和</h4><p><strong>需求</strong></p>\n<ol>\n<li>定义一个函数 <code>sum_numbers</code>，可以接收的 <strong>任意多个整数</strong></li>\n<li>功能要求：将传递的 <strong>所有数字累加</strong> 并且返回累加结果</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum_numbers</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 遍历 args 元组顺序求和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        num += n</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum_numbers(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组和字典的拆包（知道）\"><a href=\"#元组和字典的拆包（知道）\" class=\"headerlink\" title=\"元组和字典的拆包（知道）\"></a>元组和字典的拆包（知道）</h4><ul>\n<li>在调用带有多值参数的函数时，如果希望：<ul>\n<li>将一个 <strong>元组变量</strong>，直接传递给 <code>args</code></li>\n<li>将一个 <strong>字典变量</strong>，直接传递给 <code>kwargs</code></li>\n</ul>\n</li>\n<li>就可以使用 <strong>拆包</strong>，简化参数的传递，<strong>拆包</strong> 的方式是：<ul>\n<li>在 <strong>元组变量前</strong>，增加 <strong>一个</strong> <code>*</code></li>\n<li>在 <strong>字典变量前</strong>，增加 <strong>两个</strong> <code>*</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">    print(kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要将一个元组变量/字典变量传递给函数对应的参数</span></span><br><span class=\"line\">gl_nums = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">gl_xiaoming = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小明\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span></span><br><span class=\"line\"><span class=\"comment\"># demo(gl_nums, gl_xiaoming)</span></span><br><span class=\"line\">demo(*gl_nums, **gl_xiaoming)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"04-函数的递归\"><a href=\"#04-函数的递归\" class=\"headerlink\" title=\"04. 函数的递归\"></a>04. 函数的递归</h2><blockquote>\n<p>函数调用自身的 <strong>编程技巧</strong> 称为递归</p>\n</blockquote>\n<h3 id=\"4-1-递归函数的特点\"><a href=\"#4-1-递归函数的特点\" class=\"headerlink\" title=\"4.1 递归函数的特点\"></a>4.1 递归函数的特点</h3><p><strong>特点</strong></p>\n<ul>\n<li><strong>一个函数</strong> <strong>内部</strong> <strong>调用自己</strong><ul>\n<li>函数内部可以调用其他函数，当然在函数内部也可以调用自己</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码特点</strong></p>\n<ol>\n<li>函数内部的 <strong>代码</strong> 是相同的，只是针对 <strong>参数</strong> 不同，<strong>处理的结果不同</strong></li>\n<li>当 <strong>参数满足一个条件</strong> 时，函数不再执行<ul>\n<li><strong>这个非常重要</strong>，通常被称为递归的出口，否则 <strong>会出现死循环</strong>！</li>\n</ul>\n</li>\n</ol>\n<p>示例代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum_numbers</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 递归的出口很重要，否则会出现死循环</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sum_numbers(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">sum_numbers(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3hX5Sf\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hX5Sf.md.png\" alt=\"3hX5Sf.md.png\"></a></p>\n<h3 id=\"4-2-递归案例-——-计算数字累加\"><a href=\"#4-2-递归案例-——-计算数字累加\" class=\"headerlink\" title=\"4.2 递归案例 —— 计算数字累加\"></a>4.2 递归案例 —— 计算数字累加</h3><p><strong>需求</strong></p>\n<ol>\n<li>定义一个函数 <code>sum_numbers</code></li>\n<li>能够接收一个 <code>num</code> 的整数参数</li>\n<li>计算 1 + 2 + … num 的结果</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum_numbers</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 假设 sum_numbers 能够完成 num - 1 的累加</span></span><br><span class=\"line\">    temp = sum_numbers(num - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 函数内部的核心算法就是 两个数字的相加</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num + temp</span><br><span class=\"line\"></span><br><span class=\"line\">print(sum_numbers(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3hXo6S\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hXo6S.md.png\" alt=\"3hXo6S.md.png\"></a></p>\n<blockquote>\n<p>提示：递归是一个 <strong>编程技巧</strong>，初次接触递归会感觉有些吃力！在处理 <strong>不确定的循环条件时</strong>，格外的有用，例如：<strong>遍历整个文件目录的结构</strong></p>\n</blockquote>\n","categories":["python"],"tags":["python"]},{"title":"python 之变量进阶","url":"/posts/2939eacb/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>变量的引用</p>\n</li>\n<li><p>可变和不可变类型</p>\n</li>\n<li><p>局部变量和全局变量</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-变量的引用\"><a href=\"#01-变量的引用\" class=\"headerlink\" title=\"01. 变量的引用\"></a>01. 变量的引用</h2><blockquote>\n<ul>\n<li>变量 和 数据 都是保存在 <strong>内存</strong> 中的</li>\n<li>在 <code>Python</code> 中 <strong>函数 的 参数传递</strong> 以及 <strong>返回值</strong> 都是靠 <strong>引用</strong> 传递的</li>\n</ul>\n</blockquote>\n<h3 id=\"1-1-引用的概念\"><a href=\"#1-1-引用的概念\" class=\"headerlink\" title=\"1.1 引用的概念\"></a>1.1 引用的概念</h3><p>在 <code>Python</code> 中</p>\n<ul>\n<li><strong>变量</strong> 和 <strong>数据</strong> 是分开存储的</li>\n<li><strong>数据</strong> 保存在内存中的一个位置</li>\n<li><strong>变量</strong> 中保存着数据在内存中的地址</li>\n<li><strong>变量</strong> 中 <strong>记录数据的地址</strong>，就叫做 <strong>引用</strong></li>\n<li>使用 <code>id()</code> 函数可以查看变量中保存数据所在的 <strong>内存地址</strong></li>\n</ul>\n<blockquote>\n<p>注意：如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong></p>\n<ul>\n<li>变量 <strong>不再</strong> 对之前的数据引用</li>\n<li>变量 <strong>改为</strong> 对新赋值的数据引用</li>\n</ul>\n</blockquote>\n<h3 id=\"1-2-变量引用-的示例\"><a href=\"#1-2-变量引用-的示例\" class=\"headerlink\" title=\"1.2 变量引用 的示例\"></a>1.2 <code>变量引用</code> 的示例</h3><p>在 <code>Python</code> 中，变量的名字类似于 <strong>便签纸</strong> 贴在 <strong>数据</strong> 上</p>\n<ul>\n<li>定义一个整数变量 <code>a</code>，并且赋值为 <code>1</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a = 1</td>\n<td align=\"center\"><a href=\"https://imgchr.com/i/3hXWFI\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hXWFI.png\" alt=\"3hXWFI.png\"></a></td>\n</tr>\n</tbody></table>\n<ul>\n<li>将变量 <code>a</code> 赋值为 <code>2</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">a = 2</td>\n<td align=\"center\"><a href=\"https://imgchr.com/i/3hX2TA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hX2TA.png\" alt=\"3hX2TA.png\"></a><a href=\"https://imgchr.com/i/3hXgwd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hXgwd.png\" alt=\"3hXgwd.png\"></a></td>\n</tr>\n</tbody></table>\n<ul>\n<li>定义一个整数变量 <code>b</code>，并且将变量 <code>a</code> 的值赋值给 <code>b</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">代码</th>\n<th align=\"center\">图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">b = a</td>\n<td align=\"center\"><a href=\"https://imgchr.com/i/3hXceH\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hXceH.png\" alt=\"3hXceH.png\"></a></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>变量 <code>b</code> 是第 2 个贴在数字 <code>2</code> 上的标签</p>\n</blockquote>\n<h3 id=\"1-3-函数的参数和返回值的传递\"><a href=\"#1-3-函数的参数和返回值的传递\" class=\"headerlink\" title=\"1.3 函数的参数和返回值的传递\"></a>1.3 函数的参数和返回值的传递</h3><p>在 <code>Python</code> 中，函数的 <strong>实参</strong>/<strong>返回值</strong> 都是是靠 <strong>引用</strong> 来传递来的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"%d 在函数内的内存地址是 %x\"</span> % (num, id(num)))</span><br><span class=\"line\"></span><br><span class=\"line\">    result = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"返回值 %d 在内存中的地址是 %x\"</span> % (result, id(result)))</span><br><span class=\"line\">    print(<span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  result</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span></span><br><span class=\"line\">print(<span class=\"string\">\"调用函数前 内存地址是 %x\"</span> % id(a))</span><br><span class=\"line\"></span><br><span class=\"line\">r = test(a)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"调用函数后 实参内存地址是 %x\"</span> % id(a))</span><br><span class=\"line\">print(<span class=\"string\">\"调用函数后 返回值内存地址是 %x\"</span> % id(r))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"02-可变和不可变类型\"><a href=\"#02-可变和不可变类型\" class=\"headerlink\" title=\"02. 可变和不可变类型\"></a>02. 可变和不可变类型</h2><ul>\n<li><p><strong>不可变类型</strong>，内存中的数据不允许被修改：</p>\n<ul>\n<li>数字类型 <code>int</code>, <code>bool</code>, <code>float</code>, <code>complex</code>, <code>long(2.x)</code></li>\n<li>字符串 <code>str</code></li>\n<li>元组 <code>tuple</code></li>\n</ul>\n</li>\n<li><p><strong>可变类型</strong>，内存中的数据可以被修改：</p>\n<ul>\n<li>列表 <code>list</code></li>\n<li>字典 <code>dict</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">a = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">a = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">demo_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"定义列表后的内存地址 %d\"</span> % id(demo_list))</span><br><span class=\"line\"></span><br><span class=\"line\">demo_list.append(<span class=\"number\">999</span>)</span><br><span class=\"line\">demo_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">demo_list.remove(<span class=\"number\">2</span>)</span><br><span class=\"line\">demo_list[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"修改数据后的内存地址 %d\"</span> % id(demo_list))</span><br><span class=\"line\"></span><br><span class=\"line\">demo_dict = &#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小明\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"定义字典后的内存地址 %d\"</span> % id(demo_dict))</span><br><span class=\"line\"></span><br><span class=\"line\">demo_dict[<span class=\"string\">\"age\"</span>] = <span class=\"number\">18</span></span><br><span class=\"line\">demo_dict.pop(<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">demo_dict[<span class=\"string\">\"name\"</span>] = <span class=\"string\">\"老王\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"修改数据后的内存地址 %d\"</span> % id(demo_dict))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：字典的 <code>key</code> <strong>只能使用不可变类型的数据</strong></p>\n</blockquote>\n<p><strong>注意</strong></p>\n<ol>\n<li><strong>可变类型</strong>的数据变化，是通过 <strong>方法</strong> 来实现的</li>\n<li>如果给一个可变类型的变量，赋值了一个新的数据，<strong>引用会修改</strong><ul>\n<li>变量 <strong>不再</strong> 对之前的数据引用</li>\n<li>变量 <strong>改为</strong> 对新赋值的数据引用</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"哈希-hash\"><a href=\"#哈希-hash\" class=\"headerlink\" title=\"哈希 (hash)\"></a>哈希 <code>(hash)</code></h3><ul>\n<li><code>Python</code> 中内置有一个名字叫做 <code>hash(o)</code> 的函数<ul>\n<li>接收一个 <strong>不可变类型</strong> 的数据作为 <strong>参数</strong></li>\n<li><strong>返回</strong> 结果是一个 <strong>整数</strong></li>\n</ul>\n</li>\n<li><code>哈希</code> 是一种 <strong>算法</strong>，其作用就是提取数据的 <strong>特征码（指纹）</strong><ul>\n<li><strong>相同的内容</strong> 得到 <strong>相同的结果</strong></li>\n<li><strong>不同的内容</strong> 得到 <strong>不同的结果</strong></li>\n</ul>\n</li>\n<li>在 <code>Python</code> 中，设置字典的 <strong>键值对</strong> 时，会首先对 <code>key</code> 进行 <code>hash</code> 已决定如何在内存中保存字典的数据，以方便 <strong>后续</strong> 对字典的操作：<strong>增、删、改、查</strong><ul>\n<li>键值对的 <code>key</code> 必须是不可变类型数据</li>\n<li>键值对的 <code>value</code> 可以是任意类型的数据</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"03-局部变量和全局变量\"><a href=\"#03-局部变量和全局变量\" class=\"headerlink\" title=\"03. 局部变量和全局变量\"></a>03. 局部变量和全局变量</h2><ul>\n<li><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></li>\n<li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li>\n</ul>\n<blockquote>\n<p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p>\n</blockquote>\n<h3 id=\"3-1-局部变量\"><a href=\"#3-1-局部变量\" class=\"headerlink\" title=\"3.1 局部变量\"></a>3.1 局部变量</h3><ul>\n<li><strong>局部变量</strong> 是在 <strong>函数内部</strong> 定义的变量，<strong>只能在函数内部使用</strong></li>\n<li>函数执行结束后，<strong>函数内部的局部变量，会被系统回收</strong></li>\n<li>不同的函数，可以定义相同的名字的局部变量，但是 <strong>彼此之间</strong> 不会产生影响</li>\n</ul>\n<h4 id=\"局部变量的作用\"><a href=\"#局部变量的作用\" class=\"headerlink\" title=\"局部变量的作用\"></a>局部变量的作用</h4><ul>\n<li>在函数内部使用，<strong>临时</strong> 保存 <strong>函数内部需要使用的数据</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    num = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">    num = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"修改后 %d\"</span> % num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">demo1()</span><br><span class=\"line\">demo2()</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"over\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"局部变量的生命周期\"><a href=\"#局部变量的生命周期\" class=\"headerlink\" title=\"局部变量的生命周期\"></a>局部变量的生命周期</h4><ul>\n<li>所谓 <strong>生命周期</strong> 就是变量从 <strong>被创建</strong> 到 <strong>被系统回收</strong> 的过程</li>\n<li><strong>局部变量</strong> 在 <strong>函数执行时</strong> 才会被创建</li>\n<li><strong>函数执行结束后</strong> 局部变量 <strong>被系统回收</strong></li>\n<li><strong>局部变量在生命周期</strong> 内，可以用来存储 <strong>函数内部临时使用到的数据</strong></li>\n</ul>\n<h3 id=\"3-2-全局变量\"><a href=\"#3-2-全局变量\" class=\"headerlink\" title=\"3.2 全局变量\"></a>3.2 全局变量</h3><ul>\n<li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量，所有函数内部都可以使用这个变量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个全局变量</span></span><br><span class=\"line\">num = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">demo1()</span><br><span class=\"line\">demo2()</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"over\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：函数执行时，<strong>需要处理变量时</strong> 会：</p>\n<ol>\n<li><strong>首先</strong> 查找 <strong>函数内部</strong> 是否存在 <strong>指定名称 的局部变量</strong>，<strong>如果有，直接使用</strong></li>\n<li>如果没有，查找 <strong>函数外部</strong> 是否存在 <strong>指定名称 的全局变量</strong>，<strong>如果有，直接使用</strong></li>\n<li>如果还没有，程序报错！</li>\n</ol>\n<h4 id=\"1-函数不能直接修改-全局变量的引用\"><a href=\"#1-函数不能直接修改-全局变量的引用\" class=\"headerlink\" title=\"1) 函数不能直接修改 全局变量的引用\"></a>1) 函数不能直接修改 <code>全局变量的引用</code></h4><ul>\n<li><strong>全局变量</strong> 是在 <strong>函数外部定义</strong> 的变量（没有定义在某一个函数内），<strong>所有函数</strong> 内部 <strong>都可以使用这个变量</strong></li>\n</ul>\n<blockquote>\n<p>提示：在其他的开发语言中，大多 <strong>不推荐使用全局变量</strong> —— 可变范围太大，导致程序不好维护！</p>\n</blockquote>\n<ul>\n<li>在函数内部，可以 <strong>通过全局变量的引用获取对应的数据</strong></li>\n<li>但是，<strong>不允许直接修改全局变量的引用</strong> —— 使用赋值语句修改全局变量的值</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"demo1\"</span> + <span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class=\"line\">    num = <span class=\"number\">100</span></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"demo2\"</span> + <span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">demo1()</span><br><span class=\"line\">demo2()</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"over\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：只是在函数内部定义了一个局部变量而已，只是变量名相同 —— 在函数内部不能直接修改全局变量的值</p>\n</blockquote>\n<h4 id=\"2-在函数内部修改全局变量的值\"><a href=\"#2-在函数内部修改全局变量的值\" class=\"headerlink\" title=\"2) 在函数内部修改全局变量的值\"></a>2) 在函数内部修改全局变量的值</h4><ul>\n<li>如果在函数中需要修改全局变量，需要使用 <code>global</code> 进行声明</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"demo1\"</span> + <span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># global 关键字，告诉 Python 解释器 num 是一个全局变量</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> num</span><br><span class=\"line\">    <span class=\"comment\"># 只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class=\"line\">    num = <span class=\"number\">100</span></span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"demo2\"</span> + <span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">    print(num)</span><br><span class=\"line\"></span><br><span class=\"line\">demo1()</span><br><span class=\"line\">demo2()</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"over\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-全局变量定义的位置\"><a href=\"#3-全局变量定义的位置\" class=\"headerlink\" title=\"3) 全局变量定义的位置\"></a>3) 全局变量定义的位置</h4><ul>\n<li>为了保证所有的函数都能够正确使用到全局变量，应该 <strong>将全局变量定义在其他函数的上方</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"%d\"</span> % a)</span><br><span class=\"line\">    print(<span class=\"string\">\"%d\"</span> % b)</span><br><span class=\"line\">    print(<span class=\"string\">\"%d\"</span> % c)</span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">20</span></span><br><span class=\"line\">demo()</span><br><span class=\"line\">c = <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ul>\n<li>由于全局变量 c，是在调用函数之后，才定义的，在执行函数时，变量还没有定义，所以程序会报错！</li>\n</ul>\n<p><strong>代码结构示意图如下</strong></p>\n<p><a href=\"https://imgchr.com/i/3hXfYt\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/03/3hXfYt.png\" alt=\"3hXfYt.png\"></a></p>\n<h4 id=\"4-全局变量命名的建议\"><a href=\"#4-全局变量命名的建议\" class=\"headerlink\" title=\"4) 全局变量命名的建议\"></a>4) 全局变量命名的建议</h4><ul>\n<li>为了避免局部变量和全局变量出现混淆，在定义全局变量时，有些公司会有一些开发要求，例如：</li>\n<li>全局变量名前应该增加 <code>g_</code> 或者 <code>gl_</code> 的前缀</li>\n</ul>\n<blockquote>\n<p>提示：具体的要求格式，各公司要求可能会有些差异</p>\n</blockquote>\n","categories":["python"],"tags":["python"]},{"title":"python 之高级变量类型","url":"/posts/58c09c56/","content":"<h1 id=\"高级变量类型\"><a href=\"#高级变量类型\" class=\"headerlink\" title=\"高级变量类型\"></a>高级变量类型</h1><a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>列表</li>\n<li>元组</li>\n<li>字典</li>\n<li>字符串</li>\n<li>公共方法</li>\n<li>变量高级</li>\n</ul>\n<h3 id=\"知识点回顾\"><a href=\"#知识点回顾\" class=\"headerlink\" title=\"知识点回顾\"></a>知识点回顾</h3><ul>\n<li>Python 中数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li>\n<li>数字型<ul>\n<li>整型 (<code>int</code>)</li>\n<li>浮点型（<code>float</code>）</li>\n<li>布尔型（<code>bool</code>） <ul>\n<li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li>\n<li>假 <code>False</code> <code>0</code></li>\n</ul>\n</li>\n<li>复数型 (<code>complex</code>)<ul>\n<li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非数字型<ul>\n<li>字符串</li>\n<li>列表</li>\n<li>元组</li>\n<li>字典</li>\n</ul>\n</li>\n<li>在 <code>Python</code> 中，所有 <strong>非数字型变量</strong> 都支持以下特点：<ol>\n<li>都是一个 <strong>序列</strong> <code>sequence</code>，也可以理解为 <strong>容器</strong></li>\n<li><strong>取值</strong> <code>[]</code></li>\n<li><strong>遍历</strong> <code>for in</code></li>\n<li><strong>计算长度</strong>、<strong>最大/最小值</strong>、<strong>比较</strong>、<strong>删除</strong></li>\n<li><strong>链接</strong> <code>+</code> 和 <strong>重复</strong> <code>*</code></li>\n<li><strong>切片</strong></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"01-列表\"><a href=\"#01-列表\" class=\"headerlink\" title=\"01. 列表\"></a>01. 列表</h2><h3 id=\"1-1-列表的定义\"><a href=\"#1-1-列表的定义\" class=\"headerlink\" title=\"1.1 列表的定义\"></a>1.1 列表的定义</h3><ul>\n<li><code>List</code>（列表） 是 <code>Python</code> 中使用 <strong>最频繁</strong> 的数据类型，在其他语言中通常叫做 <strong>数组</strong></li>\n<li>专门用于存储 <strong>一串 信息</strong></li>\n<li>列表用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li>\n<li>列表的 <strong>索引</strong> 从 <code>0</code> 开始<ul>\n<li><strong>索引</strong> 就是数据在 <strong>列表</strong> 中的位置编号，<strong>索引</strong> 又可以被称为 <strong>下标</strong></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：从列表中取值时，如果 <strong>超出索引范围</strong>，程序会py报错</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">name_list &#x3D; [&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3Ryo5V\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/02/3Ryo5V.md.png\" alt=\"3Ryo5V.md.png\"></a></p>\n<h3 id=\"1-2-列表常用操作\"><a href=\"#1-2-列表常用操作\" class=\"headerlink\" title=\"1.2 列表常用操作\"></a>1.2 列表常用操作</h3><ul>\n<li>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></li>\n<li>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [1]: name_list.</span><br><span class=\"line\">name_list.append   name_list.count    name_list.insert   name_list.reverse</span><br><span class=\"line\">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span><br><span class=\"line\">name_list.copy     name_list.index    name_list.remove</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>分类</th>\n<th>关键字 / 函数 / 方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>增加</td>\n<td>列表.insert(索引, 数据)</td>\n<td>在指定位置插入数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.append(数据)</td>\n<td>在末尾追加数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.extend(列表2)</td>\n<td>将列表2 的数据追加到列表</td>\n</tr>\n<tr>\n<td>2</td>\n<td>修改</td>\n<td>列表[索引] = 数据</td>\n<td>修改指定索引的数据</td>\n</tr>\n<tr>\n<td>3</td>\n<td>删除</td>\n<td>del 列表[索引]</td>\n<td>删除指定索引的数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.remove[数据]</td>\n<td>删除第一个出现的指定数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.pop</td>\n<td>删除末尾数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.pop(索引)</td>\n<td>删除指定索引数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.clear</td>\n<td>清空列表</td>\n</tr>\n<tr>\n<td>4</td>\n<td>统计</td>\n<td>len(列表)</td>\n<td>列表长度</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.count(数据)</td>\n<td>数据在列表中出现的次数</td>\n</tr>\n<tr>\n<td>5</td>\n<td>排序</td>\n<td>列表.sort()</td>\n<td>升序排序</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.sort(reverse=True)</td>\n<td>降序排序</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>列表.reverse()</td>\n<td>逆序、反转</td>\n</tr>\n</tbody></table>\n<h4 id=\"del-关键字（科普）\"><a href=\"#del-关键字（科普）\" class=\"headerlink\" title=\"del 关键字（科普）\"></a>del 关键字（科普）</h4><ul>\n<li>使用 <code>del</code> 关键字(<code>delete</code>) 同样可以删除列表中元素</li>\n<li><code>del</code> 关键字本质上是用来 <strong>将一个变量从内存中删除的</strong></li>\n<li>如果使用 <code>del</code> 关键字将变量从内存中删除，后续的代码就不能再使用这个变量了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">del name_list[1]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在日常开发中，要从列表删除数据，建议 <strong>使用列表提供的方法</strong></p>\n</blockquote>\n<h4 id=\"关键字、函数和方法（科普）\"><a href=\"#关键字、函数和方法（科普）\" class=\"headerlink\" title=\"关键字、函数和方法（科普）\"></a>关键字、函数和方法（科普）</h4><ul>\n<li><strong>关键字</strong> 是 Python 内置的、具有特殊意义的标识符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [1]: import keyword</span><br><span class=\"line\">In [2]: print(keyword.kwlist)</span><br><span class=\"line\">In [3]: print(len(keyword.kwlist))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关键字后面不需要使用括号</p>\n</blockquote>\n<ul>\n<li><strong>函数</strong> 封装了独立功能，可以直接调用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">函数名(参数)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>函数需要死记硬背</p>\n</blockquote>\n<ul>\n<li><strong>方法</strong> 和函数类似，同样是封装了独立的功能</li>\n<li><strong>方法</strong> 需要通过 <strong>对象</strong> 来调用，表示针对这个 <strong>对象</strong> 要做的操作</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">对象.方法名(参数)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在变量后面输入 <code>.</code>，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</p>\n</blockquote>\n<h3 id=\"1-3-循环遍历\"><a href=\"#1-3-循环遍历\" class=\"headerlink\" title=\"1.3 循环遍历\"></a>1.3 循环遍历</h3><ul>\n<li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>列表</strong> 中获取数据<ul>\n<li>在 <strong>循环体内部</strong> 针对 <strong>每一个元素</strong>，执行相同的操作</li>\n</ul>\n</li>\n<li>在 <code>Python</code> 中为了提高列表的遍历效率，专门提供的 <strong>迭代 iteration 遍历</strong></li>\n<li>使用 <code>for</code> 就能够实现迭代遍历</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># for 循环内部使用的变量 in 列表</span><br><span class=\"line\">for name in name_list:</span><br><span class=\"line\"></span><br><span class=\"line\">    循环内部针对列表元素进行操作</span><br><span class=\"line\">    print(name)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3Ry5Eq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/02/3Ry5Eq.png\" alt=\"3Ry5Eq.png\"></a></p>\n<h3 id=\"1-4-应用场景\"><a href=\"#1-4-应用场景\" class=\"headerlink\" title=\"1.4 应用场景\"></a>1.4 <strong>应用场景</strong></h3><ul>\n<li>尽管 <code>Python</code> 的 <strong>列表</strong> 中可以 <strong>存储不同类型的数据</strong></li>\n<li>但是在开发中，更多的应用场景是<ol>\n<li><strong>列表</strong> 存储相同类型的数据</li>\n<li>通过 <strong>迭代遍历</strong>，在循环体内部，针对列表中的每一项元素，执行相同的操作</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"02-元组\"><a href=\"#02-元组\" class=\"headerlink\" title=\"02. 元组\"></a>02. 元组</h2><h3 id=\"2-1-元组的定义\"><a href=\"#2-1-元组的定义\" class=\"headerlink\" title=\"2.1 元组的定义\"></a>2.1 元组的定义</h3><ul>\n<li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong><ul>\n<li><strong>元组</strong> 表示多个元素组成的序列</li>\n<li><strong>元组</strong> 在 <code>Python</code> 开发中，有特定的应用场景</li>\n</ul>\n</li>\n<li>用于存储 <strong>一串 信息</strong>，<strong>数据</strong> 之间使用 <code>,</code> 分隔</li>\n<li>元组用 <code>()</code> 定义</li>\n<li>元组的 <strong>索引</strong> 从 <code>0</code> 开始<ul>\n<li><strong>索引</strong> 就是数据在 <strong>元组</strong> 中的位置编号</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info_tuple &#x3D; (&quot;zhangsan&quot;, 18, 1.75)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建空元组\"><a href=\"#创建空元组\" class=\"headerlink\" title=\"创建空元组\"></a>创建空元组</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info_tuple &#x3D; ()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组中-只包含一个元素-时，需要-在元素后面添加逗号\"><a href=\"#元组中-只包含一个元素-时，需要-在元素后面添加逗号\" class=\"headerlink\" title=\"元组中 只包含一个元素 时，需要 在元素后面添加逗号\"></a>元组中 <strong>只包含一个元素</strong> 时，需要 <strong>在元素后面添加逗号</strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info_tuple &#x3D; (50, )</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3RyWuj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/02/3RyWuj.png\" alt=\"3RyWuj.png\"></a></p>\n<h3 id=\"2-2-元组常用操作\"><a href=\"#2-2-元组常用操作\" class=\"headerlink\" title=\"2.2 元组常用操作\"></a>2.2 元组常用操作</h3><ul>\n<li>在 <code>ipython3</code> 中定义一个 <strong>元组</strong>，例如：<code>info = ()</code></li>\n<li>输入 <code>info.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>元组</strong> 能够使用的函数如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info.count  info.index</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有关 <strong>元组</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p>\n</blockquote>\n<h3 id=\"2-3-循环遍历\"><a href=\"#2-3-循环遍历\" class=\"headerlink\" title=\"2.3 循环遍历\"></a>2.3 循环遍历</h3><ul>\n<li><strong>取值</strong> 就是从 <strong>元组</strong> 中获取存储在指定位置的数据</li>\n<li><strong>遍历</strong> 就是 <strong>从头到尾</strong> <strong>依次</strong> 从 <strong>元组</strong> 中获取数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># for 循环内部使用的变量 in 元组</span><br><span class=\"line\">for item in info:</span><br><span class=\"line\"></span><br><span class=\"line\">    循环内部针对元组元素进行操作</span><br><span class=\"line\">    print(item)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>在 <code>Python</code> 中，可以使用 <code>for</code> 循环遍历所有非数字型类型的变量：<strong>列表</strong>、<strong>元组</strong>、<strong>字典</strong> 以及 <strong>字符串</strong></li>\n<li>提示：在实际开发中，除非 <strong>能够确认元组中的数据类型</strong>，否则针对元组的循环遍历需求并不是很多</li>\n</ul>\n</blockquote>\n<h3 id=\"2-4-应用场景\"><a href=\"#2-4-应用场景\" class=\"headerlink\" title=\"2.4 应用场景\"></a>2.4 应用场景</h3><ul>\n<li>尽管可以使用 <code>for in</code> 遍历 <strong>元组</strong></li>\n<li>但是在开发中，更多的应用场景是：<ul>\n<li><strong>函数的 参数 和 返回值</strong>，一个函数可以接收 <strong>任意多个参数</strong>，或者 <strong>一次返回多个数据</strong><ul>\n<li>有关 <strong>函数的参数 和 返回值</strong>，在后续 <strong>函数高级</strong> 给大家介绍</li>\n</ul>\n</li>\n<li><strong>格式字符串</strong>，格式化字符串后面的 <code>()</code> 本质上就是一个元组</li>\n<li><strong>让列表不可以被修改</strong>，以保护数据安全</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">info &#x3D; (&quot;zhangsan&quot;, 18)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;%s 的年龄是 %d&quot; % info)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组和列表之间的转换\"><a href=\"#元组和列表之间的转换\" class=\"headerlink\" title=\"元组和列表之间的转换\"></a>元组和列表之间的转换</h4><ul>\n<li>使用 <code>list</code> 函数可以把元组转换成列表</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">list(元组)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 <code>tuple</code> 函数可以把列表转换成元组</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tuple(列表)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-字典\"><a href=\"#03-字典\" class=\"headerlink\" title=\"03. 字典\"></a>03. 字典</h2><h3 id=\"3-1-字典的定义\"><a href=\"#3-1-字典的定义\" class=\"headerlink\" title=\"3.1 字典的定义\"></a>3.1 字典的定义</h3><ul>\n<li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li>\n<li>字典同样可以用来 <strong>存储多个数据</strong><ul>\n<li>通常用于存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> </li>\n</ul>\n</li>\n<li>和列表的区别<ul>\n<li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li>\n<li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li>\n</ul>\n</li>\n<li>字典用 <code>{}</code> 定义</li>\n<li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul>\n<li><strong>键</strong> <code>key</code> 是索引</li>\n<li><strong>值</strong> <code>value</code> 是数据</li>\n<li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li>\n<li><strong>键必须是唯一的</strong></li>\n<li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xiaoming &#x3D; &#123;&quot;name&quot;: &quot;小明&quot;,</span><br><span class=\"line\">            &quot;age&quot;: 18,</span><br><span class=\"line\">            &quot;gender&quot;: True,</span><br><span class=\"line\">            &quot;height&quot;: 1.75&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3Ryhbn\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/02/3Ryhbn.md.png\" alt=\"3Ryhbn.md.png\"></a></p>\n<h3 id=\"3-2-字典常用操作\"><a href=\"#3-2-字典常用操作\" class=\"headerlink\" title=\"3.2 字典常用操作\"></a>3.2 字典常用操作</h3><ul>\n<li>在 <code>ipython3</code> 中定义一个 <strong>字典</strong>，例如：<code>xiaoming = {}</code></li>\n<li>输入 <code>xiaoming.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字典</strong> 能够使用的函数如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [1]: xiaoming.</span><br><span class=\"line\">xiaoming.clear       xiaoming.items       xiaoming.setdefault</span><br><span class=\"line\">xiaoming.copy        xiaoming.keys        xiaoming.update</span><br><span class=\"line\">xiaoming.fromkeys    xiaoming.pop         xiaoming.values</span><br><span class=\"line\">xiaoming.get         xiaoming.popitem</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有关 <strong>字典</strong> 的 <strong>常用操作</strong> 可以参照上图练习</p>\n</blockquote>\n<h3 id=\"3-3-循环遍历\"><a href=\"#3-3-循环遍历\" class=\"headerlink\" title=\"3.3 循环遍历\"></a>3.3 循环遍历</h3><ul>\n<li><strong>遍历</strong> 就是 <strong>依次</strong> 从 <strong>字典</strong> 中获取所有键值对</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># for 循环内部使用的 &#96;key 的变量&#96; in 字典</span><br><span class=\"line\">for k in xiaoming:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&quot;%s: %s&quot; % (k, xiaoming[k]))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的循环遍历需求并不是很多</p>\n</blockquote>\n<h3 id=\"3-4-应用场景\"><a href=\"#3-4-应用场景\" class=\"headerlink\" title=\"3.4 应用场景\"></a>3.4 <strong>应用场景</strong></h3><ul>\n<li>尽管可以使用 <code>for in</code> 遍历 <strong>字典</strong></li>\n<li>但是在开发中，更多的应用场景是：<ul>\n<li>使用 <strong>多个键值对</strong>，存储 <strong>描述一个 <code>物体</code> 的相关信息</strong> —— 描述更复杂的数据信息</li>\n<li>将 <strong>多个字典</strong> 放在 <strong>一个列表</strong> 中，再进行遍历，在循环体内部针对每一个字典进行 <strong>相同的处理</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">card_list &#x3D; [&#123;&quot;name&quot;: &quot;张三&quot;,</span><br><span class=\"line\">              &quot;qq&quot;: &quot;12345&quot;,</span><br><span class=\"line\">              &quot;phone&quot;: &quot;110&quot;&#125;,</span><br><span class=\"line\">             &#123;&quot;name&quot;: &quot;李四&quot;,</span><br><span class=\"line\">              &quot;qq&quot;: &quot;54321&quot;,</span><br><span class=\"line\">              &quot;phone&quot;: &quot;10086&quot;&#125;</span><br><span class=\"line\">             ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"04-字符串\"><a href=\"#04-字符串\" class=\"headerlink\" title=\"04. 字符串\"></a>04. 字符串</h2><h3 id=\"4-1-字符串的定义\"><a href=\"#4-1-字符串的定义\" class=\"headerlink\" title=\"4.1 字符串的定义\"></a>4.1 字符串的定义</h3><ul>\n<li><strong>字符串</strong> 就是 <strong>一串字符</strong>，是编程语言中表示文本的数据类型</li>\n<li>在 Python 中可以使用 *<em>一对双引号 “”   或者 一对单引号  ‘’  *</em> 定义一个字符串<ul>\n<li>虽然可以使用 <code>\\&quot;</code> 或者 <code>\\&#39;</code> 做字符串的转义，但是在实际开发中：<ul>\n<li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li>\n<li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>可以使用 <strong>索引</strong> 获取一个字符串中 <strong>指定位置的字符</strong>，索引计数从 <strong>0</strong> 开始</li>\n<li>也可以使用 <code>for</code> <strong>循环遍历</strong> 字符串中每一个字符</li>\n</ul>\n<blockquote>\n<p>大多数编程语言都是用 <code>&quot;</code> 来定义字符串</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">string &#x3D; &quot;Hello Python&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for c in string:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3Ryggg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/02/3Ryggg.png\" alt=\"3Ryggg.png\"></a></p>\n<h3 id=\"4-2-字符串的常用操作\"><a href=\"#4-2-字符串的常用操作\" class=\"headerlink\" title=\"4.2 字符串的常用操作\"></a>4.2 字符串的常用操作</h3><ul>\n<li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li>\n<li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [1]: hello_str.</span><br><span class=\"line\">hello_str.capitalize    hello_str.isidentifier  hello_str.rindex</span><br><span class=\"line\">hello_str.casefold      hello_str.islower       hello_str.rjust</span><br><span class=\"line\">hello_str.center        hello_str.isnumeric     hello_str.rpartition</span><br><span class=\"line\">hello_str.count         hello_str.isprintable   hello_str.rsplit</span><br><span class=\"line\">hello_str.encode        hello_str.isspace       hello_str.rstrip</span><br><span class=\"line\">hello_str.endswith      hello_str.istitle       hello_str.split</span><br><span class=\"line\">hello_str.expandtabs    hello_str.isupper       hello_str.splitlines</span><br><span class=\"line\">hello_str.find          hello_str.join          hello_str.startswith</span><br><span class=\"line\">hello_str.format        hello_str.ljust         hello_str.strip</span><br><span class=\"line\">hello_str.format_map    hello_str.lower         hello_str.swapcase</span><br><span class=\"line\">hello_str.index         hello_str.lstrip        hello_str.title</span><br><span class=\"line\">hello_str.isalnum       hello_str.maketrans     hello_str.translate</span><br><span class=\"line\">hello_str.isalpha       hello_str.partition     hello_str.upper</span><br><span class=\"line\">hello_str.isdecimal     hello_str.replace       hello_str.zfill</span><br><span class=\"line\">hello_str.isdigit       hello_str.rfind</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p>\n</blockquote>\n<h4 id=\"1-判断类型-9\"><a href=\"#1-判断类型-9\" class=\"headerlink\" title=\"1) 判断类型 - 9\"></a>1) 判断类型 - 9</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.isspace()</td>\n<td>如果 string 中只包含空格，则返回 True</td>\n</tr>\n<tr>\n<td>string.isalnum()</td>\n<td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td>\n</tr>\n<tr>\n<td>string.isalpha()</td>\n<td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td>\n</tr>\n<tr>\n<td>string.isdecimal()</td>\n<td>如果 string 只包含数字则返回 True，<code>全角数字</code></td>\n</tr>\n<tr>\n<td>string.isdigit()</td>\n<td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\\u00b2</code></td>\n</tr>\n<tr>\n<td>string.isnumeric()</td>\n<td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td>\n</tr>\n<tr>\n<td>string.istitle()</td>\n<td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td>\n</tr>\n<tr>\n<td>string.islower()</td>\n<td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td>\n</tr>\n<tr>\n<td>string.isupper()</td>\n<td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-查找和替换-7\"><a href=\"#2-查找和替换-7\" class=\"headerlink\" title=\"2) 查找和替换 - 7\"></a>2) 查找和替换 - 7</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.startswith(str)</td>\n<td>检查字符串是否是以 str 开头，是则返回 True</td>\n</tr>\n<tr>\n<td>string.endswith(str)</td>\n<td>检查字符串是否是以 str 结束，是则返回 True</td>\n</tr>\n<tr>\n<td>string.find(str, start=0, end=len(string))</td>\n<td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td>\n</tr>\n<tr>\n<td>string.rfind(str, start=0, end=len(string))</td>\n<td>类似于 find()，不过是从右边开始查找</td>\n</tr>\n<tr>\n<td>string.index(str, start=0, end=len(string))</td>\n<td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td>\n</tr>\n<tr>\n<td>string.rindex(str, start=0, end=len(string))</td>\n<td>类似于 index()，不过是从右边开始</td>\n</tr>\n<tr>\n<td>string.replace(old_str, new_str, num=string.count(old))</td>\n<td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-大小写转换-5\"><a href=\"#3-大小写转换-5\" class=\"headerlink\" title=\"3) 大小写转换 - 5\"></a>3) 大小写转换 - 5</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.capitalize()</td>\n<td>把字符串的第一个字符大写</td>\n</tr>\n<tr>\n<td>string.title()</td>\n<td>把字符串的每个单词首字母大写</td>\n</tr>\n<tr>\n<td>string.lower()</td>\n<td>转换 string 中所有大写字符为小写</td>\n</tr>\n<tr>\n<td>string.upper()</td>\n<td>转换 string 中的小写字母为大写</td>\n</tr>\n<tr>\n<td>string.swapcase()</td>\n<td>翻转 string 中的大小写</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-文本对齐-3\"><a href=\"#4-文本对齐-3\" class=\"headerlink\" title=\"4) 文本对齐 - 3\"></a>4) 文本对齐 - 3</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.ljust(width)</td>\n<td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td>\n</tr>\n<tr>\n<td>string.rjust(width)</td>\n<td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td>\n</tr>\n<tr>\n<td>string.center(width)</td>\n<td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-去除空白字符-3\"><a href=\"#5-去除空白字符-3\" class=\"headerlink\" title=\"5) 去除空白字符 - 3\"></a>5) 去除空白字符 - 3</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.lstrip()</td>\n<td>截掉 string 左边（开始）的空白字符</td>\n</tr>\n<tr>\n<td>string.rstrip()</td>\n<td>截掉 string 右边（末尾）的空白字符</td>\n</tr>\n<tr>\n<td>string.strip()</td>\n<td>截掉 string 左右两边的空白字符</td>\n</tr>\n</tbody></table>\n<h4 id=\"6-拆分和连接-5\"><a href=\"#6-拆分和连接-5\" class=\"headerlink\" title=\"6) 拆分和连接 - 5\"></a>6) 拆分和连接 - 5</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.partition(str)</td>\n<td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td>\n</tr>\n<tr>\n<td>string.rpartition(str)</td>\n<td>类似于 partition() 方法，不过是从右边开始查找</td>\n</tr>\n<tr>\n<td>string.split(str=””, num)</td>\n<td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\\r’, ‘\\t’, ‘\\n’ 和空格</td>\n</tr>\n<tr>\n<td>string.splitlines()</td>\n<td>按照行(‘\\r’, ‘\\n’, ‘\\r\\n’)分隔，返回一个包含各行作为元素的列表</td>\n</tr>\n<tr>\n<td>string.join(seq)</td>\n<td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-字符串的切片\"><a href=\"#4-3-字符串的切片\" class=\"headerlink\" title=\"4.3 字符串的切片\"></a>4.3 字符串的切片</h3><ul>\n<li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul>\n<li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li>\n<li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li>\n<li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3Ry7CT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/02/3Ry7CT.png\" alt=\"3Ry7CT.png\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">字符串[开始索引:结束索引:步长]</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：</p>\n<ol>\n<li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul>\n<li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li>\n</ul>\n</li>\n<li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li>\n<li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li>\n<li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li>\n</ol>\n<h4 id=\"索引的顺序和倒序\"><a href=\"#索引的顺序和倒序\" class=\"headerlink\" title=\"索引的顺序和倒序\"></a>索引的顺序和倒序</h4><ul>\n<li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li>\n<li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul>\n<li>最右边的索引值是 <strong>-1</strong>，依次递减</li>\n</ul>\n</li>\n</ul>\n<p><strong>演练需求</strong></p>\n<ul>\n<li><ol>\n<li>截取从 2 ~ 5 位置 的字符串</li>\n</ol>\n</li>\n<li><ol>\n<li>截取从 2 ~ <code>末尾</code> 的字符串</li>\n</ol>\n</li>\n<li><ol>\n<li>截取从 <code>开始</code> ~ 5 位置 的字符串</li>\n</ol>\n</li>\n<li><ol>\n<li>截取完整的字符串</li>\n</ol>\n</li>\n<li><ol>\n<li>从开始位置，每隔一个字符截取字符串</li>\n</ol>\n</li>\n<li><ol>\n<li>从索引 1 开始，每隔一个取一个</li>\n</ol>\n</li>\n<li><ol>\n<li>截取从 2 ~ <code>末尾 - 1</code> 的字符串</li>\n</ol>\n</li>\n<li><ol>\n<li>截取字符串末尾两个字符</li>\n</ol>\n</li>\n<li><ol>\n<li>字符串的逆序（面试题）</li>\n</ol>\n</li>\n</ul>\n<p><strong>答案</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">num_str &#x3D; &quot;0123456789&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 1. 截取从 2 ~ 5 位置 的字符串</span><br><span class=\"line\">print(num_str[2:6])</span><br><span class=\"line\"></span><br><span class=\"line\"># 2. 截取从 2 ~ &#96;末尾&#96; 的字符串</span><br><span class=\"line\">print(num_str[2:])</span><br><span class=\"line\"></span><br><span class=\"line\"># 3. 截取从 &#96;开始&#96; ~ 5 位置 的字符串</span><br><span class=\"line\">print(num_str[:6])</span><br><span class=\"line\"></span><br><span class=\"line\"># 4. 截取完整的字符串</span><br><span class=\"line\">print(num_str[:])</span><br><span class=\"line\"></span><br><span class=\"line\"># 5. 从开始位置，每隔一个字符截取字符串</span><br><span class=\"line\">print(num_str[::2])</span><br><span class=\"line\"></span><br><span class=\"line\"># 6. 从索引 1 开始，每隔一个取一个</span><br><span class=\"line\">print(num_str[1::2])</span><br><span class=\"line\"></span><br><span class=\"line\"># 倒序切片</span><br><span class=\"line\"># -1 表示倒数第一个字符</span><br><span class=\"line\">print(num_str[-1])</span><br><span class=\"line\"></span><br><span class=\"line\"># 7. 截取从 2 ~ &#96;末尾 - 1&#96; 的字符串</span><br><span class=\"line\">print(num_str[2:-1])</span><br><span class=\"line\"></span><br><span class=\"line\"># 8. 截取字符串末尾两个字符</span><br><span class=\"line\">print(num_str[-2:])</span><br><span class=\"line\"></span><br><span class=\"line\"># 9. 字符串的逆序（面试题）</span><br><span class=\"line\">print(num_str[::-1])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"05-公共方法\"><a href=\"#05-公共方法\" class=\"headerlink\" title=\"05. 公共方法\"></a>05. 公共方法</h2><h3 id=\"5-1-Python-内置函数\"><a href=\"#5-1-Python-内置函数\" class=\"headerlink\" title=\"5.1 Python 内置函数\"></a>5.1 Python 内置函数</h3><p>Python 包含了以下内置函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>len(item)</td>\n<td>计算容器中元素个数</td>\n<td></td>\n</tr>\n<tr>\n<td>del(item)</td>\n<td>删除变量</td>\n<td>del 有两种方式</td>\n</tr>\n<tr>\n<td>max(item)</td>\n<td>返回容器中元素最大值</td>\n<td>如果是字典，只针对 key 比较</td>\n</tr>\n<tr>\n<td>min(item)</td>\n<td>返回容器中元素最小值</td>\n<td>如果是字典，只针对 key 比较</td>\n</tr>\n<tr>\n<td>cmp(item1, item2)</td>\n<td>比较两个值，-1 小于/0 相等/1 大于</td>\n<td>Python 3.x 取消了 cmp 函数</td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong></p>\n<ul>\n<li><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</li>\n</ul>\n<h3 id=\"5-2-切片\"><a href=\"#5-2-切片\" class=\"headerlink\" title=\"5.2 切片\"></a>5.2 切片</h3><table>\n<thead>\n<tr>\n<th align=\"center\">描述</th>\n<th>Python 表达式</th>\n<th>结果</th>\n<th>支持的数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">切片</td>\n<td>“0123456789”[::-2]</td>\n<td>“97531”</td>\n<td>字符串、列表、元组</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li>\n<li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li>\n<li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li>\n</ul>\n<h3 id=\"5-3-运算符\"><a href=\"#5-3-运算符\" class=\"headerlink\" title=\"5.3 运算符\"></a>5.3 运算符</h3><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th>Python 表达式</th>\n<th>结果</th>\n<th>描述</th>\n<th>支持的数据类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td>[1, 2] + [3, 4]</td>\n<td>[1, 2, 3, 4]</td>\n<td>合并</td>\n<td>字符串、列表、元组</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td>[“Hi!”] * 4</td>\n<td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td>重复</td>\n<td>字符串、列表、元组</td>\n</tr>\n<tr>\n<td align=\"center\">in</td>\n<td>3 in (1, 2, 3)</td>\n<td>True</td>\n<td>元素是否存在</td>\n<td>字符串、列表、元组、字典</td>\n</tr>\n<tr>\n<td align=\"center\">not in</td>\n<td>4 not in (1, 2, 3)</td>\n<td>True</td>\n<td>元素是否不存在</td>\n<td>字符串、列表、元组、字典</td>\n</tr>\n<tr>\n<td align=\"center\">&gt; &gt;= == &lt; &lt;=</td>\n<td>(1, 2, 3) &lt; (2, 2, 3)</td>\n<td>True</td>\n<td>元素比较</td>\n<td>字符串、列表、元组</td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong></p>\n<ul>\n<li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li>\n<li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li>\n</ul>\n<h4 id=\"成员运算符\"><a href=\"#成员运算符\" class=\"headerlink\" title=\"成员运算符\"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>in</td>\n<td>如果在指定的序列中找到值返回 True，否则返回 False</td>\n<td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td>\n</tr>\n<tr>\n<td>not in</td>\n<td>如果在指定的序列中没有找到值返回 True，否则返回 False</td>\n<td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td>\n</tr>\n</tbody></table>\n<p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p>\n<h3 id=\"5-4-完整的-for-循环语法\"><a href=\"#5-4-完整的-for-循环语法\" class=\"headerlink\" title=\"5.4 完整的 for 循环语法\"></a>5.4 完整的 for 循环语法</h3><ul>\n<li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for 变量 in 集合:</span><br><span class=\"line\">    </span><br><span class=\"line\">    循环体代码</span><br><span class=\"line\">else:</span><br><span class=\"line\">    没有通过 break 退出循环，循环结束后，会执行的代码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><ul>\n<li>在 <strong>迭代遍历</strong> 嵌套的数据类型时，例如 <strong>一个列表包含了多个字典</strong></li>\n<li>需求：要判断 某一个字典中 是否存在 指定的 值 <ul>\n<li>如果 <strong>存在</strong>，提示并且退出循环</li>\n<li>如果 <strong>不存在</strong>，在 <strong>循环整体结束</strong> 后，希望 <strong>得到一个统一的提示</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">students &#x3D; [</span><br><span class=\"line\">    &#123;&quot;name&quot;: &quot;阿土&quot;,</span><br><span class=\"line\">     &quot;age&quot;: 20,</span><br><span class=\"line\">     &quot;gender&quot;: True,</span><br><span class=\"line\">     &quot;height&quot;: 1.7,</span><br><span class=\"line\">     &quot;weight&quot;: 75.0&#125;,</span><br><span class=\"line\">    &#123;&quot;name&quot;: &quot;小美&quot;,</span><br><span class=\"line\">     &quot;age&quot;: 19,</span><br><span class=\"line\">     &quot;gender&quot;: False,</span><br><span class=\"line\">     &quot;height&quot;: 1.6,</span><br><span class=\"line\">     &quot;weight&quot;: 45.0&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">find_name &#x3D; &quot;阿土&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for stu_dict in students:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(stu_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 判断当前遍历的字典中姓名是否为find_name</span><br><span class=\"line\">    if stu_dict[&quot;name&quot;] &#x3D;&#x3D; find_name:</span><br><span class=\"line\">        print(&quot;找到了&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;没有找到&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;循环结束&quot;)</span><br></pre></td></tr></table></figure>","categories":["python"],"tags":["python"]},{"title":"vue 添加初始化动画","url":"/posts/d43325e4/","content":"<p> 这个蛮简单的，蛮写一下<br>思路：在index.html文件的body中写一个id为Loading的div，然后再created生命周期的时候判断这个div是否存在，存在的话就移除。（建议用css写动画，减少资源占用） </p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">created: function()&#123;</span><br><span class=\"line\">        document.body.removeChild(document.getElementById(&#39;Loading&#39;));</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>html内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--加载中的动画--&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;Loading&quot;&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;loader-inner ball-beat&quot;&gt;</span><br><span class=\"line\">          &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">          &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">          &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 附小动画样式代码： </p>\n<pre><code>&lt;!-- 加载动画样式控制 --&gt;\n&lt;style type=&quot;text/css&quot;&gt;\n    #Loading {\n        top:50%;\n        left:50%;\n        position: absolute;\n        -webkit-transform: translateY(-50%)  translateX(-50%);\n        transform: translateY(-50%)  translateX(-50%);\n        z-index:100;\n    }\n    @-webkit-keyframes ball-beat {\n        50% {\n            opacity: 0.2;\n            -webkit-transform: scale(0.75);\n            transform: scale(0.75); }\n            100% {\n            opacity: 1;\n            -webkit-transform: scale(1);\n            transform: scale(1); } }\n\n    @keyframes ball-beat {\n        50% {\n            opacity: 0.2;\n            -webkit-transform: scale(0.75);\n            transform: scale(0.75); }\n\n        100% {\n            opacity: 1;\n            -webkit-transform: scale(1);\n            transform: scale(1); } }\n\n    .ball-beat &gt; div {\n        background-color: #5D9BFF;\n        width: 15px;\n        height: 15px;\n        border-radius: 100% !important;\n        margin: 2px;\n        -webkit-animation-fill-mode: both;\n        animation-fill-mode: both;\n        display: inline-block;\n        -webkit-animation: ball-beat 0.7s 0s infinite linear;\n        animation: ball-beat 0.7s 0s infinite linear; }\n    .ball-beat &gt; div:nth-child(2n-1) {\n        -webkit-animation-delay: 0.35s !important;\n        animation-delay: 0.35s !important; }\n&lt;/style&gt;</code></pre>","categories":["vue"],"tags":["vue"]},{"title":"python 之 函数","url":"/posts/29d3f99b/","content":"<h1 id=\"函数基础\"><a href=\"#函数基础\" class=\"headerlink\" title=\"函数基础\"></a>函数基础</h1><a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>函数的快速体验</li>\n<li>函数的基本使用</li>\n<li>函数的参数</li>\n<li>函数的返回值</li>\n<li>函数的嵌套调用</li>\n<li>在模块中定义函数</li>\n</ul>\n<h2 id=\"01-函数的快速体验\"><a href=\"#01-函数的快速体验\" class=\"headerlink\" title=\"01. 函数的快速体验\"></a>01. 函数的快速体验</h2><h3 id=\"1-1-快速体验\"><a href=\"#1-1-快速体验\" class=\"headerlink\" title=\"1.1 快速体验\"></a>1.1 快速体验</h3><ul>\n<li>所谓<strong>函数</strong>，就是把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li>\n<li>函数的使用包含两个步骤：<ol>\n<li>定义函数 —— <strong>封装</strong> 独立的功能</li>\n<li>调用函数 —— 享受 <strong>封装</strong> 的成果</li>\n</ol>\n</li>\n<li><strong>函数的作用</strong>，在开发程序时，使用函数可以提高编写的效率以及代码的 <strong>重用</strong></li>\n</ul>\n<p><strong>演练步骤</strong></p>\n<ol>\n<li>新建 <code>04_函数</code> 项目</li>\n<li>复制之前完成的 <strong>乘法表</strong> 文件</li>\n<li>修改文件，增加函数定义 <code>multiple_table():</code></li>\n<li>新建另外一个文件，使用 <code>import</code> 导入并且调用函数</li>\n</ol>\n<h2 id=\"02-函数基本使用\"><a href=\"#02-函数基本使用\" class=\"headerlink\" title=\"02. 函数基本使用\"></a>02. 函数基本使用</h2><h3 id=\"2-1-函数的定义\"><a href=\"#2-1-函数的定义\" class=\"headerlink\" title=\"2.1 函数的定义\"></a>2.1 函数的定义</h3><p>定义函数的格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名<span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    函数封装的代码</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>def</code> 是英文 <code>define</code> 的缩写</li>\n<li><strong>函数名称</strong> 应该能够表达 <strong>函数封装代码</strong> 的功能，方便后续的调用</li>\n<li><strong>函数名称</strong> 的命名应该 <strong>符合</strong> <strong>标识符的命名规则</strong><ul>\n<li>可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li>\n<li><strong>不能以数字开头</strong></li>\n<li><strong>不能与关键字重名</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-2-函数调用\"><a href=\"#2-2-函数调用\" class=\"headerlink\" title=\"2.2 函数调用\"></a>2.2 函数调用</h3><p>调用函数很简单的，通过 <code>函数名()</code> 即可完成对函数的调用</p>\n<h3 id=\"2-3-第一个函数演练\"><a href=\"#2-3-第一个函数演练\" class=\"headerlink\" title=\"2.3 第一个函数演练\"></a>2.3 第一个函数演练</h3><p><strong>需求</strong></p>\n<ul>\n<li><ol>\n<li>编写一个打招呼 <code>say_hello</code> 的函数，封装三行打招呼的代码</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在函数下方调用打招呼的代码</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"小明\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解释器知道这里定义了一个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"hello 1\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"hello 2\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"hello 3\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(name)</span><br><span class=\"line\"><span class=\"comment\"># 只有在调用函数时，之前定义的函数才会被执行</span></span><br><span class=\"line\"><span class=\"comment\"># 函数执行完成之后，会重新回到之前的程序中，继续执行后续的代码</span></span><br><span class=\"line\">say_hello()</span><br><span class=\"line\"></span><br><span class=\"line\">print(name)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>用 <strong>单步执行 F8 和 F7</strong> 观察以下代码的执行过程</p>\n</blockquote>\n<ul>\n<li>定义好函数之后，只表示这个函数封装了一段代码而已</li>\n<li>如果不主动调用函数，函数是不会主动执行的</li>\n</ul>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><ul>\n<li><p>能否将 <strong>函数调用</strong> 放在 <strong>函数定义</strong> 的上方？</p>\n<ul>\n<li>不能！</li>\n<li>因为在 <strong>使用函数名</strong> 调用函数之前，必须要保证 <code>Python</code> 已经知道函数的存在</li>\n<li>否则控制台会提示 <code>NameError: name &#39;say_hello&#39; is not defined</code> (<strong>名称错误：say_hello 这个名字没有被定义</strong>)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-PyCharm-的调试工具\"><a href=\"#2-4-PyCharm-的调试工具\" class=\"headerlink\" title=\"2.4 PyCharm 的调试工具\"></a>2.4 PyCharm 的调试工具</h3><ul>\n<li><strong>F8 Step Over</strong> 可以单步执行代码，会把函数调用看作是一行代码直接执行</li>\n<li><strong>F7 Step Into</strong> 可以单步执行代码，如果是函数，会进入函数内部 </li>\n</ul>\n<h3 id=\"2-5-函数的文档注释\"><a href=\"#2-5-函数的文档注释\" class=\"headerlink\" title=\"2.5 函数的文档注释\"></a>2.5 函数的文档注释</h3><ul>\n<li>在开发中，如果希望给函数添加注释，应该在 <strong>定义函数</strong> 的下方，使用 <strong>连续的三对引号</strong></li>\n<li>在 <strong>连续的三对引号</strong> 之间编写对函数的说明文字</li>\n<li>在 <strong>函数调用</strong> 位置，使用快捷键 <code>CTRL + Q</code> 可以查看函数的说明信息</li>\n</ul>\n<blockquote>\n<p>注意：因为 <strong>函数体相对比较独立</strong>，<strong>函数定义的上方</strong>，应该和其他代码（包括注释）保留 <strong>两行空行</strong></p>\n</blockquote>\n<h2 id=\"03-函数的参数\"><a href=\"#03-函数的参数\" class=\"headerlink\" title=\"03. 函数的参数\"></a>03. 函数的参数</h2><p><strong>演练需求</strong></p>\n<ol>\n<li>开发一个 <code>sum_2_num</code> 的函数</li>\n<li>函数能够实现 <strong>两个数字的求和</strong> 功能</li>\n</ol>\n<p>演练代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum_2_num</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    num1 = <span class=\"number\">10</span></span><br><span class=\"line\">    num2 = <span class=\"number\">20</span></span><br><span class=\"line\">    result = num1 + num2</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"%d + %d = %d\"</span> % (num1, num2, result))</span><br><span class=\"line\"></span><br><span class=\"line\">sum_2_num()</span><br></pre></td></tr></table></figure>\n\n<p><strong>思考一下存在什么问题</strong></p>\n<blockquote>\n<p>函数只能处理 <strong>固定数值</strong> 的相加</p>\n</blockquote>\n<p><strong>如何解决？</strong></p>\n<ul>\n<li>如果能够把需要计算的数字，在调用函数时，传递到函数内部就好了！</li>\n</ul>\n<h3 id=\"3-1-函数参数的使用\"><a href=\"#3-1-函数参数的使用\" class=\"headerlink\" title=\"3.1 函数参数的使用\"></a>3.1 函数参数的使用</h3><ul>\n<li>在函数名的后面的小括号内部填写 <strong>参数</strong></li>\n<li>多个参数之间使用 <code>,</code> 分隔</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum_2_num</span><span class=\"params\">(num1, num2)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result = num1 + num2</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"%d + %d = %d\"</span> % (num1, num2, result))</span><br><span class=\"line\"></span><br><span class=\"line\">sum_2_num(<span class=\"number\">50</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-参数的作用\"><a href=\"#3-2-参数的作用\" class=\"headerlink\" title=\"3.2 参数的作用\"></a>3.2 参数的作用</h3><ul>\n<li><strong>函数</strong>，把 <strong>具有独立功能的代码块</strong> 组织为一个小模块，在需要的时候 <strong>调用</strong></li>\n<li><strong>函数的参数</strong>，增加函数的 <strong>通用性</strong>，针对 <strong>相同的数据处理逻辑</strong>，能够 <strong>适应更多的数据</strong><ol>\n<li>在函数 <strong>内部</strong>，把参数当做 <strong>变量</strong> 使用，进行需要的数据处理</li>\n<li>函数调用时，按照函数定义的<strong>参数顺序</strong>，把 <strong>希望在函数内部处理的数据</strong>，<strong>通过参数</strong> 传递</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-3-形参和实参\"><a href=\"#3-3-形参和实参\" class=\"headerlink\" title=\"3.3 形参和实参\"></a>3.3 形参和实参</h3><ul>\n<li><strong>形参</strong>：<strong>定义</strong> 函数时，小括号中的参数，是用来接收参数用的，在函数内部 <strong>作为变量使用</strong></li>\n<li><strong>实参</strong>：<strong>调用</strong> 函数时，小括号中的参数，是用来把数据传递到 <strong>函数内部</strong> 用的</li>\n</ul>\n<h2 id=\"04-函数的返回值\"><a href=\"#04-函数的返回值\" class=\"headerlink\" title=\"04. 函数的返回值\"></a>04. 函数的返回值</h2><ul>\n<li>在程序开发中，有时候，会希望 <strong>一个函数执行结束后，告诉调用者一个结果</strong>，以便调用者针对具体的结果做后续的处理</li>\n<li><strong>返回值</strong> 是函数 <strong>完成工作</strong>后，<strong>最后</strong> 给调用者的 <strong>一个结果</strong></li>\n<li>在函数中使用 <code>return</code> 关键字可以返回结果</li>\n<li>调用函数一方，可以 <strong>使用变量</strong> 来 <strong>接收</strong> 函数的返回结果</li>\n</ul>\n<blockquote>\n<p>注意：<code>return</code> 表示返回，后续的代码都不会被执行</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum_2_num</span><span class=\"params\">(num1, num2)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"对两个数字的求和\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用函数，并使用 result 变量接收计算结果</span></span><br><span class=\"line\">result = sum_2_num(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"计算结果是 %d\"</span> % result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"05-函数的嵌套调用\"><a href=\"#05-函数的嵌套调用\" class=\"headerlink\" title=\"05. 函数的嵌套调用\"></a>05. 函数的嵌套调用</h2><ul>\n<li>一个函数里面 <strong>又调用</strong> 了 <strong>另外一个函数</strong>，这就是 <strong>函数嵌套调用</strong></li>\n<li>如果函数 <code>test2</code> 中，调用了另外一个函数 <code>test1</code><ul>\n<li>那么执行到调用 <code>test1</code> 函数时，会先把函数 <code>test1</code> 中的任务都执行完</li>\n<li>才会回到 <code>test2</code> 中调用函数 <code>test1</code> 的位置，继续执行后续的代码</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"*\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"test 1\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"*\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"test 2\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    test1()</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"-\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">test2()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数嵌套的演练-——-打印分隔线\"><a href=\"#函数嵌套的演练-——-打印分隔线\" class=\"headerlink\" title=\"函数嵌套的演练 —— 打印分隔线\"></a>函数嵌套的演练 —— 打印分隔线</h3><blockquote>\n<p>体会一下工作中 <strong>需求是多变</strong> 的</p>\n</blockquote>\n<p><strong>需求 1</strong></p>\n<ul>\n<li>定义一个 <code>print_line</code> 函数能够打印 <code>*</code> 组成的 <strong>一条分隔线</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_line</span><span class=\"params\">(char)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"*\"</span> * <span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>需求 2</strong></p>\n<ul>\n<li>定义一个函数能够打印 <strong>由任意字符组成</strong> 的分隔线</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_line</span><span class=\"params\">(char)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(char * <span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>需求 3</strong></p>\n<ul>\n<li>定义一个函数能够打印 <strong>任意重复次数</strong> 的分隔线</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_line</span><span class=\"params\">(char, times)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(char * times)</span><br></pre></td></tr></table></figure>\n\n<p><strong>需求 4</strong></p>\n<ul>\n<li>定义一个函数能够打印 <strong>5 行</strong> 的分隔线，分隔线要求符合<strong>需求 3</strong></li>\n</ul>\n<blockquote>\n<p>提示：工作中针对需求的变化，应该冷静思考，<strong>不要轻易修改之前已经完成的，能够正常执行的函数</strong>！</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_line</span><span class=\"params\">(char, times)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(char * times)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_lines</span><span class=\"params\">(char, times)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    row = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> row &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">        print_line(char, times)</span><br><span class=\"line\"></span><br><span class=\"line\">        row += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"06-使用模块中的函数\"><a href=\"#06-使用模块中的函数\" class=\"headerlink\" title=\"06. 使用模块中的函数\"></a>06. 使用模块中的函数</h2><blockquote>\n<p><strong>模块是 Python 程序架构的一个核心概念</strong></p>\n</blockquote>\n<ul>\n<li><strong>模块</strong> 就好比是 <strong>工具包</strong>，要想使用这个工具包中的工具，就需要 <strong>导入 import</strong> 这个模块</li>\n<li>每一个以扩展名 <code>py</code> 结尾的 <code>Python</code> 源代码文件都是一个 <strong>模块</strong></li>\n<li>在模块中定义的 <strong>全局变量</strong> 、 <strong>函数</strong> 都是模块能够提供给外界直接使用的工具</li>\n</ul>\n<h3 id=\"6-1-第一个模块体验\"><a href=\"#6-1-第一个模块体验\" class=\"headerlink\" title=\"6.1 第一个模块体验\"></a>6.1 第一个模块体验</h3><p><strong>步骤</strong></p>\n<ul>\n<li>新建 <code>hm_10_分隔线模块.py</code><ul>\n<li>复制 <code>hm_09_打印多条分隔线.py</code> 中的内容，<strong>最后一行 <code>print</code> 代码除外</strong></li>\n<li>增加一个字符串变量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"黑马程序员\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建 <code>hm_10_体验模块.py</code> 文件，并且编写以下代码：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hm_10_分隔线模块</span><br><span class=\"line\"></span><br><span class=\"line\">hm_10_分隔线模块.print_line(<span class=\"string\">\"-\"</span>, <span class=\"number\">80</span>)</span><br><span class=\"line\">print(hm_10_分隔线模块.name)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"体验小结\"><a href=\"#体验小结\" class=\"headerlink\" title=\"体验小结\"></a>体验小结</h4><ul>\n<li>可以 <strong>在一个 Python 文件</strong> 中 <strong>定义 变量 或者 函数</strong></li>\n<li>然后在 <strong>另外一个文件中</strong> 使用 <code>import</code> 导入这个模块</li>\n<li>导入之后，就可以使用 <code>模块名.变量</code> / <code>模块名.函数</code> 的方式，使用这个模块中定义的变量或者函数</li>\n</ul>\n<blockquote>\n<p><strong>模块</strong>可以让 <strong>曾经编写过的代码</strong> 方便的被 <strong>复用</strong>！</p>\n</blockquote>\n<h3 id=\"6-2-模块名也是一个标识符\"><a href=\"#6-2-模块名也是一个标识符\" class=\"headerlink\" title=\"6.2 模块名也是一个标识符\"></a>6.2 模块名也是一个标识符</h3><ul>\n<li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li>\n<li><strong>不能以数字开头</strong></li>\n<li><strong>不能与关键字重名</strong></li>\n</ul>\n<blockquote>\n<p>注意：如果在给 Python 文件起名时，<strong>以数字开头</strong> 是无法在 <code>PyCharm</code> 中通过导入这个模块的</p>\n</blockquote>\n<h3 id=\"6-3-Pyc-文件（了解）\"><a href=\"#6-3-Pyc-文件（了解）\" class=\"headerlink\" title=\"6.3 Pyc 文件（了解）\"></a>6.3 Pyc 文件（了解）</h3><blockquote>\n<p><code>C</code> 是 <code>compiled</code> <strong>编译过</strong> 的意思</p>\n</blockquote>\n<p><strong>操作步骤</strong></p>\n<ol>\n<li>浏览程序目录会发现一个 <code>__pycache__</code> 的目录</li>\n<li>目录下会有一个 <code>hm_10_分隔线模块.cpython-35.pyc</code> 文件，<code>cpython-35</code> 表示 <code>Python</code> 解释器的版本</li>\n<li>这个 <code>pyc</code> 文件是由 Python 解释器将 <strong>模块的源码</strong> 转换为 <strong>字节码</strong><ul>\n<li><code>Python</code> 这样保存 <strong>字节码</strong> 是作为一种启动 <strong>速度的优化</strong></li>\n</ul>\n</li>\n</ol>\n<p><strong>字节码</strong></p>\n<ul>\n<li><p><code>Python</code> 在解释源程序时是分成两个步骤的</p>\n<ol>\n<li>首先处理源代码，<strong>编译</strong> 生成一个二进制 <strong>字节码</strong></li>\n<li>再对 <strong>字节码</strong> 进行处理，才会生成 CPU 能够识别的 <strong>机器码</strong></li>\n</ol>\n</li>\n<li><p>有了模块的字节码文件之后，下一次运行程序时，如果在 <strong>上次保存字节码之后</strong> 没有修改过源代码，Python 将会加载 .pyc 文件并跳过编译这个步骤</p>\n</li>\n<li><p>当 <code>Python</code> 重编译时，它会自动检查源文件和字节码文件的时间戳</p>\n</li>\n<li><p>如果你又修改了源代码，下次程序运行时，字节码将自动重新创建</p>\n</li>\n</ul>\n<blockquote>\n<p>提示：有关模块以及模块的其他导入方式，后续课程还会逐渐展开！</p>\n<p><strong>模块是 Python 程序架构的一个核心概念</strong></p>\n</blockquote>\n","categories":["python"],"tags":["python"]},{"title":"python 之 循环","url":"/posts/6dd0e012/","content":"<h1 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h1><a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>程序的三大流程</li>\n<li>while 循环基本使用</li>\n<li>break 和 continue</li>\n<li>while 循环嵌套</li>\n</ul>\n<h2 id=\"01-程序的三大流程\"><a href=\"#01-程序的三大流程\" class=\"headerlink\" title=\"01. 程序的三大流程\"></a>01. 程序的三大流程</h2><ul>\n<li><p>在程序开发中，一共有三种流程方式：</p>\n<ul>\n<li><strong>顺序</strong> —— <strong>从上向下</strong>，顺序执行代码</li>\n<li><strong>分支</strong> —— 根据条件判断，决定执行代码的 <strong>分支</strong></li>\n<li><strong>循环</strong> —— 让 <strong>特定代码 重复</strong> 执行</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3c1WY8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/01/3c1WY8.md.png\" alt=\"3c1WY8.md.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"02-while-循环基本使用\"><a href=\"#02-while-循环基本使用\" class=\"headerlink\" title=\"02. while 循环基本使用\"></a>02. <code>while</code> 循环基本使用</h2><ul>\n<li><p>循环的作用就是让 <strong>指定的代码</strong> 重复的执行</p>\n</li>\n<li><p><code>while</code> 循环最常用的应用场景就是 <strong>让执行的代码</strong> 按照 <strong>指定的次数</strong> <strong>重复</strong> 执行</p>\n</li>\n<li><p>需求 —— 打印 5 遍 <code>Hello Python</code></p>\n</li>\n<li><p>思考 —— 如果要求打印 100 遍怎么办？</p>\n</li>\n</ul>\n<h3 id=\"2-1-while-语句基本语法\"><a href=\"#2-1-while-语句基本语法\" class=\"headerlink\" title=\"2.1 while 语句基本语法\"></a>2.1 <code>while</code> 语句基本语法</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">初始条件设置 —— 通常是重复执行的 计数器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> 条件(判断 计数器 是否达到 目标次数):</span><br><span class=\"line\">    条件满足时，做的事情<span class=\"number\">1</span></span><br><span class=\"line\">    条件满足时，做的事情<span class=\"number\">2</span></span><br><span class=\"line\">    条件满足时，做的事情<span class=\"number\">3</span></span><br><span class=\"line\">    ...(省略)...</span><br><span class=\"line\">    </span><br><span class=\"line\">    处理条件(计数器 + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：</p>\n<ul>\n<li><code>while</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li>\n</ul>\n<h4 id=\"第一个-while-循环\"><a href=\"#第一个-while-循环\" class=\"headerlink\" title=\"第一个 while 循环\"></a>第一个 while 循环</h4><p><strong>需求</strong></p>\n<ul>\n<li>打印 5 遍 Hello Python</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 1. 定义重复次数计数器</span><br><span class=\"line\">i &#x3D; 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 2. 使用 while 判断条件</span><br><span class=\"line\">while i &lt;&#x3D; 5:</span><br><span class=\"line\">    # 要重复执行的代码</span><br><span class=\"line\">    print(&quot;Hello Python&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 处理计数器 i</span><br><span class=\"line\">    i &#x3D; i + 1</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;循环结束后的 i &#x3D; %d&quot; % i)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：循环结束后，之前定义的计数器条件的数值是依旧存在的</p>\n</blockquote>\n<h4 id=\"死循环\"><a href=\"#死循环\" class=\"headerlink\" title=\"死循环\"></a>死循环</h4><blockquote>\n<p>由于程序员的原因，<strong>忘记</strong> 在循环内部 <strong>修改循环的判断条件</strong>，导致循环持续执行，程序无法终止！</p>\n</blockquote>\n<h3 id=\"2-2-赋值运算符\"><a href=\"#2-2-赋值运算符\" class=\"headerlink\" title=\"2.2 赋值运算符\"></a>2.2 赋值运算符</h3><ul>\n<li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li>\n<li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li>\n<li>注意：<strong>赋值运算符中间不能使用空格</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>简单的赋值运算符</td>\n<td>c = a + b 将 a + b 的运算结果赋值为 c</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加法赋值运算符</td>\n<td>c += a 等效于 c = c + a</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减法赋值运算符</td>\n<td>c -= a 等效于 c = c - a</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘法赋值运算符</td>\n<td>c *= a 等效于 c = c * a</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除法赋值运算符</td>\n<td>c /= a 等效于 c = c / a</td>\n</tr>\n<tr>\n<td>//=</td>\n<td>取整除赋值运算符</td>\n<td>c //= a 等效于 c = c // a</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>取 <strong>模</strong> (余数)赋值运算符</td>\n<td>c %= a 等效于 c = c % a</td>\n</tr>\n<tr>\n<td>**=</td>\n<td>幂赋值运算符</td>\n<td>c *<em>= a 等效于 c = c *</em> a</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-Python-中的计数方法\"><a href=\"#2-3-Python-中的计数方法\" class=\"headerlink\" title=\"2.3 Python 中的计数方法\"></a>2.3 Python 中的计数方法</h3><p>常见的计数方法有两种，可以分别称为：</p>\n<ul>\n<li><strong>自然计数法</strong>（从 <code>1</code> 开始）—— 更符合人类的习惯</li>\n<li><strong>程序计数法</strong>（从 <code>0</code> 开始）—— 几乎所有的程序语言都选择从 0 开始计数</li>\n</ul>\n<p>因此，大家在编写程序时，应该尽量养成习惯：<strong>除非需求的特殊要求，否则 循环 的计数都从 0 开始</strong></p>\n<h3 id=\"2-4-循环计算\"><a href=\"#2-4-循环计算\" class=\"headerlink\" title=\"2.4 循环计算\"></a>2.4 循环计算</h3><blockquote>\n<p>在程序开发中，通常会遇到 <strong>利用循环</strong> <strong>重复计算</strong> 的需求</p>\n</blockquote>\n<p>遇到这种需求，可以：</p>\n<ol>\n<li>在 <code>while</code> 上方定义一个变量，用于 <strong>存放最终计算结果</strong></li>\n<li>在循环体内部，每次循环都用 <strong>最新的计算结果</strong>，<strong>更新</strong> 之前定义的变量</li>\n</ol>\n<p><strong>需求</strong></p>\n<ul>\n<li>计算 0 ~ 100 之间所有数字的累计求和结果</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 计算 0 ~ 100 之间所有数字的累计求和结果</span></span><br><span class=\"line\"><span class=\"comment\"># 0. 定义最终结果的变量</span></span><br><span class=\"line\">result = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 定义一个整数的变量记录循环的次数</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 开始循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 每一次循环，都让 result 这个变量和 i 这个计数器相加</span></span><br><span class=\"line\">    result += i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 处理计数器</span></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"0~100之间的数字求和结果 = %d\"</span> % result)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"需求进阶\"><a href=\"#需求进阶\" class=\"headerlink\" title=\"需求进阶\"></a>需求进阶</h4><ul>\n<li>计算 0 ~ 100 之间 所有 <strong>偶数</strong> 的累计求和结果</li>\n</ul>\n<p>开发步骤</p>\n<ol>\n<li>编写循环 <strong>确认</strong> <strong>要计算的数字</strong></li>\n<li>添加 <strong>结果</strong> 变量，在循环内部 <strong>处理计算结果</strong></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0. 最终结果</span></span><br><span class=\"line\">result = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 计数器</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 开始循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断偶数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">        result += i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 处理计数器</span></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"0~100之间偶数求和结果 = %d\"</span> % result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-break-和-continue\"><a href=\"#03-break-和-continue\" class=\"headerlink\" title=\"03. break 和 continue\"></a>03. break 和 continue</h2><blockquote>\n<p><code>break</code> 和 <code>continue</code> 是专门在循环中使用的关键字</p>\n</blockquote>\n<ul>\n<li><code>break</code> <strong>某一条件满足时</strong>，退出循环，不再执行后续重复的代码</li>\n<li><code>continue</code> <strong>某一条件满足时</strong>，不执行后续重复的代码</li>\n</ul>\n<blockquote>\n<p><code>break</code> 和 <code>continue</code> 只针对 <strong>当前所在循环</strong> 有效</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2020/03/01/3c1RFf.png\" alt=\"3c1RFf.png\"></p>\n<h3 id=\"3-1-break\"><a href=\"#3-1-break\" class=\"headerlink\" title=\"3.1 break\"></a>3.1 break</h3><ul>\n<li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 再希望 <strong>循环继续执行</strong>，可以使用 <code>break</code> 退出循环</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># break 某一条件满足时，退出循环，不再执行后续重复的代码</span></span><br><span class=\"line\">    <span class=\"comment\"># i == 3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"over\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>break</code> 只针对当前所在循环有效</p>\n</blockquote>\n<h3 id=\"3-2-continue\"><a href=\"#3-2-continue\" class=\"headerlink\" title=\"3.2 continue\"></a>3.2 continue</h3><ul>\n<li><strong>在循环过程中</strong>，如果 <strong>某一个条件满足后</strong>，<strong>不</strong> 希望 <strong>执行循环代码，但是又不希望退出循环</strong>，可以使用 <code>continue</code></li>\n<li>也就是：在整个循环中，<strong>只有某些条件</strong>，不需要执行循环代码，而其他条件都需要执行</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 当 i == 7 时，不希望执行需要重复执行的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 在使用 continue 之前，同样应该修改计数器</span></span><br><span class=\"line\">        <span class=\"comment\"># 否则会出现死循环</span></span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重复执行的代码</span></span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    i += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要注意：使用 <code>continue</code> 时，<strong>条件处理部分的代码，需要特别注意</strong>，不小心会出现 <strong>死循环</strong></li>\n</ul>\n<blockquote>\n<p><code>continue</code> 只针对当前所在循环有效</p>\n</blockquote>\n<h2 id=\"04-while-循环嵌套\"><a href=\"#04-while-循环嵌套\" class=\"headerlink\" title=\"04. while 循环嵌套\"></a>04. <code>while</code> 循环嵌套</h2><h3 id=\"4-1-循环嵌套\"><a href=\"#4-1-循环嵌套\" class=\"headerlink\" title=\"4.1 循环嵌套\"></a>4.1 循环嵌套</h3><ul>\n<li><code>while</code> 嵌套就是：<code>while</code> 里面还有 <code>while</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 条件 <span class=\"number\">1</span>:</span><br><span class=\"line\">    条件满足时，做的事情<span class=\"number\">1</span></span><br><span class=\"line\">    条件满足时，做的事情<span class=\"number\">2</span></span><br><span class=\"line\">    条件满足时，做的事情<span class=\"number\">3</span></span><br><span class=\"line\">    ...(省略)...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> 条件 <span class=\"number\">2</span>:</span><br><span class=\"line\">        条件满足时，做的事情<span class=\"number\">1</span></span><br><span class=\"line\">        条件满足时，做的事情<span class=\"number\">2</span></span><br><span class=\"line\">        条件满足时，做的事情<span class=\"number\">3</span></span><br><span class=\"line\">        ...(省略)...</span><br><span class=\"line\">    </span><br><span class=\"line\">        处理条件 <span class=\"number\">2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    处理条件 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-循环嵌套演练-——-九九乘法表\"><a href=\"#4-2-循环嵌套演练-——-九九乘法表\" class=\"headerlink\" title=\"4.2 循环嵌套演练 —— 九九乘法表\"></a>4.2 循环嵌套演练 —— 九九乘法表</h3><h4 id=\"第-1-步：用嵌套打印小星星\"><a href=\"#第-1-步：用嵌套打印小星星\" class=\"headerlink\" title=\"第 1 步：用嵌套打印小星星\"></a>第 1 步：用嵌套打印小星星</h4><p><strong>需求</strong></p>\n<ul>\n<li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">*</span><br><span class=\"line\">**</span><br><span class=\"line\">***</span><br><span class=\"line\">****</span><br><span class=\"line\">*****</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用字符串 * 打印</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 定义一个计数器变量，从数字1开始，循环会比较方便</span></span><br><span class=\"line\">row = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> row &lt;= <span class=\"number\">5</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"*\"</span> * row)</span><br><span class=\"line\"></span><br><span class=\"line\">    row += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第-2-步：使用循环嵌套打印小星星\"><a href=\"#第-2-步：使用循环嵌套打印小星星\" class=\"headerlink\" title=\"第 2 步：使用循环嵌套打印小星星\"></a>第 2 步：使用循环嵌套打印小星星</h4><p><strong>知识点</strong> 对 <code>print</code> 函数的使用做一个增强</p>\n<ul>\n<li><p>在默认情况下，<code>print</code> 函数输出内容之后，会自动在内容末尾增加换行</p>\n</li>\n<li><p>如果不希望末尾增加换行，可以在 <code>print</code> 函数输出内容的后面增加 <code>, end=&quot;&quot;</code></p>\n</li>\n<li><p>其中 <code>&quot;&quot;</code> 中间可以指定 <code>print</code> 函数输出内容之后，继续希望显示的内容</p>\n</li>\n<li><p>语法格式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 向控制台输出内容结束之后，不会换行</span></span><br><span class=\"line\">print(<span class=\"string\">\"*\"</span>, end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单纯的换行</span></span><br><span class=\"line\">print(<span class=\"string\">\"\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>end=&quot;&quot;</code> 表示向控制台输出内容结束之后，不会换行</p>\n</blockquote>\n<p><strong>假设</strong> <code>Python</code> <strong>没有提供</strong> 字符串的 <code>*</code> 操作 <strong>拼接字符串</strong></p>\n<p><strong>需求</strong></p>\n<ul>\n<li>在控制台连续输出五行 <code>*</code>，每一行星号的数量依次递增</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">*</span><br><span class=\"line\">**</span><br><span class=\"line\">***</span><br><span class=\"line\">****</span><br><span class=\"line\">*****</span><br></pre></td></tr></table></figure>\n\n<p><strong>开发步骤</strong></p>\n<ul>\n<li>1&gt; 完成 5 行内容的简单输出</li>\n<li>2&gt; 分析每行内部的 <code>*</code> 应该如何处理？<ul>\n<li>每行显示的星星和当前所在的行数是一致的</li>\n<li>嵌套一个小的循环，专门处理每一行中 <code>列</code> 的星星显示  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">row = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> row &lt;= <span class=\"number\">5</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 假设 python 没有提供字符串 * 操作</span></span><br><span class=\"line\">    <span class=\"comment\"># 在循环内部，再增加一个循环，实现每一行的 星星 打印</span></span><br><span class=\"line\">    col = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> col &lt;= row:</span><br><span class=\"line\">        print(<span class=\"string\">\"*\"</span>, end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        col += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 每一行星号输出完成后，再增加一个换行</span></span><br><span class=\"line\">    print(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    row += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第-3-步：-九九乘法表\"><a href=\"#第-3-步：-九九乘法表\" class=\"headerlink\" title=\"第 3 步： 九九乘法表\"></a>第 3 步： 九九乘法表</h4><p><strong>需求</strong> 输出 九九乘法表，格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1 * 1 &#x3D; 1\t</span><br><span class=\"line\">1 * 2 &#x3D; 2\t2 * 2 &#x3D; 4\t</span><br><span class=\"line\">1 * 3 &#x3D; 3\t2 * 3 &#x3D; 6\t3 * 3 &#x3D; 9\t</span><br><span class=\"line\">1 * 4 &#x3D; 4\t2 * 4 &#x3D; 8\t3 * 4 &#x3D; 12\t4 * 4 &#x3D; 16\t</span><br><span class=\"line\">1 * 5 &#x3D; 5\t2 * 5 &#x3D; 10\t3 * 5 &#x3D; 15\t4 * 5 &#x3D; 20\t5 * 5 &#x3D; 25\t</span><br><span class=\"line\">1 * 6 &#x3D; 6\t2 * 6 &#x3D; 12\t3 * 6 &#x3D; 18\t4 * 6 &#x3D; 24\t5 * 6 &#x3D; 30\t6 * 6 &#x3D; 36\t</span><br><span class=\"line\">1 * 7 &#x3D; 7\t2 * 7 &#x3D; 14\t3 * 7 &#x3D; 21\t4 * 7 &#x3D; 28\t5 * 7 &#x3D; 35\t6 * 7 &#x3D; 42\t7 * 7 &#x3D; 49\t</span><br><span class=\"line\">1 * 8 &#x3D; 8\t2 * 8 &#x3D; 16\t3 * 8 &#x3D; 24\t4 * 8 &#x3D; 32\t5 * 8 &#x3D; 40\t6 * 8 &#x3D; 48\t7 * 8 &#x3D; 56\t8 * 8 &#x3D; 64\t</span><br><span class=\"line\">1 * 9 &#x3D; 9\t2 * 9 &#x3D; 18\t3 * 9 &#x3D; 27\t4 * 9 &#x3D; 36\t5 * 9 &#x3D; 45\t6 * 9 &#x3D; 54\t7 * 9 &#x3D; 63\t8 * 9 &#x3D; 72\t9 * 9 &#x3D; 81</span><br></pre></td></tr></table></figure>\n\n<p><strong>开发步骤</strong></p>\n<ul>\n<li><ol>\n<li>打印 9 行小星星</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">*</span><br><span class=\"line\">**</span><br><span class=\"line\">***</span><br><span class=\"line\">****</span><br><span class=\"line\">*****</span><br><span class=\"line\">******</span><br><span class=\"line\">*******</span><br><span class=\"line\">********</span><br><span class=\"line\">*********</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"2\">\n<li>将每一个 <code>*</code> 替换成对应的行与列相乘</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义起始行</span></span><br><span class=\"line\">row = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最大打印 9 行</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> row &lt;= <span class=\"number\">9</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 定义起始列</span></span><br><span class=\"line\">    col = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 最大打印 row 列</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> col &lt;= row:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># end = \"\"，表示输出结束后，不换行</span></span><br><span class=\"line\">        <span class=\"comment\"># \"\\t\" 可以在控制台输出一个制表符，协助在输出文本时对齐</span></span><br><span class=\"line\">        print(<span class=\"string\">\"%d * %d = %d\"</span> % (col, row, row * col), end=<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 列数 + 1</span></span><br><span class=\"line\">        col += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 一行打印完成的换行</span></span><br><span class=\"line\">    print(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 行数 + 1</span></span><br><span class=\"line\">    row += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串中的转义字符</strong></p>\n<ul>\n<li><code>\\t</code> 在控制台输出一个 <strong>制表符</strong>，协助在输出文本时 <strong>垂直方向</strong> 保持对齐</li>\n<li><code>\\n</code> 在控制台输出一个 <strong>换行符</strong></li>\n</ul>\n<blockquote>\n<p><strong>制表符</strong> 的功能是在不使用表格的情况下在 <strong>垂直方向</strong> 按列对齐文本</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\\\</td>\n<td>反斜杠符号</td>\n</tr>\n<tr>\n<td>\\‘</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\“</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>横向制表符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n</tbody></table>\n","categories":["python"],"tags":["python"]},{"title":"python 之判断语句","url":"/posts/78c047fc/","content":"<h1 id=\"判断（if）语句\"><a href=\"#判断（if）语句\" class=\"headerlink\" title=\"判断（if）语句\"></a>判断（if）语句</h1><a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>开发中的应用场景</li>\n<li>if 语句体验</li>\n<li>if 语句进阶</li>\n<li>综合应用</li>\n</ul>\n<h2 id=\"01-开发中的应用场景\"><a href=\"#01-开发中的应用场景\" class=\"headerlink\" title=\"01. 开发中的应用场景\"></a>01. 开发中的应用场景</h2><p>生活中的判断几乎是无所不在的，我们每天都在做各种各样的选择，如果这样？如果那样？……</p>\n<h3 id=\"程序中的判断\"><a href=\"#程序中的判断\" class=\"headerlink\" title=\"程序中的判断\"></a>程序中的判断</h3><p><a href=\"https://imgchr.com/i/3c1iRg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/01/3c1iRg.md.png\" alt=\"3c1iRg.md.png\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 今天发工资:</span><br><span class=\"line\"></span><br><span class=\"line\">    先还信用卡的钱</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> 有剩余:</span><br><span class=\"line\"></span><br><span class=\"line\">        又可以happy了，O(∩_∩)O哈哈~</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        噢，no。。。还的等<span class=\"number\">30</span>天</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    盼着发工资</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断的定义\"><a href=\"#判断的定义\" class=\"headerlink\" title=\"判断的定义\"></a>判断的定义</h3><ul>\n<li>如果 <strong>条件满足</strong>，才能做某件事情，</li>\n<li>如果 <strong>条件不满足</strong>，就做另外一件事情，或者什么也不做</li>\n</ul>\n<blockquote>\n<p>正是因为有了判断，才使得程序世界丰富多彩，充满变化！</p>\n<p><strong>判断语句</strong> 又被称为 “分支语句”，正是因为有了判断，才让程序有了很多的分支</p>\n</blockquote>\n<h2 id=\"02-if-语句体验\"><a href=\"#02-if-语句体验\" class=\"headerlink\" title=\"02. if 语句体验\"></a>02. if 语句体验</h2><h3 id=\"2-1-if-判断语句基本语法\"><a href=\"#2-1-if-判断语句基本语法\" class=\"headerlink\" title=\"2.1 if 判断语句基本语法\"></a>2.1 if 判断语句基本语法</h3><p>在 <code>Python</code> 中，<strong>if 语句</strong> 就是用来进行判断的，格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 要判断的条件:</span><br><span class=\"line\">    条件成立时，要做的事情</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：代码的缩进为一个 <code>tab</code> 键，或者 <strong>4</strong> 个空格 —— <strong>建议使用空格</strong></p>\n<ul>\n<li>在 Python 开发中，Tab 和空格不要混用！</li>\n</ul>\n</blockquote>\n<p><strong>我们可以把整个 if 语句看成一个完整的代码块</strong></p>\n<p><a href=\"https://imgchr.com/i/3c1Ci8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/01/3c1Ci8.png\" alt=\"3c1Ci8.png\"></a>](<a href=\"https://imgchr.com/i/3c1pIf\" target=\"_blank\" rel=\"noopener\">https://imgchr.com/i/3c1pIf</a>)</p>\n<h3 id=\"2-2-判断语句演练-——-判断年龄\"><a href=\"#2-2-判断语句演练-——-判断年龄\" class=\"headerlink\" title=\"2.2 判断语句演练 —— 判断年龄\"></a>2.2 判断语句演练 —— 判断年龄</h3><p><strong>需求</strong></p>\n<ol>\n<li>定义一个整数变量记录年龄</li>\n<li>判断是否满 18 岁 （<strong>&gt;=</strong>）</li>\n<li>如果满 18 岁，允许进网吧嗨皮</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 定义年龄变量</span></span><br><span class=\"line\">age = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 判断是否满 18 岁</span></span><br><span class=\"line\"><span class=\"comment\"># if 语句以及缩进部分的代码是一个完整的代码块</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"可以进网吧嗨皮……\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 思考！- 无论条件是否满足都会执行</span></span><br><span class=\"line\">print(<span class=\"string\">\"这句代码什么时候执行?\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：</p>\n<ul>\n<li><code>if</code> 语句以及缩进部分是一个 <strong>完整的代码块</strong></li>\n</ul>\n<h3 id=\"2-3-else-处理条件不满足的情况\"><a href=\"#2-3-else-处理条件不满足的情况\" class=\"headerlink\" title=\"2.3 else 处理条件不满足的情况\"></a>2.3 else 处理条件不满足的情况</h3><p><strong>思考</strong></p>\n<p>在使用 <code>if</code> 判断时，只能做到满足条件时要做的事情。那如果需要在 <strong>不满足条件的时候</strong>，做某些事情，该如何做呢？</p>\n<p><strong>答案</strong></p>\n<p><code>else</code>，格式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 要判断的条件:</span><br><span class=\"line\">    条件成立时，要做的事情</span><br><span class=\"line\">    ……</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    条件不成立时，要做的事情</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：</p>\n<ul>\n<li><code>if</code> 和 <code>else</code> 语句以及各自的缩进部分共同是一个 <strong>完整的代码块</strong></li>\n</ul>\n<h3 id=\"2-4-判断语句演练-——-判断年龄改进\"><a href=\"#2-4-判断语句演练-——-判断年龄改进\" class=\"headerlink\" title=\"2.4 判断语句演练 —— 判断年龄改进\"></a>2.4 判断语句演练 —— 判断年龄改进</h3><p><strong>需求</strong></p>\n<ol>\n<li>输入用户年龄</li>\n<li>判断是否满 18 岁 （<strong>&gt;=</strong>）</li>\n<li>如果满 18 岁，允许进网吧嗨皮</li>\n<li>如果未满 18 岁，提示回家写作业</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 输入用户年龄</span></span><br><span class=\"line\">age = int(input(<span class=\"string\">\"今年多大了？\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 判断是否满 18 岁</span></span><br><span class=\"line\"><span class=\"comment\"># if 语句以及缩进部分的代码是一个完整的语法块</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"可以进网吧嗨皮……\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"你还没长大，应该回家写作业！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 思考！- 无论条件是否满足都会执行</span></span><br><span class=\"line\">print(<span class=\"string\">\"这句代码什么时候执行?\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3c1pIf\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/03/01/3c1pIf.png\" alt=\"3c1pIf.png\"></a></p>\n<h2 id=\"03-逻辑运算\"><a href=\"#03-逻辑运算\" class=\"headerlink\" title=\"03. 逻辑运算\"></a>03. 逻辑运算</h2><ul>\n<li>在程序开发中，通常 <strong>在判断条件时</strong>，会需要同时判断多个条件</li>\n<li>只有多个条件都满足，才能够执行后续代码，这个时候需要使用到 <strong>逻辑运算符</strong></li>\n<li><strong>逻辑运算符</strong> 可以把 <strong>多个条件</strong> 按照 <strong>逻辑</strong> 进行 <strong>连接</strong>，变成 <strong>更复杂的条件</strong></li>\n<li>Python 中的 <strong>逻辑运算符</strong> 包括：<strong>与 and</strong>／<strong>或 or</strong>／<strong>非 not</strong> 三种</li>\n</ul>\n<h3 id=\"3-1-and\"><a href=\"#3-1-and\" class=\"headerlink\" title=\"3.1 and\"></a>3.1 <code>and</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">条件1 and 条件2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>与</strong>／<strong>并且</strong></li>\n<li>两个条件同时满足，返回 <code>True</code></li>\n<li>只要有一个不满足，就返回 <code>False</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">条件 1</th>\n<th align=\"center\">条件 2</th>\n<th align=\"center\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">成立</td>\n<td align=\"center\">成立</td>\n<td align=\"center\">成立</td>\n</tr>\n<tr>\n<td align=\"center\">成立</td>\n<td align=\"center\">不成立</td>\n<td align=\"center\">不成立</td>\n</tr>\n<tr>\n<td align=\"center\">不成立</td>\n<td align=\"center\">成立</td>\n<td align=\"center\">不成立</td>\n</tr>\n<tr>\n<td align=\"center\">不成立</td>\n<td align=\"center\">不成立</td>\n<td align=\"center\">不成立</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-2-or\"><a href=\"#3-2-or\" class=\"headerlink\" title=\"3.2 or\"></a>3.2 <code>or</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">条件1 or 条件2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>或</strong>／<strong>或者</strong></li>\n<li>两个条件只要有一个满足，返回 <code>True</code></li>\n<li>两个条件都不满足，返回 <code>False</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">条件 1</th>\n<th align=\"center\">条件 2</th>\n<th align=\"center\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">成立</td>\n<td align=\"center\">成立</td>\n<td align=\"center\">成立</td>\n</tr>\n<tr>\n<td align=\"center\">成立</td>\n<td align=\"center\">不成立</td>\n<td align=\"center\">成立</td>\n</tr>\n<tr>\n<td align=\"center\">不成立</td>\n<td align=\"center\">成立</td>\n<td align=\"center\">成立</td>\n</tr>\n<tr>\n<td align=\"center\">不成立</td>\n<td align=\"center\">不成立</td>\n<td align=\"center\">不成立</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-3-not\"><a href=\"#3-3-not\" class=\"headerlink\" title=\"3.3 not\"></a>3.3 <code>not</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">not 条件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>非</strong>／<strong>不是</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">条件</th>\n<th align=\"center\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">成立</td>\n<td align=\"center\">不成立</td>\n</tr>\n<tr>\n<td align=\"center\">不成立</td>\n<td align=\"center\">成立</td>\n</tr>\n</tbody></table>\n<h4 id=\"逻辑运算演练\"><a href=\"#逻辑运算演练\" class=\"headerlink\" title=\"逻辑运算演练\"></a>逻辑运算演练</h4><ol>\n<li>练习1: 定义一个整数变量 <code>age</code>，编写代码判断年龄是否正确<ul>\n<li>要求人的年龄在 0-120 之间</li>\n</ul>\n</li>\n<li>练习2: 定义两个整数变量 <code>python_score</code>、<code>c_score</code>，编写代码判断成绩<ul>\n<li>要求只要有一门成绩 &gt; 60 分就算合格</li>\n</ul>\n</li>\n<li>练习3: 定义一个布尔型变量 <code>is_employee</code>，编写代码判断是否是本公司员工<ul>\n<li>如果不是提示不允许入内</li>\n</ul>\n</li>\n</ol>\n<p>答案 1：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习1: 定义一个整数变量 age，编写代码判断年龄是否正确</span></span><br><span class=\"line\">age = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要求人的年龄在 0-120 之间</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> age &lt;= <span class=\"number\">120</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"年龄正确\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"年龄不正确\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>答案 2：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习2: 定义两个整数变量 python_score、c_score，编写代码判断成绩</span></span><br><span class=\"line\">python_score = <span class=\"number\">50</span></span><br><span class=\"line\">c_score = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要求只要有一门成绩 &gt; 60 分就算合格</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> python_score &gt; <span class=\"number\">60</span> <span class=\"keyword\">or</span> c_score &gt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"考试通过\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"再接再厉！\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>答案 3：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 练习3: 定义一个布尔型变量 `is_employee`，编写代码判断是否是本公司员工</span></span><br><span class=\"line\">is_employee = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果不是提示不允许入内</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_employee:</span><br><span class=\"line\">    print(<span class=\"string\">\"非公勿内\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"04-if-语句进阶\"><a href=\"#04-if-语句进阶\" class=\"headerlink\" title=\"04. if 语句进阶\"></a>04. if 语句进阶</h2><h3 id=\"4-1-elif\"><a href=\"#4-1-elif\" class=\"headerlink\" title=\"4.1 elif\"></a>4.1 <code>elif</code></h3><ul>\n<li>在开发中，使用 <code>if</code> 可以 <strong>判断条件</strong></li>\n<li>使用 <code>else</code> 可以处理 <strong>条件不成立</strong> 的情况</li>\n<li>但是，如果希望 <strong>再增加一些条件</strong>，<strong>条件不同，需要执行的代码也不同</strong> 时，就可以使用 <code>elif</code> </li>\n<li>语法格式如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件<span class=\"number\">1</span>:</span><br><span class=\"line\">    条件<span class=\"number\">1</span>满足执行的代码</span><br><span class=\"line\">    ……</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件<span class=\"number\">2</span>:</span><br><span class=\"line\">    条件<span class=\"number\">2</span>满足时，执行的代码</span><br><span class=\"line\">    ……</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件<span class=\"number\">3</span>:</span><br><span class=\"line\">    条件<span class=\"number\">3</span>满足时，执行的代码</span><br><span class=\"line\">    ……</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    以上条件都不满足时，执行的代码</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>对比逻辑运算符的代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span>:</span><br><span class=\"line\">    条件<span class=\"number\">1</span>满足 并且 条件<span class=\"number\">2</span>满足 执行的代码</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ol>\n<li><code>elif</code> 和 <code>else</code> 都必须和 <code>if</code> 联合使用，而不能单独使用</li>\n<li>可以将 <code>if</code>、<code>elif</code> 和 <code>else</code> 以及各自缩进的代码，看成一个 <strong>完整的代码块</strong></li>\n</ol>\n<h4 id=\"elif-演练-——-女友的节日\"><a href=\"#elif-演练-——-女友的节日\" class=\"headerlink\" title=\"elif 演练 —— 女友的节日\"></a>elif 演练 —— 女友的节日</h4><p><strong>需求</strong></p>\n<ol>\n<li>定义 <code>holiday_name</code> 字符串变量记录节日名称</li>\n<li>如果是 <strong>情人节</strong> 应该 <strong>买玫瑰</strong>／<strong>看电影</strong></li>\n<li>如果是 <strong>平安夜</strong> 应该 <strong>买苹果</strong>／<strong>吃大餐</strong></li>\n<li>如果是 <strong>生日</strong> 应该 <strong>买蛋糕</strong></li>\n<li>其他的日子每天都是节日啊……</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">holiday_name &#x3D; &quot;平安夜&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if holiday_name &#x3D;&#x3D; &quot;情人节&quot;:</span><br><span class=\"line\">    print(&quot;买玫瑰&quot;)</span><br><span class=\"line\">    print(&quot;看电影&quot;)</span><br><span class=\"line\">elif holiday_name &#x3D;&#x3D; &quot;平安夜&quot;:</span><br><span class=\"line\">    print(&quot;买苹果&quot;)</span><br><span class=\"line\">    print(&quot;吃大餐&quot;)</span><br><span class=\"line\">elif holiday_name &#x3D;&#x3D; &quot;生日&quot;:</span><br><span class=\"line\">    print(&quot;买蛋糕&quot;)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;每天都是节日啊……&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-if-的嵌套\"><a href=\"#4-2-if-的嵌套\" class=\"headerlink\" title=\"4.2 if 的嵌套\"></a>4.2 <code>if</code> 的嵌套</h3><blockquote>\n<p><strong>elif</strong> 的应用场景是：<strong>同时</strong> 判断 <strong>多个条件</strong>，所有的条件是 <strong>平级</strong> 的</p>\n</blockquote>\n<ul>\n<li>在开发中，使用 <code>if</code> 进行条件判断，如果希望 <strong>在条件成立的执行语句中</strong> 再 <strong>增加条件判断</strong>，就可以使用 <strong>if 的嵌套</strong></li>\n<li><strong>if 的嵌套</strong> 的应用场景就是：<strong>在之前条件满足的前提下，再增加额外的判断</strong></li>\n<li><strong>if 的嵌套</strong> 的语法格式，<strong>除了缩进之外</strong> 和之前的没有区别</li>\n<li>语法格式如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件 <span class=\"number\">1</span>:</span><br><span class=\"line\">    条件 <span class=\"number\">1</span> 满足执行的代码</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> 条件 <span class=\"number\">1</span> 基础上的条件 <span class=\"number\">2</span>:</span><br><span class=\"line\">        条件 <span class=\"number\">2</span> 满足时，执行的代码</span><br><span class=\"line\">        ……    </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># 条件 2 不满足的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        条件 <span class=\"number\">2</span> 不满足时，执行的代码</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 条件 1 不满足的处理</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    条件<span class=\"number\">1</span> 不满足时，执行的代码</span><br><span class=\"line\">    ……</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"if-的嵌套-演练-——-火车站安检\"><a href=\"#if-的嵌套-演练-——-火车站安检\" class=\"headerlink\" title=\"if 的嵌套 演练 —— 火车站安检\"></a>if 的嵌套 演练 —— 火车站安检</h4><p><strong>需求</strong></p>\n<ol>\n<li>定义布尔型变量 <code>has_ticket</code> 表示是否有车票</li>\n<li>定义整型变量 <code>knife_length</code> 表示刀的长度，单位：厘米</li>\n<li>首先检查是否有车票，如果有，才允许进行 <strong>安检</strong></li>\n<li>安检时，需要检查刀的长度，判断是否超过 20 厘米<ul>\n<li>如果超过 20 厘米，提示刀的长度，不允许上车</li>\n<li>如果不超过 20 厘米，安检通过</li>\n</ul>\n</li>\n<li>如果没有车票，不允许进门</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义布尔型变量 has_ticket 表示是否有车票</span></span><br><span class=\"line\">has_ticket = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义整数型变量 knife_length 表示刀的长度，单位：厘米</span></span><br><span class=\"line\">knife_length = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 首先检查是否有车票，如果有，才允许进行 安检</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> has_ticket:</span><br><span class=\"line\">    print(<span class=\"string\">\"有车票，可以开始安检...\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 安检时，需要检查刀的长度，判断是否超过 20 厘米</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果超过 20 厘米，提示刀的长度，不允许上车</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> knife_length &gt;= <span class=\"number\">20</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"不允许携带 %d 厘米长的刀上车\"</span> % knife_length)</span><br><span class=\"line\">    <span class=\"comment\"># 如果不超过 20 厘米，安检通过</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"安检通过，祝您旅途愉快……\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果没有车票，不允许进门</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"大哥，您要先买票啊\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"05-综合应用-——-石头剪刀布\"><a href=\"#05-综合应用-——-石头剪刀布\" class=\"headerlink\" title=\"05. 综合应用 —— 石头剪刀布\"></a>05. 综合应用 —— 石头剪刀布</h2><p><strong>目标</strong></p>\n<ol>\n<li>强化 <strong>多个条件</strong> 的 <strong>逻辑运算</strong></li>\n<li>体会 <code>import</code> 导入模块（“工具包”）的使用</li>\n</ol>\n<p><strong>需求</strong></p>\n<ol>\n<li>从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</li>\n<li>电脑 <strong>随机</strong> 出拳 —— 先假定电脑只会出石头，完成整体代码功能</li>\n<li>比较胜负</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">石头 胜 剪刀</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">剪刀 胜 布</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">布 胜 石头</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-1-基础代码实现\"><a href=\"#5-1-基础代码实现\" class=\"headerlink\" title=\"5.1 基础代码实现\"></a>5.1 基础代码实现</h3><ul>\n<li>先 <strong>假定电脑就只会出石头</strong>，完成整体代码功能</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）</span></span><br><span class=\"line\">player = int(input(<span class=\"string\">\"请出拳 石头（1）／剪刀（2）／布（3）：\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 电脑 随机 出拳 - 假定电脑永远出石头</span></span><br><span class=\"line\">computer = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较胜负</span></span><br><span class=\"line\"><span class=\"comment\"># 如果条件判断的内容太长，可以在最外侧的条件增加一对大括号</span></span><br><span class=\"line\"><span class=\"comment\"># 再在每一个条件之间，使用回车，PyCharm 可以自动增加 8 个空格</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((player == <span class=\"number\">1</span> <span class=\"keyword\">and</span> computer == <span class=\"number\">2</span>) <span class=\"keyword\">or</span></span><br><span class=\"line\">        (player == <span class=\"number\">2</span> <span class=\"keyword\">and</span> computer == <span class=\"number\">3</span>) <span class=\"keyword\">or</span></span><br><span class=\"line\">        (player == <span class=\"number\">3</span> <span class=\"keyword\">and</span> computer == <span class=\"number\">1</span>)):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"噢耶！！！电脑弱爆了！！！\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> player == computer:</span><br><span class=\"line\">    print(<span class=\"string\">\"心有灵犀，再来一盘！\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"不行，我要和你决战到天亮！\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-随机数的处理\"><a href=\"#5-2-随机数的处理\" class=\"headerlink\" title=\"5.2 随机数的处理\"></a>5.2 随机数的处理</h3><ul>\n<li>在 <code>Python</code> 中，要使用随机数，首先需要导入 <strong>随机数</strong> 的 <strong>模块</strong> —— “工具包”</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>导入模块后，可以直接在 <strong>模块名称</strong> 后面敲一个 <code>.</code> 然后按 <code>Tab</code> 键，会提示该模块中包含的所有函数</p>\n</li>\n<li><p><code>random.randint(a, b)</code> ，返回 <code>[a, b]</code> 之间的整数，包含 <code>a</code> 和 <code>b</code></p>\n</li>\n<li><p>例如：</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">random.randint(<span class=\"number\">12</span>, <span class=\"number\">20</span>)  <span class=\"comment\"># 生成的随机数n: 12 &lt;= n &lt;= 20   </span></span><br><span class=\"line\">random.randint(<span class=\"number\">20</span>, <span class=\"number\">20</span>)  <span class=\"comment\"># 结果永远是 20   </span></span><br><span class=\"line\">random.randint(<span class=\"number\">20</span>, <span class=\"number\">10</span>)  <span class=\"comment\"># 该语句是错误的，下限必须小于上限</span></span><br></pre></td></tr></table></figure>\n\n","categories":["python"],"tags":["python"]},{"title":"python 之 运算符","url":"/posts/6c4c5edb/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>算数运算符</p>\n</li>\n<li><p>比较（关系）运算符</p>\n</li>\n<li><p>逻辑运算符</p>\n</li>\n<li><p>赋值运算符</p>\n</li>\n<li><p>运算符的优先级</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<p>数学符号表链接：<a href=\"https://zh.wikipedia.org/wiki/数学符号表\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/数学符号表</a></p>\n<h2 id=\"01-算数运算符\"><a href=\"#01-算数运算符\" class=\"headerlink\" title=\"01. 算数运算符\"></a>01. 算数运算符</h2><ul>\n<li>是完成基本的算术运算使用的符号，用来处理四则运算</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\">加</td>\n<td>10 + 20 = 30</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">减</td>\n<td>10 - 20 = -10</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">乘</td>\n<td>10 * 20 = 200</td>\n</tr>\n<tr>\n<td align=\"center\">/</td>\n<td align=\"center\">除</td>\n<td>10 / 20 = 0.5</td>\n</tr>\n<tr>\n<td align=\"center\">//</td>\n<td align=\"center\">取整除</td>\n<td>返回除法的整数部分（商） 9 // 2 输出结果 4</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">取余数</td>\n<td>返回除法的余数 9 % 2 = 1</td>\n</tr>\n<tr>\n<td align=\"center\">**</td>\n<td align=\"center\">幂</td>\n<td>又称次方、乘方，2 ** 3 = 8</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在 Python 中 <code>*</code> 运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"string\">\"-\"</span> * <span class=\"number\">50</span></span><br><span class=\"line\">Out[<span class=\"number\">1</span>]: <span class=\"string\">'----------------------------------------'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"02-比较（关系）运算符\"><a href=\"#02-比较（关系）运算符\" class=\"headerlink\" title=\"02. 比较（关系）运算符\"></a>02. 比较（关系）运算符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>检查两个操作数的值是否 <strong>相等</strong>，如果是，则条件成立，返回 True</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检查两个操作数的值是否 <strong>不相等</strong>，如果是，则条件成立，返回 True</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>检查左操作数的值是否 <strong>大于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>检查左操作数的值是否 <strong>小于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>检查左操作数的值是否 <strong>大于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>检查左操作数的值是否 <strong>小于或等于</strong> 右操作数的值，如果是，则条件成立，返回 True</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Python 2.x 中判断 <strong>不等于</strong> 还可以使用 <code>&lt;&gt;</code> 运算符</p>\n<p><code>!=</code> 在 Python 2.x 中同样可以用来判断 <strong>不等于</strong></p>\n</blockquote>\n<h2 id=\"03-逻辑运算符\"><a href=\"#03-逻辑运算符\" class=\"headerlink\" title=\"03. 逻辑运算符\"></a>03. 逻辑运算符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>逻辑表达式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>and</td>\n<td>x and y</td>\n<td>只有 x 和 y 的值都为 True，才会返回 True<br />否则只要 x 或者 y 有一个值为 False，就返回 False</td>\n</tr>\n<tr>\n<td>or</td>\n<td>x or y</td>\n<td>只要 x 或者 y 有一个值为 True，就返回 True<br />只有 x 和 y 的值都为 False，才会返回 False</td>\n</tr>\n<tr>\n<td>not</td>\n<td>not x</td>\n<td>如果 x 为 True，返回 False<br />如果 x 为 False，返回 True</td>\n</tr>\n</tbody></table>\n<h2 id=\"04-赋值运算符\"><a href=\"#04-赋值运算符\" class=\"headerlink\" title=\"04. 赋值运算符\"></a>04. 赋值运算符</h2><ul>\n<li>在 Python 中，使用 <code>=</code> 可以给变量赋值</li>\n<li>在算术运算时，为了简化代码的编写，<code>Python</code> 还提供了一系列的 与 <strong>算术运算符</strong> 对应的 <strong>赋值运算符</strong></li>\n<li>注意：<strong>赋值运算符中间不能使用空格</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>简单的赋值运算符</td>\n<td>c = a + b 将 a + b 的运算结果赋值为 c</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加法赋值运算符</td>\n<td>c += a 等效于 c = c + a</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减法赋值运算符</td>\n<td>c -= a 等效于 c = c - a</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘法赋值运算符</td>\n<td>c *= a 等效于 c = c * a</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除法赋值运算符</td>\n<td>c /= a 等效于 c = c / a</td>\n</tr>\n<tr>\n<td>//=</td>\n<td>取整除赋值运算符</td>\n<td>c //= a 等效于 c = c // a</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>取 <strong>模</strong> (余数)赋值运算符</td>\n<td>c %= a 等效于 c = c % a</td>\n</tr>\n<tr>\n<td>**=</td>\n<td>幂赋值运算符</td>\n<td>c *<em>= a 等效于 c = c *</em> a</td>\n</tr>\n</tbody></table>\n<h2 id=\"05-运算符的优先级\"><a href=\"#05-运算符的优先级\" class=\"headerlink\" title=\"05. 运算符的优先级\"></a>05. 运算符的优先级</h2><ul>\n<li>以下表格的算数优先级由高到最低顺序排列</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>**</td>\n<td>幂 (最高优先级)</td>\n</tr>\n<tr>\n<td>* / % //</td>\n<td>乘、除、取余数、取整除</td>\n</tr>\n<tr>\n<td>+ -</td>\n<td>加法、减法</td>\n</tr>\n<tr>\n<td>&lt;= &lt; &gt; &gt;=</td>\n<td>比较运算符</td>\n</tr>\n<tr>\n<td>== !=</td>\n<td>等于运算符</td>\n</tr>\n<tr>\n<td>= %= /= //= -= += <em>= *</em>=</td>\n<td>赋值运算符</td>\n</tr>\n<tr>\n<td>not or and</td>\n<td>逻辑运算符</td>\n</tr>\n</tbody></table>\n","categories":["python"],"tags":["python"]},{"title":"python 变量的命名和使用","url":"/posts/4c8d96c5/","content":"<blockquote>\n<p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"目标：\"><a href=\"#目标：\" class=\"headerlink\" title=\"目标：\"></a>目标：</h2><ul>\n<li><p>标识符和关键字</p>\n</li>\n<li><p>变量的命名规则</p>\n</li>\n<li><p>变量定义</p>\n</li>\n<li><p>变量的类型</p>\n</li>\n<li><p>变量的命名</p>\n</li>\n</ul>\n<h2 id=\"0-1-标识符和关键字\"><a href=\"#0-1-标识符和关键字\" class=\"headerlink\" title=\"0.1 标识符和关键字\"></a>0.1 标识符和关键字</h2><h3 id=\"1-1-标识符\"><a href=\"#1-1-标识符\" class=\"headerlink\" title=\"1.1 标识符\"></a>1.1 标识符</h3><blockquote>\n<p>标示符就是程序员定义的 <strong>变量名</strong>、<strong>函数名</strong></p>\n<p><strong>名字</strong> 需要有 <strong>见名知义</strong> 的效果，见下图：</p>\n</blockquote>\n<ul>\n<li>标示符可以由 <strong>字母</strong>、<strong>下划线</strong> 和 <strong>数字</strong> 组成</li>\n<li><strong>不能以数字开头</strong></li>\n<li><strong>不能与关键字重名</strong></li>\n</ul>\n<p>思考：下面的标示符哪些是正确的，哪些不正确为什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fromNo12</span><br><span class=\"line\">from#12</span><br><span class=\"line\">my_Boolean</span><br><span class=\"line\">my-Boolean</span><br><span class=\"line\">Obj2</span><br><span class=\"line\">2ndObj</span><br><span class=\"line\">myInt</span><br><span class=\"line\">My_tExt</span><br><span class=\"line\">_test</span><br><span class=\"line\">test!32</span><br><span class=\"line\">haha(da)tt</span><br><span class=\"line\">jack_rose</span><br><span class=\"line\">jack&amp;rose</span><br><span class=\"line\">GUI</span><br><span class=\"line\">G.U.I</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-关键字\"><a href=\"#1-2-关键字\" class=\"headerlink\" title=\"1.2 关键字\"></a>1.2 关键字</h3><ul>\n<li><strong>关键字</strong> 就是在 <code>Python</code> 内部已经使用的标识符</li>\n<li><strong>关键字</strong> 具有特殊的功能和含义</li>\n<li>开发者 <strong>不允许定义和关键字相同的名字的标示符</strong></li>\n</ul>\n<p>通过以下命令可以查看 <code>Python</code> 中的关键字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">import</span> keyword</span><br><span class=\"line\">In [<span class=\"number\">2</span>]: print(keyword.kwlist)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：<strong>关键字的学习及使用</strong>，会在后面的课程中不断介绍</p>\n<ul>\n<li><p><code>import</code> <strong>关键字</strong> 可以导入一个 <strong>“工具包”</strong></p>\n</li>\n<li><p>在 <code>Python</code> 中不同的工具包，提供有不同的工具</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"02-变量的命名规则\"><a href=\"#02-变量的命名规则\" class=\"headerlink\" title=\"02. 变量的命名规则\"></a>02. 变量的命名规则</h2><blockquote>\n<p><strong>命名规则</strong> 可以被视为一种 <strong>惯例</strong>，并无绝对与强制<br>目的是为了 <strong>增加代码的识别和可读性</strong></p>\n</blockquote>\n<p><strong>注意</strong> <code>Python</code> 中的 <strong>标识符</strong> 是 <strong>区分大小写的</strong></p>\n<p><a href=\"https://imgchr.com/i/3yzIXR\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/29/3yzIXR.png\" alt=\"3yzIXR.png\"></a></p>\n<ol>\n<li><p>在定义变量时，为了保证代码格式，<code>=</code> 的左右应该各保留一个空格</p>\n</li>\n<li><p>在 <code>Python</code> 中，如果 <strong>变量名</strong> 需要由 <strong>二个</strong> 或 <strong>多个单词</strong> 组成时，可以按照以下方式命名</p>\n<ol>\n<li>每个单词都使用小写字母</li>\n<li>单词与单词之间使用 <strong><code>_</code>下划线</strong> 连接</li>\n</ol>\n<ul>\n<li>例如：<code>first_name</code>、<code>last_name</code>、<code>qq_number</code>、<code>qq_password</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"驼峰命名法\"><a href=\"#驼峰命名法\" class=\"headerlink\" title=\"驼峰命名法\"></a>驼峰命名法</h3><ul>\n<li>当 <strong>变量名</strong> 是由二个或多个单词组成时，还可以利用驼峰命名法来命名</li>\n<li><strong>小驼峰式命名法</strong><ul>\n<li>第一个单词以小写字母开始，后续单词的首字母大写</li>\n<li>例如：<code>firstName</code>、<code>lastName</code></li>\n</ul>\n</li>\n<li><strong>大驼峰式命名法</strong><ul>\n<li>每一个单词的首字母都采用大写字母</li>\n<li>例如：<code>FirstName</code>、<code>LastName</code>、<code>CamelCase</code> </li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3yzj9e\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/29/3yzj9e.md.png\" alt=\"3yzj9e.md.png\"></a></p>\n<h2 id=\"03-变量定义\"><a href=\"#03-变量定义\" class=\"headerlink\" title=\"03. 变量定义\"></a>03. 变量定义</h2><ul>\n<li>在 Python 中，每个变量 <strong>在使用前都必须赋值</strong>，变量 <strong>赋值以后</strong> 该变量 <strong>才会被创建</strong></li>\n<li>等号（=）用来给变量赋值<ul>\n<li><code>=</code> 左边是一个变量名</li>\n<li><code>=</code> 右边是存储在变量中的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">变量名 = 值</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>变量定义之后，后续就可以直接使用了</p>\n</blockquote>\n<h2 id=\"04-变量的类型\"><a href=\"#04-变量的类型\" class=\"headerlink\" title=\"04. 变量的类型\"></a>04. 变量的类型</h2><ul>\n<li>在内存中创建一个变量，会包括：<ol>\n<li>变量的名称</li>\n<li>变量保存的数据</li>\n<li>变量存储数据的类型</li>\n<li>变量的地址（标示）</li>\n</ol>\n</li>\n</ul>\n<p><strong>在 <code>Python</code> 中定义变量时需要指定类型吗？</strong></p>\n<ul>\n<li>不需要</li>\n<li><code>Python</code> 可以根据 <code>=</code> 等号右侧的值，自动推导出变量中存储数据的类型</li>\n</ul>\n<h3 id=\"4-1-变量的类型\"><a href=\"#4-1-变量的类型\" class=\"headerlink\" title=\"4.1  变量的类型\"></a>4.1  变量的类型</h3><ul>\n<li>在 <code>Python</code> 中定义变量是 <strong>不需要指定类型</strong>（在其他很多高级语言中都需要）</li>\n<li>数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li>\n<li>数字型<ul>\n<li>整型 (<code>int</code>)</li>\n<li>浮点型（<code>float</code>）</li>\n<li>布尔型（<code>bool</code>） <ul>\n<li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li>\n<li>假 <code>False</code> <code>0</code></li>\n</ul>\n</li>\n<li>复数型 (<code>complex</code>)<ul>\n<li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非数字型<ul>\n<li>字符串</li>\n<li>列表</li>\n<li>元组</li>\n<li>字典</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>提示：在 Python 2.x 中，<strong>整数</strong> 根据保存数值的长度还分为：</p>\n<ul>\n<li><code>int</code>（整数）</li>\n<li><code>long</code>（长整数）</li>\n</ul>\n</blockquote>\n<ul>\n<li>使用 <code>type</code> 函数可以查看一个变量的类型</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: type(name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-不同类型变量之间的计算\"><a href=\"#4-2-不同类型变量之间的计算\" class=\"headerlink\" title=\"4.2   不同类型变量之间的计算\"></a>4.2   不同类型变量之间的计算</h3><h4 id=\"1-数字型变量-之间可以直接计算\"><a href=\"#1-数字型变量-之间可以直接计算\" class=\"headerlink\" title=\"1) 数字型变量 之间可以直接计算\"></a>1) <strong>数字型变量</strong> 之间可以直接计算</h4><ul>\n<li>在 Python 中，两个数字型变量是可以直接进行 算数运算的</li>\n<li>如果变量是 <code>bool</code> 型，在计算时<ul>\n<li><code>True</code> 对应的数字是 <code>1</code></li>\n<li><code>False</code> 对应的数字是 <code>0</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-字符串变量-之间使用-拼接字符串\"><a href=\"#2-字符串变量-之间使用-拼接字符串\" class=\"headerlink\" title=\"2) 字符串变量 之间使用 + 拼接字符串\"></a>2) <strong>字符串变量</strong> 之间使用 <code>+</code> 拼接字符串</h4><ul>\n<li>在 Python 中，字符串之间可以使用 <code>+</code> 拼接生成新的字符串</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: first_name = <span class=\"string\">\"三\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: last_name = <span class=\"string\">\"张\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">3</span>]: first_name + last_name</span><br><span class=\"line\">Out[<span class=\"number\">3</span>]: <span class=\"string\">'三张'</span></span><br></pre></td></tr></table></figure>\n\n<p>3) <strong>字符串变量</strong> 可以和 <strong>整数</strong> 使用 <code>*</code> 重复拼接相同的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [1]: &quot;-&quot; * 50</span><br><span class=\"line\">Out[1]: &#39;--------------------------------------------------&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-数字型变量-和-字符串-之间-不能进行其他计算\"><a href=\"#4-数字型变量-和-字符串-之间-不能进行其他计算\" class=\"headerlink\" title=\"4) 数字型变量 和 字符串 之间 不能进行其他计算\"></a>4) <strong>数字型变量</strong> 和 <strong>字符串</strong> 之间 <strong>不能进行其他计算</strong></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: first_name = <span class=\"string\">\"zhang\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: x = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">3</span>]: x + first_name</span><br><span class=\"line\">---------------------------------------------------------------------------</span><br><span class=\"line\">TypeError: unsupported operand type(s) <span class=\"keyword\">for</span> +: <span class=\"string\">'int'</span> <span class=\"keyword\">and</span> <span class=\"string\">'str'</span></span><br><span class=\"line\">类型错误：`+` 不支持的操作类型：`int` 和 `str`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-变量的输入\"><a href=\"#4-3-变量的输入\" class=\"headerlink\" title=\"4.3 变量的输入\"></a>4.3 变量的输入</h3><ul>\n<li>所谓 <strong>输入</strong>，就是 <strong>用代码</strong> <strong>获取</strong> 用户通过 <strong>键盘</strong> 输入的信息</li>\n<li>例如：去银行取钱，在 ATM 上输入密码</li>\n<li>在 Python 中，如果要获取用户在 <strong>键盘</strong> 上的输入信息，需要使用到 <code>input</code> 函数</li>\n</ul>\n<h4 id=\"1-关于函数\"><a href=\"#1-关于函数\" class=\"headerlink\" title=\"1) 关于函数\"></a>1) 关于函数</h4><ul>\n<li>一个 <strong>提前准备好的功能</strong>(别人或者自己写的代码)，<strong>可以直接使用</strong>，而 <strong>不用关心内部的细节</strong></li>\n<li>目前已经学习过的函数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>print(x)</td>\n<td>将 x 输出到控制台</td>\n</tr>\n<tr>\n<td>type(x)</td>\n<td>查看 x 的变量类型</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-input-函数实现键盘输入\"><a href=\"#2-input-函数实现键盘输入\" class=\"headerlink\" title=\"2) input 函数实现键盘输入\"></a>2) input 函数实现键盘输入</h4><ul>\n<li>在 Python 中可以使用 <code>input</code> 函数从键盘等待用户的输入</li>\n<li>用户输入的 <strong>任何内容</strong> Python 都认为是一个 <strong>字符串</strong></li>\n<li>语法如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">字符串变量 = input(<span class=\"string\">\"提示信息：\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-类型转换函数\"><a href=\"#3-类型转换函数\" class=\"headerlink\" title=\"3) 类型转换函数\"></a>3) 类型转换函数</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int(x)</td>\n<td>将 x 转换为一个整数</td>\n</tr>\n<tr>\n<td>float(x)</td>\n<td>将 x 转换到一个浮点数</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-4-变量的格式化输出\"><a href=\"#4-4-变量的格式化输出\" class=\"headerlink\" title=\"4.4 变量的格式化输出\"></a>4.4 变量的格式化输出</h3><blockquote>\n<p>苹果单价 <code>9.00</code> 元／斤，购买了 <code>5.00</code> 斤，需要支付 <code>45.00</code> 元</p>\n</blockquote>\n<ul>\n<li>在 Python 中可以使用 <code>print</code> 函数将信息输出到控制台</li>\n<li>如果希望输出文字信息的同时，<strong>一起输出</strong> <strong>数据</strong>，就需要使用到 <strong>格式化操作符</strong></li>\n<li><code>%</code> 被称为 <strong>格式化操作符</strong>，专门用于处理字符串中的格式<ul>\n<li>包含 <code>%</code> 的字符串，被称为 <strong>格式化字符串</strong></li>\n<li><code>%</code> 和不同的 <strong>字符</strong> 连用，<strong>不同类型的数据</strong> 需要使用 <strong>不同的格式化字符</strong></li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>格式化字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>有符号十进制整数，<code>%06d</code> 表示输出的整数显示位数，不足的地方使用 <code>0</code> 补全</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数，<code>%.2f</code> 表示小数点后只显示两位</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>输出 <code>%</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li>语法格式如下：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"格式化字符串\"</span> % 变量<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"格式化字符串\"</span> % (变量<span class=\"number\">1</span>, 变量<span class=\"number\">2.</span>..))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"课后练习-——-个人名片\"><a href=\"#课后练习-——-个人名片\" class=\"headerlink\" title=\"课后练习 —— 个人名片\"></a>课后练习 —— 个人名片</h4><p><strong>需求</strong></p>\n<ul>\n<li>在控制台依次提示用户输入：<strong>姓名</strong>、<strong>公司</strong>、<strong>职位</strong>、<strong>电话</strong>、<strong>邮箱</strong></li>\n<li>按照以下格式输出：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">**************************************************</span><br><span class=\"line\">公司名称</span><br><span class=\"line\"></span><br><span class=\"line\">姓名 (职位)</span><br><span class=\"line\"></span><br><span class=\"line\">电话：电话</span><br><span class=\"line\">邮箱：邮箱</span><br><span class=\"line\">**************************************************</span><br></pre></td></tr></table></figure>\n\n<p>实现代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">在控制台依次提示用户输入：姓名、公司、职位、电话、电子邮箱</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">name = input(<span class=\"string\">\"请输入姓名：\"</span>)</span><br><span class=\"line\">company = input(<span class=\"string\">\"请输入公司：\"</span>)</span><br><span class=\"line\">title = input(<span class=\"string\">\"请输入职位：\"</span>)</span><br><span class=\"line\">phone = input(<span class=\"string\">\"请输入电话：\"</span>)</span><br><span class=\"line\">email = input(<span class=\"string\">\"请输入邮箱：\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"*\"</span> * <span class=\"number\">50</span>)</span><br><span class=\"line\">print(company)</span><br><span class=\"line\">print()</span><br><span class=\"line\">print(<span class=\"string\">\"%s (%s)\"</span> % (name, title))</span><br><span class=\"line\">print()</span><br><span class=\"line\">print(<span class=\"string\">\"电话：%s\"</span> % phone)</span><br><span class=\"line\">print(<span class=\"string\">\"邮箱：%s\"</span> % email)</span><br><span class=\"line\">print(<span class=\"string\">\"*\"</span> * <span class=\"number\">50</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["python"],"tags":["python"]},{"title":"python 的注释","url":"/posts/af8ef3a3/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>注释的作用</li>\n<li>单行注释（行注释）</li>\n<li>多行注释（块注释）</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"01-注释的作用\"><a href=\"#01-注释的作用\" class=\"headerlink\" title=\"01. 注释的作用\"></a>01. 注释的作用</h2><blockquote>\n<p>使用用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性</p>\n</blockquote>\n<h2 id=\"02-单行注释-行注释\"><a href=\"#02-单行注释-行注释\" class=\"headerlink\" title=\"02. 单行注释(行注释)\"></a>02. 单行注释(行注释)</h2><ul>\n<li><p>以 <code>#</code> 开头，<code>#</code> 右边的所有东西都被当做说明文字，而不是真正要执行的程序，只起到辅助说明作用</p>\n</li>\n<li><p>示例代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这是第一个单行注释</span></span><br><span class=\"line\">print(<span class=\"string\">\"hello python\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为了保证代码的可读性，<code>#</code> 后面建议先添加一个空格，然后再编写相应的说明文字</p>\n</blockquote>\n<h3 id=\"在代码后面增加的单行注释\"><a href=\"#在代码后面增加的单行注释\" class=\"headerlink\" title=\"在代码后面增加的单行注释\"></a>在代码后面增加的单行注释</h3><ul>\n<li><p>在程序开发时，同样可以使用 <code>#</code> 在代码的后面（旁边）增加说明性的文字</p>\n</li>\n<li><p>但是，需要注意的是，<strong>为了保证代码的可读性</strong>，<strong>注释和代码之间</strong> 至少要有 <strong>两个空格</strong></p>\n</li>\n<li><p>示例代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello python\"</span>)  <span class=\"comment\"># 输出 `hello python`</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"03-多行注释（块注释）\"><a href=\"#03-多行注释（块注释）\" class=\"headerlink\" title=\"03. 多行注释（块注释）\"></a>03. 多行注释（块注释）</h2><ul>\n<li><p>如果希望编写的 <strong>注释信息很多，一行无法显示</strong>，就可以使用多行注释</p>\n</li>\n<li><p>要在 Python 程序中使用多行注释，可以用 <strong>一对 连续的 三个 引号</strong>(单引号和双引号都可以)</p>\n</li>\n<li><p>示例代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">这是一个多行注释</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">在多行注释之间，可以写很多很多的内容……</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span> </span><br><span class=\"line\">print(<span class=\"string\">\"hello python\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么时候需要使用注释？\"><a href=\"#什么时候需要使用注释？\" class=\"headerlink\" title=\"什么时候需要使用注释？\"></a>什么时候需要使用注释？</h3><ol>\n<li><strong>注释不是越多越好</strong>，对于一目了然的代码，不需要添加注释</li>\n<li>对于 <strong>复杂的操作</strong>，应该在操作开始前写上若干行注释</li>\n<li>对于 <strong>不是一目了然的代码</strong>，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码 2 个空格）</li>\n<li>绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么</li>\n</ol>\n<blockquote>\n<p>在一些正规的开发团队，通常会有 <strong>代码审核</strong> 的惯例，就是一个团队中彼此阅读对方的代码</p>\n</blockquote>\n<h3 id=\"关于代码规范\"><a href=\"#关于代码规范\" class=\"headerlink\" title=\"关于代码规范\"></a>关于代码规范</h3><ul>\n<li><code>Python</code> 官方提供有一系列 PEP（Python Enhancement Proposals） 文档</li>\n<li>其中第 8 篇文档专门针对 <strong>Python 的代码格式</strong> 给出了建议，也就是俗称的 <strong>PEP 8</strong></li>\n<li>文档地址：<a href=\"https://www.python.org/dev/peps/pep-0008/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/dev/peps/pep-0008/</a></li>\n<li>谷歌有对应的中文文档：<a href=\"http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/\" target=\"_blank\" rel=\"noopener\">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></li>\n</ul>\n<blockquote>\n<p>任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步</p>\n</blockquote>\n","categories":["python"],"tags":["python"]},{"title":"python 初识","url":"/posts/b2e6ec6/","content":"<blockquote>\n<p>人生苦短，我用 Python —— Life is short, you need Python</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p><a href=\"https://imgchr.com/i/3ytvff\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/29/3ytvff.md.png\" alt=\"3ytvff.md.png\"></a></p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>Python 的起源</li>\n<li>为什么要用 Python？</li>\n<li>Python 的特点</li>\n<li>Python 的优缺点</li>\n</ul>\n<h2 id=\"01-Python-的起源\"><a href=\"#01-Python-的起源\" class=\"headerlink\" title=\"01. Python 的起源\"></a>01. Python 的起源</h2><blockquote>\n<p>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）</p>\n</blockquote>\n<p>![002_吉多-w256](E:/Python/课件和代码/课件/day01_markdown/markdown/media/14950329208518/002_吉多.jpg</p>\n<ol>\n<li>1989 年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的<strong>解释程序</strong>，作为 ABC 语言的一种继承（<strong>感觉下什么叫牛人</strong>）</li>\n<li>ABC 是由吉多参加设计的一种教学语言，就吉多本人看来，ABC 这种语言非常优美和强大，是<strong>专门为非专业程序员设计的</strong>。但是 ABC 语言并没有成功，究其原因，吉多认为是<strong>非开放</strong>造成的。吉多决心在 Python 中避免这一错误，并获取了非常好的效果</li>\n<li>之所以选中 Python（蟒蛇） 作为程序的名字，是因为他是 BBC 电视剧——蒙提·派森的飞行马戏团（Monty Python’s Flying Circus）的爱好者</li>\n<li>1991 年，第一个 Python <strong>解释器</strong> 诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件</li>\n</ol>\n<h3 id=\"1-1-解释器（科普）\"><a href=\"#1-1-解释器（科普）\" class=\"headerlink\" title=\"1.1 解释器（科普）\"></a>1.1 解释器（科普）</h3><p><strong>计算机不能直接理解任何除机器语言以外的语言</strong>，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。<strong>将其他语言翻译成机器语言的工具，被称为编译器</strong></p>\n<p>编译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译时间点的不同</strong>。当编译器<strong>以解释方式运行的时候</strong>，也称之为<strong>解释器</strong></p>\n<p><a href=\"https://imgchr.com/i/3ytslF\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/29/3ytslF.md.png\" alt=\"3ytslF.md.png\"></a></p>\n<ul>\n<li><strong>编译型语言</strong>：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如 C、C++</li>\n<li><strong>解释型语言</strong>：解释型语言编写的程序不进行预先编译，以文本方式存储程序代码，会将代码一句一句直接运行。在发布程序时，看起来省了道编译工序，但是在运行程序的时候，必须先解释再运行</li>\n</ul>\n<h4 id=\"编译型语言和解释型语言对比\"><a href=\"#编译型语言和解释型语言对比\" class=\"headerlink\" title=\"编译型语言和解释型语言对比\"></a>编译型语言和解释型语言对比</h4><ul>\n<li><strong>速度</strong> —— 编译型语言比解释型语言执行速度快</li>\n<li><strong>跨平台性</strong> —— 解释型语言比编译型语言跨平台性好</li>\n</ul>\n<h3 id=\"1-2-Python-的设计目标\"><a href=\"#1-2-Python-的设计目标\" class=\"headerlink\" title=\"1.2 Python 的设计目标\"></a>1.2 Python 的设计目标</h3><p>1999 年，吉多·范罗苏姆向 DARPA 提交了一条名为 “Computer Programming for Everybody” 的资金申请，并在后来说明了他对 Python 的目标：</p>\n<ul>\n<li>一门<strong>简单直观的语言</strong>并与主要竞争者一样强大</li>\n<li><strong>开源</strong>，以便任何人都可以为它做贡献</li>\n<li>代码<strong>像纯英语那样容易理解</strong></li>\n<li>适用于<strong>短期</strong>开发的日常任务</li>\n</ul>\n<p>这些想法中的基本都已经成为现实，Python 已经成为一门流行的编程语言</p>\n<h3 id=\"1-3-Python-的设计哲学\"><a href=\"#1-3-Python-的设计哲学\" class=\"headerlink\" title=\"1.3 Python 的设计哲学\"></a>1.3 Python 的设计哲学</h3><ol>\n<li>优雅</li>\n<li>明确</li>\n<li>简单</li>\n</ol>\n<!-- > 在 Python 解释器内运行 `import this` 可以获得完整的列表 -->\n\n<ul>\n<li>Python 开发者的哲学是：<strong>用一种方法，最好是只有一种方法来做一件事</strong></li>\n<li>如果面临多种选择，Python 开发者一般会拒绝花俏的语法，而选择<strong>明确没有或者很少有歧义的语法</strong></li>\n</ul>\n<blockquote>\n<p>在 Python 社区，吉多被称为“仁慈的独裁者”</p>\n</blockquote>\n<h2 id=\"02-为什么选择-Python？\"><a href=\"#02-为什么选择-Python？\" class=\"headerlink\" title=\"02. 为什么选择 Python？\"></a>02. 为什么选择 Python？</h2><ul>\n<li>代码量少</li>\n<li>……</li>\n</ul>\n<blockquote>\n<p>同一样问题，用不同的语言解决，代码量差距还是很多的，一般情况下 <code>Python</code> 是 <code>Java</code> 的 <strong>1/5</strong>，所以说 <strong>人生苦短，我用 Python</strong></p>\n</blockquote>\n<h2 id=\"03-Python-特点\"><a href=\"#03-Python-特点\" class=\"headerlink\" title=\"03. Python 特点\"></a>03. Python 特点</h2><ul>\n<li>Python 是<strong>完全面向对象的语言</strong><ul>\n<li><strong>函数</strong>、<strong>模块</strong>、<strong>数字</strong>、<strong>字符串</strong>都是对象，<strong>在 Python 中一切皆对象</strong></li>\n<li>完全支持继承、重载、多重继承</li>\n<li>支持重载运算符，也支持泛型设计</li>\n</ul>\n</li>\n<li>Python <strong>拥有一个强大的标准库</strong>，Python 语言的核心只包含 <strong>数字</strong>、<strong>字符串</strong>、<strong>列表</strong>、<strong>字典</strong>、<strong>文件</strong> 等常见类型和函数，而由 Python 标准库提供了 <strong>系统管理</strong>、<strong>网络通信</strong>、<strong>文本处理</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong>、<strong>XML 处理</strong> 等额外的功能</li>\n<li>Python 社区提供了<strong>大量的第三方模块</strong>，使用方式与标准库类似。它们的功能覆盖 <strong>科学计算</strong>、<strong>人工智能</strong>、<strong>机器学习</strong>、<strong>Web 开发</strong>、<strong>数据库接口</strong>、<strong>图形系统</strong> 多个领域</li>\n</ul>\n<h3 id=\"面向对象的思维方式\"><a href=\"#面向对象的思维方式\" class=\"headerlink\" title=\"面向对象的思维方式\"></a>面向对象的思维方式</h3><ul>\n<li><strong>面向对象</strong> 是一种 <strong>思维方式</strong>，也是一门 <strong>程序设计技术</strong></li>\n<li>要解决一个问题前，首先考虑 <strong>由谁</strong> 来做，怎么做事情是 <strong>谁</strong> 的职责，最后把事情做好就行！<ul>\n<li><strong>对象</strong> 就是 <strong>谁</strong></li>\n</ul>\n</li>\n<li>要解决复杂的问题，就可以找<strong>多个不同的对象</strong>，<strong>各司其职</strong>，共同实现，最终完成需求</li>\n</ul>\n<h2 id=\"04-Python-的优缺点\"><a href=\"#04-Python-的优缺点\" class=\"headerlink\" title=\"04. Python 的优缺点\"></a>04. Python 的优缺点</h2><h3 id=\"4-1-优点\"><a href=\"#4-1-优点\" class=\"headerlink\" title=\"4.1 优点\"></a>4.1 优点</h3><ul>\n<li>简单、易学</li>\n<li>免费、开源</li>\n<li><strong>面向对象</strong></li>\n<li>丰富的库</li>\n<li>可扩展性<ul>\n<li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用 <code>C</code> 或 <code>C++</code> 编写，然后在 <code>Python</code> 程序中使用它们</li>\n</ul>\n</li>\n<li>……</li>\n</ul>\n<h3 id=\"4-2-缺点\"><a href=\"#4-2-缺点\" class=\"headerlink\" title=\"4.2 缺点\"></a>4.2 缺点</h3><ul>\n<li>运行速度</li>\n<li>国内市场较小</li>\n<li>中文资料匮乏</li>\n</ul>\n","categories":["python"],"tags":["python"]},{"title":"python的安装和pycharm的安装","url":"/posts/e0facaa1/","content":"<p>基于python3和selenium3做自动化测试，俗话说：工欲善其事必先利其器；没有金刚钻就不揽那瓷器活，磨刀不误砍柴工，因此你必须会搭建基本的开发环境，掌握python基本的语法和一个IDE来进行开发，这里通过详细的讲解，介绍怎么搭建python3开发环境，并提供一个基本入门的代码，后续逐步提供系列实践文章。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a><strong>安装包</strong></h3><h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a><strong>python</strong></h4><p>笔者使用python3.6.4，请根据机器是64位还是32位来选择对应的python版本。（相信绝大部分人都可以很从容的来查看自己机器的位数，在这里就不赘述了，如果不清楚自己可以百度一下就可以）</p>\n<p>可以去python官网：<a href=\"https://www.python.org/下载对应机器的安装包。\" target=\"_blank\" rel=\"noopener\">https://www.python.org/下载对应机器的安装包。</a></p>\n<p>安装包下载</p>\n<p>第一步：进入python官网，点击download，如下图所示：</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131352.png\" alt=\"\"></p>\n<p>第二步：选择对应的操作系统和python版本，如下图所示：</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131500.png\" alt=\"\"></p>\n<p>第三步：点击要下载的python版本，即可下载安装包，如下图所示：</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131519.png\" alt=\"\"></p>\n<p><strong>开发工具</strong></p>\n<p>笔者使用pyCharm开源版本<br><a href=\"https://download.jetbrains.com/python/pycharm-community-2017.3.2.exe\" target=\"_blank\" rel=\"noopener\">https://download.jetbrains.com/python/pycharm-community-2017.3.2.exe</a></p>\n<h2 id=\"python安装过程\"><a href=\"#python安装过程\" class=\"headerlink\" title=\"python安装过程\"></a><strong>python安装过程</strong></h2><p>第一步：双击已下载的python安装包，出现如下图所示的界面，点击运行</p>\n<p>  <img src=\"http://photo.jomeswang.top/20200410131535.png\" alt=\"\"></p>\n<p>然后出现如下界面：</p>\n<p>  <img src=\"http://photo.jomeswang.top/20200410131552.png\" alt=\"\"></p>\n<p>在这里我选择的是自定义安装（Customize installation）,一定要勾选Add_Python 3.6 to PATH,防止手工添加环境变量 ，添加到环境变量也可以等安装完成之后手动添加到环境变量中，如果不添加环境变量运行python时则会出现如下界面：</p>\n<p> <img src=\"http://photo.jomeswang.top/20200410131606.png\" alt=\"\"></p>\n<p>在这里我没有选择添加到环境变量中，后面会手动配置</p>\n<p>继续下一步界面如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131621.png\" alt=\"\"></p>\n<p>选择安装的属性，Documentation、pip、tcl/tk and IDLE 必须安装，tcl/tk and IDLE是Python环境的开发环境窗口，pip用来安装numpy等package。<br>我选择的是全部安装</p>\n<p>继续下一步</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131718.png\" alt=\"\"></p>\n<p>ok了，点击install进行安装，在这里我安装的目录是D盘，D:\\Python36 目录名可以自定义</p>\n<p>注意我在这里依旧没有选择添加到环境变量，不想麻烦的话，可以直接选择添加到环境变量中</p>\n<p>安装中</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131732.png\" alt=\"\"></p>\n<p>安装成功：</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131754.png\" alt=\"\"></p>\n<p>验证是否安装成功，使用系统的cmd命令：</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131941.png\" alt=\"\"></p>\n<p>验证失败，如果在安装的过程你选择了添加到环境变量中，输入python就会直接进入python的环境中，现在开始演示手动添加到环境变量：</p>\n<p>首先，点击计算机-&gt;属性-&gt;高级系统设置</p>\n<p><img src=\"http://photo.jomeswang.top/20200410131954.png\" alt=\"\"></p>\n<p><img src=\"http://photo.jomeswang.top/20200410132024.png\" alt=\"\"></p>\n<p>选择环境变量</p>\n<p><img src=\"http://photo.jomeswang.top/20200410132053.png\" alt=\"\"></p>\n<p>新建 PATH </p>\n<p><img src=\"C:%5CUsers%5CAdmin-Jumper%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410132115623.png\" alt=\"image-20200410132115623\"></p>\n<p>点击确定，接下来进行验证python是否安装成功：</p>\n<p>依然是cmd命令下输入python，效果如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20200410132143.png\" alt=\"\"></p>\n<p>当你输入python出现如下命令时则表示python环境已经安装好了，就可以进行python之旅了。</p>\n<p>安装pycharm，</p>\n<p>先安装jb toolbox    <a href=\"https://www.jetbrains.com/toolbox-app/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/toolbox-app/</a>   再在这里安装pycharm</p>\n<p>然后就可以新建项目并创建py文件运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(&quot;123&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>试一下啊能否运行成功</p>\n","categories":["python"],"tags":["pycharm"]},{"title":"Linux Centos创建新用户","url":"/posts/ff24eac4/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>感觉一直用root账户登录很不安全，因此创建一个新用户来进行日常的使用</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-新创建一个用户\"><a href=\"#2-1-新创建一个用户\" class=\"headerlink\" title=\"2.1 新创建一个用户\"></a>2.1 新创建一个用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">adduser jomeswang</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jomeswang为我的用户名，你可以自行修改为自己的\"><a href=\"#jomeswang为我的用户名，你可以自行修改为自己的\" class=\"headerlink\" title=\"jomeswang为我的用户名，你可以自行修改为自己的\"></a><code>jomeswang</code>为我的用户名，你可以自行修改为自己的</h2><h3 id=\"2-2-创建-新用户的密码\"><a href=\"#2-2-创建-新用户的密码\" class=\"headerlink\" title=\"2.2 创建 新用户的密码\"></a>2.2 创建 新用户的密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">passwd jomeswang</span><br></pre></td></tr></table></figure>\n\n<p>然后输入两次密码即可</p>\n<h3 id=\"2-3-对用户进行sudo授权\"><a href=\"#2-3-对用户进行sudo授权\" class=\"headerlink\" title=\"2.3 对用户进行sudo授权\"></a>2.3 对用户进行sudo授权</h3><p> 个人用户的权限只可以在本home下有完整权限，其他目录要看别人授权。而经常需要root用户的权限，这时候sudo可以化身为root来操作。我记得我曾经sudo创建了文件，然后发现自己并没有读写权限，因为查看权限是root创建的。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls -l &#x2F;etc&#x2F;sudoers</span><br><span class=\"line\">-r-------- 1 root root 4251 9月  25 15:08 &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>\n\n<p>只有读权限，然后为其添加写权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod -v u+w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以写入内容了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>\n\n<p>在下面的一行追加新增的用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## Allow root to run any commands anywher  </span><br><span class=\"line\">root    ALL&#x3D;(ALL)       ALL  </span><br><span class=\"line\">jomeswang    ALL&#x3D;(ALL)       ALL  #这个是新增的用户</span><br></pre></td></tr></table></figure>\n\n<p>按:wq 保存，这时候记得将写权限收回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod -v u-w &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>\n\n<p>这时候使用新用户登录，就可以使用sudo权限了</p>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Linux 之 打包，安装，查找","url":"/posts/f066349a/","content":"<p>Linux 之 打包，安装，查找</p>\n<a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>查找文件<ul>\n<li><code>find</code></li>\n</ul>\n</li>\n<li>软链接<ul>\n<li><code>ln</code></li>\n</ul>\n</li>\n<li>打包和压缩<ul>\n<li><code>tar</code></li>\n</ul>\n</li>\n<li>软件安装<ul>\n<li><code>apt-get</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"01-查找文件\"><a href=\"#01-查找文件\" class=\"headerlink\" title=\"01. 查找文件\"></a>01. 查找文件</h2><ul>\n<li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">find [路径] -name “*.py”</td>\n<td align=\"left\">查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果省略路径，表示在当前文件夹下查找</li>\n<li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li>\n<li>有关 <code>find</code> 的高级使用，在就业班会讲</li>\n</ul>\n<h3 id=\"演练目标\"><a href=\"#演练目标\" class=\"headerlink\" title=\"演练目标\"></a>演练目标</h3><ul>\n<li>\\1. 搜索桌面目录下，文件名包含 <code>1</code> 的文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find -name <span class=\"string\">\"*1*\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>\\2. 搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find -name <span class=\"string\">\"*.txt\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>\\3. 搜索桌面目录下，以数字 <code>1</code> 开头的文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">find -name <span class=\"string\">\"1*\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"02-软链接\"><a href=\"#02-软链接\" class=\"headerlink\" title=\"02. 软链接\"></a>02. 软链接</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">ln -s 被链接的源文件 链接文件</td>\n<td align=\"left\">建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td>\n</tr>\n</tbody></table>\n<ul>\n<li>注意：</li>\n<li>\\1. 没有 -<code>s</code> 选项建立的是一个硬链接文件<ul>\n<li>两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></li>\n</ul>\n</li>\n<li>\\2. <strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li>\n</ul>\n<h3 id=\"演练目标-1\"><a href=\"#演练目标-1\" class=\"headerlink\" title=\"演练目标\"></a>演练目标</h3><ul>\n<li>\\1. 将桌面目录下的 <code>01.py</code> <strong>移动</strong>到 <code>demo/b/c</code> 目录下</li>\n<li>\\2. 在桌面目录下新建 <code>01.py</code>的 软链接  <code>FirstPython</code><ul>\n<li>分别使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 建立 <code>FirstPython</code> 的软链接</li>\n</ul>\n</li>\n<li>\\3. 将 <code>FirstPython</code> <strong>移动</strong>到 <code>demo</code> 目录下，对比使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 的区别</li>\n</ul>\n<h3 id=\"硬链接简介（知道）\"><a href=\"#硬链接简介（知道）\" class=\"headerlink\" title=\"硬链接简介（知道）\"></a>硬链接简介（知道）</h3><ul>\n<li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li>\n</ul>\n<h4 id=\"硬链接演练\"><a href=\"#硬链接演练\" class=\"headerlink\" title=\"硬链接演练\"></a>硬链接演练</h4><ul>\n<li>\\1. 在 <code>~/Desktop/demo</code> 目录下建立 <code>~/Desktop/demo/b/c/01.py</code> 的硬链接 <code>01_hard</code></li>\n<li>\\2. 使用 <code>ls -l</code> 查看文件的<strong>硬链接数</strong>（硬链接——有多少种方式可以访问文件或者目录）</li>\n<li>\\3. 删除 <code>~/Desktop/demo/b/c/01.py</code>，并且使用 <code>tree</code> 来确认 <code>demo</code> 目录下的三个链接文件</li>\n</ul>\n<h4 id=\"文件软硬链接的示意图\"><a href=\"#文件软硬链接的示意图\" class=\"headerlink\" title=\"文件软硬链接的示意图\"></a>文件软硬链接的示意图</h4><p><a href=\"https://imgchr.com/i/3wtJiQ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/27/3wtJiQ.md.png\" alt=\"3wtJiQ.md.png\"></a></p>\n<blockquote>\n<p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p>\n</blockquote>\n<ul>\n<li>提示：<ul>\n<li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li>\n<li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li>\n<li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"03-打包压缩\"><a href=\"#03-打包压缩\" class=\"headerlink\" title=\"03. 打包压缩\"></a>03. 打包压缩</h2><ul>\n<li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li>\n<li>在不同操作系统中，常用的打包压缩方式是不同的<ul>\n<li><code>Windows</code> 常用 <code>rar</code></li>\n<li><code>Mac</code> 常用 <code>zip</code></li>\n<li><code>Linux</code> 常用 <code>tar.gz</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-1-打包-／-解包\"><a href=\"#3-1-打包-／-解包\" class=\"headerlink\" title=\"3.1 打包 ／ 解包\"></a>3.1 打包 ／ 解包</h3><ul>\n<li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong></li>\n<li><code>tar</code> 的命令格式如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包文件</span></span><br><span class=\"line\">tar -cvf 打包文件.tar 被打包的文件／路径...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解包文件</span></span><br><span class=\"line\">tar -xvf 打包文件.tar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>tar</code> 选项说明</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">c</td>\n<td align=\"left\">生成档案文件，创建打包文件</td>\n</tr>\n<tr>\n<td align=\"left\">x</td>\n<td align=\"left\">解开档案文件</td>\n</tr>\n<tr>\n<td align=\"left\">v</td>\n<td align=\"left\">列出归档解档的详细过程，显示进度</td>\n</tr>\n<tr>\n<td align=\"left\">f</td>\n<td align=\"left\">指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p>\n</blockquote>\n<h4 id=\"打包解包演练\"><a href=\"#打包解包演练\" class=\"headerlink\" title=\"打包解包演练\"></a>打包解包演练</h4><ol>\n<li>删除桌面下的所有内容</li>\n<li>在桌面下新建三个空白文件 <code>01.py</code>、<code>02.py</code>、<code>03.py</code></li>\n<li>将这三个文件打一个 <code>py.tar</code> 的包</li>\n<li>新建 <code>tar</code> 目录，并且将 <code>py.tar</code> 移动到 <code>tar</code> 目录下</li>\n<li>解包 <code>py.tar</code></li>\n</ol>\n<h3 id=\"3-2-压缩／解压缩\"><a href=\"#3-2-压缩／解压缩\" class=\"headerlink\" title=\"3.2 压缩／解压缩\"></a>3.2 压缩／解压缩</h3><h4 id=\"1-gzip\"><a href=\"#1-gzip\" class=\"headerlink\" title=\"1) gzip\"></a>1) <code>gzip</code></h4><ul>\n<li><code>tar</code>与 <code>gzip</code>命令结合可以使用实现文件打包和压缩<ul>\n<li><code>tar</code> 只负责打包文件，但不压缩</li>\n<li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p>\n</blockquote>\n<ul>\n<li>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</li>\n<li>命令格式如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩文件</span></span><br><span class=\"line\">tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压缩文件</span></span><br><span class=\"line\">tar -zxvf 打包文件.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压缩到指定路径</span></span><br><span class=\"line\">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-C</td>\n<td align=\"left\">解压缩到指定目录，注意：要解压缩的目录必须存在</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-bzip2-two\"><a href=\"#2-bzip2-two\" class=\"headerlink\" title=\"2) bzip2(two)\"></a>2) <code>bzip2(two)</code></h4><ul>\n<li><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）<ul>\n<li><code>tar</code> 只负责打包文件，但不压缩，</li>\n<li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li>\n</ul>\n</li>\n<li>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</li>\n<li>命令格式如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压缩文件</span></span><br><span class=\"line\">tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压缩文件</span></span><br><span class=\"line\">tar -jxvf 打包文件.tar.bz2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"04-软件安装\"><a href=\"#04-软件安装\" class=\"headerlink\" title=\"04. 软件安装\"></a>04. 软件安装</h2><h2 id=\"4-1-通过-apt-安装／卸载软件\"><a href=\"#4-1-通过-apt-安装／卸载软件\" class=\"headerlink\" title=\"4.1 通过 apt 安装／卸载软件\"></a>4.1 通过 apt 安装／卸载软件</h2><ul>\n<li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li>\n<li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 安装软件</span></span><br><span class=\"line\">$ sudo apt install 软件包</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 卸载软件</span></span><br><span class=\"line\">$ sudo apt remove 软件名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 更新已安装的包</span></span><br><span class=\"line\">$ sudo apt upgrade</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装演练\"><a href=\"#安装演练\" class=\"headerlink\" title=\"安装演练\"></a>安装演练</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一个小火车提示</span></span><br><span class=\"line\">$ sudo apt install sl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个比较漂亮的查看当前进程排名的软件</span></span><br><span class=\"line\">$ sudo apt install htop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-配置软件源\"><a href=\"#4-2-配置软件源\" class=\"headerlink\" title=\"4.2 配置软件源\"></a>4.2 配置软件源</h2><ul>\n<li>如果希望在 <code>ubuntu</code> 中安装软件，<strong>更加快速</strong>，可以通过设置<strong>镜像源</strong>，选择一个访问网速更快的服务器，来提供软件下载／安装服务</li>\n<li>提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了</li>\n</ul>\n<blockquote>\n<p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p>\n</blockquote>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Linux 系统信息相关命令","url":"/posts/3b5592a6/","content":"<ul>\n<li><p>本节内容主要是为了方便通过远程终端维护服务器时，查看服务器上当前 <strong>系统日期和时间</strong> ／ <strong>磁盘空间占用情况</strong> ／ <strong>程序执行情况</strong></p>\n<a id=\"more\"></a>\n</li>\n<li><p>本小结学习的终端命令基本都是查询命令，通过这些命令对系统资源的使用情况有个了解</p>\n</li>\n</ul>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>时间和日期<ul>\n<li><code>date</code></li>\n<li><code>cal</code></li>\n</ul>\n</li>\n<li>磁盘和目录空间<ul>\n<li><code>df</code></li>\n<li><code>du</code></li>\n</ul>\n</li>\n<li>进程信息<ul>\n<li><code>ps</code></li>\n<li><code>top</code></li>\n<li><code>kill</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"01-时间和日期\"><a href=\"#01-时间和日期\" class=\"headerlink\" title=\"01. 时间和日期\"></a>01. 时间和日期</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">date</td>\n<td align=\"left\">查看系统时间</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">cal</td>\n<td align=\"left\"><code>calendar</code> 查看日历，<code>-y</code> 选项可以查看一年的日历</td>\n</tr>\n</tbody></table>\n<h2 id=\"02-磁盘信息\"><a href=\"#02-磁盘信息\" class=\"headerlink\" title=\"02. 磁盘信息\"></a>02. 磁盘信息</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">df -h</td>\n<td align=\"left\"><code>disk free</code> 显示磁盘剩余空间</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">du -h [目录名]</td>\n<td align=\"left\"><code>disk usage</code> 显示目录下的文件大小</td>\n</tr>\n</tbody></table>\n<ul>\n<li>选项说明</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-h</td>\n<td align=\"left\">以人性化的方式显示文件大小</td>\n</tr>\n</tbody></table>\n<h2 id=\"03-进程信息\"><a href=\"#03-进程信息\" class=\"headerlink\" title=\"03. 进程信息\"></a>03. 进程信息</h2><ul>\n<li>所谓 <strong>进程</strong>，通俗地说就是 <strong>当前正在执行的一个程序</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">ps aux</td>\n<td align=\"left\"><code>process status</code> 查看进程的详细状况</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">top</td>\n<td align=\"left\">动态显示运行中的进程并且排序</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">kill [-9] 进程代号</td>\n<td align=\"left\">终止指定代号的进程，<code>-9</code> 表示强行终止</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序</p>\n</blockquote>\n<ul>\n<li><code>ps</code> 选项说明功能</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">a</td>\n<td align=\"left\">显示终端上的所有进程，包括其他用户的进程</td>\n</tr>\n<tr>\n<td align=\"left\">u</td>\n<td align=\"left\">显示进程的详细状态</td>\n</tr>\n<tr>\n<td align=\"left\">x</td>\n<td align=\"left\">显示没有控制终端的进程</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：使用 <code>kill</code> 命令时，最好只终止由当前用户开启的进程，而不要终止 <code>root</code> 身份开启的进程，否则可能导致系统崩溃</p>\n<ul>\n<li>要退出 <code>top</code> 可以直接输入 <code>q</code></li>\n</ul>\n</blockquote>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Linux vi--终端中的编辑器","url":"/posts/e38d5fb9/","content":"<h1 id=\"Linux-vi–终端中的编辑器\"><a href=\"#Linux-vi–终端中的编辑器\" class=\"headerlink\" title=\"Linux-vi–终端中的编辑器\"></a>Linux-vi–终端中的编辑器</h1><hr/>\n<a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><code>vi</code> 简介</li>\n<li>打开和新建文件</li>\n<li>三种工作模式</li>\n<li>常用命令</li>\n<li>分屏命令</li>\n<li>常用命令速查图</li>\n</ul>\n<h2 id=\"01-vi-简介\"><a href=\"#01-vi-简介\" class=\"headerlink\" title=\"01. vi 简介\"></a>01. <code>vi</code> 简介</h2><h3 id=\"1-1-学习-vi-的目的\"><a href=\"#1-1-学习-vi-的目的\" class=\"headerlink\" title=\"1.1 学习 vi 的目的\"></a>1.1 学习 <code>vi</code> 的目的</h3><ul>\n<li>在工作中，要对 <strong>服务器</strong> 上的文件进行 <strong>简单</strong> 的修改，可以使用 <code>ssh</code> 远程登录到服务器上，并且使用 <code>vi</code> 进行快速的编辑即可</li>\n<li>常见需要修改的文件包括：<ul>\n<li><strong>源程序</strong></li>\n<li><strong>配置文件</strong>，例如 <code>ssh</code> 的配置文件 <code>~/.ssh/config</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>在没有图形界面的环境下，要编辑文件，<code>vi</code> 是最佳选择！</li>\n<li>每一个要使用 Linux 的程序员，都应该或多或少的学习一些 <code>vi</code> 的常用命令</li>\n</ul>\n</blockquote>\n<h3 id=\"1-2-vi-和-vim\"><a href=\"#1-2-vi-和-vim\" class=\"headerlink\" title=\"1.2 vi 和 vim\"></a>1.2 vi 和 vim</h3><ul>\n<li>在很多 <code>Linux</code> 发行版中，直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li>\n</ul>\n<h4 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a>vi</h4><ul>\n<li><code>vi</code> 是 <code>Visual interface</code> 的简称，是 <code>Linux</code> 中 <strong>最经典</strong> 的文本编辑器</li>\n<li><code>vi</code> 的核心设计思想 —— <strong>让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作</strong></li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3webkV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/27/3webkV.md.png\" alt=\"3webkV.md.png\"></a></p>\n<ul>\n<li><code>vi</code> 的特点：<ul>\n<li><strong>没有图形界面</strong> 的 <strong>功能强大</strong> 的编辑器</li>\n<li>只能是编辑 <strong>文本内容</strong>，不能对字体、段落进行排版</li>\n<li><strong>不支持鼠标操作</strong></li>\n<li><strong>没有菜单</strong></li>\n<li><strong>只有命令</strong></li>\n</ul>\n</li>\n<li><code>vi</code> 编辑器在 <strong>系统管理</strong>、<strong>服务器管理</strong> 编辑文件时，<strong>其功能永远不是图形界面的编辑器能比拟的</strong></li>\n</ul>\n<h4 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a><code>vim</code></h4><p><strong>vim = vi improved</strong></p>\n<ul>\n<li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，支持 <strong>代码补全</strong>、<strong>编译</strong> 及 <strong>错误跳转</strong> 等方便编程的功能特别丰富，在程序员中被广泛使用，被称为 <strong>编辑器之神</strong></li>\n</ul>\n<h4 id=\"查询软连接命令（知道）\"><a href=\"#查询软连接命令（知道）\" class=\"headerlink\" title=\"查询软连接命令（知道）\"></a>查询软连接命令（知道）</h4><ul>\n<li>在很多 <code>Linux</code> 发行版中直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找 vi 的运行文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">which</span> vi</span><br><span class=\"line\">$ ls -l /usr/bin/vi</span><br><span class=\"line\">$ ls -l /etc/alternatives/vi</span><br><span class=\"line\">$ ls -l /usr/bin/vim.basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找 vim 的运行文件</span></span><br><span class=\"line\">$ <span class=\"built_in\">which</span> vim</span><br><span class=\"line\">$ ls -l /usr/bin/vim</span><br><span class=\"line\">$ ls -l /etc/alternatives/vim</span><br><span class=\"line\">$ ls -l /usr/bin/vim.basic</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"02-打开和新建文件\"><a href=\"#02-打开和新建文件\" class=\"headerlink\" title=\"02. 打开和新建文件\"></a>02. 打开和新建文件</h2><ul>\n<li>在终端中输入 <code>vi</code> <strong>在后面跟上文件名</strong> 即可</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi 文件名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果文件已经存在，会直接打开该文件</li>\n<li>如果文件不存在，会新建一个文件</li>\n</ul>\n<h3 id=\"2-1-打开文件并且定位行\"><a href=\"#2-1-打开文件并且定位行\" class=\"headerlink\" title=\"2.1 打开文件并且定位行\"></a>2.1 打开文件并且定位行</h3><ul>\n<li><p>在日常工作中，有可能会遇到 <strong>打开一个文件，并定位到指定行</strong> 的情况</p>\n</li>\n<li><p>例如：在开发时，<strong>知道某一行代码有错误</strong>，可以 <strong>快速定位</strong> 到出错代码的位置</p>\n</li>\n<li><p>这个时候，可以使用以下命令打开文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vi 文件名 +行数</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：如果只带上 <code>+</code> 而不指定行号，会直接定位到文件末尾</p>\n</blockquote>\n<h3 id=\"2-2-异常处理\"><a href=\"#2-2-异常处理\" class=\"headerlink\" title=\"2.2 异常处理\"></a>2.2 异常处理</h3><ul>\n<li>如果 <code>vi</code> 异常退出，在磁盘上可能会保存有 <strong>交换文件</strong></li>\n<li>下次再使用 <code>vi</code> 编辑该文件时，会看到以下屏幕信息，按下字母 <code>d</code> 可以 <strong>删除交换文件</strong> 即可</li>\n</ul>\n<blockquote>\n<p>提示：按下键盘时，注意关闭输入法</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/3weqYT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/27/3weqYT.md.png\" alt=\"3weqYT.md.png\"></a></p>\n<h2 id=\"03-三种工作模式\"><a href=\"#03-三种工作模式\" class=\"headerlink\" title=\"03. 三种工作模式\"></a>03. 三种工作模式</h2><ul>\n<li><p><code>vi</code> 有三种基本工作模式：</p>\n<ol>\n<li><strong>命令模式</strong><ul>\n<li><strong>打开文件首先进入命令模式</strong>，是使用 <code>vi</code> 的 <strong>入口</strong></li>\n<li>通过 <strong>命令</strong> 对文件进行常规的编辑操作，例如：<strong>定位</strong>、<strong>翻页</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>删除</strong>……</li>\n<li>在其他图形编辑器下，通过 <strong>快捷键</strong> 或者 <strong>鼠标</strong> 实现的操作，都在 <strong>命令模式</strong> 下实现</li>\n</ul>\n</li>\n<li><strong>末行模式</strong> —— 执行 <strong>保存</strong>、<strong>退出</strong> 等操作 <ul>\n<li>要退出 <code>vi</code> 返回到控制台，需要在末行模式下输入命令</li>\n<li><strong>末行模式</strong> 是 <code>vi</code> 的 <strong>出口</strong></li>\n</ul>\n</li>\n<li><strong>编辑模式</strong> —— 正常的编辑文字</li>\n</ol>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3weTwq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/27/3weTwq.md.png\" alt=\"3weTwq.md.png\"></a></p>\n<blockquote>\n<p>提示：在 <code>Touch Bar</code> 的 Mac 电脑上 ，按 <code>ESC</code> 不方便，可以使用 <code>CTRL + [</code> 替代</p>\n</blockquote>\n<h3 id=\"末行模式命令\"><a href=\"#末行模式命令\" class=\"headerlink\" title=\"末行模式命令\"></a>末行模式命令</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">w</td>\n<td align=\"center\">write</td>\n<td>保存</td>\n</tr>\n<tr>\n<td align=\"center\">q</td>\n<td align=\"center\">quit</td>\n<td>退出，如果没有保存，不允许退出</td>\n</tr>\n<tr>\n<td align=\"center\">q!</td>\n<td align=\"center\">quit</td>\n<td>强行退出，不保存退出</td>\n</tr>\n<tr>\n<td align=\"center\">wq</td>\n<td align=\"center\">write &amp; quit</td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td align=\"center\">x</td>\n<td align=\"center\"></td>\n<td>保存并退出</td>\n</tr>\n</tbody></table>\n<h2 id=\"04-常用命令\"><a href=\"#04-常用命令\" class=\"headerlink\" title=\"04. 常用命令\"></a>04. 常用命令</h2><h3 id=\"命令线路图\"><a href=\"#命令线路图\" class=\"headerlink\" title=\"命令线路图\"></a>命令线路图</h3><ol start=\"0\">\n<li>重复次数<ul>\n<li>在命令模式下，<strong>先输入一个数字</strong>，<strong>再跟上一个命令</strong>，可以让该命令 <strong>重复执行指定次数</strong> </li>\n</ul>\n</li>\n<li>移动和选择（<strong>多练</strong>）<ul>\n<li><code>vi</code> 之所以快，关键在于 <strong>能够快速定位到要编辑的代码行</strong></li>\n<li><strong>移动命令</strong> 能够 和 <strong>编辑操作</strong> 命令 <strong>组合使用</strong></li>\n</ul>\n</li>\n<li>编辑操作<ul>\n<li><strong>删除</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>替换</strong>、<strong>缩排</strong></li>\n</ul>\n</li>\n<li>撤销和重复</li>\n<li>查找替换</li>\n<li>编辑</li>\n</ol>\n<h4 id=\"学习提示\"><a href=\"#学习提示\" class=\"headerlink\" title=\"学习提示\"></a>学习提示</h4><ol>\n<li><code>vi</code> 的命令较多，<strong>不要期望一下子全部记住</strong>，个别命令忘记了，只是会影响编辑速度而已</li>\n<li>在使用 <code>vi</code> 命令时，注意 <strong>关闭中文输入法</strong></li>\n</ol>\n<h3 id=\"4-1-移动（基本）\"><a href=\"#4-1-移动（基本）\" class=\"headerlink\" title=\"4.1 移动（基本）\"></a>4.1 移动（基本）</h3><ul>\n<li>要熟练使用 <code>vi</code>，首先应该学会怎么在 <strong>命令模式</strong> 下样快速移动光标</li>\n<li><strong>编辑操作命令</strong>，能够和 <strong>移动命令</strong> 结合在一起使用</li>\n</ul>\n<h4 id=\"1-上、下、左、右\"><a href=\"#1-上、下、左、右\" class=\"headerlink\" title=\"1) 上、下、左、右\"></a>1) 上、下、左、右</h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>功能</th>\n<th align=\"center\">手指</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">h</td>\n<td>向左</td>\n<td align=\"center\">食指</td>\n</tr>\n<tr>\n<td align=\"center\">j</td>\n<td>向下</td>\n<td align=\"center\">食指</td>\n</tr>\n<tr>\n<td align=\"center\">k</td>\n<td>向上</td>\n<td align=\"center\">中指</td>\n</tr>\n<tr>\n<td align=\"center\">l</td>\n<td>向右</td>\n<td align=\"center\">无名指</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://imgchr.com/i/3we4yj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/27/3we4yj.md.png\" alt=\"3we4yj.md.png\"></a></p>\n<h4 id=\"2-行内移动\"><a href=\"#2-行内移动\" class=\"headerlink\" title=\"2) 行内移动\"></a>2) 行内移动</h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">w</td>\n<td align=\"center\">word</td>\n<td>向后移动一个单词</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">back</td>\n<td>向前移动一个单词</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td>行首</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\"></td>\n<td>行首，第一个不是空白字符的位置</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\"></td>\n<td>行尾</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-行数移动\"><a href=\"#3-行数移动\" class=\"headerlink\" title=\"3) 行数移动\"></a>3) 行数移动</h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">gg</td>\n<td align=\"center\">go</td>\n<td>文件顶部</td>\n</tr>\n<tr>\n<td align=\"center\">G</td>\n<td align=\"center\">go</td>\n<td>文件末尾</td>\n</tr>\n<tr>\n<td align=\"center\">数字gg</td>\n<td align=\"center\">go</td>\n<td>移动到 数字 对应行数</td>\n</tr>\n<tr>\n<td align=\"center\">数字G</td>\n<td align=\"center\">go</td>\n<td>移动到 数字 对应行数</td>\n</tr>\n<tr>\n<td align=\"center\">:数字</td>\n<td align=\"center\"></td>\n<td>移动到 数字 对应行数</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-屏幕移动\"><a href=\"#4-屏幕移动\" class=\"headerlink\" title=\"4) 屏幕移动\"></a>4) 屏幕移动</h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl + b</td>\n<td align=\"center\">back</td>\n<td>向上翻页</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + f</td>\n<td align=\"center\">forward</td>\n<td>向下翻页</td>\n</tr>\n<tr>\n<td align=\"center\">H</td>\n<td align=\"center\">Head</td>\n<td>屏幕顶部</td>\n</tr>\n<tr>\n<td align=\"center\">M</td>\n<td align=\"center\">Middle</td>\n<td>屏幕中间</td>\n</tr>\n<tr>\n<td align=\"center\">L</td>\n<td align=\"center\">Low</td>\n<td>屏幕底部</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-移动（程序）\"><a href=\"#4-2-移动（程序）\" class=\"headerlink\" title=\"4.2 移动（程序）\"></a>4.2 移动（程序）</h3><h4 id=\"1-段落移动\"><a href=\"#1-段落移动\" class=\"headerlink\" title=\"1) 段落移动\"></a>1) 段落移动</h4><ul>\n<li><code>vi</code> 中使用 空行 来区分段落</li>\n<li>在程序开发时，通常 <strong>一段功能相关的代码会写在一起</strong> —— 之间没有空行</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">{</td>\n<td>上一段</td>\n</tr>\n<tr>\n<td align=\"center\">}</td>\n<td>下一段</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-括号切换\"><a href=\"#2-括号切换\" class=\"headerlink\" title=\"2) 括号切换\"></a>2) 括号切换</h4><ul>\n<li>在程序世界中，<code>()</code>、<code>[]</code>、<code>{}</code> 使用频率很高，而且 <strong>都是成对出现的</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%</td>\n<td>括号匹配及切换</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-标记\"><a href=\"#3-标记\" class=\"headerlink\" title=\"3) 标记\"></a>3) 标记</h4><ul>\n<li>在开发时，某一块代码可能<strong>需要稍后处理</strong>，例如：编辑、查看</li>\n<li>此时先使用 <code>m</code> 增加一个标记，这样可以 <strong>在需要时快速地跳转回来</strong> 或者 <strong>执行其他编辑操作</strong></li>\n<li><strong>标记名称</strong> 可以是 <code>a~z</code> 或者 <code>A~Z</code> 之间的任意 <strong>一个</strong> 字母</li>\n<li>添加了标记的 <strong>行如果被删除</strong>，<strong>标记同时被删除</strong></li>\n<li>如果 <strong>在其他行添加了相同名称的标记</strong>，<strong>之前添加的标记也会被替换掉</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mx</td>\n<td align=\"center\">mark</td>\n<td>添加标记 x，x 是 a<del>z 或者 A</del>Z 之间的任意一个字母</td>\n</tr>\n<tr>\n<td align=\"center\">‘x</td>\n<td align=\"center\"></td>\n<td>直接定位到标记 x 所在位置</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-选中文本（可视模式）\"><a href=\"#4-3-选中文本（可视模式）\" class=\"headerlink\" title=\"4.3 选中文本（可视模式）\"></a>4.3 选中文本（可视模式）</h3><ul>\n<li>学习 <code>复制</code> 命令前，应该先学会 <strong>怎么样选中 要复制的代码</strong></li>\n<li>在 <code>vi</code> 中要选择文本，需要先使用 <code>Visual</code> 命令切换到 <strong>可视模式</strong></li>\n<li><code>vi</code> 中提供了 <strong>三种</strong> 可视模式，可以方便程序员选择 <strong>选中文本的方式</strong></li>\n<li>按 <code>ESC</code> 可以放弃选中，返回到 <strong>命令模式</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>模式</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">v</td>\n<td>可视模式</td>\n<td>从光标位置开始按照正常模式选择文本</td>\n</tr>\n<tr>\n<td align=\"center\">V</td>\n<td>可视行模式</td>\n<td>选中光标经过的完整行</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + v</td>\n<td>可视块模式</td>\n<td>垂直方向选中文本</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>可视模式</strong>下，可以和 <strong>移动命令</strong> 连用，例如：<code>ggVG</code> 能够选中所有内容</li>\n</ul>\n<h3 id=\"4-4-撤销和恢复撤销\"><a href=\"#4-4-撤销和恢复撤销\" class=\"headerlink\" title=\"4.4 撤销和恢复撤销\"></a>4.4 撤销和恢复撤销</h3><ul>\n<li>在学习编辑命令之前，先要知道怎样撤销之前一次 <strong>错误的</strong> 编辑动作！</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">u</td>\n<td align=\"center\">undo</td>\n<td>撤销上次命令</td>\n</tr>\n<tr>\n<td align=\"center\">CTRL + r</td>\n<td align=\"center\">redo</td>\n<td>恢复撤销的命令</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-5-删除文本\"><a href=\"#4-5-删除文本\" class=\"headerlink\" title=\"4.5 删除文本\"></a>4.5 删除文本</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">x</td>\n<td align=\"center\">cut</td>\n<td>删除光标所在字符，或者选中文字</td>\n</tr>\n<tr>\n<td align=\"center\">d(移动命令)</td>\n<td align=\"center\">delete</td>\n<td>删除移动命令对应的内容</td>\n</tr>\n<tr>\n<td align=\"center\">dd</td>\n<td align=\"center\">delete</td>\n<td>删除光标所在行，可以 ndd 复制多行</td>\n</tr>\n<tr>\n<td align=\"center\">D</td>\n<td align=\"center\">delete</td>\n<td>删除至行尾</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：如果使用 <strong>可视模式</strong> 已经选中了一段文本，那么无论使用 <code>d</code> 还是 <code>x</code>，都可以删除选中文本</p>\n</blockquote>\n<ul>\n<li>删除命令可以和 <strong>移动命令</strong> 连用，以下是常见的组合命令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* dw        # 从光标位置删除到单词末尾</span><br><span class=\"line\">* d0        # 从光标位置删除到一行的起始位置</span><br><span class=\"line\">* d&#125;        # 从光标位置删除到段落结尾</span><br><span class=\"line\">* ndd       # 从光标位置向下连续删除 n 行</span><br><span class=\"line\">* d代码行G   # 从光标所在行 删除到 指定代码行 之间的所有代码</span><br><span class=\"line\">* d&#39;a       # 从光标所在行 删除到 标记a 之间的所有代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6-复制、粘贴\"><a href=\"#4-6-复制、粘贴\" class=\"headerlink\" title=\"4.6 复制、粘贴\"></a>4.6 复制、粘贴</h3><ul>\n<li><code>vi</code> 中提供有一个 <strong>被复制文本的缓冲区</strong><ul>\n<li><strong>复制</strong> 命令会将选中的文字保存在缓冲区 </li>\n<li><strong>删除</strong> 命令删除的文字会被保存在缓冲区</li>\n<li>在需要的位置，使用 <strong>粘贴</strong> 命令可以将缓冲区的文字插入到光标所在位置</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">y(移动命令)</td>\n<td align=\"center\">copy</td>\n<td>复制</td>\n</tr>\n<tr>\n<td align=\"center\">yy</td>\n<td align=\"center\">copy</td>\n<td>复制一行，可以 nyy 复制多行</td>\n</tr>\n<tr>\n<td align=\"center\">p</td>\n<td align=\"center\">paste</td>\n<td>粘贴</td>\n</tr>\n</tbody></table>\n<p><strong>提示</strong></p>\n<ul>\n<li>命令 <code>d</code>、<code>x</code> 类似于图形界面的 <strong>剪切操作</strong> —— <code>CTRL + X</code></li>\n<li>命令 <code>y</code> 类似于图形界面的 <strong>复制操作</strong> —— <code>CTRL + C</code></li>\n<li>命令 <code>p</code> 类似于图形界面的 <strong>粘贴操作</strong> —— <code>CTRL + V</code></li>\n<li><code>vi</code> 中的 <strong>文本缓冲区同样只有一个</strong>，如果后续做过 <strong>复制、剪切</strong> 操作，之前缓冲区中的内容会被替换</li>\n</ul>\n<p><strong>注意</strong></p>\n<ul>\n<li><code>vi</code> 中的 <strong>文本缓冲区</strong> 和系统的 <strong>剪贴板</strong> 不是同一个</li>\n<li>所以在其他软件中使用 <code>CTRL + C</code> 复制的内容，不能在 <code>vi</code> 中通过 <code>P</code> 命令粘贴</li>\n<li>可以在 <strong>编辑模式</strong> 下使用 <strong>鼠标右键粘贴</strong></li>\n</ul>\n<h3 id=\"4-7-替换\"><a href=\"#4-7-替换\" class=\"headerlink\" title=\"4.7 替换\"></a>4.7 替换</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n<th>工作模式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r</td>\n<td align=\"center\">replace</td>\n<td>替换当前字符</td>\n<td>命令模式</td>\n</tr>\n<tr>\n<td align=\"center\">R</td>\n<td align=\"center\">replace</td>\n<td>替换当前行光标后的字符</td>\n<td>替换模式</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>R</code> 命令可以进入 <strong>替换模式</strong>，替换完成后，按下 <code>ESC</code> 可以回到 <strong>命令模式</strong></li>\n<li><strong>替换命令</strong> 的作用就是不用进入 <strong>编辑模式</strong>，对文件进行 <strong>轻量级的修改</strong></li>\n</ul>\n<h3 id=\"4-8-缩排和重复执行\"><a href=\"#4-8-缩排和重复执行\" class=\"headerlink\" title=\"4.8 缩排和重复执行\"></a>4.8 缩排和重复执行</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&gt;&gt;</td>\n<td>向右增加缩进</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&lt;</td>\n<td>向左减少缩进</td>\n</tr>\n<tr>\n<td align=\"center\">.</td>\n<td>重复上次命令</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>缩排命令</strong> 在开发程序时，<strong>统一增加代码的缩进</strong> 比较有用！<ul>\n<li>一次性 <strong>在选中代码前增加 4 个空格</strong>，就叫做 <strong>增加缩进</strong></li>\n<li>一次性 <strong>在选中代码前删除 4 个空格</strong>，就叫做 <strong>减少缩进</strong></li>\n</ul>\n</li>\n<li>在 <strong>可视模式</strong> 下，缩排命令只需要使用 <strong>一个</strong> <code>&gt;</code> 或者 <code>&lt;</code> </li>\n</ul>\n<blockquote>\n<p>在程序中，<strong>缩进</strong> 通常用来表示代码的归属关系</p>\n<ul>\n<li>前面空格越少，代码的级别越高</li>\n<li>前面空格越多，代码的级别越低</li>\n</ul>\n</blockquote>\n<h3 id=\"4-9-查找\"><a href=\"#4-9-查找\" class=\"headerlink\" title=\"4.9 查找\"></a>4.9 查找</h3><h4 id=\"常规查找\"><a href=\"#常规查找\" class=\"headerlink\" title=\"常规查找\"></a>常规查找</h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">/str</td>\n<td>查找 str</td>\n</tr>\n</tbody></table>\n<ul>\n<li>查找到指定内容之后，使用 <code>Next</code> 查找下一个出现的位置：<ul>\n<li><code>n</code>: 查找下一个</li>\n<li><code>N</code>: 查找上一个</li>\n</ul>\n</li>\n<li>如果不想看到高亮显示，可以随便查找一个文件中不存在的内容即可</li>\n</ul>\n<h4 id=\"单词快速匹配\"><a href=\"#单词快速匹配\" class=\"headerlink\" title=\"单词快速匹配\"></a>单词快速匹配</h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">*</td>\n<td>向后查找当前光标所在单词</td>\n</tr>\n<tr>\n<td align=\"center\">#</td>\n<td>向前查找当前光标所在单词</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在开发中，通过单词快速匹配，可以快速看到这个单词在其他什么位置使用过</li>\n</ul>\n<h3 id=\"4-10-查找并替换\"><a href=\"#4-10-查找并替换\" class=\"headerlink\" title=\"4.10 查找并替换\"></a>4.10 查找并替换</h3><ul>\n<li>在 <code>vi</code> 中查找和替换命令需要在 <strong>末行模式</strong> 下执行</li>\n<li>记忆命令格式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:%s&#x2F;&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-全局替换\"><a href=\"#1-全局替换\" class=\"headerlink\" title=\"1) 全局替换\"></a>1) 全局替换</h4><ul>\n<li><strong>一次性</strong>替换文件中的 <strong>所有出现的旧文本</strong></li>\n<li>命令格式如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:%s&#x2F;旧文本&#x2F;新文本&#x2F;g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-可视区域替换\"><a href=\"#2-可视区域替换\" class=\"headerlink\" title=\"2) 可视区域替换\"></a>2) 可视区域替换</h4><ul>\n<li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li>\n<li>命令格式如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:s&#x2F;旧文本&#x2F;新文本&#x2F;g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-确认替换\"><a href=\"#3-确认替换\" class=\"headerlink\" title=\"3) 确认替换\"></a>3) 确认替换</h4><ul>\n<li>如果把末尾的 <code>g</code> 改成 <code>gc</code> 在替换的时候，会有提示！<strong>推荐使用！</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:%s&#x2F;旧文本&#x2F;新文本&#x2F;gc</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>y</code> - <code>yes</code> 替换</li>\n<li><code>n</code> - <code>no</code> 不替换</li>\n<li><code>a</code> - <code>all</code> 替换所有</li>\n<li><code>q</code> - <code>quit</code> 退出替换</li>\n<li><code>l</code> - <code>last</code> 最后一个，并把光标移动到行首</li>\n<li><code>^E</code> 向下滚屏</li>\n<li><code>^Y</code> 向上滚屏</li>\n</ol>\n<h3 id=\"4-11-插入命令\"><a href=\"#4-11-插入命令\" class=\"headerlink\" title=\"4.11 插入命令\"></a>4.11 插入命令</h3><ul>\n<li>在 <code>vi</code> 中除了常用的 <code>i</code> 进入 <strong>编辑模式</strong> 外，还提供了以下命令同样可以进入编辑模式：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n<th align=\"center\">常用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i</td>\n<td align=\"center\">insert</td>\n<td>在当前字符前插入文本</td>\n<td align=\"center\">常用</td>\n</tr>\n<tr>\n<td align=\"center\">I</td>\n<td align=\"center\">insert</td>\n<td>在行首插入文本</td>\n<td align=\"center\">较常用</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\">append</td>\n<td>在当前字符后添加文本</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">A</td>\n<td align=\"center\">append</td>\n<td>在行末添加文本</td>\n<td align=\"center\">较常用</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td align=\"center\"></td>\n<td>在当前行后面插入一空行</td>\n<td align=\"center\">常用</td>\n</tr>\n<tr>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td>在当前行前面插入一空行</td>\n<td align=\"center\">常用</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://imgchr.com/i/3wefSg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/27/3wefSg.png\" alt=\"3wefSg.png\"></a></p>\n<h4 id=\"演练-1-——-编辑命令和数字连用\"><a href=\"#演练-1-——-编辑命令和数字连用\" class=\"headerlink\" title=\"演练 1 —— 编辑命令和数字连用\"></a>演练 1 —— 编辑命令和数字连用</h4><ul>\n<li>在开发中，可能会遇到连续输入 <code>N</code> 个同样的字符</li>\n</ul>\n<blockquote>\n<p>在 <code>Python</code> 中有简单的方法，但是其他语言中通常需要自己输入</p>\n</blockquote>\n<ul>\n<li>例如：<code>**********</code> 连续 10 个星号</li>\n</ul>\n<p>要实现这个效果可以在 <strong>命令模式</strong> 下</p>\n<ol>\n<li>输入 <code>10</code>，表示要重复 10 次</li>\n<li>输入 <code>i</code> 进入 <strong>编辑模式</strong></li>\n<li>输入 <code>*</code> 也就是重复的文字</li>\n<li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 就会把第 <code>2、3</code> 两步的操作重复 <code>10</code> 次</li>\n</ol>\n<blockquote>\n<p>提示：正常开发时，在 <strong>进入编辑模式之前，不要按数字</strong></p>\n</blockquote>\n<h4 id=\"演练-2-——-利用-可视块-给多行代码增加注释\"><a href=\"#演练-2-——-利用-可视块-给多行代码增加注释\" class=\"headerlink\" title=\"演练 2 —— 利用 可视块 给多行代码增加注释\"></a>演练 2 —— 利用 可视块 给多行代码增加注释</h4><ul>\n<li>在开发中，可能会遇到一次性给多行代码 <strong>增加注释</strong> 的情况</li>\n</ul>\n<blockquote>\n<p>在 <code>Python</code> 中，要给代码增加注释，可以在代码前增加一个 <code>#</code></p>\n</blockquote>\n<p>要实现这个效果可以在 <strong>命令模式</strong> 下</p>\n<ol>\n<li>移动到要添加注释的 <strong>第 1 行代码</strong>，按 <code>^</code> 来到行首</li>\n<li>按 <code>CTRL + v</code> 进入 <strong>可视块</strong> 模式</li>\n<li>使用 <code>j</code> 向下连续选中要添加的代码行</li>\n<li>输入 <code>I</code> 进入 <strong>编辑模式</strong>，并在 <strong>行首插入</strong>，注意：一定要使用 <strong>I</strong></li>\n<li>输入 <code>#</code> 也就是注释符号</li>\n<li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 会在之前选中的每一行代码 <strong>前</strong> 插入 <code>#</code></li>\n</ol>\n<h2 id=\"05-分屏命令\"><a href=\"#05-分屏命令\" class=\"headerlink\" title=\"05. 分屏命令\"></a>05. 分屏命令</h2><ul>\n<li>属于 <code>vi</code> 的高级命令 —— 可以 <strong>同时编辑和查看多个文件</strong></li>\n</ul>\n<h3 id=\"5-1-末行命令扩展\"><a href=\"#5-1-末行命令扩展\" class=\"headerlink\" title=\"5.1 末行命令扩展\"></a>5.1 末行命令扩展</h3><p><strong>末行命令</strong> 主要是针对文件进行操作的：<strong>保存</strong>、<strong>退出</strong>、<strong>保存&amp;退出</strong>、<strong>搜索&amp;替换</strong>、<strong>另存</strong>、<strong>新建</strong>、<strong>浏览文件</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:e .</td>\n<td align=\"center\">edit</td>\n<td>会打开内置的文件浏览器，浏览要当前目录下的文件</td>\n</tr>\n<tr>\n<td align=\"center\">:n 文件名</td>\n<td align=\"center\">new</td>\n<td>新建文件</td>\n</tr>\n<tr>\n<td align=\"center\">:w 文件名</td>\n<td align=\"center\">write</td>\n<td>另存为，但是仍然编辑当前文件，并不会切换文件</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：切换文件之前，必须保证当前这个文件已经被保存！</p>\n</blockquote>\n<ul>\n<li>已经学习过的 <strong>末行命令</strong>：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:w</td>\n<td align=\"center\">write</td>\n<td>保存</td>\n</tr>\n<tr>\n<td align=\"center\">:q</td>\n<td align=\"center\">quit</td>\n<td>退出，如果没有保存，不允许退出</td>\n</tr>\n<tr>\n<td align=\"center\">:q!</td>\n<td align=\"center\">quit</td>\n<td>强行退出，不保存退出</td>\n</tr>\n<tr>\n<td align=\"center\">:wq</td>\n<td align=\"center\">write &amp; quit</td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:x</td>\n<td align=\"center\"></td>\n<td>保存并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:%s///gc</td>\n<td align=\"center\"></td>\n<td>确认搜索并替换</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>在实际开发中，可以使用 <code>w</code> 命令 <strong>阶段性的备份代码</strong></p>\n</blockquote>\n<h3 id=\"5-2-分屏命令\"><a href=\"#5-2-分屏命令\" class=\"headerlink\" title=\"5.2 分屏命令\"></a>5.2 分屏命令</h3><ul>\n<li>使用 <strong>分屏命令</strong>，可以 <strong>同时编辑和查看多个文件</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:sp [文件名]</td>\n<td align=\"center\">split</td>\n<td>横向增加分屏</td>\n</tr>\n<tr>\n<td align=\"center\">:vsp [文件名]</td>\n<td align=\"center\">vertical split</td>\n<td>纵向增加分屏</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-切换分屏窗口\"><a href=\"#1-切换分屏窗口\" class=\"headerlink\" title=\"1) 切换分屏窗口\"></a>1) 切换分屏窗口</h4><blockquote>\n<p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">w</td>\n<td align=\"center\">window</td>\n<td>切换到下一个窗口</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td align=\"center\">reverse</td>\n<td>互换窗口</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">close</td>\n<td>关闭当前窗口，但是不能关闭最后一个窗口</td>\n</tr>\n<tr>\n<td align=\"center\">q</td>\n<td align=\"center\">quit</td>\n<td>退出当前窗口，如果是最后一个窗口，则关闭 vi</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td align=\"center\">other</td>\n<td>关闭其他窗口</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-调整窗口大小\"><a href=\"#2-调整窗口大小\" class=\"headerlink\" title=\"2) 调整窗口大小\"></a>2) 调整窗口大小</h4><blockquote>\n<p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\"></td>\n<td>增加窗口高度</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\"></td>\n<td>减少窗口高度</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\"></td>\n<td>增加窗口宽度</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\"></td>\n<td>减少窗口宽度</td>\n</tr>\n<tr>\n<td align=\"center\">=</td>\n<td align=\"center\"></td>\n<td>等分窗口大小</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>调整窗口宽高的命令可以和数字连用，例如：<code>5 CTRL + W +</code> 连续 5 次增加高度</p>\n</blockquote>\n<h2 id=\"06-常用命令速查图\"><a href=\"#06-常用命令速查图\" class=\"headerlink\" title=\"06. 常用命令速查图\"></a>06. 常用命令速查图</h2><p><a href=\"https://imgchr.com/i/3weRfS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/27/3weRfS.md.png\" alt=\"3weRfS.md.png\"></a></p>\n<h3 id=\"vimrc\"><a href=\"#vimrc\" class=\"headerlink\" title=\"vimrc\"></a>vimrc</h3><ul>\n<li><code>vimrc</code> 是 <code>vim</code> 的配置文件，可以设置 vim 的配置，包括：<strong>热键</strong>、<strong>配色</strong>、<strong>语法高亮</strong>、<strong>插件</strong> 等</li>\n<li><code>Linux</code> 中 <code>vimrc</code> 有两个位置，<strong>家目录下的配置文件优先级更高</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;vim&#x2F;vimrc</span><br><span class=\"line\">~&#x2F;.vimrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>常用的插件有：<ul>\n<li>代码补全</li>\n<li>代码折叠</li>\n<li>搜索</li>\n<li>Git 集成</li>\n<li>……</li>\n</ul>\n</li>\n<li>网上有很多高手已经配置好的针对 <code>python</code> 开发的 <code>vimrc</code> 文件，可以下载过来直接使用，或者等大家多 <code>Linux</code> 比较熟悉后，再行学习！</li>\n</ul>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Linux用户权限常用命令","url":"/posts/3838fe96/","content":"<h1 id=\"用户权限相关命令\"><a href=\"#用户权限相关命令\" class=\"headerlink\" title=\"用户权限相关命令\"></a>用户权限相关命令</h1><a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><strong>用户</strong> 和 <strong>权限</strong> 的基本概念</li>\n<li><strong>用户管理</strong> 终端命令</li>\n<li><strong>组管理</strong> 终端命令</li>\n<li><strong>修改权限</strong> 终端命令</li>\n</ul>\n<h2 id=\"01-用户-和-权限-的基本概念\"><a href=\"#01-用户-和-权限-的基本概念\" class=\"headerlink\" title=\"01. 用户 和 权限 的基本概念\"></a>01. <strong>用户</strong> 和 <strong>权限</strong> 的基本概念</h2><h3 id=\"1-1-基本概念\"><a href=\"#1-1-基本概念\" class=\"headerlink\" title=\"1.1 基本概念\"></a>1.1 基本概念</h3><ul>\n<li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</li>\n<li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li>\n<li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li>\n<li>对 <strong>文件／目录</strong> 的权限包括：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">权限</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">缩写</th>\n<th align=\"center\">数字代号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">01</td>\n<td align=\"center\">读</td>\n<td align=\"center\">read</td>\n<td align=\"center\">r</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">02</td>\n<td align=\"center\">写</td>\n<td align=\"center\">write</td>\n<td align=\"center\">w</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">03</td>\n<td align=\"center\">执行</td>\n<td align=\"center\">excute</td>\n<td align=\"center\">x</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2-组\"><a href=\"#1-2-组\" class=\"headerlink\" title=\"1.2 组\"></a>1.2 组</h3><ul>\n<li><p>为了方便用户管理，提出了 <strong>组</strong> 的概念</p>\n</li>\n<li><p>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></p>\n</li>\n</ul>\n<h3 id=\"1-3-ls-l-扩展\"><a href=\"#1-3-ls-l-扩展\" class=\"headerlink\" title=\"1.3 ls -l 扩展\"></a>1.3 ls -l 扩展</h3><ul>\n<li><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：<ul>\n<li><strong>权限</strong>，第 1 个字符如果是 <code>d</code> 表示目录</li>\n<li><strong>硬链接数</strong>，通俗地讲，就是有多少种方式，可以访问到当前目录／文件</li>\n<li><strong>拥有者</strong>，家目录下 文件／目录 的拥有者通常都是当前用户</li>\n<li><strong>组</strong>，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲</li>\n<li><strong>大小</strong></li>\n<li><strong>时间</strong></li>\n<li><strong>名称</strong></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3ULhBq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/26/3ULhBq.md.png\" alt=\"3ULhBq.md.png\"></a></p>\n<h3 id=\"1-4-chmod-简单使用（重要）\"><a href=\"#1-4-chmod-简单使用（重要）\" class=\"headerlink\" title=\"1.4 chmod 简单使用（重要）\"></a>1.4 <code>chmod</code> 简单使用（重要）</h3><ul>\n<li><code>chmod</code> 可以修改 <strong>用户／组</strong> 对 <strong>文件／目录</strong> 的权限</li>\n<li>命令格式如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：以上方式会一次性修改 <code>拥有者</code> / <code>组</code> 权限，有关 <code>chmod</code> 的高级用法，后续会讲</p>\n</blockquote>\n<h3 id=\"1-5-超级用户\"><a href=\"#1-5-超级用户\" class=\"headerlink\" title=\"1.5 超级用户\"></a>1.5 超级用户</h3><ul>\n<li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li>\n<li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li>\n<li>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</li>\n</ul>\n<h4 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h4><ul>\n<li><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong></li>\n<li><code>sudo</code> 命令用来以其他身份来执行命令，预设的身份为 <code>root</code></li>\n<li>用户使用 <code>sudo</code> 时，必须先输入密码，之后有 <strong>5 分钟的有效期限</strong>，超过期限则必须重新输入密码</li>\n</ul>\n<blockquote>\n<p>若其未经授权的用户企图使用 <code>sudo</code>，则会发出警告邮件给管理员</p>\n</blockquote>\n<h2 id=\"02-组管理-终端命令\"><a href=\"#02-组管理-终端命令\" class=\"headerlink\" title=\"02. 组管理 终端命令\"></a>02. <strong>组管理</strong> 终端命令</h2><blockquote>\n<p>提示：<strong>创建组</strong> / <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">groupadd 组名</td>\n<td align=\"left\">添加组</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">groupdel 组名</td>\n<td align=\"left\">删除组</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">cat /etc/group</td>\n<td align=\"left\">确认组信息</td>\n</tr>\n<tr>\n<td align=\"left\">04</td>\n<td align=\"left\">chgrp -R 组名 文件/目录名</td>\n<td align=\"left\">递归修改文件/目录的所属组</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>组信息保存在 <code>/etc/group</code> 文件中</li>\n<li><code>/etc</code> 目录是专门用来保存 <strong>系统配置信息</strong> 的目录</li>\n</ul>\n</blockquote>\n<ul>\n<li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li>\n</ul>\n<h4 id=\"演练目标\"><a href=\"#演练目标\" class=\"headerlink\" title=\"演练目标\"></a>演练目标</h4><ol>\n<li>在 <code>python</code> 用户的桌面文件夹下创建 <code>Python学习</code> 目录</li>\n<li>新建 <code>dev</code> 组</li>\n<li>将 <code>Python学习</code> 目录的组修改为 <code>dev</code></li>\n</ol>\n<h2 id=\"03-用户管理-终端命令\"><a href=\"#03-用户管理-终端命令\" class=\"headerlink\" title=\"03. 用户管理 终端命令\"></a>03. <strong>用户管理</strong> 终端命令</h2><blockquote>\n<p>提示：<strong>创建用户</strong> / <strong>删除用户</strong> / <strong>修改其他用户密码</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p>\n</blockquote>\n<h3 id=\"3-1-创建用户／设置密码／删除用户\"><a href=\"#3-1-创建用户／设置密码／删除用户\" class=\"headerlink\" title=\"3.1 创建用户／设置密码／删除用户\"></a>3.1 创建用户／设置密码／删除用户</h3><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">useradd -m -g 组 新建用户名</td>\n<td align=\"left\">添加新用户</td>\n<td align=\"left\">-m 自动建立用户家目录-g 指定用户所在的组，否则会建立一个和同名的组</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">passwd 用户名</td>\n<td align=\"left\">设置用户密码</td>\n<td align=\"left\">如果是普通用户，直接用 passwd 可以修改自己的账户密码</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">userdel -r 用户名</td>\n<td align=\"left\">删除用户</td>\n<td align=\"left\">-r 选项会自动删除用户家目录</td>\n</tr>\n<tr>\n<td align=\"left\">04</td>\n<td align=\"left\">cat /etc/passwd | grep 用户名</td>\n<td align=\"left\">确认用户信息</td>\n<td align=\"left\">新建用户后，用户信息会保存在 /etc/passwd 文件中</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li>\n<li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li>\n<li>用户信息保存在 <code>/etc/passwd</code> 文件中</li>\n</ul>\n</blockquote>\n<h3 id=\"3-2-查看用户信息\"><a href=\"#3-2-查看用户信息\" class=\"headerlink\" title=\"3.2 查看用户信息\"></a>3.2 查看用户信息</h3><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">id [用户名]</td>\n<td align=\"left\">查看用户 UID 和 GID 信息</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">who</td>\n<td align=\"left\">查看当前所有登录的用户列表</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">whoami</td>\n<td align=\"left\">查看当前登录用户的账户名</td>\n</tr>\n</tbody></table>\n<h4 id=\"passwd-文件\"><a href=\"#passwd-文件\" class=\"headerlink\" title=\"passwd 文件\"></a>passwd 文件</h4><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p>\n<ol>\n<li>用户名</li>\n<li>密码（x，表示加密的密码）</li>\n<li>UID（用户标识）</li>\n<li>GID（组标识）</li>\n<li>用户全名或本地帐号</li>\n<li>家目录</li>\n<li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li>\n</ol>\n<h4 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h4><ul>\n<li><code>usermod</code> 可以用来设置 <strong>用户</strong> 的 <strong>主组</strong> ／ <strong>附加组</strong> 和 <strong>登录 Shell</strong>，命令格式如下：</li>\n<li><strong>主组</strong>：通常在新建用户时指定，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></li>\n<li><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong></li>\n</ul>\n<blockquote>\n<p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改用户的主组（passwd 中的 GID）</span></span><br><span class=\"line\">usermod -g 组 用户名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改用户的附加组</span></span><br><span class=\"line\">usermod -G 组 用户名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改用户登录 Shell</span></span><br><span class=\"line\">usermod -s /bin/bash 用户名</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，可以使用以下命令，将用户添加到 <code>sudo</code> 附加组中</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">usermod -G sudo 用户名</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"which（重要）\"><a href=\"#which（重要）\" class=\"headerlink\" title=\"which（重要）\"></a>which（重要）</h4><blockquote>\n<p>提示</p>\n<ul>\n<li><code>/etc/passwd</code> 是用于保存用户信息的文件</li>\n<li><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</li>\n</ul>\n</blockquote>\n<ul>\n<li><code>which</code> 命令可以查看执行命令所在位置，例如：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># /bin/ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">which</span> useradd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># /usr/sbin/useradd</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"bin-和-sbin\"><a href=\"#bin-和-sbin\" class=\"headerlink\" title=\"bin 和 sbin\"></a><code>bin</code> 和 <code>sbin</code></h5><ul>\n<li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li>\n<li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li>\n<li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li>\n<li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li>\n<li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li>\n</ul>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li><code>cd</code> 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 <code>which</code> 无法找到 <code>cd</code> 命令的位置</li>\n</ul>\n</blockquote>\n<h3 id=\"3-3-切换用户\"><a href=\"#3-3-切换用户\" class=\"headerlink\" title=\"3.3 切换用户\"></a>3.3 切换用户</h3><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">su - 用户名</td>\n<td align=\"left\">切换用户，并且切换目录</td>\n<td align=\"left\">- 可以切换到用户家目录，否则保持位置不变</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">exit</td>\n<td align=\"left\">退出当前登录账户</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li>\n<li><code>exit</code> 示意图如下：</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/3ULRjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/26/3ULRjs.md.png\" alt=\"3ULRjs.md.png\"></a></p>\n<h2 id=\"04-修改文件权限\"><a href=\"#04-修改文件权限\" class=\"headerlink\" title=\"04. 修改文件权限\"></a>04. 修改文件权限</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">chown</td>\n<td align=\"left\">修改拥有者</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">chgrp</td>\n<td align=\"left\">修改组</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">chmod</td>\n<td align=\"left\">修改权限</td>\n</tr>\n</tbody></table>\n<ul>\n<li>命令格式如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改文件|目录的拥有者</span></span><br><span class=\"line\">chown 用户名 文件名|目录名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归修改文件|目录的组</span></span><br><span class=\"line\">chgrp -R 组名 文件名|目录名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 递归修改文件权限</span></span><br><span class=\"line\">chmod -R 755 文件名|目录名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>chmod</code> 在设置权限时，可以简单地使用三个数字分别对应 <strong>拥有者</strong> ／ <strong>组</strong> 和 <strong>其他</strong> 用户的权限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他</span></span><br><span class=\"line\">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/3ULoNT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/26/3ULoNT.png\" alt=\"3ULoNT.png\"></a></p>\n<ul>\n<li>常见数字组合有 （<code>u</code>表示用户／<code>g</code>表示组／<code>o</code>表示其他） :<ul>\n<li><code>777</code> ===&gt; <code>u=rwx,g=rwx,o=rwx</code></li>\n<li><code>755</code> ===&gt; <code>u=rwx,g=rx,o=rx</code></li>\n<li><code>644</code> ===&gt; <code>u=rw,g=r,o=r</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"chmod-演练目标\"><a href=\"#chmod-演练目标\" class=\"headerlink\" title=\"chmod 演练目标\"></a><code>chmod</code> 演练目标</h4><ol>\n<li>将 <code>01.py</code> 的权限修改为 <code>u=rwx,g=rx,o=r</code></li>\n<li>将 <code>123.txt</code> 的权限修改为 <code>u=rw,g=r,o=-</code></li>\n<li>将 <code>test</code> 目录以及目录下的 <strong>所有</strong> 文件权限修改为 <code>u=rwx,g=rwx,o=rx</code></li>\n</ol>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Linux 远程管理常用命令","url":"/posts/840169a3/","content":"<h1 id=\"远程管理常用命令\"><a href=\"#远程管理常用命令\" class=\"headerlink\" title=\"远程管理常用命令\"></a>远程管理常用命令</h1><a id=\"more\"></a>\n\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li>关机/重启<ul>\n<li><code>shutdown</code></li>\n</ul>\n</li>\n<li>查看或配置网卡信息<ul>\n<li><code>ifconfig</code></li>\n<li><code>ping</code></li>\n</ul>\n</li>\n<li>远程登录和复制文件<ul>\n<li><code>ssh</code></li>\n<li><code>scp</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"01-关机-重启\"><a href=\"#01-关机-重启\" class=\"headerlink\" title=\"01. 关机/重启\"></a>01. 关机/重启</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">对应英文</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">shutdown 选项 时间</td>\n<td align=\"left\">shutdown</td>\n<td align=\"left\">关机／重新启动</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-1-shutdown\"><a href=\"#1-1-shutdown\" class=\"headerlink\" title=\"1.1 shutdown\"></a>1.1 <code>shutdown</code></h3><ul>\n<li><code>shutdown</code> 命令可以 <strong>安全</strong> <strong>关闭</strong> 或者 <strong>重新启动系统</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">重新启动</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li><strong>不指定选项和参数</strong>，默认表示 <strong>1 分钟</strong>之后 <strong>关闭电脑</strong></li>\n<li>远程维护服务器时，最好不要关闭系统，而应该重新启动系统</li>\n</ul>\n</blockquote>\n<ul>\n<li>常用命令示例</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新启动操作系统，其中 now 表示现在</span></span><br><span class=\"line\">$ shutdown -r now</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 立刻关机，其中 now 表示现在</span></span><br><span class=\"line\">$ shutdown now</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 系统在今天的 20:25 会关机</span></span><br><span class=\"line\">$ shutdown 20:25</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 系统再过十分钟后自动关机</span></span><br><span class=\"line\">$ shutdown +10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取消之前指定的关机计划</span></span><br><span class=\"line\">$ shutdown -c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"02-查看或配置网卡信息\"><a href=\"#02-查看或配置网卡信息\" class=\"headerlink\" title=\"02. 查看或配置网卡信息\"></a>02. 查看或配置网卡信息</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">对应英文</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">ifconfig</td>\n<td align=\"left\">configure a network interface</td>\n<td align=\"left\">查看/配置计算机当前的网卡配置信息</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">ping ip地址</td>\n<td align=\"left\">ping</td>\n<td align=\"left\">检测到目标 ip地址 的连接是否正常</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-网卡-和-IP-地址\"><a href=\"#2-1-网卡-和-IP-地址\" class=\"headerlink\" title=\"2.1 网卡 和 IP 地址\"></a>2.1 网卡 和 IP 地址</h3><h4 id=\"网卡\"><a href=\"#网卡\" class=\"headerlink\" title=\"网卡\"></a>网卡</h4><ul>\n<li>网卡是一个专门负责网络通讯的硬件设备</li>\n<li><strong>IP 地址</strong>是设置在网卡上的地址信息</li>\n</ul>\n<blockquote>\n<p>我们可以把 <strong>电脑</strong> 比作 <strong>电话</strong>，<strong>网卡</strong> 相当于 <strong>SIM 卡</strong>，<strong>IP 地址</strong> 相当于 <strong>电话号码</strong></p>\n</blockquote>\n<h4 id=\"IP-地址\"><a href=\"#IP-地址\" class=\"headerlink\" title=\"IP 地址\"></a>IP 地址</h4><ul>\n<li><strong>每台联网的电脑上</strong>都有 <strong>IP 地址</strong>，<strong>是保证电脑之间正常通讯的重要设置</strong></li>\n</ul>\n<blockquote>\n<p>注意：每台电脑的 IP 地址不能相同，否则会出现 IP 地址冲突，并且没有办法正常通讯</p>\n<p>提示：有关 <strong>IP 地址</strong>的详细内容，在就业班会详细讲解！</p>\n</blockquote>\n<h3 id=\"2-2-ifconfig\"><a href=\"#2-2-ifconfig\" class=\"headerlink\" title=\"2.2 ifconfig\"></a>2.2 <code>ifconfig</code></h3><ul>\n<li><code>ifconfig</code> 可以查看／配置计算机当前的网卡配置信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看网卡配置信息</span></span><br><span class=\"line\">$ ifconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看网卡对应的 IP 地址</span></span><br><span class=\"line\">$ ifconfig | grep inet</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：一台计算机中有可能会有一个 <strong>物理网卡</strong> 和 <strong>多个虚拟网卡</strong>，在 Linux 中物理网卡的名字通常以 <code>ensXX</code> 表示</p>\n</blockquote>\n<ul>\n<li><code>127.0.0.1</code> 被称为 <strong>本地回环/环回地址</strong>，一般用来测试本机网卡是否正常</li>\n</ul>\n<h3 id=\"2-3-ping\"><a href=\"#2-3-ping\" class=\"headerlink\" title=\"2.3 ping\"></a>2.3 <code>ping</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检测到目标主机是否连接正常</span></span><br><span class=\"line\">$ ping IP地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检测本地网卡工作正常</span></span><br><span class=\"line\">$ ping 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>ping</code> 一般用于检测当前计算机到目标计算机之间的网络 <strong>是否通畅</strong>，<strong>数值越大，速度越慢</strong></li>\n</ul>\n<blockquote>\n<ul>\n<li><code>ping</code> 的工作原理与潜水艇的声纳相似，<code>ping</code> 这个命令就是取自 <strong>声纳的声音</strong></li>\n<li>网络管理员之间也常将 <code>ping</code> 用作动词 —— <strong>ping 一下计算机X，看他是否开着</strong></li>\n</ul>\n</blockquote>\n<p>原理：网络上的机器都有 <strong>唯一确定的 IP 地址</strong>，我们给<strong>目标 IP 地址</strong>发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</p>\n<blockquote>\n<p>提示：在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 <code>CTRL + C</code></p>\n</blockquote>\n<h2 id=\"03-远程登录和复制文件\"><a href=\"#03-远程登录和复制文件\" class=\"headerlink\" title=\"03. 远程登录和复制文件\"></a>03. 远程登录和复制文件</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">对应英文</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">ssh 用户名@ip</td>\n<td align=\"left\">secure shell</td>\n<td align=\"left\">关机／重新启动</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径</td>\n<td align=\"left\">secure copy</td>\n<td align=\"left\">远程复制文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-1-ssh-基础（重点）\"><a href=\"#3-1-ssh-基础（重点）\" class=\"headerlink\" title=\"3.1 ssh 基础（重点）\"></a>3.1 <code>ssh</code> 基础（重点）</h3><p>在 Linux 中 SSH 是 <strong>非常常用</strong> 的工具，通过 <strong>SSH 客户端</strong> 我们可以连接到运行了 <strong>SSH 服务器</strong> 的远程机器上</p>\n<ul>\n<li><strong>SSH 客户端</strong>是一种使用 <code>Secure Shell（SSH）</code> 协议连接到远程计算机的软件程序</li>\n<li><code>SSH</code>是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议<ul>\n<li>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong></li>\n<li>通过 <code>SSH 协议</code> 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗</li>\n</ul>\n</li>\n<li><code>SSH</code> 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度</li>\n</ul>\n<h4 id=\"1-域名-和-端口号\"><a href=\"#1-域名-和-端口号\" class=\"headerlink\" title=\"1) 域名 和 端口号\"></a>1) 域名 和 端口号</h4><h5 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h5><ul>\n<li>由一串 <strong>用点分隔</strong> 的名字组成，例如：<code>www.itcast.cn</code></li>\n<li>是 <strong>IP 地址</strong> 的别名，方便用户记忆</li>\n</ul>\n<h5 id=\"端口号\"><a href=\"#端口号\" class=\"headerlink\" title=\"端口号\"></a>端口号</h5><ul>\n<li><strong>IP 地址</strong>：通过 <strong>IP 地址</strong> 找到网络上的 <strong>计算机</strong></li>\n<li><strong>端口号</strong>：通过 <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong><ul>\n<li><strong>SSH 服务器</strong> 的默认端口号是 <code>22</code>，如果是默认端口号，在连接的时候，可以省略</li>\n</ul>\n</li>\n<li>常见服务端口号列表：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">服务</th>\n<th align=\"left\">端口号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">SSH 服务器</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">Web 服务器</td>\n<td align=\"left\">80</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">HTTPS</td>\n<td align=\"left\">443</td>\n</tr>\n<tr>\n<td align=\"left\">04</td>\n<td align=\"left\">FTP 服务器</td>\n<td align=\"left\">21</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：有关 <strong>端口号</strong>的详细内容，在就业班会详细讲解！</p>\n</blockquote>\n<h4 id=\"2-SSH-客户端的简单使用\"><a href=\"#2-SSH-客户端的简单使用\" class=\"headerlink\" title=\"2) SSH 客户端的简单使用\"></a>2) SSH 客户端的简单使用</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh [-p port] user@remote</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>user</code> 是在远程机器上的用户名，如果不指定的话默认为当前用户</li>\n<li><code>remote</code> 是远程机器的地址，可以是 <strong>IP</strong>／<strong>域名</strong>，或者是 <strong>后面会提到的别名</strong></li>\n<li><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></li>\n</ul>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>使用 <code>exit</code> 退出当前用户的登录</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li><code>ssh</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li>\n<li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code> 或者 <code>XShell</code> 客户端软件即可</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>在工作中，SSH 服务器的端口号很有可能<strong>不是 22</strong>，如果遇到这种情况就需要使用 <code>-p</code> 选项，指定正确的端口号，否则无法正常连接到服务器</li>\n</ul>\n</blockquote>\n<h4 id=\"3-Windows-下-SSH-客户端的安装\"><a href=\"#3-Windows-下-SSH-客户端的安装\" class=\"headerlink\" title=\"3) Windows 下 SSH 客户端的安装\"></a>3) Windows 下 SSH 客户端的安装</h4><ul>\n<li><code>Putty</code> <a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html\" target=\"_blank\" rel=\"noopener\">http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></li>\n<li><code>XShell</code> <a href=\"http://xshellcn.com\" target=\"_blank\" rel=\"noopener\">http://xshellcn.com</a></li>\n</ul>\n<blockquote>\n<p>建议从官方网站下载正式的安装程序</p>\n</blockquote>\n<h3 id=\"3-2-scp（掌握）\"><a href=\"#3-2-scp（掌握）\" class=\"headerlink\" title=\"3.2 scp（掌握）\"></a>3.2 <code>scp</code>（掌握）</h3><ul>\n<li>scp 就是 <code>secure copy</code>，是一个在 Linux 下用来进行 <strong>远程拷贝文件</strong> 的命令</li>\n<li>它的<strong>地址格式与 ssh 基本相同</strong>，<strong>需要注意的是</strong>，在指定端口时用的是大写的 <code>-P</code> 而不是小写的</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span></span><br><span class=\"line\">scp -P port 01.py user@remote:Desktop/01.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.py</span></span><br><span class=\"line\">scp -P port user@remote:Desktop/01.py 01.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加上 -r 选项可以传送文件夹</span></span><br><span class=\"line\"><span class=\"comment\"># 把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktop</span></span><br><span class=\"line\">scp -r demo user@remote:Desktop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹</span></span><br><span class=\"line\">scp -r user@remote:Desktop demo</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td>\n</tr>\n<tr>\n<td align=\"left\">-P</td>\n<td align=\"left\">若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li><code>scp</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li>\n<li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code>，使用 <code>pscp</code> 命令行工具或者安装 <code>FileZilla</code> 使用 <code>FTP</code> 进行文件传输</li>\n</ul>\n</blockquote>\n<h4 id=\"FileZilla\"><a href=\"#FileZilla\" class=\"headerlink\" title=\"FileZilla\"></a><code>FileZilla</code></h4><ul>\n<li>官方网站：<a href=\"https://www.filezilla.cn/download/client\" target=\"_blank\" rel=\"noopener\">https://www.filezilla.cn/download/client</a></li>\n<li><code>FileZilla</code> 在传输文件时，使用的是 <code>FTP 服务</code> 而不是 <code>SSH 服务</code>，因此端口号应该设置为 <code>21</code></li>\n</ul>\n<h3 id=\"3-3-SSH-高级（知道）\"><a href=\"#3-3-SSH-高级（知道）\" class=\"headerlink\" title=\"3.3 SSH 高级（知道）\"></a>3.3 SSH 高级（知道）</h3><ul>\n<li>免密码登录</li>\n<li>配置别名</li>\n</ul>\n<blockquote>\n<p>提示：有关 SSH 配置信息都保存在用户家目录下的 <code>.ssh</code> 目录下</p>\n</blockquote>\n<h4 id=\"1）免密码登录\"><a href=\"#1）免密码登录\" class=\"headerlink\" title=\"1）免密码登录\"></a>1）免密码登录</h4><h5 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h5><ul>\n<li>配置公钥<ul>\n<li>执行 <code>ssh-keygen</code> 即可生成 SSH 钥匙，一路回车即可</li>\n</ul>\n</li>\n<li>上传公钥到服务器<ul>\n<li>执行 <code>ssh-copy-id -p port user@remote</code>，可以让远程服务器记住我们的公钥</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"示意图\"><a href=\"#示意图\" class=\"headerlink\" title=\"示意图\"></a>示意图</h5><blockquote>\n<p>非对称加密算法</p>\n<ul>\n<li>使用 <strong>公钥</strong> 加密的数据，需要使用 <strong>私钥</strong> 解密</li>\n<li>使用 <strong>私钥</strong> 加密的数据，需要使用 <strong>公钥</strong> 解密</li>\n</ul>\n</blockquote>\n<h4 id=\"2-配置别名\"><a href=\"#2-配置别名\" class=\"headerlink\" title=\"2) 配置别名\"></a>2) 配置别名</h4><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p>\n<p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host mac</span><br><span class=\"line\">    HostName ip地址</span><br><span class=\"line\">    User itheima</span><br><span class=\"line\">    Port 22</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存之后，即可用 <code>ssh mac</code> 实现远程登录了，<code>scp</code> 同样可以使用</strong></p>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Linux文件和目录常用命令","url":"/posts/9dc01b13/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><a id=\"more\"></a>\n\n<ul>\n<li>查看目录内容<ul>\n<li><code>ls</code></li>\n</ul>\n</li>\n<li>切换目录<ul>\n<li><code>cd</code></li>\n</ul>\n</li>\n<li>创建和删除操作<ul>\n<li><code>touch</code></li>\n<li><code>rm</code></li>\n<li><code>mkdir</code></li>\n</ul>\n</li>\n<li>拷贝和移动文件<ul>\n<li><code>cp</code></li>\n<li><code>mv</code></li>\n</ul>\n</li>\n<li>查看文件内容<ul>\n<li><code>cat</code></li>\n<li><code>more</code></li>\n<li><code>grep</code></li>\n</ul>\n</li>\n<li>其他<ul>\n<li><code>echo</code></li>\n<li>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></li>\n<li>管道 <code>|</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"01-查看目录内容\"><a href=\"#01-查看目录内容\" class=\"headerlink\" title=\"01. 查看目录内容\"></a>01. 查看目录内容</h2><h3 id=\"1-1-终端实用技巧\"><a href=\"#1-1-终端实用技巧\" class=\"headerlink\" title=\"1.1 终端实用技巧\"></a>1.1 终端实用技巧</h3><h4 id=\"1-gt-自动补全\"><a href=\"#1-gt-自动补全\" class=\"headerlink\" title=\"1&gt; 自动补全\"></a>1&gt; 自动补全</h4><ul>\n<li><p>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键 </p>\n<p>的前几个字母之后，按下 tab 键</p>\n<ul>\n<li>如果输入的没有歧义，系统会自动补全</li>\n<li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-gt-曾经使用过的命令\"><a href=\"#2-gt-曾经使用过的命令\" class=\"headerlink\" title=\"2&gt; 曾经使用过的命令\"></a>2&gt; 曾经使用过的命令</h4><ul>\n<li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li>\n<li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li>\n</ul>\n<h3 id=\"1-2-ls-命令说明\"><a href=\"#1-2-ls-命令说明\" class=\"headerlink\" title=\"1.2 ls 命令说明\"></a>1.2 <code>ls</code> 命令说明</h3><ul>\n<li><code>ls</code> 是英文单词 <strong>list</strong> 的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于 <strong>DOS</strong> 下的 <code>dir</code> 命令</li>\n</ul>\n<h4 id=\"Linux-下文件和目录的特点\"><a href=\"#Linux-下文件和目录的特点\" class=\"headerlink\" title=\"Linux 下文件和目录的特点\"></a>Linux 下文件和目录的特点</h4><ul>\n<li>Linux <strong>文件</strong> 或者 <strong>目录</strong> 名称最长可以有 <code>256</code> 个字符</li>\n<li>以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</li>\n<li><strong>.</strong> 代表当前目录</li>\n<li><strong>..</strong> 代表上一级目录</li>\n</ul>\n<h3 id=\"1-3-ls-常用选项\"><a href=\"#1-3-ls-常用选项\" class=\"headerlink\" title=\"1.3 ls 常用选项\"></a>1.3 ls 常用选项</h3><table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-a</td>\n<td align=\"left\">显示指定目录下所有子目录与文件，包括隐藏文件</td>\n</tr>\n<tr>\n<td align=\"left\">-l</td>\n<td align=\"left\">以列表方式显示文件的详细信息</td>\n</tr>\n<tr>\n<td align=\"left\">-h</td>\n<td align=\"left\">配合 -l 以人性化的方式显示文件大小</td>\n</tr>\n</tbody></table>\n<h4 id=\"计算机中文件大小的表示方式（科普）\"><a href=\"#计算机中文件大小的表示方式（科普）\" class=\"headerlink\" title=\"计算机中文件大小的表示方式（科普）\"></a>计算机中文件大小的表示方式（科普）</h4><table>\n<thead>\n<tr>\n<th align=\"left\">单位</th>\n<th align=\"left\">英文</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">字节</td>\n<td align=\"left\">B（Byte）</td>\n<td align=\"left\">在计算机中作为一个数字单元，一般为 8 位二进制数</td>\n</tr>\n<tr>\n<td align=\"left\">千</td>\n<td align=\"left\">K（Kibibyte）</td>\n<td align=\"left\">1 KB = 1024 B，千字节 （1024 = 2 ** 10）</td>\n</tr>\n<tr>\n<td align=\"left\">兆</td>\n<td align=\"left\">M（Mebibyte）</td>\n<td align=\"left\">1 MB = 1024 KB，百万字节</td>\n</tr>\n<tr>\n<td align=\"left\">千兆</td>\n<td align=\"left\">G（Gigabyte）</td>\n<td align=\"left\">1 GB = 1024 MB，十亿字节，千兆字节</td>\n</tr>\n<tr>\n<td align=\"left\">太</td>\n<td align=\"left\">T（Terabyte）</td>\n<td align=\"left\">1 TB = 1024 GB，万亿字节，太字节</td>\n</tr>\n<tr>\n<td align=\"left\">拍</td>\n<td align=\"left\">P（Petabyte）</td>\n<td align=\"left\">1 PB = 1024 TB，千万亿字节，拍字节</td>\n</tr>\n<tr>\n<td align=\"left\">艾</td>\n<td align=\"left\">E（Exabyte）</td>\n<td align=\"left\">1 EB = 1024 PB，百亿亿字节，艾字节</td>\n</tr>\n<tr>\n<td align=\"left\">泽</td>\n<td align=\"left\">Z（Zettabyte）</td>\n<td align=\"left\">1 ZB = 1024 EB，十万亿亿字节，泽字节</td>\n</tr>\n<tr>\n<td align=\"left\">尧</td>\n<td align=\"left\">Y（Yottabyte）</td>\n<td align=\"left\">1 YB = 1024 ZB，一亿亿亿字节，尧字节</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-4-ls-通配符的使用\"><a href=\"#1-4-ls-通配符的使用\" class=\"headerlink\" title=\"1.4 ls 通配符的使用\"></a>1.4 ls 通配符的使用</h3><table>\n<thead>\n<tr>\n<th align=\"left\">通配符</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*</td>\n<td align=\"left\">代表任意个数个字符</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">代表任意一个字符，至少 1 个</td>\n</tr>\n<tr>\n<td align=\"left\">[]</td>\n<td align=\"left\">表示可以匹配字符组中的任一一个</td>\n</tr>\n<tr>\n<td align=\"left\">[abc]</td>\n<td align=\"left\">匹配 a、b、c 中的任意一个</td>\n</tr>\n<tr>\n<td align=\"left\">[a-f]</td>\n<td align=\"left\">匹配从 a 到 f 范围内的的任意一个字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"02-切换目录\"><a href=\"#02-切换目录\" class=\"headerlink\" title=\"02. 切换目录\"></a>02. 切换目录</h2><h3 id=\"2-1-cd\"><a href=\"#2-1-cd\" class=\"headerlink\" title=\"2.1 cd\"></a>2.1 <code>cd</code></h3><ul>\n<li><code>cd</code> 是英文单词 <strong>change directory</strong> 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一</li>\n</ul>\n<blockquote>\n<p>注意：Linux 所有的 <strong>目录</strong> 和 <strong>文件名</strong> 都是大小写敏感的</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cd</td>\n<td align=\"left\">切换到当前用户的主目录(/home/用户目录)</td>\n</tr>\n<tr>\n<td align=\"left\">cd ~</td>\n<td align=\"left\">切换到当前用户的主目录(/home/用户目录)</td>\n</tr>\n<tr>\n<td align=\"left\">cd .</td>\n<td align=\"left\">保持在当前目录不变</td>\n</tr>\n<tr>\n<td align=\"left\">cd ..</td>\n<td align=\"left\">切换到上级目录</td>\n</tr>\n<tr>\n<td align=\"left\">cd -</td>\n<td align=\"left\">可以在最近两次工作目录之间来回切换</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-相对路径和绝对路径\"><a href=\"#2-2-相对路径和绝对路径\" class=\"headerlink\" title=\"2.2 相对路径和绝对路径\"></a>2.2 相对路径和绝对路径</h3><ul>\n<li><strong>相对路径</strong> 在输入路径时，最前面不是 <strong>/</strong> 或者 <strong>~</strong>，表示相对 <strong>当前目录</strong> 所在的目录位置</li>\n<li><strong>绝对路径</strong> 在输入路径时，最前面是 <strong>/</strong> 或者 <strong>~</strong>，表示从 <strong>根目录/家目录</strong> 开始的具体目录位置</li>\n</ul>\n<h2 id=\"03-创建和删除操作\"><a href=\"#03-创建和删除操作\" class=\"headerlink\" title=\"03. 创建和删除操作\"></a>03. 创建和删除操作</h2><h3 id=\"3-1-touch\"><a href=\"#3-1-touch\" class=\"headerlink\" title=\"3.1 touch\"></a>3.1 <code>touch</code></h3><ul>\n<li>创建文件或修改文件时间<ul>\n<li>如果文件 <strong>不存在</strong>，可以创建一个空白文件</li>\n<li>如果文件 <strong>已经存在</strong>，可以修改文件的末次修改日期</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-mkdir\"><a href=\"#3-2-mkdir\" class=\"headerlink\" title=\"3.2 mkdir\"></a>3.2 <code>mkdir</code></h3><ul>\n<li>创建一个新的目录</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-p</td>\n<td align=\"left\">可以递归创建目录</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>新建目录的名称</strong> 不能与当前目录中 <strong>已有的目录或文件</strong> 同名</p>\n</blockquote>\n<h3 id=\"3-3-rm\"><a href=\"#3-3-rm\" class=\"headerlink\" title=\"3.3 rm\"></a>3.3 <code>rm</code></h3><ul>\n<li>删除文件或目录</li>\n</ul>\n<blockquote>\n<p>使用 <code>rm</code> 命令要小心，因为文件删除后不能恢复</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-f</td>\n<td align=\"left\">强制删除，忽略不存在的文件，无需提示</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">递归地删除目录下的内容，<strong>删除文件夹</strong> 时必须加此参数</td>\n</tr>\n</tbody></table>\n<h2 id=\"04-拷贝和移动文件\"><a href=\"#04-拷贝和移动文件\" class=\"headerlink\" title=\"04. 拷贝和移动文件\"></a>04. 拷贝和移动文件</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">对应英文</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">tree [目录名]</td>\n<td align=\"left\">tree</td>\n<td align=\"left\">以树状图列出文件目录结构</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">cp 源文件 目标文件</td>\n<td align=\"left\">copy</td>\n<td align=\"left\">复制文件或者目录</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">mv 源文件 目标文件</td>\n<td align=\"left\">move</td>\n<td align=\"left\">移动文件或者目录／文件或者目录重命名</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-1-tree\"><a href=\"#4-1-tree\" class=\"headerlink\" title=\"4.1 tree\"></a>4.1 <code>tree</code></h3><ul>\n<li><code>tree</code> 命令可以以树状图列出文件目录结构</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-d</td>\n<td align=\"left\">只显示目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-cp\"><a href=\"#4-2-cp\" class=\"headerlink\" title=\"4.2 cp\"></a>4.2 <code>cp</code></h3><ul>\n<li><code>cp</code> 命令的功能是将给出的 <strong>文件</strong> 或 <strong>目录</strong> 复制到另一个 <strong>文件</strong> 或 <strong>目录</strong> 中，相当于 <strong>DOS</strong> 下的 <code>copy</code> 命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-i</td>\n<td align=\"left\">覆盖文件前提示</td>\n</tr>\n<tr>\n<td align=\"left\">-r</td>\n<td align=\"left\">若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-3-mv\"><a href=\"#4-3-mv\" class=\"headerlink\" title=\"4.3 mv\"></a>4.3 <code>mv</code></h3><ul>\n<li><code>mv</code> 命令可以用来 <strong>移动</strong> <strong>文件</strong> 或 <strong>目录</strong>，也可以给 <strong>文件或目录重命名</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-i</td>\n<td align=\"left\">覆盖文件前提示</td>\n</tr>\n</tbody></table>\n<h2 id=\"05-查看文件内容\"><a href=\"#05-查看文件内容\" class=\"headerlink\" title=\"05. 查看文件内容\"></a>05. 查看文件内容</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">对应英文</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">cat 文件名</td>\n<td align=\"left\">concatenate</td>\n<td align=\"left\">查看文件内容、创建文件、文件合并、追加文件内容等功能</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">more 文件名</td>\n<td align=\"left\">more</td>\n<td align=\"left\">分屏显示文件内容</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">grep 搜索文本 文件名</td>\n<td align=\"left\">grep</td>\n<td align=\"left\">搜索文本文件内容</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-1-cat\"><a href=\"#5-1-cat\" class=\"headerlink\" title=\"5.1 cat\"></a>5.1 <code>cat</code></h3><ul>\n<li><code>cat</code> 命令可以用来 <strong>查看文件内容</strong>、<strong>创建文件</strong>、<strong>文件合并</strong>、<strong>追加文件内容</strong> 等功能</li>\n<li><code>cat</code> 会一次显示所有的内容，适合 <strong>查看内容较少</strong> 的文本文件</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-b</td>\n<td align=\"left\">对非空输出行编号</td>\n</tr>\n<tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">对输出的所有行编号</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Linux 中还有一个 <code>nl</code> 的命令和 <code>cat -b</code> 的效果等价</p>\n</blockquote>\n<h3 id=\"5-2-more\"><a href=\"#5-2-more\" class=\"headerlink\" title=\"5.2 more\"></a>5.2 <code>more</code></h3><ul>\n<li><code>more</code> 命令可以用于分屏显示文件内容，每次只显示一页内容</li>\n<li>适合于 <strong>查看内容较多</strong>的文本文件</li>\n</ul>\n<p>使用 <code>more</code> 的操作键：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空格键</td>\n<td align=\"left\">显示手册页的下一屏</td>\n</tr>\n<tr>\n<td align=\"left\">Enter 键</td>\n<td align=\"left\">一次滚动手册页的一行</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">回滚一屏</td>\n</tr>\n<tr>\n<td align=\"left\">f</td>\n<td align=\"left\">前滚一屏</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">/word</td>\n<td align=\"left\">搜索 <strong>word</strong> 字符串</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-3-grep\"><a href=\"#5-3-grep\" class=\"headerlink\" title=\"5.3 grep\"></a>5.3 <code>grep</code></h3><ul>\n<li>Linux 系统中 <code>grep</code> 命令是一种强大的文本搜索工具</li>\n<li><code>grep</code>允许对文本文件进行 <strong>模式</strong>查找，所谓模式查找，又被称为正则表达式，在就业班会详细讲解</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-n</td>\n<td align=\"left\">显示匹配行及行号</td>\n</tr>\n<tr>\n<td align=\"left\">-v</td>\n<td align=\"left\">显示不包含匹配文本的所有行（相当于求反）</td>\n</tr>\n<tr>\n<td align=\"left\">-i</td>\n<td align=\"left\">忽略大小写</td>\n</tr>\n</tbody></table>\n<ul>\n<li>常用的两种模式查找</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">^a</td>\n<td align=\"left\">行首，搜寻以 <strong>a</strong> 开头的行</td>\n</tr>\n<tr>\n<td align=\"left\">ke$</td>\n<td align=\"left\">行尾，搜寻以 <strong>ke</strong> 结束的行</td>\n</tr>\n</tbody></table>\n<h2 id=\"06-其他\"><a href=\"#06-其他\" class=\"headerlink\" title=\"06. 其他\"></a>06. 其他</h2><h3 id=\"6-1-echo-文字内容\"><a href=\"#6-1-echo-文字内容\" class=\"headerlink\" title=\"6.1 echo 文字内容\"></a>6.1 <code>echo 文字内容</code></h3><ul>\n<li><code>echo</code> 会在终端中显示参数指定的文字，通常会和 <strong>重定向</strong> 联合使用</li>\n</ul>\n<h3 id=\"6-2-重定向-gt-和-gt-gt\"><a href=\"#6-2-重定向-gt-和-gt-gt\" class=\"headerlink\" title=\"6.2 重定向 &gt; 和 &gt;&gt;\"></a>6.2 重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></h3><ul>\n<li>Linux 允许将命令执行结果 <strong>重定向</strong>到一个 <strong>文件</strong></li>\n<li>将本应显示在<strong>终端上的内容</strong> <strong>输出／追加</strong> 到<strong>指定文件中</strong></li>\n</ul>\n<p>其中</p>\n<ul>\n<li><code>&gt;</code> 表示输出，会覆盖文件原有的内容</li>\n<li><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</li>\n</ul>\n<h3 id=\"6-3-管道\"><a href=\"#6-3-管道\" class=\"headerlink\" title=\"6.3 管道 |\"></a>6.3 管道 <code>|</code></h3><ul>\n<li>Linux 允许将 <strong>一个命令的输出</strong> 可以<strong>通过管道</strong> 做为 <strong>另一个命令的输入</strong></li>\n<li>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</li>\n</ul>\n<p>常用的管道命令有：</p>\n<ul>\n<li><code>more</code>：分屏显示内容</li>\n<li><code>grep</code>：在命令执行结果的基础上查询指定的文本</li>\n</ul>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Linux 终端命令格式","url":"/posts/78412606/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>了解终端命令格式</p>\n</li>\n<li><p>知道如何查阅终端命令帮助信息</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-终端命令格式\"><a href=\"#01-终端命令格式\" class=\"headerlink\" title=\"01. 终端命令格式\"></a>01. 终端命令格式</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> [-options] [parameter]</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li><code>command</code>：命令名，相应功能的英文单词或单词的缩写</li>\n<li><code>[-options]</code>：选项，可用来对命令进行控制，也可以省略</li>\n<li><code>parameter</code>：传给命令的参数，可以是 <strong>零个</strong>、<strong>一个</strong> 或者 <strong>多个</strong></li>\n</ul>\n<blockquote>\n<p><code>[]</code> 代表可选</p>\n</blockquote>\n<h2 id=\"02-查阅命令帮助信息（知道）\"><a href=\"#02-查阅命令帮助信息（知道）\" class=\"headerlink\" title=\"02. 查阅命令帮助信息（知道）\"></a>02. 查阅命令帮助信息（知道）</h2><blockquote>\n<p>提示</p>\n<ul>\n<li>现阶段只需要 <strong>知道</strong> 通过以下两种方式可以查询命令的帮助信息</li>\n<li>先学习<strong>常用命令</strong>及<strong>常用选项</strong>的使用即可，工作中如果遇到问题可以借助 <strong>网络搜索</strong></li>\n</ul>\n</blockquote>\n<h3 id=\"2-1-help\"><a href=\"#2-1-help\" class=\"headerlink\" title=\"2.1 --help\"></a>2.1 <code>--help</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li>显示 <code>command</code> 命令的帮助信息</li>\n</ul>\n<h3 id=\"2-2-man\"><a href=\"#2-2-man\" class=\"headerlink\" title=\"2.2 man\"></a>2.2 man</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">man <span class=\"built_in\">command</span></span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li>查阅 <code>command</code> 命令的使用手册</li>\n</ul>\n<blockquote>\n<p><code>man</code> 是 <strong>manual</strong> 的缩写，是 Linux 提供的一个 <strong>手册</strong>，包含了绝大部分的命令、函数的详细使用说明</p>\n</blockquote>\n<p>使用 <code>man</code> 时的操作键：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作键</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空格键</td>\n<td align=\"left\">显示手册页的下一屏</td>\n</tr>\n<tr>\n<td align=\"left\">Enter 键</td>\n<td align=\"left\">一次滚动手册页的一行</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">回滚一屏</td>\n</tr>\n<tr>\n<td align=\"left\">f</td>\n<td align=\"left\">前滚一屏</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">退出</td>\n</tr>\n<tr>\n<td align=\"left\">/word</td>\n<td align=\"left\">搜索 <strong>word</strong> 字符串</td>\n</tr>\n</tbody></table>\n","categories":["Linux"],"tags":["Linux"]},{"title":"常用 Linux 命令的基本使用","url":"/posts/7dac4fd8/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>理解学习 Linux 终端命令的原因</p>\n</li>\n<li><p>常用 Linux 命令体验</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-学习-Linux-终端命令的原因\"><a href=\"#01-学习-Linux-终端命令的原因\" class=\"headerlink\" title=\"01. 学习 Linux 终端命令的原因\"></a>01. 学习 Linux 终端命令的原因</h2><ul>\n<li>Linux 刚面世时并没有图形界面，所有的操作全靠命令完成，如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等</li>\n<li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 <strong>远程</strong> 通过 <strong>SSH 客户端</strong> 来完成的，并没有图形界面，所有的维护工作都需要通过命令来完成</li>\n<li>在职场中，作为后端程序员，必须要或多或少的掌握一些 Linux 常用的终端命令</li>\n<li>Linux 发行版本的命令大概有 200 多个，但是常用的命令只有 10 多个而已</li>\n</ul>\n<blockquote>\n<p>学习终端命令的技巧：</p>\n<ul>\n<li>不需要死记硬背，对于常用命令，用的多了，自然就记住了</li>\n<li>不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</li>\n</ul>\n</blockquote>\n<h2 id=\"02-常用-Linux-命令的基本使用\"><a href=\"#02-常用-Linux-命令的基本使用\" class=\"headerlink\" title=\"02. 常用 Linux 命令的基本使用\"></a>02. 常用 Linux 命令的基本使用</h2><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">命令</th>\n<th align=\"left\">对应英文</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">01</td>\n<td align=\"left\">ls</td>\n<td align=\"left\">list</td>\n<td align=\"left\">查看当前文件夹下的内容</td>\n</tr>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">pwd</td>\n<td align=\"left\">print wrok directory</td>\n<td align=\"left\">查看当前所在文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">03</td>\n<td align=\"left\">cd [目录名]</td>\n<td align=\"left\">change directory</td>\n<td align=\"left\">切换文件夹</td>\n</tr>\n<tr>\n<td align=\"left\">04</td>\n<td align=\"left\">touch [文件名]</td>\n<td align=\"left\">touch</td>\n<td align=\"left\">如果文件不存在，新建文件</td>\n</tr>\n<tr>\n<td align=\"left\">05</td>\n<td align=\"left\">mkdir [目录名]</td>\n<td align=\"left\">make directory</td>\n<td align=\"left\">创建目录</td>\n</tr>\n<tr>\n<td align=\"left\">06</td>\n<td align=\"left\">rm [文件名]</td>\n<td align=\"left\">remove</td>\n<td align=\"left\">删除指定的文件名</td>\n</tr>\n<tr>\n<td align=\"left\">07</td>\n<td align=\"left\">clear</td>\n<td align=\"left\">clear</td>\n<td align=\"left\">清屏</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>小技巧</p>\n<ul>\n<li><code>ctrl + shift + =</code> <strong>放大</strong>终端窗口的字体显示</li>\n<li><code>ctrl + -</code> <strong>缩小</strong>终端窗口的字体显示</li>\n</ul>\n</blockquote>\n<h3 id=\"03-自动补全\"><a href=\"#03-自动补全\" class=\"headerlink\" title=\"03. 自动补全\"></a>03. 自动补全</h3><ul>\n<li>在敲出</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">文件</span><br></pre></td></tr></table></figure>\n\n<p>  ／</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">目录</span><br></pre></td></tr></table></figure>\n\n<p>  ／</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  的前几个字母之后，按下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tab</span><br></pre></td></tr></table></figure>\n\n\n\n<p>  键</p>\n<ul>\n<li>如果输入的没有歧义，系统会自动补全</li>\n<li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li>\n</ul>\n<blockquote>\n<p>小技巧</p>\n<ul>\n<li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li>\n<li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li>\n</ul>\n</blockquote>\n","categories":["Linux"],"tags":["Linux","基础命令"]},{"title":"Linux 科普背景2","url":"/posts/e3bd03ae/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>了解操作系统的发展历史</p>\n</li>\n<li><p>知道 Linux 内核及发行版的区别</p>\n</li>\n<li><p>知道 Linux 的应用领域</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"01-操作系统的发展历史\"><a href=\"#01-操作系统的发展历史\" class=\"headerlink\" title=\"01. 操作系统的发展历史\"></a>01. 操作系统的发展历史</h2><h3 id=\"1-1-Unix\"><a href=\"#1-1-Unix\" class=\"headerlink\" title=\"1.1 Unix\"></a>1.1 Unix</h3><p>1965 年之前的时候，电脑并不像现在一样普遍，它可不是一般人能碰的起的，除非是军事或者学院的研究机构，而且当时大型主机至多能提供30台终端（30个键盘、显示器)，连接一台电脑</p>\n<p><strong>为了解决数量不够用的问题</strong></p>\n<ul>\n<li>1965 年左后由 <strong>贝尔实验室</strong> 加入了 <strong>麻省理工学院</strong> 以及 <strong>通用电气</strong> 合作的计划 —— 该计划要建立一套 <strong>多使用者(multi－user)</strong>、<strong>多任务(multi－processor)</strong>、<strong>多层次(multi－level)</strong> 的 <strong>MULTICS</strong> 操作系统，想让大型主机支持 300 台终端</li>\n<li>1969 年前后这个项目进度缓慢，资金短缺，贝尔实验室退出了研究</li>\n<li>1969 年从这个项目中退出的 <strong>Ken Thompson</strong> 当时在实验室无聊时，为了让一台空闲的电脑上能够运行 “星际旅行（Space Travel）” 游行，在 8 月份左右趁着其妻子探亲的时间，<strong>用了 1 个月的时间</strong>，使用汇编写出了 Unix 操作系统的原型</li>\n<li>1970 年，美国贝尔实验室的 <strong>Ken Thompson</strong>，以 <strong>BCPL</strong> 语言为基础，设计出很简单且很接近硬件的 <strong>B 语言</strong>（取BCPL的首字母），并且他用 <strong>B 语言</strong> 写了第一个 UNIX 操作系统</li>\n<li>1971 年，同样酷爱 “星际旅行（Space Travel）” 的 <strong>Dennis M.Ritchie</strong> 为了能早点儿玩上游戏，加入了 <strong>Thompson</strong> 的开发项目，合作开发 UNIX，他的主要工作是改造 <strong>B 语言</strong>，因为<strong>B 语言</strong> 的跨平台性较差</li>\n<li>1972 年，<strong>Dennis M.Ritchie</strong> 在 <strong>B 语言</strong> 的基础上最终设计出了一种新的语言，他取了 <strong>BCPL</strong> 的第二个字母作为这种语言的名字，这就是 <strong>C 语言</strong></li>\n<li>1973 年初，<strong>C 语言</strong>的主体完成，<strong>Thompson</strong> 和 <strong>Ritchie</strong> 迫不及待地开始用它完全重写了现在大名鼎鼎的 <strong>Unix 操作系统</strong></li>\n</ul>\n<h4 id=\"C-语言\"><a href=\"#C-语言\" class=\"headerlink\" title=\"C 语言\"></a>C 语言</h4><ul>\n<li>在把UNIX移植到其他类型的计算机上使用时，C 语言强大的移植性（Portability）在此显现<ul>\n<li>机器语言和汇编语言都不具有移植性，为 x86 开发的程序，不可能在 Alpha，SPARC 和 ARM 等机器上运行</li>\n</ul>\n</li>\n<li>而 <strong>C 语言</strong>程序则可以使用在任意架构的处理器上，只要那种架构的处理器<strong>具有对应的 C 语言编译器和库</strong>，然后将 C 源代码编译、连接成目标二进制文件之后即可运行</li>\n</ul>\n<h4 id=\"Unix-家谱\"><a href=\"#Unix-家谱\" class=\"headerlink\" title=\"Unix 家谱\"></a>Unix 家谱</h4><h3 id=\"1-2-Minix\"><a href=\"#1-2-Minix\" class=\"headerlink\" title=\"1.2 Minix\"></a>1.2 Minix</h3><ul>\n<li>因为 <strong>AT&amp;T（通用电气）</strong> 的政策改变，在 Version 7 Unix 推出之后，发布新的使用条款，将 UNIX 源代码私有化，在大学中不再能使用 UNIX 源代码</li>\n<li><strong>Andrew S. Tanenbaum（塔能鲍姆）</strong> 教授为了能 <strong>在课堂上教授学生操作系统运作的细节</strong>，决定在不使用任何 AT&amp;T 的源代码前提下，自行开发与 UNIX 兼容的操作系统，以避免版权上的争议</li>\n<li>以 <strong>小型 UNIX（mini-UNIX）</strong>之意，将它称为 <strong>MINIX</strong></li>\n</ul>\n<h3 id=\"1-3-Linux\"><a href=\"#1-3-Linux\" class=\"headerlink\" title=\"1.3 Linux\"></a>1.3 Linux</h3><ul>\n<li><p>1991 年 <strong>林纳斯（Linus）</strong> 就读于赫尔辛基大学期间，对 Unix 产生浓厚兴趣，尝试着在Minix 上做一些开发工作</p>\n</li>\n<li><p>因为 <strong>Minix</strong> 只是教学使用，因此功能并不强，<strong>林纳斯</strong> 经常要用他的终端 <strong>仿真器（Terminal Emulator）</strong> 去访问大学主机上的新闻组和邮件，为了方便读写和下载文件，他自己编写了磁盘驱动程序和文件系统，这些在后来成为了 Linux 第一个内核的雏形，当时，他年仅 21 岁！</p>\n</li>\n<li><p>林纳斯</p>\n</li>\n</ul>\n<p>  利用 GNU 的 bash 当做开发环境，gcc 当做编译工具，编写了 Linux 内核，一开始 Linux 并不能兼容 Unix</p>\n<ul>\n<li>即 Unix 上跑的应用程序不能在 Linux 上跑，即应用程序与内核之间的接口不一致</li>\n<li>一开始 Linux 只适用于 386，后来经过全世界的网友的帮助，最终能够兼容多种硬件</li>\n</ul>\n<h2 id=\"02-Linux-内核及发行版\"><a href=\"#02-Linux-内核及发行版\" class=\"headerlink\" title=\"02. Linux 内核及发行版\"></a>02. Linux 内核及发行版</h2><h3 id=\"2-1-Linux-内核版本\"><a href=\"#2-1-Linux-内核版本\" class=\"headerlink\" title=\"2.1 Linux 内核版本\"></a>2.1 Linux 内核版本</h3><ul>\n<li><p><strong>内核（kernel）</strong>是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层</p>\n</li>\n<li><p>Linux 内核版本又分为</p>\n<p>稳定版    和     开发版</p>\n</li>\n</ul>\n<p>  ，两种版本是相互关联，相互循环</p>\n<ul>\n<li><strong>稳定版</strong>：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些 bug 或加入一些新的驱动程序</li>\n<li><strong>开发版</strong>：由于要试验各种解决方案，所以变化很快</li>\n</ul>\n<ul>\n<li>内核源码网址：<a href=\"http://www.kernel.org\" target=\"_blank\" rel=\"noopener\">http://www.kernel.org</a></li>\n</ul>\n<blockquote>\n<p>所有来自全世界的对 Linux 源码的修改最终都会汇总到这个网站，由 Linus 领导的开源社区对其进行甄别和修改最终决定是否进入到 Linux 主线内核源码中</p>\n</blockquote>\n<h3 id=\"2-2-Linux-发行版本\"><a href=\"#2-2-Linux-发行版本\" class=\"headerlink\" title=\"2.2 Linux 发行版本\"></a>2.2 Linux 发行版本</h3><ul>\n<li><strong>Linux 发行版（也被叫做 GNU/Linux 发行版）</strong>通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件</li>\n<li>常见的发行版本如下：<ul>\n<li>Ubuntu</li>\n<li>Redhat</li>\n<li>Fedora</li>\n<li>openSUSE</li>\n<li>Linux Mint</li>\n<li>Debian</li>\n<li>Manjaro</li>\n<li>Mageia</li>\n<li>CentOS</li>\n<li>Arch</li>\n</ul>\n</li>\n<li>十大 Linux 服务器发行版排行榜：<a href=\"http://os.51cto.com/art/201612/526126.htm\" target=\"_blank\" rel=\"noopener\">http://os.51cto.com/art/201612/526126.htm</a></li>\n</ul>\n<blockquote>\n<p>在几乎每一份与 Linux 有关的榜单上，基于 Debian 的 Ubuntu 都占有一席之位。Canonical 的Ubuntu 胜过其他所有的 Linux 服务器发行版 ―― 从简单安装、出色的硬件发现，到世界级的商业支持，Ubuntu确立了难以企及的严格标准</p>\n</blockquote>\n<h2 id=\"03-Linux-的应用领域\"><a href=\"#03-Linux-的应用领域\" class=\"headerlink\" title=\"03. Linux 的应用领域\"></a>03. Linux 的应用领域</h2><h3 id=\"3-1-服务器领域\"><a href=\"#3-1-服务器领域\" class=\"headerlink\" title=\"3.1 服务器领域\"></a>3.1 服务器领域</h3><ul>\n<li>Linux 在服务器领域的应用是其重要分支</li>\n<li>Linux 免费、稳定、高效等特点在这里得到了很好的体现<ul>\n<li>早期因为维护、运行等原因同样受到了很大的限制</li>\n<li>近些年来 Linux 服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-嵌入式领域\"><a href=\"#3-2-嵌入式领域\" class=\"headerlink\" title=\"3.2 嵌入式领域\"></a>3.2 嵌入式领域</h3><ul>\n<li>近些年来 Linux 在嵌入式领域的应用得到了飞速的提高</li>\n<li>Linux 运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百 KB 等特点，使其近些年来在嵌入式领域的应用得到非常大的提高</li>\n</ul>\n<blockquote>\n<p>主要应用：<strong>机顶盒</strong>、<strong>数字电视</strong>、<strong>网络电话</strong>、<strong>程控交换机</strong>、<strong>手机</strong>、<strong>PDA</strong>、等都是其应用领域，得到了 Google、三星、摩托罗拉、NEC 等公司的大力推广</p>\n</blockquote>\n<h3 id=\"3-3-个人桌面领域\"><a href=\"#3-3-个人桌面领域\" class=\"headerlink\" title=\"3.3 个人桌面领域\"></a>3.3 个人桌面领域</h3><ul>\n<li>此领域是传统 Linux 应用最薄弱的环节</li>\n<li>传统 Linux 由于界面简单、操作复杂、应用软件少的缺点，一直被 Windows 所压制</li>\n<li>近些年来随着 <strong>Ubuntu</strong>、<strong>Fedora</strong> 等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，Linux 在个人桌面领域的占有率在逐渐的提高</li>\n</ul>\n<blockquote>\n<p>在 Ubuntu 中玩 QQ</p>\n</blockquote>\n","categories":["Linux"],"tags":["Linux","科普"]},{"title":"Linux 科普背景","url":"/posts/d162cc9c/","content":"<h1 id=\"操作系统（科普章节）\"><a href=\"#操作系统（科普章节）\" class=\"headerlink\" title=\"操作系统（科普章节）\"></a>操作系统（科普章节）</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><ul>\n<li><p>了解<strong>操作系统</strong>及作用</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"1-操作系统（Operation-System，OS）\"><a href=\"#1-操作系统（Operation-System，OS）\" class=\"headerlink\" title=\"1. 操作系统（Operation System，OS）\"></a>1. 操作系统（Operation System，OS）</h2><blockquote>\n<p>操作系统作为接口的示意图 </p>\n<p> <a href=\"https://imgchr.com/i/3GOEzq\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/24/3GOEzq.md.png\" alt=\"3GOEzq.md.png\"></a></p>\n</blockquote>\n<blockquote>\n<p>没有安装操作系统的计算机，通常被称为 <strong>裸机</strong></p>\n<ul>\n<li>如果想在 <strong>裸机</strong> 上运行自己所编写的程序，就必须用机器语言书写程序</li>\n<li>如果计算机上安装了操作系统，就可以在操作系统上安装支持的高级语言环境，用高级语言开发程序</li>\n</ul>\n</blockquote>\n<h3 id=\"1-1-操作系统的作用\"><a href=\"#1-1-操作系统的作用\" class=\"headerlink\" title=\"1.1 操作系统的作用\"></a>1.1 操作系统的作用</h3><ul>\n<li>是现代计算机系统中 <strong>最基本和最重要</strong> 的系统软件</li>\n<li>是 <strong>配置在计算机硬件上的第一层软件</strong>，是对硬件系统的首次扩展</li>\n<li>主要作用是<strong>管理好硬件设备</strong>，并为用户和应用程序提供一个简单的接口，以便于使用</li>\n<li>而其他的诸如编译程序、数据库管理系统，以及大量的应用软件，都直接依赖于操作系统的支持</li>\n</ul>\n<h3 id=\"1-2-不同应用领域的主流操作系统\"><a href=\"#1-2-不同应用领域的主流操作系统\" class=\"headerlink\" title=\"1.2 不同应用领域的主流操作系统\"></a>1.2 不同应用领域的主流操作系统</h3><ul>\n<li>桌面操作系统</li>\n<li>服务器操作系统</li>\n<li>嵌入式操作系统</li>\n<li>移动设备操作系统</li>\n</ul>\n<h4 id=\"1-gt-桌面操作系统\"><a href=\"#1-gt-桌面操作系统\" class=\"headerlink\" title=\"1&gt; 桌面操作系统\"></a>1&gt; 桌面操作系统</h4><ul>\n<li>Windows 系列<ul>\n<li>用户群体大</li>\n</ul>\n</li>\n<li>macOS<ul>\n<li>适合于开发人员</li>\n</ul>\n</li>\n<li>Linux<ul>\n<li>应用软件少</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-gt-服务器操作系统\"><a href=\"#2-gt-服务器操作系统\" class=\"headerlink\" title=\"2&gt; 服务器操作系统\"></a>2&gt; 服务器操作系统</h4><ul>\n<li>Linux<ul>\n<li>安全、稳定、免费</li>\n<li>占有率高</li>\n</ul>\n</li>\n<li>Windows Server<ul>\n<li>付费</li>\n<li>占有率低</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-gt-嵌入式操作系统\"><a href=\"#3-gt-嵌入式操作系统\" class=\"headerlink\" title=\"3&gt; 嵌入式操作系统\"></a>3&gt; 嵌入式操作系统</h4><ul>\n<li>Linux</li>\n</ul>\n<h4 id=\"4-gt-移动设备操作系统\"><a href=\"#4-gt-移动设备操作系统\" class=\"headerlink\" title=\"4&gt; 移动设备操作系统\"></a>4&gt; 移动设备操作系统</h4><ul>\n<li>iOS</li>\n<li>Android（基于 <code>Linux</code>）</li>\n</ul>\n<h3 id=\"1-3-虚拟机\"><a href=\"#1-3-虚拟机\" class=\"headerlink\" title=\"1.3 虚拟机\"></a>1.3 虚拟机</h3><p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统</p>\n<ul>\n<li>虚拟系统通过生成现有操作系统的全新虚拟镜像，具有真实操作系统完全一样的功能</li>\n<li>进入虚拟系统后，所有操作都是在这个全新的独立的虚拟系统里面进行，可以独立安装运行软件，保存数据，拥有自己的独立桌面，不会对真正的系统产生任何影响</li>\n<li>而且能够在现有系统与虚拟镜像之间灵活切换的一类操作系统</li>\n</ul>\n","categories":["Linux"],"tags":["Linux","科普"]},{"title":"hexo配置在云服务器（宝塔面板）上","url":"/posts/b2d2fe74/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>发现博客部署到github上访问非常慢，于是将它部署到自己的服务器上。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：安装\"><a href=\"#二：安装\" class=\"headerlink\" title=\"二：安装\"></a>二：安装</h2><h3 id=\"2-1配置\"><a href=\"#2-1配置\" class=\"headerlink\" title=\"2.1配置\"></a>2.1配置</h3><h4 id=\"2-1-1-服务器配置\"><a href=\"#2-1-1-服务器配置\" class=\"headerlink\" title=\"2.1.1 服务器配置\"></a>2.1.1 服务器配置</h4><p>centos7服务器，已经安装bt面板和lamp环境</p>\n<h4 id=\"2-1-2本机配置\"><a href=\"#2-1-2本机配置\" class=\"headerlink\" title=\"2.1.2本机配置\"></a>2.1.2本机配置</h4><p>win10，已经部署好hexo至github</p>\n<h3 id=\"2-2安装配置git\"><a href=\"#2-2安装配置git\" class=\"headerlink\" title=\"2.2安装配置git\"></a>2.2安装配置git</h3><h4 id=\"2-2-1安装git\"><a href=\"#2-2-1安装git\" class=\"headerlink\" title=\"2.2.1安装git\"></a>2.2.1安装git</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检查安装信息：<code>git --version</code>     </li>\n</ul>\n<h4 id=\"2-2-2创建git用户\"><a href=\"#2-2-2创建git用户\" class=\"headerlink\" title=\"2.2.2创建git用户\"></a>2.2.2创建git用户</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">adduser git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3配置git用户\"><a href=\"#2-2-3配置git用户\" class=\"headerlink\" title=\"2.2.3配置git用户\"></a>2.2.3配置git用户</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 740 &#x2F;etc&#x2F;sudoers</span><br><span class=\"line\">vim &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure>\n\n<p>找到以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## Allow root to run any commands anywhere</span><br><span class=\"line\">root    ALL&#x3D;(ALL)     ALL</span><br></pre></td></tr></table></figure>\n\n<p>在下面添加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git     ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure>\n\n<p> 保存退出后改回权限：<code>chmod 400 /etc/sudoers</code> </p>\n<h4 id=\"2-2-4打开git服务器的rsa认证\"><a href=\"#2-2-4打开git服务器的rsa认证\" class=\"headerlink\" title=\"2.2.4打开git服务器的rsa认证\"></a>2.2.4打开git服务器的rsa认证</h4><p> vim /etc/ssh/sshd_config<br>在sshd_config中开启以下几项（若没有请自行添加没有项）： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile  .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-5-设置git用户的密码\"><a href=\"#2-2-5-设置git用户的密码\" class=\"headerlink\" title=\"2.2.5 设置git用户的密码\"></a>2.2.5 设置git用户的密码</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#需要root权限</span><br><span class=\"line\">sudo passwd git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-6-配置ssh\"><a href=\"#2-2-6-配置ssh\" class=\"headerlink\" title=\"2.2.6 配置ssh\"></a>2.2.6 配置ssh</h4><p>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">mkdir ~&#x2F;.ssh</span><br><span class=\"line\">vim ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class=\"line\">#然后将电脑中执行 cat ~&#x2F;.ssh&#x2F;id_rsa.pub | pbcopy ,将公钥复制粘贴到authorized_keys</span><br><span class=\"line\">chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class=\"line\">chmod 700 ~&#x2F;.ssh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后就可以在本机端执行ssh 命令<code>ssh -v git@SERVER_IP</code>测试是否可以免密登录 至此，Git用户添加完成</li>\n</ul>\n<p>如果成功最后会显示 <code>Welcome to xxx</code>,如若不行，请重新配置公钥再重试一次</p>\n<h3 id=\"2-3创建git仓库\"><a href=\"#2-3创建git仓库\" class=\"headerlink\" title=\"2.3创建git仓库\"></a>2.3创建git仓库</h3><p> 执行命令：<code>sudo git init --bare hexo.git</code> </p>\n<blockquote>\n<p> 使用–bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区，我们不会在裸仓库上进行操作，它只为共享而存在。 </p>\n</blockquote>\n<p>改变 /home/git/hexo.git 目录的拥有者为git用户：<code>sudo chown -R git:git hexo.git</code></p>\n<p>也可以 <code>git clonegit@YOUR_SERVER_IP:/home/git/hexo.git</code>看一下能不能把空仓库克隆下来，如果可以说明交互正常。</p>\n<h3 id=\"2-4配置钩子\"><a href=\"#2-4配置钩子\" class=\"headerlink\" title=\"2.4配置钩子\"></a>2.4配置钩子</h3><p>有钩子可以在gitpull后处理文件</p>\n<p>在 <code>hexo.git/hooks</code> 目录下新建一个 <code>post-receive</code> 文件，进入<code>cd /home/git/hexo.git/hooks/</code>，编辑这个文件<code>vim post-receive</code><br> 在 <code>post-receive</code> 文件中写入如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!&#x2F;bin&#x2F;bash</span><br><span class=\"line\">git --work-tree&#x3D;&#x2F;www&#x2F;wwwroot&#x2F;hexo --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;hexo.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>记住要改变网站所在目录的权限为777(是之有写入权利)</p>\n</li>\n<li><p>设置这个文件的可执行权限：<code>chmod +x post-receive</code></p>\n</li>\n<li><p>注意，<code>/www/wwwroot/hexo</code> 要换成你自己的部署目录，正如上文所说，我是的配置目录是<code>/www/wwwroot/hexo</code>。其中<code>/home/git/hexo.git</code>是git仓库的位置。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。</p>\n</li>\n</ul>\n<h2 id=\"三-在本机上配置\"><a href=\"#三-在本机上配置\" class=\"headerlink\" title=\"三.在本机上配置\"></a>三.在本机上配置</h2><p>搭建好后，修改hexo根目录下的_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">    ECS:    git@YOUR_SERVER_IP:&#x2F;home&#x2F;git&#x2F;hexo.git,master</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>YOUR_SERVER_IP</code>换成你的服务器ip或域名，<code>/home/git/hexo.git</code>换成你的git仓库地址</p>\n<p>最后 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>\n<p>看一下有没有部署到服务器上</p>\n","categories":["hexo"],"tags":["hexo","ECS"]},{"title":"搜索引擎下拉菜单关键词 接口API ","url":"/posts/287c1b7e/","content":"<p>今天 Deshun 搜集整理了各大搜索引擎和电商平台的下拉关键词接口，方便做SEO和店铺优化的小伙伴们参考，搜索词以前端为例。</p>\n<a id=\"more\"></a>\n\n<p>各大搜索引擎智能提示API（jsonp实现跨域自动补全建议）更新时间为2019年2月28日，亲测可用，去除不可用的接口，新增一些接口。</p>\n<h3 id=\"谷歌（Google）\"><a href=\"#谷歌（Google）\" class=\"headerlink\" title=\"谷歌（Google）\"></a>谷歌（Google）</h3><p>谷歌API接口地址1：<a href=\"http://clients1.google.com/complete/search?hl=zh&amp;output=toolbar&amp;q=前端\" target=\"_blank\" rel=\"noopener\">http://clients1.google.com/complete/search?hl=zh&amp;output=toolbar&amp;q=前端</a></p>\n<p>谷歌API接口地址2：<a href=\"http://suggestqueries.google.com/complete/search?output=toolbar&amp;hl=zh&amp;q=前端\" target=\"_blank\" rel=\"noopener\">http://suggestqueries.google.com/complete/search?output=toolbar&amp;hl=zh&amp;q=前端</a></p>\n<p>谷歌API接口地址2：<a href=\"http://suggestqueries.google.com/complete/search?client=youtube&amp;q=前端&amp;jsonp=window.google.ac.h\" target=\"_blank\" rel=\"noopener\">http://suggestqueries.google.com/complete/search?client=youtube&amp;q=前端&amp;jsonp=window.google.ac.h</a> 会直接下载。</p>\n<p>返回结果：</p>\n<p><img src=\"https://www.w3h5.com/zb_users/upload/2019/02/201902281551347345797376.png\" alt=\"搜索引擎下拉菜单关键词 接口API （百度、淘宝长尾词）最新 SEO资料 第2张\"></p>\n<h3 id=\"百度（Baidu）\"><a href=\"#百度（Baidu）\" class=\"headerlink\" title=\"百度（Baidu）\"></a>百度（Baidu）</h3><p>百度API接口地址1：<a href=\"http://suggestion.baidu.com/su?wd=前端\" target=\"_blank\" rel=\"noopener\">http://suggestion.baidu.com/su?wd=前端</a></p>\n<p>也有人会这样写：<a href=\"http://suggestion.baidu.com/su?wd=前端&amp;p=3&amp;cb=window.bdsug.sug\" target=\"_blank\" rel=\"noopener\">http://suggestion.baidu.com/su?wd=前端&amp;p=3&amp;cb=window.bdsug.sug</a></p>\n<p>返回结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.bdsug.sug(&#123;q:&quot;前端&quot;,p:false,s:[&quot;前端工程师&quot;,&quot;前端学习路线&quot;,&quot;前端开发&quot;,&quot;前端框架&quot;,&quot;前端面试题&quot;,&quot;前端面试&quot;,&quot;前端面试题及答案&quot;,&quot;前端开发工具&quot;,&quot;前端ui框架&quot;,&quot;前端性能优化&quot;]&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜狗（Sougou）\"><a href=\"#搜狗（Sougou）\" class=\"headerlink\" title=\"搜狗（Sougou）\"></a>搜狗（Sougou）</h3><p>搜狗API接口地址1：<a href=\"http://w.sugg.sogou.com/sugg/ajaj_json.jsp?key=前端&amp;type=web\" target=\"_blank\" rel=\"noopener\">http://w.sugg.sogou.com/sugg/ajaj_json.jsp?key=前端&amp;type=web</a></p>\n<p>返回结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.sogou.sug([&quot;前端&quot;,[&quot;前端开发&quot;,&quot;前端框架&quot;,&quot;前端面试题&quot;,&quot;前端工程师&quot;,&quot;前端培训&quot;,&quot;前端和后端&quot;,&quot;前端招聘&quot;,&quot;前端开发培训&quot;,&quot;前端开发工具&quot;,&quot;前端和后端的区别&quot;],[&quot;0;0;0;0&quot;,&quot;1;0;0;0&quot;,&quot;2;0;0;0&quot;,&quot;3;0;0;0&quot;,&quot;4;0;0;0&quot;,&quot;5;0;0;0&quot;,&quot;6;0;0;0&quot;,&quot;7;0;0;0&quot;,&quot;8;0;0;0&quot;,&quot;9;0;0;0&quot;],[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],[&quot;0&quot;],&quot;&quot;,&quot;suglabId_1&quot;],-1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"360搜索（so）\"><a href=\"#360搜索（so）\" class=\"headerlink\" title=\"360搜索（so）\"></a>360搜索（so）</h3><p>360搜索API接口地址：<a href=\"https://sug.so.360.cn/suggest?callback=suggest_so&amp;word=qianduan\" target=\"_blank\" rel=\"noopener\">https://sug.so.360.cn/suggest?callback=suggest_so&amp;word=qianduan</a> 测试只支持英文，不过可以支持拼音。</p>\n<p>360搜索API接口地址：<a href=\"https://sug.so.360.cn/suggest?encodein=utf-8&amp;encodeout=utf-8&amp;format=json&amp;word=前端&amp;callback=window.so.sug\" target=\"_blank\" rel=\"noopener\">https://sug.so.360.cn/suggest?encodein=utf-8&amp;encodeout=utf-8&amp;format=json&amp;word=前端&amp;callback=window.so.sug</a> 测试支持汉字。</p>\n<p>返回结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">suggest_so(&#123;q:&quot;qianduan&quot;,p:true,s:[&quot;前端&quot;,&quot;前端培训机构&quot;,&quot;前端开发需要学什么&quot;,&quot;前段&quot;,&quot;钱端&quot;,&quot;前端开发&quot;,&quot;前端工程师&quot;,&quot;前端框架&quot;,&quot;嵌段&quot;,&quot;前端面试题&quot;]&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"必应（Bing）\"><a href=\"#必应（Bing）\" class=\"headerlink\" title=\"必应（Bing）\"></a>必应（Bing）</h3><p>必应搜索API接口地址：<a href=\"https://api.bing.com/qsonhs.aspx?type=cb&amp;q=前端\" target=\"_blank\" rel=\"noopener\">https://api.bing.com/qsonhs.aspx?type=cb&amp;q=前端</a> 返回的是 json 格式。</p>\n<p>必应搜索API接口地址：<a href=\"https://api.bing.com/qsonhs.aspx?type=cb&amp;q=前端&amp;cb=window.bing.sug\" target=\"_blank\" rel=\"noopener\">https://api.bing.com/qsonhs.aspx?type=cb&amp;q=前端&amp;cb=window.bing.sug</a></p>\n<p>返回结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if(typeof window.bing.sug &#x3D;&#x3D; &#39;function&#39;) window.bing.sug(&#123;&quot;AS&quot;:&#123;&quot;Query&quot;:&quot;前端&quot;,&quot;FullResults&quot;:1,&quot;Results&quot;:[&#123;&quot;Type&quot;:&quot;AS&quot;,&quot;Suggests&quot;:[&#123;&quot;Txt&quot;:&quot;前端切版&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;&quot;,&quot;HCS&quot;:0.0355&#125;,&#123;&quot;Txt&quot;:&quot;前端工程師&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;AS1&quot;&#125;,&#123;&quot;Txt&quot;:&quot;前端工程師 薪水&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;AS2&quot;&#125;,&#123;&quot;Txt&quot;:&quot;前端科技股份有限公司&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;AS3&quot;&#125;,&#123;&quot;Txt&quot;:&quot;前端 英文&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;AS4&quot;&#125;,&#123;&quot;Txt&quot;:&quot;前端 框架&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;AS5&quot;&#125;,&#123;&quot;Txt&quot;:&quot;前端工程師 ptt&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;AS6&quot;&#125;,&#123;&quot;Txt&quot;:&quot;前端開發 windows&quot;,&quot;Type&quot;:&quot;AS&quot;,&quot;Sk&quot;:&quot;AS7&quot;&#125;]&#125;]&#125;&#125;&#x2F;* pageview_candidate *&#x2F;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"淘宝（Taobao）\"><a href=\"#淘宝（Taobao）\" class=\"headerlink\" title=\"淘宝（Taobao）\"></a>淘宝（Taobao）</h3><p>淘宝搜索API接口地址：<a href=\"https://suggest.taobao.com/sug?code=utf-8&amp;q=前端&amp;callback=window.taobao.sug\" target=\"_blank\" rel=\"noopener\">https://suggest.taobao.com/sug?code=utf-8&amp;q=前端&amp;callback=window.taobao.sug</a></p>\n<p>返回结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">KISSY.Suggest.callback(&#123;&quot;result&quot;:[[&quot;前端播放器&quot;,&quot;10122&quot;],[&quot;前端视频教程 2018&quot;,&quot;3080&quot;],[&quot;前端开发&quot;,&quot;18144&quot;],[&quot;前端开发书籍&quot;,&quot;13391&quot;],[&quot;前端净水器&quot;,&quot;63525&quot;],[&quot;前端开发视频&quot;,&quot;8932&quot;],[&quot;前端过滤器&quot;,&quot;69083&quot;],[&quot;前端耳机&quot;,&quot;40712&quot;],[&quot;前端视频&quot;,&quot;3535&quot;],[&quot;前端教程&quot;,&quot;22974&quot;]]&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一淘（etao）\"><a href=\"#一淘（etao）\" class=\"headerlink\" title=\"一淘（etao）\"></a>一淘（etao）</h3><p>一淘搜索API接口地址：<a href=\"https://suggest.taobao.com/sug?area=etao&amp;code=utf-8&amp;callback=KISSY.Suggest.callback&amp;q=前端\" target=\"_blank\" rel=\"noopener\">https://suggest.taobao.com/sug?area=etao&amp;code=utf-8&amp;callback=KISSY.Suggest.callback&amp;q=前端</a></p>\n<p>返回结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">KISSY.Suggest.callback(&#123;&quot;result&quot;:[[&quot;前端播放器&quot;,&quot;10122&quot;],[&quot;前端视频教程 2018&quot;,&quot;3080&quot;],[&quot;前端开发&quot;,&quot;18144&quot;],[&quot;前端开发书籍&quot;,&quot;13391&quot;],[&quot;前端净水器&quot;,&quot;63525&quot;],[&quot;前端开发视频&quot;,&quot;8932&quot;],[&quot;前端过滤器&quot;,&quot;69083&quot;],[&quot;前端耳机&quot;,&quot;40712&quot;],[&quot;前端视频&quot;,&quot;3535&quot;],[&quot;前端教程&quot;,&quot;22974&quot;]]&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"京东（JD）\"><a href=\"#京东（JD）\" class=\"headerlink\" title=\"京东（JD）\"></a>京东（JD）</h3><p>京东查价接口：<a href=\"http://p.3.cn/prices/mgets?skuIds=J_100002308919&amp;type=1\" target=\"_blank\" rel=\"noopener\">http://p.3.cn/prices/mgets?skuIds=J_100002308919&amp;type=1</a> 红色部分为商品ID</p>\n<p>返回结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&#123;&quot;id&quot;:&quot;J_100002308919&quot;,&quot;m&quot;:&quot;6000.00&quot;,&quot;op&quot;:&quot;3299.00&quot;,&quot;p&quot;:&quot;3299.00&quot;&#125;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索建议使用方式：\"><a href=\"#搜索建议使用方式：\" class=\"headerlink\" title=\"搜索建议使用方式：\"></a>搜索建议使用方式：</h3><p>以百度为例，API返回的是JSONP数据，JSONP是跨域访问的一种方式。由于服务器返回的JavaScript代码可以直接引用，通过回调函数的方式就可以间接的获取服务器的数据。</p>\n<p>下面是一个回调搜索建议的例子，window.baidu.sug 返回的是一个json对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    window.onload &#x3D; function() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;组装查询地址</span><br><span class=\"line\">        var sugurl &#x3D; &quot;http:&#x2F;&#x2F;suggestion.baidu.com&#x2F;su?wd&#x3D;#content#&amp;cb&#x3D;window.baidu.sug&quot;;</span><br><span class=\"line\">        var content &#x3D; &quot;关键字&quot;;</span><br><span class=\"line\">        sugurl &#x3D; sugurl.replace(&quot;#content#&quot;, content);</span><br><span class=\"line\">        &#x2F;&#x2F;定义回调函数</span><br><span class=\"line\">        window.baidu &#x3D; &#123;</span><br><span class=\"line\">            sug: function(json) &#123;</span><br><span class=\"line\">                console.log(json)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F;动态添加JS脚本</span><br><span class=\"line\">        var script &#x3D; document.createElement(&quot;script&quot;);</span><br><span class=\"line\">        script.src &#x3D; sugurl;</span><br><span class=\"line\">        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(script);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>控制台打印的结果：如果要将结果保存在一个字符串数组中，只需要 var arr = json.s 即可。</p>\n","categories":["vue"],"tags":["vue","jsonp","api"]},{"title":"input中blur失去焦点事件与点击事件冲突的解决方法（vue）","url":"/posts/a0e6a2de/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>最近在做百度的下拉框时遇到一个问题就是在点击下拉框时，input失去焦点，从而是的下拉框消失，使得点击事件没有用，因此查阅资料得到答案。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><p> 遇到一个问题，就是输入框input的blur事件与点击click事件的冲突了，在click的时候会先触发blur事件，没有触发click </p>\n<p>还有一种情况，下拉框blur和click事件冲突，导致不能正常选择值</p>\n<p>原因：由于JavaScript为单线程，同一时间只能执行处理一个事件。“blur优先于click执行”。而在本示例中，由于blur处理程序，会将对下拉框展示区隐藏，所以导致其后续click事件并不会执行。</p>\n<p><strong>解决方案1：对blur事件进行延迟，让click先执行。</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">blurEvent()&#123;</span><br><span class=\"line\">     setTimeout(()&#x3D;&gt;&#123;this.rankSeen&#x3D;false&#125;,300)&#x2F;&#x2F;设置300ms后让下拉框消失</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<p><strong>解决方案2：将click事件改为mousedown，让其优先于blur事件执行</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">由@click&#x3D;&quot;search(item.key)&quot;</span><br><span class=\"line\">改为@mousedown&quot;search(item.key)&quot;</span><br></pre></td></tr></table></figure>\n\n<p>亲测这两种方法都可以解决这个问题。</p>\n<p> mousedown事件：当鼠标指针移动到元素上方，并按下鼠标按键时，会发生mousedown事件。</p>\n<p>mouseup事件：当在元素上放松鼠标按钮时，会发生mouseup事件。 </p>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><p>（1）mousedown与click 事件不同，mousedown事件仅需要按键被按下，而不需要松开即可发生。 </p>\n<p>（2）mouseup与click事件不同，mouseup事件仅需要放松按钮。当鼠标指针位于元素上方时，放松鼠标按钮就会触发该事件。</p>\n<p>其执行顺序为：mousedown &gt;&gt; mouseup &gt;&gt; click</p>\n<p>参考网址：</p>\n<p> <a href=\"https://www.iteye.com/blog/570109268-2400122\" target=\"_blank\" rel=\"noopener\">https://www.iteye.com/blog/570109268-2400122</a> </p>\n","categories":["vue"],"tags":["js","vue"]},{"title":"vue 使用的vue-resources 发起jsonp请求","url":"/posts/d6888797/","content":"<p> <strong>1. yarn add vue-resource</strong> </p>\n<a id=\"more\"></a>\n\n<p> <strong>2. main.js引入vue-resource</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import VueResource from &#39;vue-resource&#39;</span><br><span class=\"line\">Vue.use(VueResource)</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.使用</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;引入vue-resource之后, 相当于在vue实例(this)身上新增了一些方法或对象(如:$http)</span><br><span class=\"line\">  this.$http.jsonp(&#39;https:&#x2F;&#x2F;sp0.baidu.com&#x2F;5a1Fazu8AA54nxGko9WTAnF6hhy&#x2F;su&#39;, </span><br><span class=\"line\">  &#x2F;&#x2F;jsonp参数一: 跨域请求接口;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   &#x2F;&#x2F;jsonp交互走的是get形式(不是post), 传递参数用params</span><br><span class=\"line\">   params:&#123;  </span><br><span class=\"line\">    wd:&#39;a&#39;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   &#x2F;&#x2F;接口的callback名字, vue默认名字为&quot;callback&quot;</span><br><span class=\"line\">   jsonp:&#39;cb&#39; </span><br><span class=\"line\">  &#125;,)</span><br><span class=\"line\">  &#x2F;&#x2F;jsonp参数二: 传到的params和callback类型</span><br><span class=\"line\">  .then(function(res)&#123; </span><br><span class=\"line\">   alert(res.data.s);</span><br><span class=\"line\">  &#125;,function(res)&#123;</span><br><span class=\"line\">   alert(res.status);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;固定形式: jsonp(&#39;&#39;,&#123;params&#123;&#125;,jsonp:&#39;cb&#39;&#125;).then(function()&#123;&#39;成功&#39;&#125;,function()&#123;&#39;失败&#39;&#125;);</span><br></pre></td></tr></table></figure>\n\n","categories":["vue"],"tags":["vue","vue-resources","jsonp"]},{"title":"vue 的跨域访问","url":"/posts/860a051a/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>最近在做一个项目的时候需要去请求资源，因此使用axios来get请求，但一直报跨域错误。</p>\n<a id=\"more\"></a>\n\n<p><code>Access to XMLHttpRequest at &#39;https://api.bing.com/qsonhs.aspx?type=cb&amp;q=1&#39; (redirected from &#39;http://api.bing.com/qsonhs.aspx?type=cb&amp;q=1&#39;) from origin &#39;http://localhost:8080&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></p>\n<p>发现axios是不支持跨域访问的，于是我找找找，终于找到了两种方法解决这个跨域问题。</p>\n<p>运用vue-jsonp或vue-resources来发起jsonp请求。进行跨域访问。这一篇先介绍vue-jsonp的使用。</p>\n<h2 id=\"二：解决方案\"><a href=\"#二：解决方案\" class=\"headerlink\" title=\"二：解决方案\"></a>二：解决方案</h2><h3 id=\"2-1vue-jsonp的安装和引入\"><a href=\"#2-1vue-jsonp的安装和引入\" class=\"headerlink\" title=\"2.1vue-jsonp的安装和引入\"></a>2.1vue-jsonp的安装和引入</h3><p>详情可看<a href=\"https://github.com/LancerComet/vue-jsonp#readme\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>使用npm的用 <code>npm install vue-jsonp -save</code></p>\n<p>使用yarn 的可用 <code>yarn add vue-jsonp</code></p>\n<p>之后再vue-cli的入口文件  <code>main.js</code> 引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import VueJsonp from &#39;vue-jsonp&#39;</span><br><span class=\"line\">Vue.use(VueJsonp)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-vue-jsonp的使用\"><a href=\"#2-2-vue-jsonp的使用\" class=\"headerlink\" title=\"2.2 vue-jsonp的使用\"></a>2.2 vue-jsonp的使用</h3><p>在主页面中可以用  <code>Vue.jsonp(url,dataObj,timeout)</code></p>\n<p>在vue组件中可以用  <code>this.$jsonp(url, dataObj, timeout)</code> </p>\n<p>其中</p>\n<ul>\n<li><p>url 指的是目标url</p>\n</li>\n<li><p>dataObj 指的是 要传递的数据参数对象 </p>\n</li>\n<li><p>timeout 请求多长时间之后认为请求失败</p>\n</li>\n</ul>\n<h4 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL.\"></a>URL.</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#39;&#x2F;url?&#123;callbackQuery&#125;&#x3D;&#123;callbackName&#125;&amp;...&#39;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; Default:</span><br><span class=\"line\">&#39;&#x2F;url?callback&#x3D;jsonp_RANDOM_STRING&amp;...&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Assign-callback-query-name\"><a href=\"#Assign-callback-query-name\" class=\"headerlink\" title=\"Assign callback query name.\"></a>Assign callback query name.</h4><p>（注意这一点）回调函数的回调查询名称默认是<strong>“callback”</strong>如果访问资源的名字不是callback的话要改成相对应的名字</p>\n<p>举个例子 <code>[http://suggestion.baidu.com/su?wd=%E5%89%8D%E7%AB%AF&amp;p=3&amp;cb=window.bdsug.sug](http://suggestion.baidu.com/su?wd=前端&amp;p=3&amp;cb=window.bdsug.sug)</code> 这是百度提示词的访问url，它的查询名为cb，那么我们就要加上下面的那一句话。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$jsonp(&#39;&#x2F;url&#39;, &#123;</span><br><span class=\"line\">  callbackQuery: &#39;cb&#39;  &#x2F;&#x2F; Default: callback</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; Then URL will be: &#39;&#x2F;url?cb&#x3D;jsonp_aws84739ssu8e3&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Assign-callback-function-name\"><a href=\"#Assign-callback-function-name\" class=\"headerlink\" title=\"Assign callback function name.\"></a>Assign callback function name.</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$jsonp(&#39;&#x2F;url&#39;, &#123;</span><br><span class=\"line\">  callbackName: &#39;jsonpFunc&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; Then URL will be: &#39;&#x2F;url?callback&#x3D;jsonpFunc&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example.\"></a>Example.</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &#x2F;&#x2F; If you want to setup the global timeout, just:</span><br><span class=\"line\">Vue.use(VueJsonp, 5000)</span><br><span class=\"line\">&#x2F;&#x2F; Now all requests will be expired after 5000ms.</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; Use it in Vue Component.</span><br><span class=\"line\">const SomeComponent &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getData () &#123;</span><br><span class=\"line\">      this.$jsonp(&#39;http:&#x2F;&#x2F;www.some-site.com&#x2F;data&#39;, &#123; name: &#39;MyName&#39;, age: 20 &#125;)</span><br><span class=\"line\">      .then(json &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; Success.</span><br><span class=\"line\">      &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; Failed.</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F; Static Function.</span><br><span class=\"line\">&#x2F;&#x2F; Request url will be &#39;http:&#x2F;&#x2F;www.some-site.com&#x2F;data?name&#x3D;MyName&amp;age&#x3D;20&amp;cb&#x3D;jsonpFunc&#39;</span><br><span class=\"line\">Vue.jsonp(&#39;http:&#x2F;&#x2F;www.some-site.com&#x2F;data&#39;, &#123;</span><br><span class=\"line\">  name: &#39;MyName&#39;, age: 20, callbackQuery: &#39;cb&#39;, callbackName: &#39;jsonpFunc&#39;</span><br><span class=\"line\">&#125;).then(json &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; Success.</span><br><span class=\"line\">&#125;).catch(err &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; Failed.</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总而言之使用就是\"><a href=\"#总而言之使用就是\" class=\"headerlink\" title=\"总而言之使用就是\"></a>总而言之使用就是</h4><p>​    (注意回调函数的方式)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;访问地址&#39;url?q&#x3D;123&#39;</span><br><span class=\"line\">this.$jsonp(&#39;url&#39;,&#123;q: 123 &#125;)</span><br><span class=\"line\">\t.then( ( response ) &#x3D;&gt; &#123; console.log(response) &#125;)</span><br><span class=\"line\">\t.catch( (error) &#x3D;&gt; &#123; console.log(error)&#125; )</span><br></pre></td></tr></table></figure>\n\n","categories":["vue"],"tags":["vue","vue-jsonp"]},{"title":"vue使用iconfont","url":"/posts/ec166c64/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>最近在写导航面板（vue-cli）中需要使用到Icon，于是采取了使用阿里的iconfont写这篇文章来记录一下</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-挑选需要的icon添加到购物车中\"><a href=\"#2-1-挑选需要的icon添加到购物车中\" class=\"headerlink\" title=\"2.1 挑选需要的icon添加到购物车中\"></a>2.1 挑选需要的icon添加到购物车中</h3><p>官网： <a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">https://www.iconfont.cn/</a> </p>\n<p>挑选完后在购物车处点击添加到项目。</p>\n<p>如果选择多色，就选择<code>Symbol</code>模式，如果是单色模式就选择Unicode或Font class 模式。在这里只介绍Symlol的使用，另外两种可类似可得。<a href=\"https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code\" target=\"_blank\" rel=\"noopener\">官网使用方法</a>  </p>\n<h3 id=\"2-2在文件中引入\"><a href=\"#2-2在文件中引入\" class=\"headerlink\" title=\"2.2在文件中引入\"></a>2.2在文件中引入</h3><p>首先下载好文件，将其放入<code>createtoolbox\\src\\assets\\icon</code>再在main.js中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#39;@&#x2F;assets&#x2F;icon&#x2F;iconfont.js&#39;</span><br></pre></td></tr></table></figure>\n\n<p>再在App.vue 中引入样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class=\"line\">    .icon &#123;</span><br><span class=\"line\">       width: 1em; height: 1em;</span><br><span class=\"line\">       vertical-align: -0.15em;</span><br><span class=\"line\">       fill: currentColor;</span><br><span class=\"line\">       overflow: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;svg class&#x3D;&quot;icon&quot; aria-hidden&#x3D;&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;use xlink:href&#x3D;&quot;#icon-xxx&quot;&gt;&lt;&#x2F;use&gt;</span><br><span class=\"line\">&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3模块化Icon\"><a href=\"#2-3模块化Icon\" class=\"headerlink\" title=\"2.3模块化Icon\"></a>2.3模块化Icon</h3><p>在使用过程中觉得这样使用有点麻烦于是使用了将Icon模块化的想法</p>\n<p>于是在components下创建了一个Icon.vue其中写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;svg class&#x3D;&quot;icon&quot; aria-hidden&#x3D;&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;use :xlink:href&#x3D;&quot;&#39;#&#39;+iconName&quot;&gt;&lt;&#x2F;use&gt;</span><br><span class=\"line\">  &lt;&#x2F;svg&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    iconName: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      required: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.icon &#123;</span><br><span class=\"line\">  width: 1em;</span><br><span class=\"line\">  height: 1em;</span><br><span class=\"line\">  vertical-align: -0.15em;</span><br><span class=\"line\">  fill: currentColor;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>之后再在main.js 中注册全局组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Icon from &#39;@&#x2F;components&#x2F;Icon&#39;</span><br><span class=\"line\">Vue.component(&#39;Icon&#39;,Icon)</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在任意的地方使用了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Icon iconName&#x3D;&quot;icon-cl-tb&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章： <a href=\"https://juejin.im/post/59bb864b5188257e7a427c09#heading-5\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59bb864b5188257e7a427c09#heading-5</a> </p>\n","categories":["前端"],"tags":["vue","iconfont"]},{"title":"bt面板增加多个站点用同一个IP","url":"/posts/1f508686/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p> 鉴于之前发现在bt面板建立站点时一个ip不能建立多个站点，因此很困惑，查阅资料并解决此问题。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-添加站点\"><a href=\"#2-1-添加站点\" class=\"headerlink\" title=\"2.1 添加站点\"></a>2.1 添加站点</h3><p>在添加站点处，添加两个域名（第一个域名为‘假的’如：<a href=\"http://www.test.com\" target=\"_blank\" rel=\"noopener\">www.test.com</a> || test.com   第二个为真IP如：0.0.0.1:9090 ）备注，根目录可以自己选择，</p>\n<h3 id=\"2-2-修改站点信息\"><a href=\"#2-2-修改站点信息\" class=\"headerlink\" title=\"2.2 修改站点信息\"></a>2.2 修改站点信息</h3><p>​    在站点设置中删除假域名</p>\n<p>完结。这样就可以欺骗过宝塔的建站检查了，进行单个ip可使用多个端口建站。</p>\n","categories":["server"],"tags":["linux","bt面板"]},{"title":"vue 之动画","url":"/posts/33137921/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>鉴于之前看到有人的网页动画很好看，所以特去学习vue中的动画，借这篇文章将所学的vue动画做一个总结。其中包含animate.css的引入和使用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：进入-离开-amp-列表过渡\"><a href=\"#二：进入-离开-amp-列表过渡\" class=\"headerlink\" title=\"二：进入/离开&amp;列表过渡\"></a>二：进入/离开&amp;列表过渡</h2><h3 id=\"2-1-单元素-组件的过渡\"><a href=\"#2-1-单元素-组件的过渡\" class=\"headerlink\" title=\"2.1 单元素/组件的过渡\"></a>2.1 单元素/组件的过渡</h3><blockquote>\n<p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p>\n<ul>\n<li>条件渲染 (使用 <code>v-if</code>)</li>\n<li>条件展示 (使用 <code>v-show</code>)</li>\n<li>动态组件</li>\n<li>组件根节点</li>\n</ul>\n</blockquote>\n<h4 id=\"2-1-1-过渡的类名\"><a href=\"#2-1-1-过渡的类名\" class=\"headerlink\" title=\"2.1.1 过渡的类名\"></a>2.1.1 过渡的类名</h4><p> 在进入/离开的过渡中，会有 6 个 class 切换。 </p>\n<p><a href=\"https://imgchr.com/i/15uss0\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/02/10/15uss0.md.png\" alt=\"15uss0.md.png\"></a></p>\n<p>其中两个active类是 可以被用来定义进入过渡的过程时间，延迟和曲线函数。 </p>\n<p>另外四个用来定于初末状态。</p>\n<p> 对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>，则 `v-` 是这些类名的默认前缀。如果你使用了</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。 </p>\n<h4 id=\"2-1-2-自定义过渡的类名\"><a href=\"#2-1-2-自定义过渡的类名\" class=\"headerlink\" title=\"2.1.2  自定义过渡的类名\"></a>2.1.2  自定义过渡的类名</h4><p>我们可以通过以下 attribute 来自定义过渡类名：</p>\n<ul>\n<li><code>enter-class</code></li>\n<li><code>enter-active-class</code></li>\n<li><code>enter-to-class</code> (2.1.8+)</li>\n<li><code>leave-class</code></li>\n<li><code>leave-active-class</code></li>\n<li><code>leave-to-class</code> (2.1.8+)</li>\n</ul>\n<p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener\">Animate.css</a> 结合使用十分有用。（第三部分会讲到如何使用这个动画库）</p>\n<h4 id=\"2-1-3-CSS过渡\"><a href=\"#2-1-3-CSS过渡\" class=\"headerlink\" title=\"2.1.3 CSS过渡\"></a>2.1.3 CSS过渡</h4><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"example-1\"&gt;</span><br><span class=\"line\">  &lt;<span class=\"selector-tag\">button</span> <span class=\"keyword\">@click</span>=\"show = !show<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    Toggle render</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;transition name=\"</span>slide-fade<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;p v-if=\"</span>show<span class=\"string\">\"&gt;hello&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/transition&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"string\">  el: '#example-1',</span></span><br><span class=\"line\"><span class=\"string\">  data: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    show: true</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">/* 可以设置不同的进入和离开动画 */</span></span><br><span class=\"line\"><span class=\"string\">/* 设置持续时间和动画函数 */</span></span><br><span class=\"line\"><span class=\"string\">.slide-fade-enter-active &#123;</span></span><br><span class=\"line\"><span class=\"string\">  transition: all .3s ease;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.slide-fade-leave-active &#123;</span></span><br><span class=\"line\"><span class=\"string\">  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">.slide-fade-enter, .slide-fade-leave-to</span></span><br><span class=\"line\"><span class=\"string\">/* .slide-fade-leave-active for below version 2.1.8 */ &#123;</span></span><br><span class=\"line\"><span class=\"string\">  transform: translateX(10px);</span></span><br><span class=\"line\"><span class=\"string\">  opacity: 0;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;style/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-4-CSS动画\"><a href=\"#2-1-4-CSS动画\" class=\"headerlink\" title=\"2.1.4 CSS动画\"></a>2.1.4 CSS动画</h4><p>只改上方的style部分</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bounce-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: bounce-in .<span class=\"number\">5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.bounce-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: bounce-in .<span class=\"number\">5s</span> reverse;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> bounce-in &#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  50% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1.5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-5-显性的过渡持续时间\"><a href=\"#2-1-5-显性的过渡持续时间\" class=\"headerlink\" title=\"2.1.5 显性的过渡持续时间\"></a>2.1.5 显性的过渡持续时间</h4><p> 在这种情况下你可以用 `` 组件上的 <code>duration</code> 属性定制一个显性的过渡持续时间 (以毫秒计)： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition :duration&#x3D;&quot;1000&quot;&gt;...&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以定制进入和移出的持续时间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;...&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-6-JaveScript-钩子\"><a href=\"#2-1-6-JaveScript-钩子\" class=\"headerlink\" title=\"2.1.6 JaveScript 钩子\"></a>2.1.6 JaveScript 钩子</h4><p> 可以在属性中声明 JavaScript 钩子 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition</span><br><span class=\"line\">  v-on:before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class=\"line\">  v-on:enter&#x3D;&quot;enter&quot;</span><br><span class=\"line\">  v-on:after-enter&#x3D;&quot;afterEnter&quot;</span><br><span class=\"line\">  v-on:enter-cancelled&#x3D;&quot;enterCancelled&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  v-on:before-leave&#x3D;&quot;beforeLeave&quot;</span><br><span class=\"line\">  v-on:leave&#x3D;&quot;leave&quot;</span><br><span class=\"line\">  v-on:after-leave&#x3D;&quot;afterLeave&quot;</span><br><span class=\"line\">  v-on:leave-cancelled&#x3D;&quot;leaveCancelled&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这些钩子函数可以结合 CSS <code>transitions/animations</code> 使用，也可以单独使用。</p>\n<blockquote>\n<p>当只用 JavaScript 过渡的时候，<strong>在 <code>enter</code> 和 <code>leave</code> 中必须使用 <code>done</code> 进行回调</strong>。否则，它们将被同步调用，过渡会立即完成。</p>\n<p>推荐对于仅使用 JavaScript 过渡的元素添加 <code>v-bind:css=&quot;false&quot;</code>，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</p>\n</blockquote>\n<p>详细用法，请百度。。。（此节较难使用）</p>\n<h3 id=\"2-2-多个元素的过渡\"><a href=\"#2-2-多个元素的过渡\" class=\"headerlink\" title=\"2.2 多个元素的过渡\"></a>2.2 多个元素的过渡</h3><p> 最常见的多标签过渡是一个列表和描述这个列表为空消息的元素： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition&gt;</span><br><span class=\"line\">  &lt;table v-if&#x3D;&quot;items.length &gt; 0&quot;&gt;</span><br><span class=\"line\">    &lt;!-- ... --&gt;</span><br><span class=\"line\">  &lt;&#x2F;table&gt;</span><br><span class=\"line\">  &lt;p v-else&gt;Sorry, no items found.&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n<p> 可以这样使用，但是有一点需要注意： </p>\n<blockquote>\n<p> 当有<strong>相同标签名</strong>的元素切换时，需要通过 <code>key</code> attribute 设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，<strong>给在 `` 组件中的多个元素设置 key 是一个更好的实践</strong> </p>\n</blockquote>\n<h4 id=\"2-2-1过渡模式\"><a href=\"#2-2-1过渡模式\" class=\"headerlink\" title=\"2.2.1过渡模式\"></a>2.2.1过渡模式</h4><p> 有两个元素过渡时，一个离开过渡的时候另一个开始进入过渡。这是 <code>&lt;transition&gt;</code> 的默认行为 - 进入和离开同时发生。 </p>\n<p>同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了 <strong>过渡模式</strong></p>\n<ul>\n<li><code>in-out</code>：新元素先进行过渡，完成之后当前元素过渡离开。</li>\n<li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition name&#x3D;&quot;fade&quot; mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">  &lt;!-- ... the buttons ... --&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3多个组件的过渡\"><a href=\"#2-3多个组件的过渡\" class=\"headerlink\" title=\"2.3多个组件的过渡\"></a>2.3多个组件的过渡</h3><p> 多个组件的过渡简单很多 - 我们不需要使用 <code>key</code> attribute。相反，我们只需要使用<a href=\"https://cn.vuejs.org/v2/guide/components.html#动态组件\" target=\"_blank\" rel=\"noopener\">动态组件</a>： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition name&#x3D;&quot;component-fade&quot; mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">  &lt;component v-bind:is&#x3D;&quot;view&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#transition-components-demo&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    view: &#39;v-a&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    &#39;v-a&#39;: &#123;</span><br><span class=\"line\">      template: &#39;&lt;div&gt;Component A&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#39;v-b&#39;: &#123;</span><br><span class=\"line\">      template: &#39;&lt;div&gt;Component B&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.component-fade-enter-active, .component-fade-leave-active &#123;</span><br><span class=\"line\">  transition: opacity .3s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.component-fade-enter, .component-fade-leave-to</span><br><span class=\"line\">&#x2F;* .component-fade-leave-active for below version 2.1.8 *&#x2F; &#123;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-列表的过渡\"><a href=\"#2-4-列表的过渡\" class=\"headerlink\" title=\"2.4 列表的过渡\"></a>2.4 列表的过渡</h3><p>目前为止，关于过渡我们已经讲到：</p>\n<ul>\n<li>单个节点</li>\n<li>同一时间渲染多个节点中的一个</li>\n</ul>\n<p>那么怎么同时渲染整个列表，比如使用 <code>v-for</code> ？在这种场景中，使用 `` 组件。在我们深入例子之前，先了解关于这个组件的几个特点：</p>\n<ul>\n<li>不同于 <code>，它会以一个真实元素呈现：默认为一个</code>。你也可以通过 <code>tag</code> attribute 更换为其他元素。</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/transitions.html#过渡模式\" target=\"_blank\" rel=\"noopener\">过渡模式</a>不可用，因为我们不再相互切换特有的元素。</li>\n<li>内部元素 <strong>总是需要</strong> 提供唯一的 <code>key</code> 属性值。</li>\n<li>CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身。</li>\n</ul>\n<h4 id=\"2-4-1列表的进入-离开过渡\"><a href=\"#2-4-1列表的进入-离开过渡\" class=\"headerlink\" title=\"2.4.1列表的进入/离开过渡\"></a>2.4.1<a href=\"https://cn.vuejs.org/v2/guide/transitions.html#列表的进入-离开过渡\" target=\"_blank\" rel=\"noopener\">列表的进入/离开过渡</a></h4><p> 现在让我们由一个简单的例子深入，进入和离开的过渡使用之前一样的 CSS 类名。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;list-demo&quot; class&#x3D;&quot;demo&quot;&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;add&quot;&gt;Add&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;remove&quot;&gt;Remove&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;transition-group name&#x3D;&quot;list&quot; tag&#x3D;&quot;p&quot;&gt;</span><br><span class=\"line\">    &lt;span v-for&#x3D;&quot;item in items&quot; v-bind:key&#x3D;&quot;item&quot; class&#x3D;&quot;list-item&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#list-demo&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [1,2,3,4,5,6,7,8,9],</span><br><span class=\"line\">    nextNum: 10</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    randomIndex: function () &#123;</span><br><span class=\"line\">      return Math.floor(Math.random() * this.items.length)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    add: function () &#123;</span><br><span class=\"line\">      this.items.splice(this.randomIndex(), 0, this.nextNum++)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    remove: function () &#123;</span><br><span class=\"line\">      this.items.splice(this.randomIndex(), 1)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.list-item &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  margin-right: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.list-enter-active, .list-leave-active &#123;</span><br><span class=\"line\">  transition: all 1s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.list-enter, .list-leave-to</span><br><span class=\"line\">&#x2F;* .list-leave-active for below version 2.1.8 *&#x2F; &#123;</span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: translateY(30px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-列表的排序过渡\"><a href=\"#2-4-2-列表的排序过渡\" class=\"headerlink\" title=\"2.4.2 列表的排序过渡\"></a>2.4.2 列表的排序过渡</h4><p> <code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 <strong><code>v-move</code> attribute</strong>，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 <code>name</code> 属性来自定义前缀，也可以通过 <code>move-class</code> 属性手动设置。 </p>\n<p> <code>v-move</code> 对于设置过渡的切换时机和过渡曲线非常有用，你会看到如下的例子： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;lodash.js&#x2F;4.14.1&#x2F;lodash.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;flip-list-demo&quot; class&#x3D;&quot;demo&quot;&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;shuffle&quot;&gt;Shuffle&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;transition-group name&#x3D;&quot;flip-list&quot; tag&#x3D;&quot;ul&quot;&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;item in items&quot; v-bind:key&#x3D;&quot;item&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#flip-list-demo&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    shuffle: function () &#123;</span><br><span class=\"line\">      this.items &#x3D; _.shuffle(this.items)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.flip-list-move &#123;</span><br><span class=\"line\">  transition: transform 1s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 这个看起来很神奇，内部的实现，Vue 使用了一个叫 <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"noopener\">FLIP</a> 简单的动画队列<br>使用 transforms 将元素从之前的位置平滑过渡新的位置。 </p>\n<h2 id=\"3-使用Animate-css-来加载动画\"><a href=\"#3-使用Animate-css-来加载动画\" class=\"headerlink\" title=\"3.使用Animate.css 来加载动画\"></a>3.使用Animate.css 来加载动画</h2><h3 id=\"3-1-安装\"><a href=\"#3-1-安装\" class=\"headerlink\" title=\"3.1 安装\"></a>3.1 安装</h3><h4 id=\"3-1-1使用npm方法\"><a href=\"#3-1-1使用npm方法\" class=\"headerlink\" title=\"3.1.1使用npm方法\"></a>3.1.1使用npm方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install animate.css --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-2使用yarn方法\"><a href=\"#3-1-2使用yarn方法\" class=\"headerlink\" title=\"3.1.2使用yarn方法\"></a>3.1.2使用yarn方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add animate.css</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-引入\"><a href=\"#3-2-引入\" class=\"headerlink\" title=\"3.2 引入\"></a>3.2 引入</h3><h4 id=\"3-2-1-vue-cli中引入\"><a href=\"#3-2-1-vue-cli中引入\" class=\"headerlink\" title=\"3.2.1 vue-cli中引入\"></a>3.2.1 vue-cli中引入</h4><p>在main.js中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import animate from &#39;animate.css&#39; &#x2F;&#x2F; npm install animate.css --save安装，在引入</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(animate)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-2在单页面中引入\"><a href=\"#3-2-2在单页面中引入\" class=\"headerlink\" title=\"3.2.2在单页面中引入\"></a>3.2.2在单页面中引入</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;animate.css&#x2F;3.7.2&#x2F;animate.min.css&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2使用\"><a href=\"#3-2使用\" class=\"headerlink\" title=\"3.2使用\"></a>3.2使用</h3><p><a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener\">动画演示</a></p>\n<p>使用前都要在类前加 <code>animated</code></p>\n<h4 id=\"3-2-1在vue-cli中使用\"><a href=\"#3-2-1在vue-cli中使用\" class=\"headerlink\" title=\"3.2.1在vue-cli中使用\"></a>3.2.1在vue-cli中使用</h4><p>即应用自定义的过渡类名  注意： 使用前都要在类前加 <code>animated</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition enter-active-class&#x3D;&quot;animated fadeIn&quot; leave-active-class&#x3D;&quot;animated bounceOutRight&quot;&gt;</span><br><span class=\"line\">&lt;h2 v-if&#x3D;&quot;show&quot;&gt;hahahahah!!!&lt;&#x2F;h2&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-2-设置延迟和速度\"><a href=\"#3-2-2-设置延迟和速度\" class=\"headerlink\" title=\"3.2.2 设置延迟和速度\"></a>3.2.2 设置延迟和速度</h4><p>用所列的类名来控制，只需写入所需类名。</p>\n<p>设置延迟</p>\n<table>\n<thead>\n<tr>\n<th>Class Name</th>\n<th>Delay Time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>delay-1s</code></td>\n<td><code>1s</code></td>\n</tr>\n<tr>\n<td><code>delay-2s</code></td>\n<td><code>2s</code></td>\n</tr>\n<tr>\n<td><code>delay-3s</code></td>\n<td><code>3s</code></td>\n</tr>\n<tr>\n<td><code>delay-4s</code></td>\n<td><code>4s</code></td>\n</tr>\n<tr>\n<td><code>delay-5s</code></td>\n<td><code>5s</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p> <strong>*Note</strong>: The default delays are from 1 second to 5 seconds only. If you need custom delays, add it directly to your own CSS code.* </p>\n</blockquote>\n<p>设置速度</p>\n<table>\n<thead>\n<tr>\n<th>Class Name</th>\n<th>Speed Time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>slow</code></td>\n<td><code>2s</code></td>\n</tr>\n<tr>\n<td><code>slower</code></td>\n<td><code>3s</code></td>\n</tr>\n<tr>\n<td><code>fast</code></td>\n<td><code>800ms</code></td>\n</tr>\n<tr>\n<td><code>faster</code></td>\n<td><code>500ms</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p> <strong>*Note</strong>: The <code>animated</code> class has a default speed of <code>1s</code>. If you need custom duration, add it directly to your own CSS code.* </p>\n</blockquote>\n","categories":["vue"],"tags":["vue","animate"]},{"title":"Vue 中 点击事件补充.native","url":"/posts/e140343d/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>​    发现vue中加载Element 之后 键盘事件无效果搜索之后发现有BUG特来修复</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><p>发现Element-input 中加入@keyup.enter中无效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-input style&#x3D;&quot;width:500px;&quot; placeholder&#x3D;&quot;请输入查询城市&quot; v-model&#x3D;&quot;location&quot; clearable @keyup.enter&#x3D;&quot;goSearch&quot; &gt;&lt;&#x2F;el-input&gt;</span><br></pre></td></tr></table></figure>\n\n<p>之后在加入.native 的修饰符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-input style&#x3D;&quot;width:500px;&quot; placeholder&#x3D;&quot;请输入查询城市&quot; v-model&#x3D;&quot;location&quot; clearable @keyup.enter.native&#x3D;&quot;goSearch&quot; &gt;&lt;&#x2F;el-input&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​    官网的解释：</p>\n<blockquote>\n<p>​             你可能想在某个组件的根元素上监听一个原生事件。可以使用 <code>v-on</code> 的修饰符 .native 。 </p>\n</blockquote>\n<p>​    通俗点讲：就是在父组件中给子组件绑定一个原生的事件，就将子组件变成了普通的HTML标签，不加’. native’事件是无法触 发的。 </p>\n<p> 可以理解为该修饰符的作用就是把一个vue组件转化为一个普通的HTML标签，并且该修饰符对普通HTML标签是没有任何作用的。 </p>\n","categories":["vue"],"tags":["vue","Element"]},{"title":"Vue 之 Element UI 篇","url":"/posts/71f0b98a/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>鉴于vue的组件不好看，引入Element的组件库来优化组件。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1-下载安装\"><a href=\"#2-1-下载安装\" class=\"headerlink\" title=\"2.1 下载安装\"></a>2.1 下载安装</h3><h4 id=\"2-1-1-npm安装\"><a href=\"#2-1-1-npm安装\" class=\"headerlink\" title=\"2.1.1 npm安装\"></a>2.1.1 npm安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i element-ui -S  \\\\或者</span><br><span class=\"line\">vue add element  \\\\如果使用这种方法，那么无须手动文件引入，直接用就可以了</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2CDN安装\"><a href=\"#2-1-2CDN安装\" class=\"headerlink\" title=\"2.1.2CDN安装\"></a>2.1.2CDN安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 引入样式 --&gt;</span><br><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;</span><br><span class=\"line\">&lt;!-- 引入组件库 --&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2组件引入\"><a href=\"#2-2组件引入\" class=\"headerlink\" title=\"2.2组件引入\"></a>2.2组件引入</h3><p>在入口文件  <code>main.js</code> 中引入 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import ElementUI from &#39;element-ui&#39;;</span><br><span class=\"line\">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>\n\n","categories":["vue"],"tags":["vue","Element"]},{"title":"Vue 之 axios 篇","url":"/posts/9a5bfef8/","content":"<h3 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h3><p>​    利用axios在vue中获取网络上的数据来进行交互。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><h3 id=\"2-1下载导入\"><a href=\"#2-1下载导入\" class=\"headerlink\" title=\"2.1下载导入\"></a>2.1下载导入</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-文件导入\"><a href=\"#2-2-文件导入\" class=\"headerlink\" title=\"2.2 文件导入\"></a>2.2 文件导入</h3><p>​    在<code>main.js</code>中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import axios from &#39;axios&#39;</span><br><span class=\"line\">import VueAxios from &#39;vue-axios&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueAxios,axios)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三：使用方法\"><a href=\"#三：使用方法\" class=\"headerlink\" title=\"三：使用方法\"></a>三：使用方法</h2><p>3.1语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.axios.get(&#39;url&#39;)</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F;其中如果get中要查询参数可(&#39;url?key&#x3D;xxx&#39;)或者(&#39;url?key&#x3D;&#39;+this.xxx)</span><br><span class=\"line\">\t\t.then( (response) &#x3D;&gt; &#123;&#125; )   </span><br><span class=\"line\">\t\t\t&#x2F;&#x2F;then为指成功之后的回调，response为成功之后的数据</span><br><span class=\"line\">\t\t.catch( (error) &#x3D;&gt; &#123;&#125; )</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; catch 指请求出错的处理</span><br></pre></td></tr></table></figure>\n\n","categories":["vue"],"tags":["vue","axios"]},{"title":"hexo new 之后立即打开文稿","url":"/posts/788e682d/","content":"<h2 id=\"一：开发者的解决方案\"><a href=\"#一：开发者的解决方案\" class=\"headerlink\" title=\"一：开发者的解决方案\"></a>一：开发者的解决方案</h2><a id=\"more\"></a>\n\n<p>Hexo 的 GitHub 项目里，有人提出了类似的需求：</p>\n<p> <a href=\"https://github.com/hexojs/hexo/issues/1007\" target=\"_blank\" rel=\"noopener\">hexo开发者的解决方案</a> </p>\n<p>Tommy 指出，可以在 Hexo 目录下的 scripts 目录（若没有，则新建一个blog/scripts）中创建一个 JavaScript （openNewFile）脚本，监听 hexo new 这个动作。并在检测到 hexo new 之后，执行编辑器打开的命令。</p>\n<p>具体目录如下：</p>\n<p> <img src=\"https://img-blog.csdnimg.cn/20191008141004878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW54aW50aWFuZGlzaGVuZw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"> </p>\n<p> Tommy 给出的js代码如下： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).spawn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 2.x 版本号</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">  spawn(<span class=\"string\">'vi'</span>, [path]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 3.x 版本号</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  spawn(<span class=\"string\">'vi'</span>, [data.path]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p> <strong>vi替换为你的文本编辑器的绝对路径</strong> </p>\n<h2 id=\"二：编码实战\"><a href=\"#二：编码实战\" class=\"headerlink\" title=\"二：编码实战\"></a>二：编码实战</h2><h3 id=\"使用Typora打开新建的markdown文档\"><a href=\"#使用Typora打开新建的markdown文档\" class=\"headerlink\" title=\"使用Typora打开新建的markdown文档\"></a>使用Typora打开新建的markdown文档</h3><p>openNewFile.js中的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var spawn &#x3D; require(&#39;child_process&#39;).spawn;</span><br><span class=\"line\">hexo.on(&#39;new&#39;, function(data)&#123;</span><br><span class=\"line\">    spawn(&#39;C:&#x2F;Program Files&#x2F;Typora&#x2F;Typora.exe &#39;, [data.path]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p> 此时命令行执行新建文章的代码<code>hexo new &quot;the title of your blog&quot;</code>，系统使用我指定的文本编辑器Typora.exe打开了新建的 Markdown 文稿。 </p>\n<p><a href=\"https://blog.csdn.net/tianxintiandisheng/article/details/102381391\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"Vue-cli改变端口号","url":"/posts/669a8d4e/","content":"<h2 id=\"一：前言\"><a href=\"#一：前言\" class=\"headerlink\" title=\"一：前言\"></a>一：前言</h2><p>​    发现有时<code>vue-cli</code>运行时端口会与其他应用的端口相冲突，因此改变默认端口</p>\n<a id=\"more\"></a>\n\n<h2 id=\"二：步骤\"><a href=\"#二：步骤\" class=\"headerlink\" title=\"二：步骤\"></a>二：步骤</h2><ol>\n<li><code>package.json</code>文件下修改 –port </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">   &quot;serve&quot;: &quot;vue-cli-service serve --port 9001&quot;,</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>vue.config.js</code>文件下添加 （如果没有就在根目录下创建文件）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: 9001</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考自<a href=\"https://blog.csdn.net/weixin_42259989/article/details/102368800\" target=\"_blank\" rel=\"noopener\">网上</a></p>\n<p>如有侵权，请联系删除。</p>\n","categories":["Vue-cli"],"tags":["vue","vue-cli"]},{"title":"html之Flex盒子模型学习","url":"/posts/5c057d4e/","content":"<p>Flex 布局将成为未来布局的首选方案。本文介绍它的语法，<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\" target=\"_blank\" rel=\"noopener\">下一篇文章</a>给出常见布局的 Flex 写法。网友 <a href=\"http://vgee.cn/\" target=\"_blank\" rel=\"noopener\">JailBreak</a> 为本文的所有示例制作了 <a href=\"http://static.vgee.cn/static/index.html\" target=\"_blank\" rel=\"noopener\">Demo</a>，也可以参考。</p>\n<a id=\"more\"></a>\n\n<p>以下内容主要参考了下面两篇文章：<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"noopener\">A Complete Guide to Flexbox</a> 和 <a href=\"https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties\" target=\"_blank\" rel=\"noopener\">A Visual Guide to CSS3 Flexbox Properties</a>。</p>\n<h2 id=\"一、Flex-布局是什么？\"><a href=\"#一、Flex-布局是什么？\" class=\"headerlink\" title=\"一、Flex 布局是什么？\"></a>一、Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p>任何一个容器都可以指定为 Flex 布局。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>行内元素也可以使用 Flex 布局。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<h2 id=\"二、基本概念\"><a href=\"#二、基本概念\" class=\"headerlink\" title=\"二、基本概念\"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png\" alt=\"img\"></p>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h2 id=\"三、容器的属性\"><a href=\"#三、容器的属性\" class=\"headerlink\" title=\"三、容器的属性\"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。</p>\n<blockquote>\n<ul>\n<li>flex-direction    决定主轴的方向（即项目的排列方向row | row-reverse | column | column-reverse）</li>\n<li>flex-wrap    如果一条轴线排不下，如何换行(nowrap | wrap | wrap-reverse)</li>\n<li>flex-flow    是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code></li>\n<li>justify-content    定义了项目在主轴上的对齐方式</li>\n<li>align-items    定义项目在交叉轴上如何对齐</li>\n<li>align-content    定义了多根轴线的对齐方式</li>\n</ul>\n</blockquote>\n<h3 id=\"3-1-flex-direction属性\"><a href=\"#3-1-flex-direction属性\" class=\"headerlink\" title=\"3.1 flex-direction属性\"></a>3.1 flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"img\"></p>\n<p>它可能有4个值。</p>\n<blockquote>\n<ul>\n<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>\n<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>\n<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>\n<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-2-flex-wrap属性\"><a href=\"#3-2-flex-wrap属性\" class=\"headerlink\" title=\"3.2 flex-wrap属性\"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png\" alt=\"img\"></p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>它可能取三个值。</p>\n<p>（1）<code>nowrap</code>（默认）：不换行。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png\" alt=\"img\"></p>\n<p>（2）<code>wrap</code>：换行，第一行在上方。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg\" alt=\"img\"></p>\n<p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg\" alt=\"img\"></p>\n<h3 id=\"3-3-flex-flow\"><a href=\"#3-3-flex-flow\" class=\"headerlink\" title=\"3.3 flex-flow\"></a>3.3 flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"3-4-justify-content属性\"><a href=\"#3-4-justify-content属性\" class=\"headerlink\" title=\"3.4 justify-content属性\"></a>3.4 justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"img\"></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>（默认值）：左对齐</li>\n<li><code>flex-end</code>：右对齐</li>\n<li><code>center</code>： 居中</li>\n<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>\n<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-5-align-items属性\"><a href=\"#3-5-align-items属性\" class=\"headerlink\" title=\"3.5 align-items属性\"></a>3.5 align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"img\"></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>：交叉轴的起点对齐。</li>\n<li><code>flex-end</code>：交叉轴的终点对齐。</li>\n<li><code>center</code>：交叉轴的中点对齐。</li>\n<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>\n<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-6-align-content属性\"><a href=\"#3-6-align-content属性\" class=\"headerlink\" title=\"3.6 align-content属性\"></a>3.6 align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"img\"></p>\n<p>该属性可能取6个值。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>：与交叉轴的起点对齐。</li>\n<li><code>flex-end</code>：与交叉轴的终点对齐。</li>\n<li><code>center</code>：与交叉轴的中点对齐。</li>\n<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n</blockquote>\n<h3 id=\"四、项目的属性\"><a href=\"#四、项目的属性\" class=\"headerlink\" title=\"四、项目的属性\"></a>四、项目的属性</h3><p>以下6个属性设置在项目上。</p>\n<blockquote>\n<ul>\n<li><code>order</code></li>\n<li><code>flex-grow</code></li>\n<li><code>flex-shrink</code></li>\n<li><code>flex-basis</code></li>\n<li><code>flex</code></li>\n<li><code>align-self</code></li>\n</ul>\n</blockquote>\n<h3 id=\"4-1-order属性\"><a href=\"#4-1-order属性\" class=\"headerlink\" title=\"4.1 order属性\"></a>4.1 order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png\" alt=\"img\"></p>\n<h3 id=\"4-2-flex-grow属性\"><a href=\"#4-2-flex-grow属性\" class=\"headerlink\" title=\"4.2 flex-grow属性\"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png\" alt=\"img\"></p>\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"4-3-flex-shrink属性\"><a href=\"#4-3-flex-shrink属性\" class=\"headerlink\" title=\"4.3 flex-shrink属性\"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg\" alt=\"img\"></p>\n<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。</p>\n<h3 id=\"4-4-flex-basis属性\"><a href=\"#4-4-flex-basis属性\" class=\"headerlink\" title=\"4.4 flex-basis属性\"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h3 id=\"4-5-flex属性\"><a href=\"#4-5-flex属性\" class=\"headerlink\" title=\"4.5 flex属性\"></a>4.5 flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<h3 id=\"4-6-align-self属性\"><a href=\"#4-6-align-self属性\" class=\"headerlink\" title=\"4.6 align-self属性\"></a>4.6 align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png\" alt=\"img\"></p>\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n<p>（完）</p>\n<p>转载自： <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a> </p>\n<p>如有侵权，请联系删稿。</p>\n","categories":["Html"],"tags":["html","flex"]},{"title":"学习Vue中的动画","url":"/posts/ffd957ad/","content":"<p>​            前言:    为什么要有<a href=\"https://cn.vuejs.org/v2/guide/transitions.html\" target=\"_blank\" rel=\"noopener\">Vue中的动画</a>：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p>\n<a id=\"more\"></a>\n\n<h2 id=\"一：使用过渡类名\"><a href=\"#一：使用过渡类名\" class=\"headerlink\" title=\"一：使用过渡类名\"></a>一：使用过渡类名</h2><ol>\n<li>HTML结构：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;动起来&quot; @click&#x3D;&quot;myAnimate&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;</span><br><span class=\"line\">    &lt;transition name&#x3D;&quot;fade&quot;&gt;</span><br><span class=\"line\">      &lt;div v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\"> &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>VM 实例：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    isshow: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    myAnimate() &#123;</span><br><span class=\"line\">      this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>定义两组类样式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;* 定义进入和离开时候的过渡状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter-active,</span><br><span class=\"line\">    .fade-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.2s ease;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;* 定义进入过渡的开始状态 和 离开过渡的结束状态 *&#x2F;</span><br><span class=\"line\">    .fade-enter,</span><br><span class=\"line\">    .fade-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateX(100px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二：使用第三方-CSS-动画库\"><a href=\"#二：使用第三方-CSS-动画库\" class=\"headerlink\" title=\"二：使用第三方 CSS 动画库\"></a>二：<a href=\"https://cn.vuejs.org/v2/guide/transitions.html#自定义过渡类名\" target=\"_blank\" rel=\"noopener\">使用第三方 CSS 动画库</a></h2><ol>\n<li>导入动画类库：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定义 transition 及属性：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition</span><br><span class=\"line\">\tenter-active-class&#x3D;&quot;fadeInRight&quot;</span><br><span class=\"line\">    leave-active-class&#x3D;&quot;fadeOutRight&quot;</span><br><span class=\"line\">    :duration&#x3D;&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;</span><br><span class=\"line\">  \t&lt;div class&#x3D;&quot;animated&quot; v-show&#x3D;&quot;isshow&quot;&gt;动画哦&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三：使用动画钩子函数\"><a href=\"#三：使用动画钩子函数\" class=\"headerlink\" title=\"三：使用动画钩子函数\"></a>三：使用动画钩子函数</h2><ol>\n<li>定义 transition 组件以及三个钩子函数：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;切换动画&quot; @click&#x3D;&quot;isshow &#x3D; !isshow&quot;&gt;</span><br><span class=\"line\">    &lt;transition</span><br><span class=\"line\">    @before-enter&#x3D;&quot;beforeEnter&quot;</span><br><span class=\"line\">    @enter&#x3D;&quot;enter&quot;</span><br><span class=\"line\">    @after-enter&#x3D;&quot;afterEnter&quot;&gt;</span><br><span class=\"line\">      &lt;div v-if&#x3D;&quot;isshow&quot; class&#x3D;&quot;show&quot;&gt;OK&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;transition&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定义三个 methods 钩子方法：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        beforeEnter(el) &#123; &#x2F;&#x2F; 动画进入之前的回调</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(500px)&#39;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        enter(el, done) &#123; &#x2F;&#x2F; 动画进入完成时候的回调</span><br><span class=\"line\">          el.offsetWidth;</span><br><span class=\"line\">          el.style.transform &#x3D; &#39;translateX(0px)&#39;;</span><br><span class=\"line\">          done();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        afterEnter(el) &#123; &#x2F;&#x2F; 动画进入完成之后的回调</span><br><span class=\"line\">          this.isshow &#x3D; !this.isshow;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>定义动画过渡时长和样式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.show&#123;</span><br><span class=\"line\">      transition: all 0.4s ease;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四：v-for-的列表过渡\"><a href=\"#四：v-for-的列表过渡\" class=\"headerlink\" title=\"四：v-for 的列表过渡\"></a>四：<a href=\"https://cn.vuejs.org/v2/guide/transitions.html#列表的进入和离开过渡\" target=\"_blank\" rel=\"noopener\">v-for 的列表过渡</a></h2><ol>\n<li>定义过渡样式：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .list-enter,</span><br><span class=\"line\">    .list-leave-to &#123;</span><br><span class=\"line\">      opacity: 0;</span><br><span class=\"line\">      transform: translateY(10px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .list-enter-active,</span><br><span class=\"line\">    .list-leave-active &#123;</span><br><span class=\"line\">      transition: all 0.3s ease;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定义DOM结构，其中，需要使用 transition-group 组件把v-for循环的列表包裹起来：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;txt&quot; @keyup.enter&#x3D;&quot;add&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;transition-group tag&#x3D;&quot;ul&quot; name&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, i) in list&quot; :key&#x3D;&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition-group&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>定义 VM中的结构：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    txt: &#39;&#39;,</span><br><span class=\"line\">    list: [1, 2, 3, 4]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    add() &#123;</span><br><span class=\"line\">      this.list.push(this.txt);</span><br><span class=\"line\">      this.txt &#x3D; &#39;&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-列表的排序过渡\"><a href=\"#4-1-列表的排序过渡\" class=\"headerlink\" title=\"4.1    列表的排序过渡\"></a>4.1    列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p>\n<ul>\n<li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.v-move&#123;</span><br><span class=\"line\">  transition: all 0.8s ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.v-leave-active&#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\" target=\"_blank\" rel=\"noopener\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\" target=\"_blank\" rel=\"noopener\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"https://github.com/pagekit/vue-resource\" target=\"_blank\" rel=\"noopener\">pagekit/vue-resource</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html\" target=\"_blank\" rel=\"noopener\">navicat如何导入sql文件和导出sql文件</a></li>\n<li><a href=\"http://cubic-bezier.com/#.4,-0.3,1,.33\" target=\"_blank\" rel=\"noopener\">贝塞尔在线生成器</a></li>\n</ol>\n<p>本文转自： <a href=\"http://www.itheima.com\" target=\"_blank\" rel=\"noopener\">www.itheima.com</a> </p>\n<p> 转自网络。如有侵权，请联系删除 </p>\n"},{"title":"vs code 一键创建vue模板","url":"/posts/d67fdd5d/","content":"<p>最近看视频学习vue的时候发现vs code除了使用 !+Tab 在html文件中快速创建模板之外，还可以自己定义，但是视频里面没有教，所以就自己查找了一下方法并和大家分享一下</p>\n<a id=\"more\"></a>\n\n<h3 id=\"第一步：文件-——-gt-首选项-——-gt-用户代码片段\"><a href=\"#第一步：文件-——-gt-首选项-——-gt-用户代码片段\" class=\"headerlink\" title=\"第一步：文件 ——&gt; 首选项 ——&gt;用户代码片段\"></a>第一步：文件 ——&gt; 首选项 ——&gt;用户代码片段</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://img2018.cnblogs.com/blog/1749706/201908/1749706-20190804204859952-686811401.png\" alt=\"img\"></h3><h3 id=\"第二步：搜索框中输入html-json-如果需要在别的类型的文件中可以输入对应的名字，如：vue-json\"><a href=\"#第二步：搜索框中输入html-json-如果需要在别的类型的文件中可以输入对应的名字，如：vue-json\" class=\"headerlink\" title=\"第二步：搜索框中输入html.json(如果需要在别的类型的文件中可以输入对应的名字，如：vue.json)\"></a>第二步：搜索框中输入html.json(如果需要在别的类型的文件中可以输入对应的名字，如：vue.json)</h3><p> <img src=\"https://img2018.cnblogs.com/blog/1749706/201908/1749706-20190804204945312-1957895648.png\" alt=\"img\"></p>\n<h3 id=\"第三步：输入以下代码（可根据自己的需求修改）\"><a href=\"#第三步：输入以下代码（可根据自己的需求修改）\" class=\"headerlink\" title=\"第三步：输入以下代码（可根据自己的需求修改）\"></a>第三步：输入以下代码（可根据自己的需求修改）</h3><p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;Html5-Vue&quot;: &#123;</span><br><span class=\"line\">        &quot;prefix&quot;: &quot;vue&quot;,&#x2F;&#x2F;可以自己修改成想要的名字</span><br><span class=\"line\">        &quot;body&quot;: [</span><br><span class=\"line\">            &quot;&lt;!DOCTYPE html&gt;&quot;,</span><br><span class=\"line\">            &quot;&lt;html lang&#x3D;\\&quot;en\\&quot;&gt;\\n&quot;,</span><br><span class=\"line\">            &quot;&lt;head&gt;&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;meta charset&#x3D;\\&quot;UTF-8\\&quot;&gt;&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;meta name&#x3D;\\&quot;viewport\\&quot; content&#x3D;\\&quot;width&#x3D;device-width, initial-scale&#x3D;1.0\\&quot;&gt;&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;meta http-equiv&#x3D;\\&quot;X-UA-Compatible\\&quot; content&#x3D;\\&quot;ie&#x3D;edge\\&quot;&gt;&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;title&gt;Document&lt;&#x2F;title&gt;&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;script src&#x3D;\\&quot;..&#x2F;vue.js\\&quot;&gt;&lt;&#x2F;script&gt;&quot;,&#x2F;&#x2F;改成自己的vue路径</span><br><span class=\"line\">            &quot;&lt;&#x2F;head&gt;\\n&quot;,</span><br><span class=\"line\">            &quot;&lt;body&gt;&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;div id&#x3D;\\&quot;app\\&quot;&gt;$1&lt;&#x2F;div&gt;\\n&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;script&gt;&quot;,</span><br><span class=\"line\">            &quot;\\t\\tvar vm &#x3D; new Vue(&#123;&quot;,</span><br><span class=\"line\">            &quot;\\t\\t\\tel: &#39;#app&#39;,&quot;,</span><br><span class=\"line\">            &quot;\\t\\t\\tdata: &#123;&#125;,&quot;,</span><br><span class=\"line\">            &quot;\\t\\t\\tmethods: &#123;&#125;&quot;,</span><br><span class=\"line\">            &quot;\\t\\t&#125;);&quot;,</span><br><span class=\"line\">            &quot;\\t&lt;&#x2F;script&gt;&quot;,</span><br><span class=\"line\">            &quot;&lt;&#x2F;body&gt;\\n&quot;,</span><br><span class=\"line\">            &quot;&lt;&#x2F;html&gt;&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;description&quot;: &quot;自定义vue模板&quot;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p>\n<h3 id=\"最后：在新建的html文件中输入自己定义的名字并按下-Tab（上面的代码是vue）\"><a href=\"#最后：在新建的html文件中输入自己定义的名字并按下-Tab（上面的代码是vue）\" class=\"headerlink\" title=\"最后：在新建的html文件中输入自己定义的名字并按下 Tab（上面的代码是vue）\"></a>最后：在新建的html文件中输入自己定义的名字并按下 Tab（上面的代码是vue）</h3><p><img src=\"https://img2018.cnblogs.com/blog/1749706/201908/1749706-20190804205638988-879936143.png\" alt=\"img\"></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1749706/201908/1749706-20190804205701382-1672019231.png\" alt=\"img\"></p>\n<p> <a href=\"https://www.cnblogs.com/kusaki/p/11299689.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/kusaki/p/11299689.html</a> </p>\n<p> 转自网络。如有侵权，请联系删除 </p>\n","categories":["前端"],"tags":["vue","html"]},{"title":"Vue.js 学习- Day1 and Day2","url":"/posts/3e34f961/","content":"<h2 id=\"一：课程介绍\"><a href=\"#一：课程介绍\" class=\"headerlink\" title=\"一：课程介绍\"></a>一：课程介绍</h2><p>前5天： 都在学习Vue基本的语法和概念；打包工具 Webpack , Gulp<br>后5天： 以项目驱动教学；</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-1-什么是Vue-js\"><a href=\"#1-1-什么是Vue-js\" class=\"headerlink\" title=\"1.1     什么是Vue.js\"></a>1.1     什么是Vue.js</h3><ul>\n<li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p>\n</li>\n<li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p>\n</li>\n<li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p>\n</li>\n<li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p>\n</li>\n</ul>\n<h3 id=\"1-2-为什么要学习流行框架\"><a href=\"#1-2-为什么要学习流行框架\" class=\"headerlink\" title=\"1.2    为什么要学习流行框架\"></a>1.2    为什么要学习流行框架</h3><ul>\n<li><p>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；</p>\n<ul>\n<li>企业中，使用框架，能够提高开发的效率；</li>\n</ul>\n</li>\n<li><p>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</p>\n</li>\n<li><p>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</p>\n</li>\n<li><p>增强自己就业时候的竞争力</p>\n<ul>\n<li>人无我有，人有我优</li>\n<li>你平时不忙的时候，都在干嘛？</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3框架和库的区别\"><a href=\"#1-3框架和库的区别\" class=\"headerlink\" title=\"1.3框架和库的区别\"></a>1.3框架和库的区别</h3><ul>\n<li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p>\n<ul>\n<li>node 中的 express；</li>\n</ul>\n</li>\n<li><p>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。</p>\n<ul>\n<li><ol>\n<li>从Jquery 切换到 Zepto</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>从 EJS 切换到 art-template</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\"><a href=\"#1-4-Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别\" class=\"headerlink\" title=\"1.4    Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别\"></a>1.4    Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h3><ul>\n<li><p>MVC 是后端的分层开发概念；</p>\n</li>\n<li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p>\n</li>\n<li><p>为什么有了MVC还要有MVVM</p>\n</li>\n</ul>\n<h3 id=\"1-5-Vue-js-基本代码-和-MVVM-之间的对应关系\"><a href=\"#1-5-Vue-js-基本代码-和-MVVM-之间的对应关系\" class=\"headerlink\" title=\"1.5    Vue.js 基本代码 和 MVVM 之间的对应关系:\"></a>1.5    Vue.js 基本代码 和 MVVM 之间的对应关系:<img src=\"http://photo.jomeswang.top/20200410152739.png\" alt=\"\"></h3><h2 id=\"二：正式学习Vue\"><a href=\"#二：正式学习Vue\" class=\"headerlink\" title=\"二：正式学习Vue\"></a>二：正式学习Vue</h2><h3 id=\"2-1-Vue之-基本的代码结构和插值表达式、v-cloak\"><a href=\"#2-1-Vue之-基本的代码结构和插值表达式、v-cloak\" class=\"headerlink\" title=\"2.1    Vue之 - 基本的代码结构和插值表达式、v-cloak\"></a>2.1    Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h3><h3 id=\"2-2-Vue指令之v-text和v-html\"><a href=\"#2-2-Vue指令之v-text和v-html\" class=\"headerlink\" title=\"2.2    Vue指令之v-text和v-html\"></a>2.2    Vue指令之<code>v-text</code>和<code>v-html</code></h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- v-text会覆盖元素中原本的内容，但是 插值表达式  只会替换自己的这个占位符，不会把 整个元素的内容清空 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"2-3-Vue指令之v-bind的三种用法\"><a href=\"#2-3-Vue指令之v-bind的三种用法\" class=\"headerlink\" title=\"2.3    Vue指令之v-bind的三种用法\"></a>2.3    Vue指令之<code>v-bind</code>的三种用法</h3><ol>\n<li>直接使用指令<code>v-bind</code></li>\n<li>使用简化指令<code>:</code></li>\n<li>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- v-bind: 是 Vue中，提供的用于绑定属性的指令 --&gt;</span><br><span class=\"line\">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot; v-bind:title&#x3D;&quot;mytitle + &#39;123&#39;&quot;&gt;</span><br><span class=\"line\">&lt;!-- 注意： v-bind: 指令可以被简写为 :要绑定的属性 --&gt;</span><br><span class=\"line\">&lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-Vue指令之v-on和跑马灯效果\"><a href=\"#2-4-Vue指令之v-on和跑马灯效果\" class=\"headerlink\" title=\"2.4    Vue指令之v-on和跑马灯效果\"></a>2.4    Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h3><h5 id=\"跑马灯效果\"><a href=\"#跑马灯效果\" class=\"headerlink\" title=\"跑马灯效果\"></a>跑马灯效果</h5><ol>\n<li>HTML结构：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"开启\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"go\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"停止\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"stop\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       info: <span class=\"string\">'猥琐发育，别浪~！'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">       intervalId: <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       go() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 如果当前有定时器在运行，则直接return</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.intervalId != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// 开始定时器</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">this</span>.intervalId = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">this</span>.info = <span class=\"keyword\">this</span>.info.substring(<span class=\"number\">1</span>) + <span class=\"keyword\">this</span>.info.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">       stop() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         clearInterval(<span class=\"keyword\">this</span>.intervalId)</span><br><span class=\"line\">         intervalId=<span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-5-Vue指令之v-on的缩写和事件修饰符\"><a href=\"#2-5-Vue指令之v-on的缩写和事件修饰符\" class=\"headerlink\" title=\"2.5    Vue指令之v-on的缩写和事件修饰符\"></a>2.5    Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h3><p><em>v-on（缩写是@）</em></p>\n<h4 id=\"事件修饰符：\"><a href=\"#事件修饰符：\" class=\"headerlink\" title=\"事件修饰符：\"></a>事件修饰符：</h4><ul>\n<li><p>.stop       阻止冒泡</p>\n</li>\n<li><p>.prevent    阻止默认事件</p>\n</li>\n<li><p>.capture    添加事件侦听器时使用事件捕获模式</p>\n</li>\n<li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p>\n</li>\n<li><p>.once       事件只触发一次</p>\n</li>\n</ul>\n<h3 id=\"2-6-Vue指令之v-model和双向数据绑定\"><a href=\"#2-6-Vue指令之v-model和双向数据绑定\" class=\"headerlink\" title=\"2.6    Vue指令之v-model和双向数据绑定\"></a>2.6    Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h3><h4 id=\"简易计算器案例\"><a href=\"#简易计算器案例\" class=\"headerlink\" title=\"简易计算器案例\"></a>简易计算器案例</h4><ol>\n<li>HTML 代码结构</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"n1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"opt\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span>&gt;</span>÷<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"n2\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"=\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"getResult\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"result\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Vue实例代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       n1: <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">       n2: <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">       result: <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">       opt: <span class=\"string\">'0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       getResult() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.opt) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">'0'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">this</span>.result = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n1) + <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">this</span>.result = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n1) - <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">this</span>.result = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n1) * <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">case</span> <span class=\"string\">'3'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">this</span>.result = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n1) / <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.n2);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-7-在Vue中使用样式\"><a href=\"#2-7-在Vue中使用样式\" class=\"headerlink\" title=\"2.7    在Vue中使用样式\"></a>2.7    在Vue中使用样式</h3><h4 id=\"2-7-1-使用class样式\"><a href=\"#2-7-1-使用class样式\" class=\"headerlink\" title=\"2.7.1    使用class样式\"></a>2.7.1    使用class样式</h4><ol>\n<li><p>数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组中使用三元表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组中嵌套对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接使用对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :class&#x3D;&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h4 id=\"2-7-2-使用内联样式\"><a href=\"#2-7-2-使用内联样式\" class=\"headerlink\" title=\"2.7.2    使用内联样式\"></a>2.7.2    使用内联样式</h4><ol>\n<li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象(样式中有-的要加单引号)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p>\n<ul>\n<li>在data上定义样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">        h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,</span><br><span class=\"line\">        h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1 :style&#x3D;&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-8-Vue指令之v-for和key属性\"><a href=\"#2-8-Vue指令之v-for和key属性\" class=\"headerlink\" title=\"2.8    Vue指令之v-for和key属性\"></a>2.8    Vue指令之<code>v-for</code>和<code>key</code>属性</h3><ol>\n<li>迭代数组</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li v-for&#x3D;&quot;(item, i) in list&quot;&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代对象中的属性</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;div v-for&#x3D;&quot;(val, key, i) in userInfo&quot;&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>迭代数字</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;p v-for&#x3D;&quot;i in 10&quot;&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p>\n</blockquote>\n<p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n<p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p>\n<h3 id=\"2-9-Vue指令之v-if和v-show\"><a href=\"#2-9-Vue指令之v-if和v-show\" class=\"headerlink\" title=\"2.9    Vue指令之v-if和v-show\"></a>2.9    Vue指令之<code>v-if</code>和<code>v-show</code></h3><blockquote>\n<p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p>\n</blockquote>\n<h3 id=\"2-1o-根据条件筛选品牌\"><a href=\"#2-1o-根据条件筛选品牌\" class=\"headerlink\" title=\"2.1o    根据条件筛选品牌\"></a>2.1o    根据条件筛选品牌</h3><p>​    在2.x版本中<a href=\"https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果\" target=\"_blank\" rel=\"noopener\">手动实现筛选的方式</a>：</p>\n<ul>\n<li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;hr&gt; 输入筛选名称：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;searchName&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;tr v-for&#x3D;&quot;item in search(searchName)&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;del(item.id)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#x2F;td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;&#x2F;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">search(name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.name.indexOf(name) != <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"三：Vue调试工具vue-devtools的安装步骤和使用\"><a href=\"#三：Vue调试工具vue-devtools的安装步骤和使用\" class=\"headerlink\" title=\"三：Vue调试工具vue-devtools的安装步骤和使用\"></a>三：Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">Vue.js devtools - 翻墙安装方式 - 推荐</a></p>\n<h2 id=\"四：过滤器\"><a href=\"#四：过滤器\" class=\"headerlink\" title=\"四：过滤器\"></a>四：过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p>\n<h3 id=\"4-1-私有过滤器\"><a href=\"#4-1-私有过滤器\" class=\"headerlink\" title=\"4.1    私有过滤器\"></a>4.1    私有过滤器</h3><ol>\n<li>HTML元素：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(&#39;yyyy-mm-dd&#39;)&#125;&#125;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>私有 <code>filters</code> 定义方式：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">filters: &#123; <span class=\"comment\">// 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dataFormat(input, pattern = <span class=\"string\">\"\"</span>) &#123; <span class=\"comment\">// 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> dt = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(input);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取年月日</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> y = dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> m = (dt.getMonth() + <span class=\"number\">1</span>).toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> d = dt.getDate().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 否则，就返回  年-月-日 时：分：秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pattern.toLowerCase() === <span class=\"string\">'yyyy-mm-dd'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>-<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取时分秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> hh = dt.getHours().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> mm = dt.getMinutes().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ss = dt.getSeconds().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>-<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span> <span class=\"subst\">$&#123;hh&#125;</span>:<span class=\"subst\">$&#123;mm&#125;</span>:<span class=\"subst\">$&#123;ss&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p>\n</blockquote>\n<h3 id=\"4-2-全局过滤器\"><a href=\"#4-2-全局过滤器\" class=\"headerlink\" title=\"4.2    全局过滤器\"></a>4.2    全局过滤器</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个全局过滤器</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(<span class=\"string\">'dataFormat'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">input, pattern = <span class=\"string\">''</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dt = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(input);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取年月日</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = dt.getFullYear();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> m = (dt.getMonth() + <span class=\"number\">1</span>).toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = dt.getDate().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 否则，就返回  年-月-日 时：分：秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pattern.toLowerCase() === <span class=\"string\">'yyyy-mm-dd'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>-<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取时分秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hh = dt.getHours().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mm = dt.getMinutes().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ss = dt.getSeconds().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">'0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>-<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span> <span class=\"subst\">$&#123;hh&#125;</span>:<span class=\"subst\">$&#123;mm&#125;</span>:<span class=\"subst\">$&#123;ss&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p>\n</blockquote>\n<h2 id=\"五：键盘修饰符以及自定义键盘修饰符\"><a href=\"#五：键盘修饰符以及自定义键盘修饰符\" class=\"headerlink\" title=\"五：键盘修饰符以及自定义键盘修饰符\"></a>五：键盘修饰符以及自定义键盘修饰符</h2><h3 id=\"5-1-2-x中自定义键盘修饰符\"><a href=\"#5-1-2-x中自定义键盘修饰符\" class=\"headerlink\" title=\"5.1    2.x中自定义键盘修饰符\"></a>5.1    <a href=\"https://cn.vuejs.org/v2/guide/events.html#键值修饰符\" target=\"_blank\" rel=\"noopener\">2.x中自定义键盘修饰符</a></h3><ol>\n<li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Vue.config.keyCodes.f2 &#x3D; 113;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用自定义的按键修饰符：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"name\"</span> @<span class=\"attr\">keyup.f2</span>=<span class=\"string\">\"add\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"六：-自定义指令\"><a href=\"#六：-自定义指令\" class=\"headerlink\" title=\"六：    自定义指令\"></a>六：    <a href=\"https://cn.vuejs.org/v2/guide/custom-directive.html\" target=\"_blank\" rel=\"noopener\">自定义指令</a></h2><ol>\n<li>自定义全局和局部的 自定义指令：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.directive(<span class=\"string\">'focus'</span>, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123; <span class=\"comment\">// inserted 表示被绑定元素插入父节点时调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    el.focus();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span></span><br><span class=\"line\"></span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: &#123; <span class=\"comment\">// 为元素设置指定的字体颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">      bind(el, binding) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        el.style.color = binding.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'font-weight'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, binding2</span>) </span>&#123; <span class=\"comment\">// 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">      el.style.fontWeight = binding2.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>自定义指令的使用方式：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"searchName\"</span> <span class=\"attr\">v-focus</span> <span class=\"attr\">v-color</span>=<span class=\"string\">\"'red'\"</span> <span class=\"attr\">v-font-weight</span>=<span class=\"string\">\"900\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"七：-vue实例的生命周期\"><a href=\"#七：-vue实例的生命周期\" class=\"headerlink\" title=\"七：    vue实例的生命周期\"></a>七：    <a href=\"https://cn.vuejs.org/v2/guide/instance.html#实例生命周期\" target=\"_blank\" rel=\"noopener\">vue实例的生命周期</a></h2><ul>\n<li><p>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</p>\n</li>\n<li><p><a href=\"https://cn.vuejs.org/v2/api/#选项-生命周期钩子\" target=\"_blank\" rel=\"noopener\">生命周期钩子</a>：就是生命周期事件的别名而已；</p>\n</li>\n<li><p>生命周期钩子 = 生命周期函数 = 生命周期事件</p>\n</li>\n<li><p>主要的生命周期函数分类：</p>\n<ul>\n<li><p>创建期间的生命周期函数：</p>\n<ul>\n<li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li>\n<li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li>\n<li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li>\n<li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li>\n</ul>\n</li>\n<li><p>运行期间的生命周期函数：</p>\n</li>\n</ul>\n<ul>\n<li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li>\n<li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li>\n</ul>\n<ul>\n<li>销毁期间的生命周期函数：</li>\n</ul>\n<ul>\n<li><p>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</p>\n</li>\n<li><p>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://photo.jomeswang.top/20200410153241.png\" alt=\"\"></p>\n<h2 id=\"八：-相关文章\"><a href=\"#八：-相关文章\" class=\"headerlink\" title=\"八：    相关文章\"></a>八：    相关文章</h2><ol>\n<li><a href=\"https://v1-cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 1.x 文档</a></li>\n<li><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js 2.x 文档</a></li>\n<li><a href=\"http://www.css88.com/archives/7715\" target=\"_blank\" rel=\"noopener\">String.prototype.padStart(maxLength, fillString)</a></li>\n<li><a href=\"http://www.cnblogs.com/wuhua1/p/6686237.html\" target=\"_blank\" rel=\"noopener\">js 里面的键盘事件对应的键码</a></li>\n<li><a href=\"http://www.cnblogs.com/kidney/p/6052935.html\" target=\"_blank\" rel=\"noopener\">Vue.js双向绑定的实现原理</a></li>\n</ol>\n<p>本文转自： <a href=\"http://www.itheima.com\" target=\"_blank\" rel=\"noopener\">www.itheima.com</a> </p>\n<p> 转自网络。如有侵权，请联系删除 </p>\n","categories":["前端之vue"],"tags":["vue"]},{"title":"Vue.js 学习- Day3","url":"/posts/4557f027/","content":"<h1 id=\"一：Vue组件\"><a href=\"#一：Vue组件\" class=\"headerlink\" title=\"一：Vue组件\"></a>一：Vue组件</h1><a id=\"more\"></a>\n\n<h2 id=\"1-1-创建Vue组件\"><a href=\"#1-1-创建Vue组件\" class=\"headerlink\" title=\"1.1     创建Vue组件\"></a>1.1     创建Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p>\n<ul>\n<li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li>\n<li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；<h3 id=\"1-1-1-全局组件定义的三种方式\"><a href=\"#1-1-1-全局组件定义的三种方式\" class=\"headerlink\" title=\"1.1.1    全局组件定义的三种方式\"></a>1.1.1    全局组件定义的三种方式</h3></li>\n</ul>\n<ol>\n<li>使用 Vue.extend 配合 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Vue.component(&#39;login&#39;, login);</span><br></pre></td></tr></table></figure></li>\n<li>直接使用 Vue.component 方法：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;register&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>将模板字符串，定义到script标签种：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script id=<span class=\"string\">\"tmpl\"</span> type=<span class=\"string\">\"x-template\"</span>&gt;</span><br><span class=\"line\">      &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span> | <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"> &lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n同时，需要使用 Vue.component 来定义组件：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">'account'</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">'#tmpl'</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<blockquote>\n<p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p>\n</blockquote>\n<h3 id=\"1-1-2-组件中展示数据和响应事件\"><a href=\"#1-1-2-组件中展示数据和响应事件\" class=\"headerlink\" title=\"1.1.2    组件中展示数据和响应事件\"></a>1.1.2    组件中展示数据和响应事件</h3><ol>\n<li>在组件中，<code>data</code>需要被定义为一个方法，例如：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;account&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#tmpl&#39;,</span><br><span class=\"line\">      data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          msg: &#39;大家好！&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        login()&#123;</span><br><span class=\"line\">          alert(&#39;点击了登录按钮&#39;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</li>\n</ol>\n<h3 id=\"1-1-3-使用components属性定义局部子组件\"><a href=\"#1-1-3-使用components属性定义局部子组件\" class=\"headerlink\" title=\"1.1.3     使用components属性定义局部子组件\"></a>1.1.3     使用<code>components</code>属性定义局部子组件</h3><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      components: &#123; &#x2F;&#x2F; 定义子组件</span><br><span class=\"line\">        account: &#123; &#x2F;&#x2F; account 组件</span><br><span class=\"line\">          template: &#39;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;login&gt;&lt;&#x2F;login&gt;&lt;&#x2F;div&gt;&#39;, &#x2F;&#x2F; 在这里使用定义的子组件</span><br><span class=\"line\">          components: &#123; &#x2F;&#x2F; 定义子组件的子组件</span><br><span class=\"line\">            login: &#123; &#x2F;&#x2F; login 组件</span><br><span class=\"line\">              template: &quot;&lt;h3&gt;这是登录组件&lt;&#x2F;h3&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>引用组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;account&gt;&lt;&#x2F;account&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-2：使用flag标识符结合v-if和v-else切换组件\"><a href=\"#1-2：使用flag标识符结合v-if和v-else切换组件\" class=\"headerlink\" title=\"1.2：使用flag标识符结合v-if和v-else切换组件\"></a>1.2：使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol>\n<li>页面结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class=\"line\">    &lt;my-com1 v-if&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com1&gt;</span><br><span class=\"line\">    &lt;my-com2 v-else&#x3D;&quot;flag&quot;&gt;&lt;&#x2F;my-com2&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Vue实例定义：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    Vue.component(&#39;myCom1&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;奔波霸&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    Vue.component(&#39;myCom2&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;h3&gt;霸波奔&lt;&#x2F;h3&gt;&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        flag: true</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-3：-使用-is属性来切换不同的子组件-并添加切换动画\"><a href=\"#1-3：-使用-is属性来切换不同的子组件-并添加切换动画\" class=\"headerlink\" title=\"1.3：    使用:is属性来切换不同的子组件,并添加切换动画\"></a>1.3：    使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol>\n<li>组件实例定义方式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 登录组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;登录组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;login&#39;, login);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 注册组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      &lt;h3&gt;注册组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Vue.component(&#39;register&#39;, register);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123; comName: &#39;login&#39; &#125;,</span><br><span class=\"line\">    methods: &#123;&#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;#&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br><span class=\"line\">  &lt;transition mode&#x3D;&quot;out-in&quot;&gt;</span><br><span class=\"line\">    &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class=\"line\">  &lt;&#x2F;transition&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>添加切换样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .v-enter,</span><br><span class=\"line\">  .v-leave-to &#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(30px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .v-enter-active,</span><br><span class=\"line\">  .v-leave-active &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    transition: all 0.3s ease;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  h3&#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-4-组件间传值\"><a href=\"#1-4-组件间传值\" class=\"headerlink\" title=\"1.4    组件间传值\"></a>1.4    组件间传值</h2><h3 id=\"1-4-1：父组件向子组件传值\"><a href=\"#1-4-1：父组件向子组件传值\" class=\"headerlink\" title=\"1.4.1：父组件向子组件传值\"></a>1.4.1：父组件向子组件传值</h3><ol>\n<li>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: &#39;这是父组件中的消息&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        son: &#123;</span><br><span class=\"line\">          template: &#39;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class=\"line\">          props: [&#39;finfo&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;son :finfo&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"1-4-2：-子组件向父组件传值\"><a href=\"#1-4-2：-子组件向父组件传值\" class=\"headerlink\" title=\"1.4.2：    子组件向父组件传值\"></a>1.4.2：    子组件向父组件传值</h3><ol>\n<li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li>\n<li>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br></pre></td></tr></table></figure></li>\n<li>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 引用父组件 --&gt;</span><br><span class=\"line\">    &lt;son @func&#x3D;&quot;getMsg&quot;&gt;&lt;&#x2F;son&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 组件模板定义 --&gt;</span><br><span class=\"line\">    &lt;script type&#x3D;&quot;x-template&quot; id&#x3D;&quot;son&quot;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;向父组件传值&quot; @click&#x3D;&quot;sendMsg&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 子组件的定义方式</span><br><span class=\"line\">    Vue.component(&#39;son&#39;, &#123;</span><br><span class=\"line\">      template: &#39;#son&#39;, &#x2F;&#x2F; 组件模板Id</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        sendMsg() &#123; &#x2F;&#x2F; 按钮的点击事件</span><br><span class=\"line\">          this.$emit(&#39;func&#39;, &#39;OK&#39;); &#x2F;&#x2F; 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        getMsg(val)&#123; &#x2F;&#x2F; 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class=\"line\">          alert(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"1-5：-使用-this-refs-来获取f元素和组件\"><a href=\"#1-5：-使用-this-refs-来获取f元素和组件\" class=\"headerlink\" title=\"1.5：    使用 this.$refs 来获取f元素和组件\"></a>1.5：    使用 <code>this.$refs</code> 来获取f元素和组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素内容&quot; @click&#x3D;&quot;getElement&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class=\"line\">    &lt;h1 ref&#x3D;&quot;myh1&quot;&gt;这是一个大大的H1&lt;&#x2F;h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class=\"line\">    &lt;my-com ref&#x3D;&quot;mycom&quot;&gt;&lt;&#x2F;my-com&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  Vue.component(&#39;my-com&#39;, &#123;</span><br><span class=\"line\">    template: &#39;&lt;h5&gt;这是一个子组件&lt;&#x2F;h5&gt;&#39;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: &#39;子组件&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      getElement() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取元素</span><br><span class=\"line\">        console.log(this.$refs.myh1.innerText);</span><br><span class=\"line\">        &#x2F;&#x2F; 通过 this.$refs 来获取组件</span><br><span class=\"line\">        console.log(this.$refs.mycom.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二：什么是路由\"><a href=\"#二：什么是路由\" class=\"headerlink\" title=\"二：什么是路由\"></a>二：什么是路由</h1><ol>\n<li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p>\n</li>\n<li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p>\n</li>\n<li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p>\n</li>\n</ol>\n<h2 id=\"2-1：-在-vue-中使用-vue-router\"><a href=\"#2-1：-在-vue-中使用-vue-router\" class=\"headerlink\" title=\"2.1：  在 vue 中使用 vue-router\"></a>2.1：  在 vue 中使用 vue-router</h2><ol>\n<li>导入 vue-router 组件类库：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;vue-router-2.7.0.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-link 组件来导航<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li>\n<li>使用 router-view 组件来显示匹配到的组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li>\n<li>创建使用<code>Vue.extend</code>创建组件<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 4.1 使用 Vue.extend 来创建登录组件</span><br><span class=\"line\">var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 4.2 使用 Vue.extend 来创建注册组件</span><br><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">  template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></li>\n<li>使用 router 属性来使用路由规则<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 6. 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      router: router &#x2F;&#x2F; 使用 router 属性来使用路由规则</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"2-2：在路由规则中定义参数\"><a href=\"#2-2：在路由规则中定义参数\" class=\"headerlink\" title=\"2.2：在路由规则中定义参数\"></a>2.2：在路由规则中定义参数</h2><ol>\n<li>在规则中定义参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; path: &#39;&#x2F;register&#x2F;:id&#39;, component: register &#125;</span><br></pre></td></tr></table></figure></li>\n<li>通过 <code>this.$route.params</code>来获取路由中的参数：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"2-3：-使用-children-属性实现路由嵌套\"><a href=\"#2-3：-使用-children-属性实现路由嵌套\" class=\"headerlink\" title=\"2.3：    使用 children 属性实现路由嵌套\"></a>2.3：    使用 <code>children</code> 属性实现路由嵌套</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  &#x2F;&#x2F; 父路由中的组件</span><br><span class=\"line\">  const account &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#96;&lt;div&gt;</span><br><span class=\"line\">      这是account组件</span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt; | </span><br><span class=\"line\">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;register&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;&#96;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 login 组件</span><br><span class=\"line\">  const login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;登录组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 子路由中的 register 组件</span><br><span class=\"line\">  const register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">    template: &#39;&lt;div&gt;注册组件&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 路由实例</span><br><span class=\"line\">  var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">      &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;account&#x2F;login&#39; &#125;, &#x2F;&#x2F; 使用 redirect 实现路由重定向</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: &#39;&#x2F;account&#39;,</span><br><span class=\"line\">        component: account,</span><br><span class=\"line\">        children: [ &#x2F;&#x2F; 通过 children 数组属性，来实现路由的嵌套</span><br><span class=\"line\">          &#123; path: &#39;login&#39;, component: login &#125;, &#x2F;&#x2F; 注意，子路由的开头位置，不要加 &#x2F; 路径符</span><br><span class=\"line\">          &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      account</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: router</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4：命名视图实现经典布局\"><a href=\"#2-4：命名视图实现经典布局\" class=\"headerlink\" title=\"2.4：命名视图实现经典布局\"></a>2.4：命名视图实现经典布局</h2><ol>\n<li>标签代码结构：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">      &lt;router-view name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>JS代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var header &#x3D; Vue.component(&#39;header&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;header&quot;&gt;header&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var sidebar &#x3D; Vue.component(&#39;sidebar&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;sidebar&quot;&gt;sidebar&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var mainbox &#x3D; Vue.component(&#39;mainbox&#39;, &#123;</span><br><span class=\"line\">      template: &#39;&lt;div class&#x3D;&quot;mainbox&quot;&gt;mainbox&lt;&#x2F;div&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建路由对象</span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: &#39;&#x2F;&#39;, components: &#123;</span><br><span class=\"line\">            default: header,</span><br><span class=\"line\">            a: sidebar,</span><br><span class=\"line\">            b: mainbox</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>CSS 样式：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .header &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .content&#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .sidebar &#123;</span><br><span class=\"line\">    flex: 2;</span><br><span class=\"line\">    border: 1px solid green;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .mainbox&#123;</span><br><span class=\"line\">    flex: 8;</span><br><span class=\"line\">    border: 1px solid blue;</span><br><span class=\"line\">    height: 500px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"2-5：watch-computed属性的运用\"><a href=\"#2-5：watch-computed属性的运用\" class=\"headerlink\" title=\"2.5：watch,computed属性的运用\"></a>2.5：<code>watch</code>,<code>computed</code>属性的运用</h2><h3 id=\"2-5-1-watch属性的使用\"><a href=\"#2-5-1-watch属性的使用\" class=\"headerlink\" title=\"2.5.1    watch属性的使用\"></a>2.5.1    <code>watch</code>属性的使用</h3><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p>\n<ol>\n<li>监听<code>data</code>中属性的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;,</span><br><span class=\"line\">        fullName: &#39;jack - chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;firstName&#39;: function (newVal, oldVal) &#123; &#x2F;&#x2F; 第一个参数是新数据，第二个参数是旧数据</span><br><span class=\"line\">          this.fullName &#x3D; newVal + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#39;lastName&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          this.fullName &#x3D; this.firstName + &#39; - &#39; + newVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>监听路由对象的改变：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var login &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var register &#x3D; Vue.extend(&#123;</span><br><span class=\"line\">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    var router &#x3D; new VueRouter(&#123;</span><br><span class=\"line\">      routes: [</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;login&quot;, component: login &#125;,</span><br><span class=\"line\">        &#123; path: &quot;&#x2F;register&quot;, component: register &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;&#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      router: router,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        &#39;$route&#39;: function (newVal, oldVal) &#123;</span><br><span class=\"line\">          if (newVal.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;</span><br><span class=\"line\">            console.log(&#39;这是登录组件&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"2-5-2：computed计算属性的使用\"><a href=\"#2-5-2：computed计算属性的使用\" class=\"headerlink\" title=\"2.5.2：computed计算属性的使用\"></a>2.5.2：<code>computed</code>计算属性的使用</h3><ol>\n<li>默认只有<code>getter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt; +</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt; &#x3D;</span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;&#125;,</span><br><span class=\"line\">      computed: &#123; &#x2F;&#x2F; 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">          return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义有<code>getter</code>和<code>setter</code>的计算属性：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstName&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastName&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;修改fullName&quot; @click&#x3D;&quot;changeName&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class=\"line\">    var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">      el: &#39;#app&#39;,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: &#39;jack&#39;,</span><br><span class=\"line\">        lastName: &#39;chen&#39;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">        changeName() &#123;</span><br><span class=\"line\">          this.fullName &#x3D; &#39;TOM - chen2&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        fullName: &#123;</span><br><span class=\"line\">          get: function () &#123;</span><br><span class=\"line\">            return this.firstName + &#39; - &#39; + this.lastName;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          set: function (newVal) &#123;</span><br><span class=\"line\">            var parts &#x3D; newVal.split(&#39; - &#39;);</span><br><span class=\"line\">            this.firstName &#x3D; parts[0];</span><br><span class=\"line\">            this.lastName &#x3D; parts[1];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"2-5-3：-watch、computed和methods之间的对比\"><a href=\"#2-5-3：-watch、computed和methods之间的对比\" class=\"headerlink\" title=\"2.5.3：    watch、computed和methods之间的对比\"></a>2.5.3：    <code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h3><ol>\n<li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li>\n<li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li>\n<li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li>\n</ol>\n<h1 id=\"三：nrm的安装使用\"><a href=\"#三：nrm的安装使用\" class=\"headerlink\" title=\"三：nrm的安装使用\"></a>三：<code>nrm</code>的安装使用</h1><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p>\n<ol>\n<li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li>\n<li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li>\n<li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li>\n</ol>\n<h2 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h2><ol>\n<li><a href=\"http://www.cnblogs.com/joyho/articles/4430148.html\" target=\"_blank\" rel=\"noopener\">URL中的hash（井号）</a></li>\n</ol>\n<p>本文转自： <a href=\"http://www.itheima.com\" target=\"_blank\" rel=\"noopener\">www.itheima.com</a> </p>\n<p> 转自网络。如有侵权，请联系删除 </p>\n","categories":["前端之vue"],"tags":["vue"]},{"title":"hexo博客提交百度和谷歌收录","url":"/posts/13e5520f/","content":"<p>一个网站的SEO对一个网站非常重要，<a href=\"https://link.jianshu.com?t=https://baike.baidu.com/item/SEO/102990?fr=aladdin\" target=\"_blank\" rel=\"noopener\">SEO</a>指的是搜索引擎优化。通过搜索引擎优化，可以提高网站的网站关键词排名以及博客文章的曝光度。一般来说，我们针对百度和Google这两个搜索引擎进行优化，提高对网站资源的索引量，使我们的文章更容易被发现。虽然我的博客的主要读者是我自己，但也不妨碍我做些优化，对吧！接下来向大家展示如何使博客被百度和Google收录。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-站点地图\"><a href=\"#1-站点地图\" class=\"headerlink\" title=\"1.    站点地图\"></a>1.    站点地图</h2><p>站点地图即<a href=\"https://link.jianshu.com?t=https://baike.baidu.com/item/sitemap/6241567?fr=aladdin\" target=\"_blank\" rel=\"noopener\">sitemap</a>， 是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p>\n<h3 id=\"1-1-生成站点地图\"><a href=\"#1-1-生成站点地图\" class=\"headerlink\" title=\"1.1    生成站点地图\"></a>1.1    生成站点地图</h3><p>安装百度和Google的站点地图生成插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-修改配置文件\"><a href=\"#1-2-修改配置文件\" class=\"headerlink\" title=\"1.2    修改配置文件\"></a>1.2    修改配置文件</h3><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 自动生成<span class=\"selector-tag\">sitemap</span></span><br><span class=\"line\"><span class=\"selector-tag\">sitemap</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">path</span>: <span class=\"selector-tag\">sitemap</span><span class=\"selector-class\">.xml</span></span><br><span class=\"line\"><span class=\"selector-tag\">baidusitemap</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">path</span>: <span class=\"selector-tag\">baidusitemap</span><span class=\"selector-class\">.xml</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-生成和部署\"><a href=\"#1-3-生成和部署\" class=\"headerlink\" title=\"1.3    生成和部署\"></a>1.3    生成和部署</h3><p>执行生成和部署命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>此时，进入<code>public</code>目录，你会发现里面有<code>sitemap.xml</code>和<code>baidusitemap.xml</code>两个文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p>\n<blockquote>\n<ul>\n<li>sitemap.xml用来提交给Google</li>\n<li>baidusitemap.xml用来提交给百度</li>\n</ul>\n</blockquote>\n<h2 id=\"2-百度站长平台\"><a href=\"#2-百度站长平台\" class=\"headerlink\" title=\"2.    百度站长平台\"></a>2.    百度站长平台</h2><p>通过百度站长平台进行链接提交，增加网站的索引量。我的这篇文章：<a href=\"https://link.jianshu.com?t=http://fengdi.org/2017/08/07/Hexo博客之速度优化.html\" target=\"_blank\" rel=\"noopener\">Hexo博客之速度优化</a> 已经提到过Github对百度爬虫进行了屏蔽，因此百度爬取不到Github上的页面，如果你按照这篇文章同时部署到Coding上，那百度就可以抓取到，因为此时百度抓取的是位于Coding上的博客网页。</p>\n<p>注册并登录百度站长平台：<a href=\"https://link.jianshu.com?t=http://zhanzhang.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度站长平台</a></p>\n<h3 id=\"2-1-添加站点\"><a href=\"#2-1-添加站点\" class=\"headerlink\" title=\"2.1    添加站点\"></a>2.1    添加站点</h3><p>选择添加站点：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401152602.png\" alt=\"\"></p>\n<h3 id=\"2-2-验证站点\"><a href=\"#2-2-验证站点\" class=\"headerlink\" title=\"2.2    验证站点\"></a>2.2    验证站点</h3><p>进行站点验证：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401152628.png\" alt=\"\"></p>\n<p>这里我们选择<code>文件验证</code>，下载验证文件到本地，放置在<code>themes/next/source</code>目录下。执行生成和部署命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>点击完成验证即可。</p>\n<h3 id=\"2-3-链接提交\"><a href=\"#2-3-链接提交\" class=\"headerlink\" title=\"2.3    链接提交\"></a>2.3    链接提交</h3><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。</p>\n<h4 id=\"2-3-1-主动推送\"><a href=\"#2-3-1-主动推送\" class=\"headerlink\" title=\"2.3.1    主动推送\"></a>2.3.1    主动推送</h4><p>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>\n\n<p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">baidu_url_submit:</span><br><span class=\"line\">  count: 5 <span class=\"comment\">## 提交最新的五个链接</span></span><br><span class=\"line\">  host: www.hui-wang.info <span class=\"comment\">## 百度站长平台中注册的域名</span></span><br><span class=\"line\">  token: your_token <span class=\"comment\">## 准入秘钥</span></span><br><span class=\"line\">  path: baidu_urls.txt <span class=\"comment\">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>\n\n<p>其次，记得查看<code>_config.yml</code>文件中url的值， 必须包含是百度站长平台注册的域名， 比如:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># URL</span></span><br><span class=\"line\">url: http:<span class=\"comment\">//fengdi.org</span></span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :year/:month/:day/:title.xml</span><br></pre></td></tr></table></figure>\n\n<p>最后，加入新的deployer:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">- <span class=\"built_in\">type</span>: git <span class=\"comment\">## 这是我原来的deployer</span></span><br><span class=\"line\">  repo:</span><br><span class=\"line\">  branch:</span><br><span class=\"line\">- <span class=\"built_in\">type</span>: baidu_url_submitter <span class=\"comment\">## 添加这里内容即可</span></span><br></pre></td></tr></table></figure>\n\n<p>其主动推送的实现原理如下：</p>\n<ul>\n<li><p>新链接的产生， <code>hexo generate</code> 会产生一个文本文件，里面包含最新的链接</p>\n</li>\n<li><p>新链接的提交， <code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎</p>\n</li>\n</ul>\n<h4 id=\"2-3-2-自动推送\"><a href=\"#2-3-2-自动推送\" class=\"headerlink\" title=\"2.3.2    自动推送\"></a>2.3.2    自动推送</h4><p>安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度。</p>\n<p>修改主题目录下的<code>layout/post.swig</code>文件，末尾添加自动推送代码，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> bp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> curProtocol = <span class=\"built_in\">window</span>.location.protocol.split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// if (curProtocol === 'https') &#123;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//     bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// &#125;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// else &#123;</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//     bp.src = 'http://push.zhanzhang.baidu.com/push.js';</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>];</span></span><br><span class=\"line\">    s.parentNode.insertBefore(bp, s);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-sitemap提交\"><a href=\"#2-3-3-sitemap提交\" class=\"headerlink\" title=\"2.3.3    sitemap提交\"></a>2.3.3    sitemap提交</h4><p>我们之前已经说过如何生成sitemap文件，这时就需要我们生成的sitemap文件了。</p>\n<p><img src=\"http://photo.jomeswang.top/20200401152659.png\" alt=\"\"></p>\n<p>输入以下内容到输入框里：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//fengdi.org/baidusitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>输入验证码后，提交即可。一般情况下，百度会在一个小时内处理该文件，并提取其中的url。</p>\n<h2 id=\"3-Google网站站长\"><a href=\"#3-Google网站站长\" class=\"headerlink\" title=\"3.    Google网站站长\"></a>3.    Google网站站长</h2><p>在提交Google之前，要解决一个大家都知道的问题，关于如何登录Google。这里就不再说了，相信你们有办法。</p>\n<h3 id=\"3-1-添加站点\"><a href=\"#3-1-添加站点\" class=\"headerlink\" title=\"3.1    添加站点\"></a>3.1    添加站点</h3><p>登录<a href=\"https://link.jianshu.com?t=https://www.google.com/webmasters/#?modal_active=none\" target=\"_blank\" rel=\"noopener\">Google网站站长</a>，进入<code>Search Console</code>，点击<code>添加属性</code>进行站点添加：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401152732.png\" alt=\"\"></p>\n<h3 id=\"3-2-验证站点\"><a href=\"#3-2-验证站点\" class=\"headerlink\" title=\"3.2    验证站点\"></a>3.2    验证站点</h3><p>同百度平台一样，下载Google验证文件，放到source下<code>themes/next/source</code>目录中：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401152748.png\" alt=\"\"></p>\n<p>重新生成和部署：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>部署完成之后，进行验证即可。</p>\n<h3 id=\"3-3-添加站点地图\"><a href=\"#3-3-添加站点地图\" class=\"headerlink\" title=\"3.3    添加站点地图\"></a>3.3    添加站点地图</h3><p>在<code>抓取</code>里面，点击<code>站点地图</code>，进行添加：</p>\n<p><img src=\"http://photo.jomeswang.top/20200401152848.png\" alt=\"\"></p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4    总结\"></a>4    总结</h2><p>好了，到这里文章就结束了。如果你之前没有把网站部署到Coding上，你的网站百度是爬取不到的，关于如何部署请参阅：<a href=\"https://link.jianshu.com?t=http://fengdi.org/2017/08/07/Hexo博客之速度优化.html\" target=\"_blank\" rel=\"noopener\">Hexo博客之速度优化</a></p>\n<p>剩下的就是好好写文章，文章的质量同样影响收录的奥，加油啦！</p>\n<p>参考文章：<a href=\"https://www.jianshu.com/p/f8ec422ebd52\" target=\"_blank\" rel=\"noopener\">Hexo博客提交百度和Google收录</a></p>\n","categories":["建站"],"tags":["hexo","next","博客收录"]},{"title":"博客增加阅读排行榜","url":"/posts/f2a03e8c/","content":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>新增一个阅读排行页面，可以现在本站文章的阅读排行榜，基于 leancloud 的数据实现。</p>\n<a id=\"more\"></a>\n\n<p><code>hexo n page top</code> 新建页面，会生成 top 目录，之后在主题文件夹下有一个layout文件夹增加一个top.swig文件，增加代码如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &#123;######################&#125;</span><br><span class=\"line\">  &#123;### ABOUT BLOCK ###&#125;</span><br><span class=\"line\">  &#123;######################&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=\"top\"&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=\"//code.bdstatic.com/npm/leancloud-storage@4.12.0/dist/av-min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">script</span>&gt;<span class=\"selector-tag\">AV</span><span class=\"selector-class\">.init</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">appId</span>: <span class=\"string\">\"&#123;&#123;theme.leancloud_visitors.app_id&#125;&#125;\"</span>,</span><br><span class=\"line\">  appKey: <span class=\"string\">\"&#123;&#123;theme.leancloud_visitors.app_key&#125;&#125;\"</span>,</span><br><span class=\"line\">  serverURL: <span class=\"string\">\"&#123;&#123;theme.leancloud_visitors.server_url&#125;&#125;\"</span></span><br><span class=\"line\">&#125;);&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\"&gt;</span><br><span class=\"line\">  var time=0</span><br><span class=\"line\">  var title=\"\"</span><br><span class=\"line\">  var url=\"\"</span><br><span class=\"line\">  var query = new AV.Query('Counter');</span><br><span class=\"line\">  query.notEqualTo('id',0);</span><br><span class=\"line\">  query.descending('time');</span><br><span class=\"line\">  <span class=\"selector-tag\">query</span><span class=\"selector-class\">.limit</span>(15);</span><br><span class=\"line\">  <span class=\"selector-tag\">query</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.then</span>(<span class=\"selector-tag\">function</span> (<span class=\"selector-tag\">todo</span>) &#123;</span><br><span class=\"line\">    for (var i=0;i&lt;15;i++)&#123;</span><br><span class=\"line\">      var result=todo[i].attributes;</span><br><span class=\"line\">      time=result.time;</span><br><span class=\"line\">      title=result.title;</span><br><span class=\"line\">      url=result.url;</span><br><span class=\"line\">      // var content=\"&lt;a href='\"+\"https://hoxis.github.io\"+url+\"'&gt;\"+title+\"&lt;/a&gt;\"+\"&lt;br&gt;\"+\"&lt;font color='#fff'&gt;\"+\"阅读次数：\"+time+\"&lt;/font&gt;\"+\"&lt;br&gt;&lt;br&gt;\";</span><br><span class=\"line\">      var content=\"&lt;p&gt;\"+\"&lt;font color='#1C1C1C'&gt;\"+\"【文章热度:\"+time+\"℃】\"+\"&lt;/font&gt;\"+\"&lt;a href='\"+\"YOUR_URL\"+url+\"'&gt;\"+title+\"&lt;/a&gt;\"+\"&lt;/p&gt;\";</span><br><span class=\"line\">      document.getElementById(\"top\").innerHTML+=content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"selector-tag\">function</span> (<span class=\"selector-tag\">error</span>) &#123;</span><br><span class=\"line\">    console.log(\"error\");</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;##########################&#125;</span><br><span class=\"line\">  &#123;### END ABOUT BLOCK ###&#125;</span><br><span class=\"line\">  &#123;##########################&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将其中的<code>YOUR_APPID</code>和<code>YOUR_APPKEY</code>替换为 learncloud 的 id 和 key</p>\n<p>将<code>YOUR_URL</code>替换为你的博客地址，包含<code>协议</code>并以<code>/</code>结束，例如：<code>https://blog.qust.cc/</code></p>\n<p>之后在这里主题文件夹下的layout文件夹下的page.swig添加以下代码<img src=\"http://photo.jomeswang.top/20200410232246.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 阅读排行榜--&gt;</span><br><span class=\"line\">&#123;% elif page.type &#x3D;&#x3D;&#x3D; &#39;top&#39; %&#125;</span><br><span class=\"line\">    &#123;% include &#39;top.swig&#39; %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置主题侧边栏\"><a href=\"#2-配置主题侧边栏\" class=\"headerlink\" title=\"2.配置主题侧边栏\"></a>2.配置主题侧边栏</h2><p> 打开<code>主题配置</code>文件，搜索menu，添加<code>hot: /hot/|| signal</code> </p>\n<h2 id=\"3-配置侧边栏中文\"><a href=\"#3-配置侧边栏中文\" class=\"headerlink\" title=\"3.配置侧边栏中文\"></a>3.配置侧边栏中文</h2><p> 打开<strong>hexo/theme/next/languages/zh-Hans.yml</strong>，搜索menu，添加<code>hot: 热度排行</code> </p>\n","categories":["建站"],"tags":["hexo","next"]},{"title":"博客next之网站运行时间","url":"/posts/44a367fb/","content":"<h2 id=\"1-具体设置\"><a href=\"#1-具体设置\" class=\"headerlink\" title=\"1.具体设置\"></a>1.具体设置</h2><p>在<code>/next/layout/_partials/footer.swig</code>在自己喜欢的位置加上如下代码</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;span id=<span class=\"string\">\"timeDate\"</span>&gt;载入天数...&lt;<span class=\"regexp\">/span&gt;&lt;span id=\"times\"&gt;载入时分秒...&lt;/</span>span&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createtime</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">var</span> grt= <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"12/31/2019 12:00:00\"</span>);<span class=\"comment\">//此处修改你的建站时间或者网站上线时间 </span></span><br><span class=\"line\">        now.setTime(now.getTime()+<span class=\"number\">250</span>); </span><br><span class=\"line\">        days = (now - grt ) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>; dnum = <span class=\"built_in\">Math</span>.floor(days); </span><br><span class=\"line\">        hours = (now - grt ) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> - (<span class=\"number\">24</span> * dnum); hnum = <span class=\"built_in\">Math</span>.floor(hours); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">String</span>(hnum).length ==<span class=\"number\">1</span> )&#123;hnum = <span class=\"string\">\"0\"</span> + hnum;&#125; minutes = (now - grt ) / <span class=\"number\">1000</span> /<span class=\"number\">60</span> - (<span class=\"number\">24</span> * <span class=\"number\">60</span> * dnum) - (<span class=\"number\">60</span> * hnum); </span><br><span class=\"line\">        mnum = <span class=\"built_in\">Math</span>.floor(minutes); <span class=\"keyword\">if</span>(<span class=\"built_in\">String</span>(mnum).length ==<span class=\"number\">1</span> )&#123;mnum = <span class=\"string\">\"0\"</span> + mnum;&#125; </span><br><span class=\"line\">        seconds = (now - grt ) / <span class=\"number\">1000</span> - (<span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * dnum) - (<span class=\"number\">60</span> * <span class=\"number\">60</span> * hnum) - (<span class=\"number\">60</span> * mnum); </span><br><span class=\"line\">        snum = <span class=\"built_in\">Math</span>.round(seconds); <span class=\"keyword\">if</span>(<span class=\"built_in\">String</span>(snum).length ==<span class=\"number\">1</span> )&#123;snum = <span class=\"string\">\"0\"</span> + snum;&#125; </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"timeDate\"</span>).innerHTML = <span class=\"string\">\"本站已安全运行 \"</span>+dnum+<span class=\"string\">\" 天 \"</span>; </span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"times\"</span>).innerHTML = hnum + <span class=\"string\">\" 小时 \"</span> + mnum + <span class=\"string\">\" 分 \"</span> + snum + <span class=\"string\">\" 秒\"</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">setInterval(<span class=\"string\">\"createtime()\"</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>比如我是在<code>&lt;div class=&quot;copyright&quot;&gt;.....&lt;/div&gt;</code>这个标签下添加的。</p>\n","categories":["建站"],"tags":["hexo","next"]},{"title":"博客next之中英文网址解决","url":"/posts/d10b0ea/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>hexo的默认永久链接是在_config.yml里的配置permalink: :year/:month/:day/:title/。这种默认配置有个很不能接受的缺点，文件名为中文，会导致url链接里面出现中文。这次我来介绍一个比较方便好用的解决方案<code>hexo-abbrlink</code>插件。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n\n<p>站点配置文件(_config.yml)里:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">permalink: post/:abbrlink.html</span><br><span class=\"line\"><span class=\"selector-tag\">abbrlink</span>:</span><br><span class=\"line\">  <span class=\"selector-tag\">alg</span>: <span class=\"selector-tag\">crc32</span>  # 算法：<span class=\"selector-tag\">crc16</span>(<span class=\"selector-tag\">default</span>) <span class=\"selector-tag\">and</span> <span class=\"selector-tag\">crc32</span></span><br><span class=\"line\">  <span class=\"selector-tag\">rep</span>: <span class=\"selector-tag\">hex</span>    # 进制：<span class=\"selector-tag\">dec</span>(<span class=\"selector-tag\">default</span>) <span class=\"selector-tag\">and</span> <span class=\"selector-tag\">hex</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>hexo g</code> 会自动在你的文章中加上<code>abbrlink: fbf5310d</code></p>\n","categories":["建站"],"tags":["hexo","next"]},{"title":"博客添加侧边栏近期文章","url":"/posts/5308a4b1/","content":"<h2 id=\"1-更改sidebar-swig文件\"><a href=\"#1-更改sidebar-swig文件\" class=\"headerlink\" title=\"1.更改sidebar.swig文件\"></a>1.更改sidebar.swig文件</h2><p>前几天看到别人的博客有个近期文章版块，感觉挺好，于是就想给自己的博客也加这么个功能。由于使用的是next主题，而next默认是没有这个版块的，那就自己搞一个吧。废话不多说，直接上代码，挺简单的。</p>\n<a id=\"more\"></a> \n\n<p> 将此代码贴在<code>next/layout/_macro/sidebar.swig</code>中的<code>if theme.links</code>对应的<code>endif</code>后面，就ok了，是不是很简单。。。。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.recent_posts %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll motion-element &#123;&#123; \"</span><span class=\"attr\">links-of-blogroll-</span>\" + <span class=\"attr\">theme.recent_posts_layout</span>  &#125;&#125;\"&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-title\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- modify icon to fire by szw --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-list\"</span>&gt;</span></span><br><span class=\"line\">        &#123;% set posts = site.posts.sort('-date') %&#125;</span><br><span class=\"line\">        &#123;% for post in posts.slice('0', '5') %&#125;</span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for(post.path) &#125;&#125;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; post.title &#125;&#125;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        &#123;% endfor %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-修改主题配置文件\"><a href=\"#2-修改主题配置文件\" class=\"headerlink\" title=\"2.修改主题配置文件\"></a>2.修改主题配置文件</h2><p>为了配置方便，在主题的<code>_config.yml</code>中添加了几个变量，如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">recent_posts_title</span>: 近期文章</span><br><span class=\"line\"><span class=\"selector-tag\">recent_posts_layout</span>: <span class=\"selector-tag\">block</span></span><br><span class=\"line\"><span class=\"selector-tag\">recent_posts</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-注意事项\"><a href=\"#3-注意事项\" class=\"headerlink\" title=\"3.注意事项\"></a>3.注意事项</h2><p>同时运行之后发现有冲突如下</p>\n<p><code>Unhandled rejection TypeError: (((intermediate value)(intermediate value)(intermediate value) || _fn).call(...) || _fn) is not a function</code></p>\n<p>在主题的<code>_config.yml</code>中更改</p>\n<p>在<code>links_layout</code>下方的links属性为false</p>\n<p>如此：  <code>links: false</code>（注意空格）</p>\n","categories":["建站"],"tags":["hexo","next"]},{"title":"博客优化之创建关于我界面","url":"/posts/877825e5/","content":"<p>​        很久之前就像弄一个about界面，现在借鉴了一下别人的界面，按照自己的想法修改了一部分，特地写出该博客来记录一下。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-新建about界面\"><a href=\"#1-新建about界面\" class=\"headerlink\" title=\"1.新建about界面\"></a>1.新建about界面</h2><p>​    在控制台使用命令创建</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hexo</span> <span class=\"string\">new page about</span></span><br></pre></td></tr></table></figure>\n\n<p> 然后在博客根目录 /source 下会生成一个 about 文件夹，打开其中的 index.md 文件，在头部写入 <code>type = “about”，如下：</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: 关于我</span><br><span class=\"line\">date: 2019-08-11 15:34:16</span><br><span class=\"line\">type: &quot;about&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置menu\"><a href=\"#2-配置menu\" class=\"headerlink\" title=\"2.配置menu\"></a>2.配置menu</h2><p> 主题配置文件中<code>menu</code>下应用：</p>\n<p>  <code>about: /about/|| user</code></p>\n<h2 id=\"3-新增-about-swig-页\"><a href=\"#3-新增-about-swig-页\" class=\"headerlink\" title=\"3. 新增 about.swig 页\"></a>3. 新增 about.swig 页</h2><p> 在 <code>/themes/next/layout/</code> 新建 <code>about.swig</code>，内容如下： </p>\n<figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% block <span class=\"attribute\">content</span> %&#125;</span><br><span class=\"line\">  &#123;######################&#125;</span><br><span class=\"line\">  &#123;### ABOUT BLOCK ###&#125;</span><br><span class=\"line\">  &#123;######################&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div id=\"about\"&gt;</span><br><span class=\"line\">        &lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"selector-id\">#about</span>&#123;</span><br><span class=\"line\">               <span class=\"attribute\">margin-top</span>: <span class=\"number\">5rem</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-class\">.blockquote-center</span>&#123;</span><br><span class=\"line\">                 <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">                <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"attribute\">font-family</span>: <span class=\"string\">'Noto Serif SC'</span>, <span class=\"string\">\"PingFang SC\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">                <span class=\"attribute\">overflow-wrap</span>: break-word;</span><br><span class=\"line\">                <span class=\"attribute\">color</span>: <span class=\"number\">#666</span>;</span><br><span class=\"line\">                <span class=\"attribute\">border-left</span>: none;</span><br><span class=\"line\">                <span class=\"attribute\">margin</span>: <span class=\"number\">40px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">                <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-class\">.note</span> primary&#123;</span><br><span class=\"line\">                <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">                <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">font-family</span>: <span class=\"string\">'Noto Serif SC'</span>, <span class=\"string\">\"PingFang SC\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">                <span class=\"attribute\">overflow-wrap</span>: break-word;</span><br><span class=\"line\">                <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">                <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">                <span class=\"attribute\">border</span>: initial;</span><br><span class=\"line\">                <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#eee</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding-left</span>: <span class=\"number\">45px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>: <span class=\"number\">#f5f0fa</span>;</span><br><span class=\"line\">                <span class=\"attribute\">border-left-color</span>: <span class=\"number\">#6f42c1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-class\">.note</span> info&#123;</span><br><span class=\"line\">                <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">                <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">font-family</span>: <span class=\"string\">'Noto Serif SC'</span>, <span class=\"string\">\"PingFang SC\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">                <span class=\"attribute\">overflow-wrap</span>: break-word;</span><br><span class=\"line\">                <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">                <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">                <span class=\"attribute\">border</span>: initial;</span><br><span class=\"line\">                <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#eee</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding-left</span>: <span class=\"number\">45px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>: <span class=\"number\">#eef7fa</span>;</span><br><span class=\"line\">                <span class=\"attribute\">border-left-color</span>: <span class=\"number\">#428bca</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"selector-class\">.note</span> success&#123;</span><br><span class=\"line\">                <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">                <span class=\"attribute\">line-height</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">font-family</span>: <span class=\"string\">'Noto Serif SC'</span>, <span class=\"string\">\"PingFang SC\"</span>, <span class=\"string\">\"Microsoft YaHei\"</span>, sans-serif;</span><br><span class=\"line\">                <span class=\"attribute\">overflow-wrap</span>: break-word;</span><br><span class=\"line\">                <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">                <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">                <span class=\"attribute\">border</span>: initial;</span><br><span class=\"line\">                <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#eee</span>;</span><br><span class=\"line\">                <span class=\"attribute\">padding-left</span>: <span class=\"number\">45px</span>;</span><br><span class=\"line\">                <span class=\"attribute\">background</span>: <span class=\"number\">#eff8f0</span>;</span><br><span class=\"line\">                <span class=\"attribute\">border-left-color</span>: <span class=\"number\">#5cb85c</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;/style&gt;</span><br><span class=\"line\">        &lt;div class=\"about-content\"&gt;</span><br><span class=\"line\">            &lt;div class=\"about-navigation\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &lt;blockquote class=\"blockquote-center\"&gt;&lt;p&gt;希望能在最美好的年代遇见最美的你&lt;/p&gt;&lt;/blockquote&gt;</span><br><span class=\"line\">                &lt;<span class=\"selector-tag\">hr</span>&gt;</span><br><span class=\"line\">                &lt;div class=\"note primary\"&gt;</span><br><span class=\"line\">                &lt;h2 id=\"基础信息\"&gt;&lt;a href=\"#基础信息\" class=\"headerlink\" title=\"基础信息\"&gt;&lt;/a&gt;基础信息&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;GitHub：&lt;a href=\"https://github.com/jomeswang\" target=\"_blank\" rel=\"noopener external nofollow noreferrer\"&gt;https://github.com/jomeswang&lt;/a&gt;&lt;/li&gt;&lt;li&gt; 坐标：深圳&lt;/li&gt;&lt;li&gt;一个正在征途路上勇敢前进的小伙子&lt;/li&gt;&lt;/ul&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=\"note info\"&gt;</span><br><span class=\"line\">                &lt;h2 id=\"兴趣爱好\"&gt;&lt;a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"&gt;&lt;/a&gt;兴趣爱好&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;跑步&lt;/li&gt;&lt;li&gt;吹水&lt;/li&gt;&lt;/ul&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=\"note success\"&gt;</span><br><span class=\"line\">                 &lt;h2 id=\"更新日志\"&gt;&lt;a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"&gt;&lt;/a&gt;更新日志&lt;/h2&gt;</span><br><span class=\"line\">                 &lt;<span class=\"selector-tag\">ul</span>&gt;</span><br><span class=\"line\">                    &#123;% for fplan in theme<span class=\"selector-class\">.fplans</span> %&#125;</span><br><span class=\"line\">                        &lt;li&gt;&#123;&#123; fplan.time&#125;&#125;***&#123;&#123; fplan.plan &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">                                                        </span><br><span class=\"line\">                     &#123;% endfor %&#125;</span><br><span class=\"line\">                 &lt;/ul&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=\"note warning\"&gt;</span><br><span class=\"line\">                    &lt;h2 id=\"待办事项\"&gt;&lt;a href=\"#待办事项\" class=\"headerlink\" title=\"待办事项\"&gt;&lt;/a&gt;待办事项&lt;/h2&gt;</span><br><span class=\"line\">                    &lt;<span class=\"selector-tag\">ul</span>&gt;</span><br><span class=\"line\">                    &#123;% for uplan in theme<span class=\"selector-class\">.uplans</span> %&#125;</span><br><span class=\"line\">                        &lt;li&gt;&#123;&#123; uplan.plan &#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">                                                        </span><br><span class=\"line\">                     &#123;% endfor %&#125;</span><br><span class=\"line\">                 &lt;/ul&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &#123;&#123; page<span class=\"selector-class\">.content</span> &#125;&#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;##########################&#125;</span><br><span class=\"line\">  &#123;### END ABOUT BLOCK ###&#125;</span><br><span class=\"line\">  &#123;##########################&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-page-swig\"><a href=\"#4-修改-page-swig\" class=\"headerlink\" title=\"4. 修改 page.swig\"></a>4. 修改 page.swig</h2><p> 修改 <code>/themes/next/layout/page.swig</code> 文件，在开头的 <code>block title</code> 内部 </p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">#&#125;&#123;% elif page.type === \"tags\" and not page.title %&#125;&#123;#</span><br><span class=\"line\">    #&#125;&#123;&#123; __('title.tag') + page_title_suffix &#125;&#125;&#123;#</span><br></pre></td></tr></table></figure>\n\n<p> 这个位置下添加代码： </p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 关于自己<span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">#&#125;&#123;% elif page.type === 'about' and not page.title %&#125;&#123;#</span><br><span class=\"line\">  #&#125;&#123;&#123; __('title.about') + page_title_suffix &#125;&#125;&#123;#</span><br></pre></td></tr></table></figure>\n\n<p> 效果如下： <a href=\"https://imgchr.com/i/lTyNcT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/12/lTyNcT.md.png\" alt=\"lTyNcT.md.png\"></a></p>\n<h2 id=\"5-引入-about-swig\"><a href=\"#5-引入-about-swig\" class=\"headerlink\" title=\"5. 引入 about.swig\"></a>5. 引入 about.swig</h2><p> 接着在 <code>/themes/next/layout/page.swig</code> 中 <code>PAGE BODY</code> 内部，引入刚才新建的 <code>page.swig</code> </p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!--</span> <span class=\"string\">关于自己--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&#123;%</span> <span class=\"string\">elif page.type === 'about' %&#125;</span></span><br><span class=\"line\">\t<span class=\"meta\">&#123;%</span> <span class=\"string\">include 'about.swig' %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> 比如我是在 :</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#123;%</span> <span class=\"string\">elif page.type === 'categories' %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> 这个<code>if</code>下追加的： <a href=\"https://imgchr.com/i/lTybgf\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/12/lTybgf.md.png\" alt=\"lTybgf.md.png\"></a></p>\n<p> 到这里就完成页面样式的配置了 .</p>\n<h2 id=\"6-配置待办事项和已更新事项\"><a href=\"#6-配置待办事项和已更新事项\" class=\"headerlink\" title=\"6.配置待办事项和已更新事项\"></a>6.配置待办事项和已更新事项</h2><p>在<code>/next/_config.yml</code>中最后添加如下内容</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#已办事项</span></span><br><span class=\"line\"><span class=\"attr\">fplans</span>: <span class=\"string\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">-</span> <span class=\"string\">time: 2019.12.31</span></span><br><span class=\"line\">  <span class=\"attr\">plan</span>: <span class=\"string\">博客初始化</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#未办事项</span></span><br><span class=\"line\"><span class=\"attr\">uplans</span>: <span class=\"string\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">-</span> <span class=\"string\">plan: 关于友链和关于界面的博客</span></span><br><span class=\"line\"><span class=\"meta\">-</span> <span class=\"string\">plan: 网站运行时间</span></span><br></pre></td></tr></table></figure>\n\n<p>原模板借鉴<a href=\"https://tding.top/about/\" target=\"_blank\" rel=\"noopener\">该博客的界面</a>。</p>\n","categories":["建站"],"tags":["hexo","next"]},{"title":"博客优化之创建友链界面","url":"/posts/fa648344/","content":"<p>​    Next 的友链，默认是在主题配置文件中 <strong>links</strong> 下添加，当链接变多以后，侧栏页面的排版很不美观，这时候就需要给友链新增一个单独的页面了，下面说一下具体步骤。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-新增-links-页面\"><a href=\"#1-新增-links-页面\" class=\"headerlink\" title=\"1.    新增 links 页面\"></a>1.    新增 links 页面</h2><p>在控制台使用命令创建：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hexo</span> <span class=\"string\">new page links</span></span><br></pre></td></tr></table></figure>\n\n<p>也可在博客根目录 /source 下手动创建 links 文件夹和里边的 index.md 文件</p>\n<p>然后在博客根目录 /source 下会生成一个 links 文件夹，打开其中的 index.md 文件，在头部写入 <code>type = “links”，如下：</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title</span>: <span class=\"string\">友情链接</span></span><br><span class=\"line\"><span class=\"attr\">date</span>: <span class=\"string\">2019-08-11 15:34:16</span></span><br><span class=\"line\"><span class=\"attr\">type</span>: <span class=\"string\">\"links\"</span></span><br></pre></td></tr></table></figure>\n\n<p>如果需要关闭这个页面的评论的话，可以设置如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">---</span></span><br><span class=\"line\"><span class=\"attr\">title</span>: <span class=\"string\">友情链接</span></span><br><span class=\"line\"><span class=\"attr\">date</span>: <span class=\"string\">2019-08-11 15:34:16</span></span><br><span class=\"line\"><span class=\"attr\">type</span>: <span class=\"string\">\"links\"</span></span><br><span class=\"line\"><span class=\"attr\">comments</span>: <span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-配置-menu\"><a href=\"#2-配置-menu\" class=\"headerlink\" title=\"2.    配置 menu\"></a>2.    配置 menu</h2><p>主题配置文件中<code>menu</code>下添加：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links</span>: <span class=\"string\">/links/|| link</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>/themes/next/languages/zh-Hans.yml</code> 文件中 <code>menu</code> 下增加中文描述</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">links</span>: <span class=\"string\">友链</span></span><br></pre></td></tr></table></figure>\n\n<p>做完这些工作，接下来就是要增加友链页面的样式了</p>\n<h2 id=\"3-新增-links-swig-页\"><a href=\"#3-新增-links-swig-页\" class=\"headerlink\" title=\"3.    新增 links.swig 页\"></a>3.    新增 links.swig 页</h2><p>在 <code>/themes/next/layout/</code> 新建 <code>links.swig</code>，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &#123;######################&#125;</span><br><span class=\"line\">  &#123;### LINKS BLOCK ###&#125;</span><br><span class=\"line\">  &#123;######################&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div id&#x3D;&quot;links&quot;&gt;</span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            #links&#123;</span><br><span class=\"line\">               margin-top: 5rem;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            .links-content&#123;</span><br><span class=\"line\">                margin-top:1rem;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            .link-navigation::after &#123;</span><br><span class=\"line\">                content: &quot; &quot;;</span><br><span class=\"line\">                display: block;</span><br><span class=\"line\">                clear: both;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            .card &#123;</span><br><span class=\"line\">                width: 300px;</span><br><span class=\"line\">                font-size: 1rem;</span><br><span class=\"line\">                padding: 10px 20px;</span><br><span class=\"line\">                border-radius: 4px;</span><br><span class=\"line\">                transition-duration: 0.15s;</span><br><span class=\"line\">                margin-bottom: 1rem;</span><br><span class=\"line\">                display:flex;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card:nth-child(odd) &#123;</span><br><span class=\"line\">                float: left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card:nth-child(even) &#123;</span><br><span class=\"line\">                float: right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card:hover &#123;</span><br><span class=\"line\">                transform: scale(1.1);</span><br><span class=\"line\">                box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card a &#123;</span><br><span class=\"line\">                border:none;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card .ava &#123;</span><br><span class=\"line\">                width: 3rem!important;</span><br><span class=\"line\">                height: 3rem!important;</span><br><span class=\"line\">                margin:0!important;</span><br><span class=\"line\">                margin-right: 1em!important;</span><br><span class=\"line\">                border-radius:4px;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card .card-header &#123;</span><br><span class=\"line\">                font-style: italic;</span><br><span class=\"line\">                overflow: hidden;</span><br><span class=\"line\">                width: 236px;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card .card-header a &#123;</span><br><span class=\"line\">                font-style: normal;</span><br><span class=\"line\">                color: #2bbc8a;</span><br><span class=\"line\">                font-weight: bold;</span><br><span class=\"line\">                text-decoration: none;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card .card-header a:hover &#123;</span><br><span class=\"line\">                color: #d480aa;</span><br><span class=\"line\">                text-decoration: none;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .card .card-header .info &#123;</span><br><span class=\"line\">                font-style:normal;</span><br><span class=\"line\">                color:#a3a3a3;</span><br><span class=\"line\">                font-size:14px;</span><br><span class=\"line\">                min-width: 0;</span><br><span class=\"line\">                text-overflow: ellipsis;</span><br><span class=\"line\">                overflow: hidden;</span><br><span class=\"line\">                white-space: nowrap;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;&#x2F;style&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;links-content&quot;&gt;</span><br><span class=\"line\">            &lt;div class&#x3D;&quot;link-navigation&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;% for link in theme.mylinks %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &lt;div class&#x3D;&quot;card&quot;&gt;</span><br><span class=\"line\">                        &lt;img class&#x3D;&quot;ava&quot; src&#x3D;&quot;&#123;&#123; link.avatar &#125;&#125;&quot;&#x2F;&gt;</span><br><span class=\"line\">                        &lt;div class&#x3D;&quot;card-header&quot;&gt;</span><br><span class=\"line\">                           &lt;div&gt;</span><br><span class=\"line\">                              &lt;a href&#x3D;&quot;&#123;&#123; link.site &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt; &#123;&#123; link.nickname &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class=\"line\">                              &lt;a href&#x3D;&quot;&#123;&#123; link.site &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;span class&#x3D;&quot;focus-links&quot;&gt;关注&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;</span><br><span class=\"line\">                           &lt;&#x2F;div&gt;</span><br><span class=\"line\">                           &lt;div class&#x3D;&quot;info&quot;&gt;&#123;&#123; link.info &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\">                        &lt;&#x2F;div&gt;</span><br><span class=\"line\">                    &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;% endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">            &#123;&#123; page.content &#125;&#125;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;##########################&#125;</span><br><span class=\"line\">  &#123;### END LINKS BLOCK ###&#125;</span><br><span class=\"line\">  &#123;##########################&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-page-swig\"><a href=\"#4-修改-page-swig\" class=\"headerlink\" title=\"4.    修改 page.swig\"></a>4.    修改 page.swig</h2><p>修改 <code>/themes/next/layout/page.swig</code> 文件，在开头的 <code>block title</code> 内部</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#&#125;&#123;% elif page.type === \"tags\" and not page.title %&#125;&#123;#</span></span><br><span class=\"line\"><span class=\"comment\">    #&#125;&#123;&#123; __('title.tag') + page_title_suffix &#125;&#125;&#123;#</span></span><br></pre></td></tr></table></figure>\n\n<p>这个位置下添加代码：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!--</span> <span class=\"string\">友情链接--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&#125;&#123;% elif page.type === 'links' and not page.title %&#125;&#123;#</span></span><br><span class=\"line\"><span class=\"comment\">  #&#125;&#123;&#123; __('title.links') + page_title_suffix &#125;&#125;&#123;#</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><a href=\"https://s2.ax1x.com/2019/09/07/n1Q6RH.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/09/07/n1Q6RH.png\" alt=\"img\"></a></p>\n<h2 id=\"5-引入-links-swig\"><a href=\"#5-引入-links-swig\" class=\"headerlink\" title=\"5.    引入 links.swig\"></a>5.    引入 links.swig</h2><p>接着在 <code>/themes/next/layout/page.swig</code> 中 <code>PAGE BODY</code> 内部，引入刚才新建的 <code>page.swig</code> :</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!--</span> <span class=\"string\">友情链接--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&#123;%</span> <span class=\"string\">elif page.type === 'links' %&#125;</span></span><br><span class=\"line\">    <span class=\"meta\">&#123;%</span> <span class=\"string\">include 'links.swig' %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>比如我是在</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#123;%</span> <span class=\"string\">elif page.type === 'categories' %&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个<code>if</code>下追加的：</p>\n<p><a href=\"https://s2.ax1x.com/2019/09/07/n1MvPe.png\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/09/07/n1MvPe.png\" alt=\"n1MvPe.png\"></a></p>\n<p>到这里就完成页面样式的配置了。</p>\n<h2 id=\"6-配置友链\"><a href=\"#6-配置友链\" class=\"headerlink\" title=\"6.    配置友链\"></a>6.    配置友链</h2><p>接下来，在 <code>/themes/next/_config.yml</code> 文件中配置友链，末尾处新增 <code>mylinks</code> ，如下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mylinks</span>:<span class=\"string\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">-</span> <span class=\"string\">nickname: Leaf's Blog</span></span><br><span class=\"line\">  <span class=\"attr\">avatar</span>: <span class=\"string\">https://www.liaofuzhan.com/images/beichen.png</span></span><br><span class=\"line\">  <span class=\"attr\">site</span>: <span class=\"string\">https://www.liaofuzhan.com</span></span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"string\">因心造境，风云由我！</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">-</span> <span class=\"string\">nickname: Jomeswang's Blog</span></span><br><span class=\"line\">  <span class=\"attr\">avatar</span>: <span class=\"string\">https://s2.ax1x.com/2020/01/01/lJeqtP.jp</span></span><br><span class=\"line\">  <span class=\"attr\">site</span>: <span class=\"string\">http://kjtpeh.coding-pages.com/</span></span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"string\">万物归一</span></span><br></pre></td></tr></table></figure>\n\n<p>这里是配置了两个友链，多个的配置方式相同。</p>\n","categories":["建站"],"tags":["hexo","next"]},{"title":"博客运用Hexo-Next主题美化（下）","url":"/posts/42fa127b/","content":"<p>​                                                                                                –转载链接见最下方</p>\n<h2 id=\"1，前言\"><a href=\"#1，前言\" class=\"headerlink\" title=\"1，前言\"></a>1，前言</h2><p>​        终于要到关于建站的倒数第二篇文章了，有点心累！为自己加油鼓气！！</p>\n<p>​        在建好自己的静态博客之后，是不是发现有点问题，如<code>GitHub</code>的加载速度过慢，没有访问量的等交互式问题，此篇就是来完善这些不足的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2，博客内交互\"><a href=\"#2，博客内交互\" class=\"headerlink\" title=\"2，博客内交互\"></a>2，博客内交互</h2><h3 id=\"2-1，在线评论\"><a href=\"#2-1，在线评论\" class=\"headerlink\" title=\"2.1，在线评论\"></a>2.1，在线评论</h3><p>​            设置效果：<br><img src=\"http://photo.jomeswang.top/20200410190922.png\" alt=\"\"></p>\n<p>设置方法：</p>\n<ol>\n<li><p>首先要先去<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>注册一个帐号.然后再创建一个应用.<br><img src=\"http://photo.jomeswang.top/20200410191013.png\" alt=\"\"><br>进入应用-&gt;设置-&gt;应用key,获取你的<code>appid</code> 和 <code>appkey</code> 如图所示：<br><img src=\"http://photo.jomeswang.top/20200410191207.png\" alt=\"\"></p>\n</li>\n<li><p>拿到<code>appid</code>和<code>appkey</code>之后，打开<code>themes/next/_config.yml</code>主题配置文件，查找<code>valine</code>，填入<code>appid</code> 和 <code>appkey</code><br>我的配置:</p>\n</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">valine:</span>  </span><br><span class=\"line\">\t<span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">\t<span class=\"attr\">appid:</span>  <span class=\"string\">your</span> <span class=\"string\">app</span> <span class=\"string\">id</span>  </span><br><span class=\"line\">\t<span class=\"attr\">appkey:</span> <span class=\"string\">your</span> <span class=\"string\">app</span> <span class=\"string\">key</span> </span><br><span class=\"line\">\t<span class=\"attr\">notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki  </span></span><br><span class=\"line\">\t<span class=\"attr\">verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code  </span></span><br><span class=\"line\">\t<span class=\"attr\">placeholder:</span> <span class=\"string\">ヾﾉ≧∀≦)o来啊，快活啊!</span>   </span><br><span class=\"line\">\t<span class=\"attr\">guest_info:</span> <span class=\"string\">nick,mail,link</span>  </span><br><span class=\"line\">\t<span class=\"attr\">pageSize:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><p>最后！记得在<code>Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名</code> 把你的域名加进去．</p>\n<p>刷新一下~ 是不是就能看到评论框了？还可以设置邮箱提醒哦<a href=\"https://hexo.jomeswang.top/posts/84c51fe9/\">看这里</a></p>\n</li>\n</ol>\n<h3 id=\"2-2，字数统计，访客统计\"><a href=\"#2-2，字数统计，访客统计\" class=\"headerlink\" title=\"2.2，字数统计，访客统计\"></a>2.2，字数统计，访客统计</h3><h4 id=\"2-2-1，不蒜子统计功能\"><a href=\"#2-2-1，不蒜子统计功能\" class=\"headerlink\" title=\"2.2.1，不蒜子统计功能\"></a>2.2.1，不蒜子统计功能</h4><p>​            <code>NexT</code>主题集成了不蒜子统计功能,以下为我的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">copy#</span> <span class=\"string\">Show</span> <span class=\"string\">PV/UV</span> <span class=\"string\">of</span> <span class=\"string\">the</span> <span class=\"string\">website/page</span> <span class=\"string\">with</span> <span class=\"string\">busuanzi.</span></span><br><span class=\"line\"><span class=\"comment\"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi_count:</span>  </span><br><span class=\"line\">\t<span class=\"comment\"># count values only if the other configs are false  </span></span><br><span class=\"line\">\t<span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">\t<span class=\"comment\"># custom uv span for the whole site  </span></span><br><span class=\"line\">\t<span class=\"attr\">site_uv:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">\t<span class=\"attr\">site_uv_header:</span> <span class=\"string\">&lt;i</span> <span class=\"string\">class=\"fa</span> <span class=\"string\">fa-user\"&gt;&lt;/i&gt;</span>  </span><br><span class=\"line\">\t<span class=\"attr\">site_uv_footer:</span> <span class=\"string\">人次</span> </span><br><span class=\"line\">    <span class=\"comment\"># custom pv span for the whole site  </span></span><br><span class=\"line\">    <span class=\"attr\">site_pv:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">site_pv_header:</span> <span class=\"string\">&lt;i</span> <span class=\"string\">class=\"fa</span> <span class=\"string\">fa-eye\"&gt;&lt;/i&gt;</span>  </span><br><span class=\"line\">    <span class=\"attr\">site_pv_footer:</span> <span class=\"string\">次</span>  </span><br><span class=\"line\">    <span class=\"comment\"># custom pv span for one page only  </span></span><br><span class=\"line\">    <span class=\"attr\">page_pv:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">page_pv_header:</span> <span class=\"string\">&lt;i</span> <span class=\"string\">class=\"fa</span> <span class=\"string\">fa-file-o\"&gt;&lt;/i&gt;</span>  </span><br><span class=\"line\">    <span class=\"attr\">page_pv_footer:</span> <span class=\"string\">次</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当<code>enable: true</code>时，代表开启全局开关。若s<code>ite_uv、site_pv、page_pv</code>的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。<br>当<code>site_uv: true</code>时，代表在页面底部显示站点的UV值。<br>当<code>site_pv: true</code>时，代表在页面底部显示站点的PV值。<br>当<code>page_pv: true</code>时，代表在文章页面的标题下显示该页面的PV值（阅读数）。<br><code>site_uv_header</code>和<code>site_uv_footer</code>这几个为自定义样式配置，相关的值留空时将不显示，可以使用（带特效的）font-awesome。</li>\n</ul>\n<ul>\n<li>如果你的NEXT的版本是按照上述版本安装的，还需设置<code>/themes/next/layout/_third-party/analytics/busuanzi-counter.swig/</code>中的第三行中的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>为（更改其中的域名）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script async src&#x3D;&quot;https:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>​            [2018/9/19] 更新</p>\n<p>​                    Next主题已经更新至<code>6.X</code>版本,不蒜子统计插件配置有变化</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">文件：主题配置文件_config.ymlcopy</span></span><br><span class=\"line\"><span class=\"comment\"># Show Views/Visitors of the website/page with busuanzi.</span></span><br><span class=\"line\"><span class=\"comment\"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi_count:</span>  </span><br><span class=\"line\">    <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">total_visitors:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">total_visitors_icon:</span> <span class=\"string\">user</span>  </span><br><span class=\"line\">    <span class=\"attr\">total_views:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">total_views_icon:</span> <span class=\"string\">eye</span>  </span><br><span class=\"line\">    <span class=\"attr\">post_views:</span> <span class=\"literal\">false</span>  </span><br><span class=\"line\">    <span class=\"attr\">post_views_icon:</span> <span class=\"string\">eye</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>效果图：<br><img src=\"http://photo.jomeswang.top/20200410190028.png\" alt=\"\"></p>\n<h4 id=\"2-2-2-LeanCloud阅读次数统计\"><a href=\"#2-2-2-LeanCloud阅读次数统计\" class=\"headerlink\" title=\"2.2.2,LeanCloud阅读次数统计\"></a>2.2.2,LeanCloud阅读次数统计</h4><p>​            <code>[2018/9/19] 更新</code></p>\n<ol>\n<li><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5></li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-symbols-count-time</span> <span class=\"string\">--save</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>文件：站点配置文件`_config.yml` </code></pre><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">time:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_symbols:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_time:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>文件：主题配置文件`_config.yml` </code></pre><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">symbols_count_time:</span></span><br><span class=\"line\">  <span class=\"attr\">separated_meta:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">item_text_post:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">item_text_total:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">awl:</span> <span class=\"number\">4</span> <span class=\"comment\"># 平均单词长度（单词的计数）。默认值:4。CN≈2 EN≈5 俄文≈6</span></span><br><span class=\"line\">  <span class=\"attr\">wpm:</span> <span class=\"number\">275</span> <span class=\"comment\"># 每分钟的单词。默认值:275。缓慢≈200 正常≈275 快≈350</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更多请<a href=\"http://theme-next.iissnan.com/third-party-services.html#share-system\" target=\"_blank\" rel=\"noopener\">点击这里</a><br>next升级6.X后，页面LeanCloud访问统计提示<code>Counter not initialized! See more at console err msg.</code>的问题，请查看<a href=\"https://leaferx.online/2018/02/11/lc-security/#5acc7b329f54542bb2384a7e\" target=\"_blank\" rel=\"noopener\">《Leancloud访客统计插件重大安全漏洞修复指南》</a></li>\n</ul>\n<hr>\n<ol>\n<li><h5 id=\"首先介绍Lean-Cloud\"><a href=\"#首先介绍Lean-Cloud\" class=\"headerlink\" title=\"首先介绍Lean Cloud:\"></a>首先介绍Lean Cloud:</h5></li>\n</ol>\n<blockquote>\n<p><a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>（aka. AVOS Cloud）提供一站式后端云服务，从数据存储、实时聊天、消息推送到移动统计，涵盖应用开发的多方面后端需求。</p>\n</blockquote>\n<p>​        相比不蒜子的统计，LeanCloud的文章阅读量统计更加稳定靠谱，所以本人也把网站的文章内统计改为LeanCloud的了。</p>\n<ol start=\"2\">\n<li><h5 id=\"配置LeanCloud\"><a href=\"#配置LeanCloud\" class=\"headerlink\" title=\"配置LeanCloud\"></a>配置<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a></h5><p>在注册完成LeanCloud帐号并验证邮箱之后，我们就可以登录我们的LeanCloud帐号，进行一番配置之后拿到<code>AppID</code>以及<code>AppKey</code>这两个参数即可正常使用文章阅读量统计的功能了。</p>\n<p>2.1 创建应用</p>\n<p>2.2 我们新建一个应用来专门进行博客的访问统计的数据操作。首先，打开控制台：在出现的界面点击<code>创建应用</code>：    在接下来的页面，新建的应用名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的:这里为了演示的方便，我新创建一个取名为test的应用。创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置：</p>\n<p>2.3 在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的齿轮图标，新建Class：<br>在弹出的选项中选择<code>创建Class</code>来新建Class用来专门保存我们博客的文章访问量等数据:<br>点击<code>创建Class</code>之后，理论上来说名字可以随意取名，只要你交互代码做相应的更改即可，但是为了保证我们前面对NexT主题的修改兼容，此处的<strong>新建Class名字必须为<code>Counter</code></strong>:</p>\n</li>\n</ol>\n<ul>\n<li><p>由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择<code>无限制</code>。</p>\n<p>2.3 创建完成之后，左侧数据栏应该会多出一栏名为<code>Counter</code>的栏目，这个时候我们点击顶部的设置，切换到test应用的操作界面:<br>在弹出的界面中，选择左侧的<code>应用Key</code>选项，即可发现我们创建应用的<code>AppID</code>以及<code>AppKey</code>，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了:</p>\n<p>2.4 复制<code>AppID</code>以及<code>AppKey</code>并在NexT主题的<code>_config.yml</code>文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">leancloud_visitors:</span>  \t</span><br><span class=\"line\">\t<span class=\"attr\">enable:</span> <span class=\"literal\">true</span>   </span><br><span class=\"line\">\t<span class=\"attr\">app_id:</span> <span class=\"string\">joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span>   </span><br><span class=\"line\">\t<span class=\"attr\">app_key:</span> <span class=\"string\">E9UJsJpw1omCHuS22PdSpKoh</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><h5 id=\"重新生成部署Hexo博客，\"><a href=\"#重新生成部署Hexo博客，\" class=\"headerlink\" title=\"重新生成部署Hexo博客，\"></a>重新生成部署Hexo博客，</h5><p>这时应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的<code>发布日期</code>以及<code>文章的标题</code>，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><h5 id=\"后台管理\"><a href=\"#后台管理\" class=\"headerlink\" title=\"后台管理:\"></a>后台管理:</h5><p>当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们LeanCloud对应的应用的<code>Counter</code>表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的<code>Counter</code>表中。</p>\n</li>\n</ol>\n<p><img src=\"http://photo.jomeswang.top/20200410191401.png\" alt=\"\"></p>\n<p>​        我们可以修改其中的<code>time</code>字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。</p>\n<ul>\n<li><code>url</code>字段被当作唯一<code>ID</code>来使用，因此如果你不知道带来的后果的话请不要修改。</li>\n<li><code>title</code>字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。</li>\n<li>其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。</li>\n</ul>\n<ol start=\"5\">\n<li><h5 id=\"Web安全\"><a href=\"#Web安全\" class=\"headerlink\" title=\"Web安全:\"></a>Web安全:</h5><p>因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。</p>\n<p>选择应用的设置的<code>安全中心</code>选项卡:在<code>Web 安全域名</code>中填入我们自己的博客域名，来确保数据调用的安全:</p>\n</li>\n</ol>\n<h2 id=\"3，hexo-next-添加代码块复制功能\"><a href=\"#3，hexo-next-添加代码块复制功能\" class=\"headerlink\" title=\"3，hexo-next 添加代码块复制功能\"></a>3，hexo-next 添加代码块复制功能</h2><ol>\n<li><h3 id=\"下载-clipboard-js\"><a href=\"#下载-clipboard-js\" class=\"headerlink\" title=\"下载 clipboard.js\"></a>下载 clipboard.js</h3><p>下载第三方插件：<a href=\"https://github.com/zenorocha/clipboard.js\" target=\"_blank\" rel=\"noopener\">clipboard.js</a>, 或者<a href=\"https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js\" target=\"_blank\" rel=\"noopener\">直接下载</a> (右键另存为)。保存文件到 <code>theme/next/source/js/src</code> 下。</p>\n</li>\n<li><h3 id=\"clipboard的使用\"><a href=\"#clipboard的使用\" class=\"headerlink\" title=\"clipboard的使用\"></a>clipboard的使用</h3><p>也是在 <code>theme/next/source/js/src</code> 目录下，创建 <code>clipboard-use.js</code>，添加内容如下：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*页面载入完成后，创建复制按钮*/</span></span><br><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, t, a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"comment\">/* code */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> initCopyCode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> copyHtml = <span class=\"string\">''</span>;</span><br><span class=\"line\">    copyHtml += <span class=\"string\">'&lt;button class=\"btn-copy\" data-clipboard-snippet=\"\"&gt;'</span>;</span><br><span class=\"line\">    copyHtml += <span class=\"string\">'&lt;span&gt;复制&lt;/span&gt;'</span>;</span><br><span class=\"line\">    copyHtml += <span class=\"string\">'&lt;/button&gt;'</span>;</span><br><span class=\"line\">    $(<span class=\"string\">\".highlight .code pre\"</span>).before(copyHtml);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClipboardJS(<span class=\"string\">'.btn-copy'</span>, &#123;</span><br><span class=\"line\">        target: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">trigger</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> trigger.nextElementSibling;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  initCopyCode();</span><br><span class=\"line\">&#125;(<span class=\"built_in\">window</span>, <span class=\"built_in\">document</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​    在 <code>theme/next/source/css/_custom/custom.styl</code> 样式中添加如下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">//代码块复制按钮</span><br><span class=\"line\"><span class=\"selector-class\">.highlight</span>&#123;</span><br><span class=\"line\">  //方便copy代码按钮（btn-copy）的定位</span><br><span class=\"line\">  <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">relative</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-copy</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(#fcfcfc,#eee);</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: opacity .<span class=\"number\">3s</span> ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">-o-transition</span>: opacity .<span class=\"number\">3s</span> ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: opacity .<span class=\"number\">3s</span> ease-in-out;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span> <span class=\"number\">6px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-copy</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.highlight</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.btn-copy</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>在 <code>themes/next/layout/_layout.swig</code> 文件中引用（<code>/body</code>）之前添加：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 代码块复制功能 --&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/src/clipboard.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span>  </span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/src/clipboard-use.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>​    或者将 <code>clipboard.min.js</code> 和 <code>clipboard-use.js</code> 保存到类似七牛云上，通过引用也可（<strong>推荐</strong>）.</p>\n<h2 id=\"4，后记\"><a href=\"#4，后记\" class=\"headerlink\" title=\"4，后记\"></a>4，后记</h2><p>​        没想到这篇写了这么长还没写完交互式的操作，那么我就放在下一篇继续写吧。</p>\n<p>​        预告一下下一篇的精彩内容：coding page 分流和一些不足的优化哦！        加油，奥勒给！！</p>\n","categories":["建站"],"tags":["hexo","next","webinit","leancloud"]},{"title":"博客运用Hexo-Next主题美化（中）","url":"/posts/604c19d3/","content":"<p>​                                                                                        ——转载链接见最下方</p>\n<h2 id=\"1，前言\"><a href=\"#1，前言\" class=\"headerlink\" title=\"1，前言\"></a>1，前言</h2><p>​    大家是不是因为那个博客宠物才找到这篇博客的呢！！好，现在我为大家揭开谜底！为你们开启博客的精彩世界！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2，炫酷特效\"><a href=\"#2，炫酷特效\" class=\"headerlink\" title=\"2，炫酷特效\"></a>2，炫酷特效</h2><h3 id=\"2-1，博客小宠物\"><a href=\"#2-1，博客小宠物\" class=\"headerlink\" title=\"2.1，博客小宠物\"></a>2.1，博客小宠物</h3><p>​                效果如图：<a href=\"https://imgchr.com/i/lNWCkT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/03/lNWCkT.md.png\" alt=\"lNWCkT.md.png\"></a></p>\n<p>​                1.输入如下命令获取  <code>live2d</code>  ：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">npm</span> install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n\n<p>​                2 输入以下命令，下载相应的模型，将  <code>packagename</code>  更换成模型名称即可，更多模型选择请<a href=\"https://github.com/xiazeyu/live2d-widget-models\" target=\"_blank\" rel=\"noopener\">点击此处</a>，各个模型的预览请<a href=\"https://huaji8.top/post/live2d-plugin-2.0/\" target=\"_blank\" rel=\"noopener\">访问原作者的博客</a> .</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install packagename</span><br></pre></td></tr></table></figure>\n\n<p>​                3.打开站点目录下的 <code>_config.yml</code> 文件，在最末尾添加如下代码：</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    scriptFrom: local</span><br><span class=\"line\">    model: </span><br><span class=\"line\">    use: live2d-widget-model-haruto #模型选择</span><br><span class=\"line\">    display: </span><br><span class=\"line\">    position: right  #模型位置</span><br><span class=\"line\">    width: <span class=\"number\">150</span>       #模型宽度</span><br><span class=\"line\">    height: <span class=\"number\">300</span>      #模型高度</span><br><span class=\"line\">    mobile: </span><br><span class=\"line\">    show: false      #是否在手机端显示</span><br><span class=\"line\">    react:</span><br><span class=\"line\">    opacity: <span class=\"number\">0.7</span>       #设置透明度</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2，点击爱心效果\"><a href=\"#2-2，点击爱心效果\" class=\"headerlink\" title=\"2.2，点击爱心效果\"></a>2.2，点击爱心效果</h3><ol>\n<li><p>在 <code>themes\\hexo-theme-spfk\\source\\js</code> 下新建文件 <code>love.js</code>，在 <code>love.js</code> 文件中添加以下代码： </p>\n<p>打开（<a href=\"https://github.com/jomeswang/mid.git\" target=\"_blank\" rel=\"noopener\">点此</a>）获取其中<code>love.js</code>中的代码</p>\n</li>\n<li><p>​    在 <code>themes\\hexo-theme-spfk\\layout\\layout.ejs</code> 文件末尾添加以下代码： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/love.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>3.完成以上操作后，当我们点击鼠标的时候就可以看见爱心的特效了 </p>\n</li>\n</ol>\n<h3 id=\"2-3，点击烟花\"><a href=\"#2-3，点击烟花\" class=\"headerlink\" title=\"2.3，点击烟花\"></a>2.3，点击烟花</h3><ol>\n<li>在 <code>\\themes\\material-x\\source\\js</code> 目录下新建一个 <code>fireworks.js</code> 的文件，里面写入以下代码： </li>\n</ol>\n<ol start=\"2\">\n<li><p>然后在 <code>\\themes\\material-x\\layout\\layout.ejs</code> 文件中写入以下代码： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;canvas <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"fireworks\"</span> style=<span class=\"string\">\"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span> </span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"//cdn.bootcss.com/animejs/2.2.0/anime.min.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span> </span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/fireworks.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"2-4，-添加鼠标点击显示字体效果\"><a href=\"#2-4，-添加鼠标点击显示字体效果\" class=\"headerlink\" title=\"2.4， 添加鼠标点击显示字体效果\"></a>2.4， 添加鼠标点击显示字体效果</h3><ol>\n<li><p>在 <code>themes/hexo-theme-spfk/source/js</code> 下新建文件 <code>click_show_text.js</code>，在 <code>click_show_text.js</code> 文件中添加以下代码： </p>\n<p>​            打开（<a href=\"https://github.com/jomeswang/mid.git\" target=\"_blank\" rel=\"noopener\">点此</a>）获取其中 <code>click_show_text.js</code> 中的代码</p>\n</li>\n</ol>\n<p>​    2.其中的社会主义核心价值观可以根据你自己的创意替换为其他文字</p>\n<p>如果想要每次点击显示的文字为不同颜色，可以将其中 <code>color</code> 值进行如下更改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"color\"</span>: <span class=\"string\">\"rgb(\"</span> + ~~(<span class=\"number\">255</span> * <span class=\"built_in\">Math</span>.random()) + <span class=\"string\">\",\"</span> + ~~(<span class=\"number\">255</span> * <span class=\"built_in\">Math</span>.random()) + <span class=\"string\">\",\"</span> + ~~(<span class=\"number\">255</span> * <span class=\"built_in\">Math</span>.random()) + <span class=\"string\">\")\"</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>然后在 <code>themes\\hexo-theme-spfk\\layout\\layout.ejs</code> 文件末尾添加以下代码： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--单击显示文字--&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/click_show_text.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/ltLxfI\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/02/ltLxfI.md.png\" alt=\"ltLxfI.md.png\"></a></p>\n</li>\n</ol>\n<h3 id=\"2-5，添加彩色滚动变换字体\"><a href=\"#2-5，添加彩色滚动变换字体\" class=\"headerlink\" title=\"2.5，添加彩色滚动变换字体\"></a>2.5，添加彩色滚动变换字体</h3><p>​            打开（<a href=\"https://github.com/jomeswang/mid.git\" target=\"_blank\" rel=\"noopener\">点此</a>）获取其中 <strong>添加彩色滚动变换字体.js</strong> 中的代码，将其复制到自己想要有字的地方。<a href=\"https://blog.csdn.net/weixin_34194087/article/details/94545902\" target=\"_blank\" rel=\"noopener\">点击此处查看</a>next主题的目录框架。</p>\n<h3 id=\"2-6，浏览器网页标题恶搞\"><a href=\"#2-6，浏览器网页标题恶搞\" class=\"headerlink\" title=\"2.6，浏览器网页标题恶搞\"></a>2.6，浏览器网页标题恶搞</h3><p>​            <strong>当</strong>用户访问你的博客时点击到了其他网页，我们可以恶搞一下网页标题，呼唤用户回来，首先在目录 <code>themes\\material-x\\source\\js</code> 下新建一个 <code>FunnyTitle.js</code> 文件，在里面填写如下代码： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浏览器搞笑标题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> OriginTitle = <span class=\"built_in\">document</span>.title;</span><br><span class=\"line\"><span class=\"keyword\">var</span> titleTime;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'visibilitychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.hidden) &#123;</span><br><span class=\"line\">        $(<span class=\"string\">'[rel=\"icon\"]'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">\"/funny.ico\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.title = <span class=\"string\">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class=\"line\">        clearTimeout(titleTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(<span class=\"string\">'[rel=\"icon\"]'</span>).attr(<span class=\"string\">'href'</span>, <span class=\"string\">\"/favicon.ico\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.title = <span class=\"string\">'(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~'</span> + OriginTitle;</span><br><span class=\"line\">        titleTime = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.title = OriginTitle;</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p> 其中 <code>funny.ico</code> 是用户切换到其他标签后你网站的图标，<code>favicon.ico</code> 是正常图标，然后在 <code>themes\\material-x\\layout\\layout.ejs</code> 文件中添加如下代码： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--浏览器搞笑标题--&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/js/FunnyTitle.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3，背景和网页图标和动画\"><a href=\"#3，背景和网页图标和动画\" class=\"headerlink\" title=\"3，背景和网页图标和动画\"></a>3，背景和网页图标和动画</h2><h3 id=\"3-1，自动更换背景图片\"><a href=\"#3-1，自动更换背景图片\" class=\"headerlink\" title=\"3.1，自动更换背景图片\"></a>3.1，自动更换背景图片</h3><p>​            修改 <code>themes\\next\\source\\css\\ _custom\\custom.styl</code> 文件，添加以下代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"built_in\">url</span>(https://source.unsplash.com/random/<span class=\"number\">1600</span>x900);</span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">    <span class=\"attribute\">background-attachment</span>:fixed;</span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>:<span class=\"number\">50%</span> <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果不喜欢这个网址提供的图片做背景，可以修改<code>url()</code>里面的路径。<code>repeat</code>、<code>attachment</code>、<code>position</code>就是调整图片的位置、不重复出现、不滚动等等。</p>\n</blockquote>\n<h3 id=\"3-2，静态背景\"><a href=\"#3-2，静态背景\" class=\"headerlink\" title=\"3.2，静态背景\"></a>3.2，静态背景</h3><p>​    打开博客根目录 <code>/themes/next/source/css/_custom/custom.styl</code> 文件，编辑如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Custom styles.</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(/images/background.png);</span><br><span class=\"line\">    background-attachment: fixed; // 不随屏幕滚动而滚动</span><br><span class=\"line\">    background-repeat: repeat; // 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺</span><br><span class=\"line\">    background-size: contain; // 等比例铺满屏幕</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将背景图命名为 <code>background.png</code> 并放入主题根目录 <code>source/images</code> 下。</p>\n<h3 id=\"3-3，更换网页图标\"><a href=\"#3-3，更换网页图标\" class=\"headerlink\" title=\"3.3，更换网页图标\"></a>3.3，更换网页图标</h3><p>在 <a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">EasyIcon</a> 中找一张（32*32）的 <code>ico</code> 图标，或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在 <code>/themes/next/source/images</code> 里，并且修改主题配置文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class=\"line\">favicon: /favicon.ico</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4，hexo载入动画效果\"><a href=\"#3-4，hexo载入动画效果\" class=\"headerlink\" title=\"3.4，hexo载入动画效果\"></a>3.4，hexo载入动画效果</h3><p>​        设置方法：<br>编辑<code>themes/netx/_config.yml</code>找到<code>motion</code>,将<code>enable</code>的值，改成<code>true</code></p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use velocity to animate everything.</span></span><br><span class=\"line\">motion:  </span><br><span class=\"line\">\tenable: true  </span><br><span class=\"line\">\tasync: false  </span><br><span class=\"line\">\ttransition:    </span><br><span class=\"line\"><span class=\"comment\">\t# Transition variants:    </span></span><br><span class=\"line\"><span class=\"comment\">\t# fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut    </span></span><br><span class=\"line\"><span class=\"comment\">\t# swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut    </span></span><br><span class=\"line\"><span class=\"comment\">\t# bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut    </span></span><br><span class=\"line\"><span class=\"comment\">\t# slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut    </span></span><br><span class=\"line\"><span class=\"comment\">\t# slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut   </span></span><br><span class=\"line\"><span class=\"comment\">    # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut    </span></span><br><span class=\"line\">    post_block: fadeIn #主页载入效果    </span><br><span class=\"line\">    post_header: bounceRightIn #文章标题载入效果    </span><br><span class=\"line\">    post_body: slideDownIn    </span><br><span class=\"line\">    coll_header: bounceLeftIn    </span><br><span class=\"line\"><span class=\"comment\">    # Only for Pisces | Gemini.    </span></span><br><span class=\"line\">    sidebar: bounceLeftIn #侧边栏载入效果</span><br></pre></td></tr></table></figure>\n\n<p><code>#</code>号里都是载入效果，有时间可以自己多试一试！</p>\n<p>详情请<a href=\"http://itwalking.top/page/a92117.html\" target=\"_blank\" rel=\"noopener\">点击查看</a>动画效果</p>\n<h2 id=\"4，文章内部优化\"><a href=\"#4，文章内部优化\" class=\"headerlink\" title=\"4，文章内部优化\"></a>4，文章内部优化</h2><h3 id=\"4-1，修改-代码块自定义样式\"><a href=\"#4-1，修改-代码块自定义样式\" class=\"headerlink\" title=\"4.1，修改``代码块自定义样式\"></a>4.1，修改``代码块自定义样式</h3><p>​            效果：<img src=\"https://s2.ax1x.com/2020/01/02/lNJci8.png\" alt=\"lNJci8.png\"></p>\n<p>设置方法：<br>打开<code>themes/next/source/css/_custom/custom.styl</code>,向里面加入：(颜色可以自己定义)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// Custom styles</span><br><span class=\"line\"><span class=\"selector-tag\">code</span> &#123;    </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff7600</span>;    </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fbf7f8</span>;    </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 大代码块的自定义样式</span><br><span class=\"line\"><span class=\"selector-class\">.highlight</span>, <span class=\"selector-tag\">pre</span> &#123;    </span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;    </span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.highlight</span>, <span class=\"selector-tag\">code</span>, <span class=\"selector-tag\">pre</span> &#123;    </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d6d6d6</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2，修改文章内链接文本样式\"><a href=\"#4-2，修改文章内链接文本样式\" class=\"headerlink\" title=\"4.2，修改文章内链接文本样式\"></a>4.2，修改文章内链接文本样式</h3><p>​        效果：<a href=\"https://imgchr.com/i/lNYpo6\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/02/lNYpo6.md.png\" alt=\"lNYpo6.md.png\"></a></p>\n<p>设置方法：<br>修改文件<code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加如下<code>css</code>样式，：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>&#123;  </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;  </span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;  </span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;  </span><br><span class=\"line\">    &amp;:hover &#123;    </span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fc6423</span>;    </span><br><span class=\"line\">        <span class=\"selector-tag\">border-bottom</span>: <span class=\"selector-tag\">none</span>;   </span><br><span class=\"line\">        <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fc6423</span>;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中选择<code>.post-body</code>是为了不影响标题，选择<code>p</code>是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>\n<h3 id=\"4-3，主页文章添加阴影效果\"><a href=\"#4-3，主页文章添加阴影效果\" class=\"headerlink\" title=\"4.3，主页文章添加阴影效果\"></a>4.3，主页文章添加阴影效果</h3><p>效果：</p>\n<p><img src=\"https://s2.ax1x.com/2020/01/02/lNtT8U.png\" alt=\"lNtT8U.png\"></p>\n<p>​        设置方法：<br>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面加入：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 主页文章添加阴影效果 </span><br><span class=\"line\"><span class=\"selector-class\">.post</span> &#123;   </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0px</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0px</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, .<span class=\"number\">5</span>);   </span><br><span class=\"line\">    <span class=\"attribute\">-moz-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, .<span class=\"number\">5</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4，文章置顶\"><a href=\"#4-4，文章置顶\" class=\"headerlink\" title=\"4.4，文章置顶\"></a>4.4，文章置顶</h3><p>​        效果：<a href=\"https://imgchr.com/i/lNU86e\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/02/lNU86e.md.png\" alt=\"lNU86e.md.png\"></a></p>\n<p>设置方法：<br>首先安装插件：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">npm</span> <span class=\"selector-tag\">uninstall</span> <span class=\"selector-tag\">hexo-generator-index</span> <span class=\"selector-tag\">--save</span></span><br><span class=\"line\"><span class=\"selector-tag\">npm</span> <span class=\"selector-tag\">install</span> <span class=\"selector-tag\">hexo-generator-index-pin-top</span> <span class=\"selector-tag\">--save</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code>即可。</p>\n<h3 id=\"4-5，结尾添加“本文结束”标记\"><a href=\"#4-5，结尾添加“本文结束”标记\" class=\"headerlink\" title=\"4.5，结尾添加“本文结束”标记\"></a>4.5，结尾添加“本文结束”标记</h3><p>​        设置方法：<br>在路径<code>themes/next/layout/_macro</code>中新建<code>passage-end-tag.swig</code>文件,并添加以下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">\t&#123;% if not is_index %&#125;        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align:center;color: #ccc;font-size:14px;\"</span>&gt;</span>            </span><br><span class=\"line\">        -------------本文结束           </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-paw\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>           </span><br><span class=\"line\">        感谢您的阅读-------------        </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span><br><span class=\"line\">        &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着打开<code>themes/next/layout/_macro/post.swig</code>文件，在<code>post-body</code>之后，<code>post-footer</code>之前添加如下代码,(大概在350行左右的位置)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;  </span><br><span class=\"line\">    &#123;% if not is_index %&#125;    </span><br><span class=\"line\">    \t&#123;% include &#39;passage-end-tag.swig&#39; %&#125;  </span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后打开主题配置文件<code>_config.yml</code>,在末尾添加：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\"><span class=\"selector-tag\">passage_end_tag</span>:  </span><br><span class=\"line\">\t<span class=\"selector-tag\">enabled</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-6，修改结尾-标签\"><a href=\"#4-6，修改结尾-标签\" class=\"headerlink\" title=\"4.6，修改结尾#标签\"></a>4.6，修改结尾#标签</h3><p>​    设置效果：</p>\n<p>​            <a href=\"https://imgchr.com/i/lNdtit\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/02/lNdtit.md.png\" alt=\"lNdtit.md.png\"></a></p>\n<p>​        设置方法：<br>修改模板<code>themes/next/layout/_macro/post.swig</code>搜索<code>rel=”tag”</code>，将后面的<code>#</code>换成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-tag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-7，优化选择的文字样式\"><a href=\"#4-7，优化选择的文字样式\" class=\"headerlink\" title=\"4.7，优化选择的文字样式\"></a>4.7，优化选择的文字样式</h3><p>​    效果：<a href=\"https://imgchr.com/i/lNdzeH\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/02/lNdzeH.md.png\" alt=\"lNdzeH.md.png\"></a></p>\n<p>​        设置方法：<br>打开<code>themes\\next\\source\\css\\_custom\\custom.styl</code>文件，将下面的代码添加进去。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::selection</span> &#123;      </span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">255</span>, <span class=\"number\">241</span>, <span class=\"number\">89</span>);       </span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#555</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5，一些便利的小工具\"><a href=\"#5，一些便利的小工具\" class=\"headerlink\" title=\"5，一些便利的小工具\"></a>5，一些便利的小工具</h2><h3 id=\"5-1，增加阅读百分比并回到顶处\"><a href=\"#5-1，增加阅读百分比并回到顶处\" class=\"headerlink\" title=\"5.1，增加阅读百分比并回到顶处\"></a>5.1，增加阅读百分比并回到顶处</h3><ul>\n<li>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code> ，如下：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Scroll</span> <span class=\"selector-tag\">percent</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">b2t</span> <span class=\"selector-tag\">button</span>  </span><br><span class=\"line\">\t<span class=\"selector-tag\">scrollpercent</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果想把 top 按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code> ，如下：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Back</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">top</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">sidebar</span>  </span><br><span class=\"line\">\t<span class=\"selector-tag\">b2t</span>: <span class=\"selector-tag\">true</span>   </span><br><span class=\"line\"># <span class=\"selector-tag\">Scroll</span> <span class=\"selector-tag\">percent</span> <span class=\"selector-tag\">label</span> <span class=\"selector-tag\">in</span> <span class=\"selector-tag\">b2t</span> <span class=\"selector-tag\">button</span>  </span><br><span class=\"line\">\t<span class=\"selector-tag\">scrollpercent</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2，站内搜索\"><a href=\"#5-2，站内搜索\" class=\"headerlink\" title=\"5.2，站内搜索\"></a>5.2，站内搜索</h3><p>​                设置方法：<br>​        安装<code>hexo-generator-searchdb</code>插件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">npm</span> <span class=\"selector-tag\">install</span> <span class=\"selector-tag\">hexo-generator-searchdb</span> <span class=\"selector-tag\">--save</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>编辑<code>_config.yml</code>站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">search</span>:  </span><br><span class=\"line\">\t<span class=\"selector-tag\">path</span>: <span class=\"selector-tag\">search</span><span class=\"selector-class\">.xml</span>  </span><br><span class=\"line\">\t<span class=\"selector-tag\">field</span>: <span class=\"selector-tag\">post</span>  <span class=\"selector-tag\">format</span>: <span class=\"selector-tag\">html</span>  </span><br><span class=\"line\">\t<span class=\"selector-tag\">limit</span>: 10000</span><br></pre></td></tr></table></figure>\n\n\n\n<p>编辑<code>themes/next/_config.yml</code> 主题配置文件，启用本地搜索功能,将<code>local_search:</code>下面的<code>enable:</code>的值，改成<code>true</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">Local</span> <span class=\"selector-tag\">search</span></span><br><span class=\"line\"><span class=\"selector-tag\">local_search</span>:  </span><br><span class=\"line\">\t\t<span class=\"selector-tag\">enable</span>: <span class=\"selector-tag\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3，md模板设置\"><a href=\"#5-3，md模板设置\" class=\"headerlink\" title=\"5.3，md模板设置\"></a>5.3，md模板设置</h3><p>​        你是在站点文件夹根目录用<code>hexo new</code>新建的文章，那么其实它就是将文章的模版文件        <code>~/scaffolds/post.md</code>复制了一份到<code>~/blog/source/_posts/</code>下，所以这也意味着：</p>\n<p>​        你可以直接通过在<code>~/blog/source/_posts/</code>下新建<code>.md</code>结尾的文件来写新的文章。<br>​        你可以通过自定义文章的模版文件，从而每次命令行新建的文章都会有你自定义的内容。<br>​        下面是我的<code>post.md</code>内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">&#123;&#123;</span> <span class=\"string\">title</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"string\">&#123;&#123;</span> <span class=\"string\">date</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span></span><br><span class=\"line\"><span class=\"string\">/*</span> <span class=\"string\">分类，支持多级，比如：</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">technology</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">computer</span></span><br><span class=\"line\"><span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"string\">/*</span> <span class=\"string\">标签**</span> <span class=\"string\">多个可以这样写</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">标签1</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">标签2*/</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span></span><br><span class=\"line\"><span class=\"string\">/*</span> <span class=\"string\">是否开启评论**</span> <span class=\"string\">默认值是</span> <span class=\"literal\">true</span><span class=\"string\">**</span> <span class=\"string\">要关闭写</span> <span class=\"literal\">false</span><span class=\"string\">*/</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"string\">/*</span> <span class=\"string\">文章置顶**</span> <span class=\"literal\">true</span><span class=\"string\">就是开启，flase就是关闭置顶。*/</span></span><br><span class=\"line\"><span class=\"attr\">password:</span></span><br><span class=\"line\"><span class=\"string\">/*</span> <span class=\"string\">文章密码，参考本文\"1.20.文章加密访问\"**</span> <span class=\"string\">需配置好，否则请勿添加！*/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4，隐藏网页底部-powered-By-Hexo-强力驱动\"><a href=\"#5-4，隐藏网页底部-powered-By-Hexo-强力驱动\" class=\"headerlink\" title=\"5.4，隐藏网页底部 powered By Hexo / 强力驱动\"></a>5.4，隐藏网页底部 powered By Hexo / 强力驱动</h3><p>​        设置方法：</p>\n<p>​        打开<code>themes/next/layout/_partials/footer.swig</code>，使用隐藏符号之间的代码即可，约24-43行或者直接将这段代码删除。 </p>\n<p><a href=\"https://imgchr.com/i/lNsUWn\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/02/lNsUWn.md.png\" alt=\"lNsUWn.md.png\"></a></p>\n<h3 id=\"5-5，设置分页显示\"><a href=\"#5-5，设置分页显示\" class=\"headerlink\" title=\"5.5，设置分页显示\"></a>5.5，设置分页显示</h3><p>​            设置方法</p>\n<p>​            打开<code>_config.yml</code>主站配置文件,找到<code>index_generator:</code>,设置成如下代码:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">index_generator:</span>  </span><br><span class=\"line\">\t<span class=\"attr\">path:</span> <span class=\"string\">''</span>  </span><br><span class=\"line\">\t<span class=\"attr\">per_page:</span> <span class=\"number\">6</span>  </span><br><span class=\"line\">\t<span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br><span class=\"line\"><span class=\"attr\">archive_generator:</span>  </span><br><span class=\"line\">\t<span class=\"attr\">per_page:</span> <span class=\"number\">20</span>  </span><br><span class=\"line\">\t<span class=\"attr\">yearly:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">\t<span class=\"attr\">monthly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">tag_generator:</span>  </span><br><span class=\"line\">\t<span class=\"attr\">per_page:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>​        说明:<code>index_generator:</code>是设置主页显示多少篇文章开始分页,<code>archive_generator:</code>是设置归档主页显示多少篇文章开始分页,<code>tag_generator:</code>是指底分页条显示多少个分页的链接.</p>\n<h3 id=\"5-6，文章加密访问\"><a href=\"#5-6，文章加密访问\" class=\"headerlink\" title=\"5.6，文章加密访问\"></a>5.6，文章加密访问</h3><p>​                效果：<a href=\"https://imgchr.com/i/lNsj6P\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2020/01/02/lNsj6P.md.gif\" alt=\"lNsj6P.md.gif\"></a></p>\n<p>​                 设置方法：</p>\n<p>​    打开<code>themes/next/layout/_partials/head.swig</code>文件。在</p>\n<p><code>&lt;meta name=&quot;theme-color&quot; content=&quot;&quot;&gt;</code>下面插入代码： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prompt(<span class=\"string\">'请输入文章密码'</span>) !== <span class=\"string\">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span><br><span class=\"line\">                alert(<span class=\"string\">'密码错误！'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (history.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    location.replace(<span class=\"string\">\"http://xxxxxxx.xxx\"</span>); <span class=\"comment\">// 这里替换成你的首页</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    history.back();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-7，Fork-me-on-the-Github\"><a href=\"#5-7，Fork-me-on-the-Github\" class=\"headerlink\" title=\"5.7，Fork me on the  Github\"></a>5.7，Fork me on the  Github</h3><p>​        点击<a href=\"https://github.blog/2008-12-19-github-ribbons/\" target=\"_blank\" rel=\"noopener\">这里</a>或<a href=\"http://tholman.com/github-corners/\" target=\"_blank\" rel=\"noopener\">这里</a>挑选自己喜欢的样式，并复制代码然后粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中</p>\n<p>​        (放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的<code>github</code>地址 。</p>\n<h2 id=\"6，相关链接\"><a href=\"#6，相关链接\" class=\"headerlink\" title=\"6，相关链接\"></a>6，相关链接</h2><h3 id=\"6，1：优化全：\"><a href=\"#6，1：优化全：\" class=\"headerlink\" title=\"6，1：优化全：\"></a>6，1：优化全：</h3><p>1，<a href=\"https://zealot.top/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A22.html#more\" target=\"_blank\" rel=\"noopener\">hexo博客之主题配置篇</a></p>\n<p>2，<a href=\"https://www.cnblogs.com/zhangxiaochn/p/Hexo_Theme_Next.html\" target=\"_blank\" rel=\"noopener\">Hexo Next 主题启用及相关设置</a></p>\n<h3 id=\"6，2：基础\"><a href=\"#6，2：基础\" class=\"headerlink\" title=\"6，2：基础\"></a>6，2：基础</h3><p>​    1，<a href=\"https://www.jianshu.com/p/b20fc983005f\" target=\"_blank\" rel=\"noopener\">Hexo设置主题以及Next主题个性设置</a></p>\n<h3 id=\"6，3：其他\"><a href=\"#6，3：其他\" class=\"headerlink\" title=\"6，3：其他\"></a>6，3：其他</h3><p>​    1，<a href=\"https://itrhx.blog.csdn.net/article/details/85420403\" target=\"_blank\" rel=\"noopener\">博客人物</a>：</p>\n<p>​    2，f<a href=\"https://blog.csdn.net/fly_wt/article/details/86674138\" target=\"_blank\" rel=\"noopener\">ork me on the github</a>:</p>\n<p>​    3，<a href=\"https://blog.csdn.net/weixin_34342905/article/details/88218109\" target=\"_blank\" rel=\"noopener\">Hexo博客NexT主题美化之显示当前浏览进度</a>:     </p>\n<p>​    4，<a href=\"https://blog.csdn.net/Olivia_Vang/article/details/92976637\" target=\"_blank\" rel=\"noopener\">更换网站图标</a>：</p>\n","categories":["建站"],"tags":["hexo","next","webinit"]},{"title":"博客运用Hexo-Next主题美化（上）","url":"/posts/5da98e54/","content":"<p>​                                                                                                        –此篇文章有转载，转载url放在最后方</p>\n<h2 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h2><p>上篇文章已经在Windows上将个人博客个搭建好了(如果还不知道怎么搭建的，<a href=\"https://jomeswang.github.io/2020/01/02/博客运用Hexo-Next主题美化（上）/\" target=\"_blank\" rel=\"noopener\">可以戳这里</a>，可是大家有没有发现，搭建的Hexo博客使用的是默认主题，而且不咋好看，跟那些大神们的个人博客相比，还差了很多，不过不要紧，看完这篇文章，你也可以拥有那些炫酷吊炸天的效果。废话少说，那就直接开始吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"2、设置主题\"><a href=\"#2、设置主题\" class=\"headerlink\" title=\"2、设置主题\"></a>2、设置主题</h2><p>Hexo给我们提供了很多的主题供我们选择，你可以在<a href=\"https://link.jianshu.com?t=https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">更多主题</a>里选择一款你喜欢的，我选来选去选了一个比较经典的<strong>Next</strong>主题，你想看下效果的话可以<a href=\"https://link.jianshu.com?t=http://hydcoder.github.io\" target=\"_blank\" rel=\"noopener\">戳这里</a>。下面就已设置Next主题为例来看看怎么安装和设置主题。</p>\n<h3 id=\"2-1、安装主题\"><a href=\"#2-1、安装主题\" class=\"headerlink\" title=\"2.1、安装主题\"></a>2.1、安装主题</h3><p>首先你需要打开你上次生成的Hexo目录，然后右键<strong>打开Git Bash here</strong>,输入：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/iissnan</span><span class=\"regexp\">/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果你选择的是别的主题的话，只需要把URL换一下，和themes/next换成themes/你的主题名称 (themes/next是安装目录，themes/next代表安装在你的Hexo目录下的themes目录下的next文件夹下)</p>\n</blockquote>\n<h3 id=\"2-2、设置主题\"><a href=\"#2-2、设置主题\" class=\"headerlink\" title=\"2.2、设置主题\"></a>2.2、设置主题</h3><p>这样就安装完了，不过不要以为这样就可以了哦，我们还需要启用Next主题，所以需要到<strong>站点配置文件</strong>里去设置一把，找到 theme 字段，并将其值更改为 next。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">theme:</span> <span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明：在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，所以一般在描述的时候，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>\n</blockquote>\n<h3 id=\"2-3、验证主题\"><a href=\"#2-3、验证主题\" class=\"headerlink\" title=\"2.3、验证主题\"></a>2.3、验证主题</h3><p>设置完了，没有看到效果总是不放心对不对，那就先在本地预览一下吧。<br> 先输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除下 Hexo 的缓存。然后再输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<p>接着你就可以打开<a href=\"https://link.jianshu.com?t=http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>验证效果了。是不是已经有效果了？</p>\n<p>到此为止，你已经成功安装并启用了 NexT 主题。</p>\n<h2 id=\"3、修改Hexo-站点配置文件\"><a href=\"#3、修改Hexo-站点配置文件\" class=\"headerlink\" title=\"3、修改Hexo 站点配置文件\"></a>3、修改Hexo 站点配置文件</h2><p>我们找到上次生成的Hexo目录，找到站点配置文件_config.yml，可以用vscode打开(上次部署到Github上的时候，已经改过这个文件的，还记得吗？)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hexo Configuration</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></span><br><span class=\"line\"><span class=\"comment\"># Site 网站</span></span><br><span class=\"line\">title: hydcoder<span class=\"string\">'s blog   #网站标题</span></span><br><span class=\"line\"><span class=\"string\">subtitle: 爱好游戏的码农   #网站副标题</span></span><br><span class=\"line\"><span class=\"string\">description: 以梦为马，明日天涯。。。  #网站描述</span></span><br><span class=\"line\"><span class=\"string\">author: hydcoder   #博主的名字</span></span><br><span class=\"line\"><span class=\"string\">language: zh-Hans  #网站使用的语言</span></span><br><span class=\"line\"><span class=\"string\">timezone:      #网站时区。Hexo 默认使用您电脑的时区</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 侧边栏头像设置(可以放到图床上引用哦)</span></span><br><span class=\"line\"><span class=\"string\">avatar: http://q1.qlogo.cn/g?b=qq&amp;nk=493654134&amp;s=5</span></span><br></pre></td></tr></table></figure>\n\n<p>先对网站的一些设置进行设置，至于其他的设置，等说到再贴。(因为整个文件确实有点长。。。)</p>\n<h2 id=\"4、Hexo-主题配置文件\"><a href=\"#4、Hexo-主题配置文件\" class=\"headerlink\" title=\"4、Hexo 主题配置文件\"></a>4、Hexo 主题配置文件</h2><p>其实这个文件的配置才是重点，因为你们想要的吊炸天的效果差不多都与这个文件有关。<br> 打开<strong>Hexo目录/themes/next/_config.yml</strong>文件,</p>\n<h3 id=\"4-1、开启侧边栏社交链接\"><a href=\"#4-1、开启侧边栏社交链接\" class=\"headerlink\" title=\"4.1、开启侧边栏社交链接\"></a>4.1、开启侧边栏社交链接</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Social links</span></span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https:<span class=\"comment\">//github.com/hydcoder</span></span><br><span class=\"line\">  Weibo: https:<span class=\"comment\">//weibo.com/3180967953/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo</span></span><br><span class=\"line\">  <span class=\"meta\"># 等等</span></span><br><span class=\"line\"></span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"meta\"># Icon Mappings.</span></span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  Weibo: weibo</span><br></pre></td></tr></table></figure>\n\n<p>反正我就只设置了这两个，你们有多少可以设置多少哈。。。</p>\n<h3 id=\"4-2、开启打赏功能\"><a href=\"#4-2、开启打赏功能\" class=\"headerlink\" title=\"4.2、开启打赏功能\"></a>4.2、开启打赏功能</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class=\"line\">wechatpay: 你的微信收款码链接</span><br><span class=\"line\">alipay: 你的支付宝收款码链接</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3、开启友情链接\"><a href=\"#4-3、开启友情链接\" class=\"headerlink\" title=\"4.3、开启友情链接\"></a>4.3、开启友情链接</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">links_title: Links</span><br><span class=\"line\">links:</span><br><span class=\"line\">  MacTalk: http:<span class=\"comment\">//macshuo.com/</span></span><br><span class=\"line\">  Title: http:<span class=\"comment\">//example.com/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4、开启订阅微信公众号\"><a href=\"#4-4、开启订阅微信公众号\" class=\"headerlink\" title=\"4.4、开启订阅微信公众号\"></a>4.4、开启订阅微信公众号</h3><figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">wechat_subscriber:</span><br><span class=\"line\">enabled: <span class=\"literal\">true</span></span><br><span class=\"line\">qcode: <span class=\"regexp\">/uploads/</span>wechat-qcode.jpg</span><br><span class=\"line\">description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-5、选择-Scheme\"><a href=\"#4-5、选择-Scheme\" class=\"headerlink\" title=\"4.5、选择 Scheme\"></a>4.5、选择 Scheme</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n\n<p>更多请参考<a href=\"https://link.jianshu.com?t=http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">next主题文档</a></p>\n<h2 id=\"5、设置侧边栏设置圆形可旋转头像\"><a href=\"#5、设置侧边栏设置圆形可旋转头像\" class=\"headerlink\" title=\"5、设置侧边栏设置圆形可旋转头像\"></a>5、设置侧边栏设置圆形可旋转头像</h2><p>找到<strong>生成的Hexo目录\\themes\\next\\source\\css_common\\components\\sidebar下的sidebar-author.styl</strong>，将里面的css样式内容全部替换为：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: $site-author-image-padding;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: $site-author-image-width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: $site-author-image-height;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: <span class=\"number\">1.4s</span> all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.site-author-image</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">    <span class=\"attribute\">-moz-transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">    <span class=\"attribute\">-ms-transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">    <span class=\"attribute\">-transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.site-author-name</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: $site-author-name-margin;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: $site-author-name-align;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: $site-author-name-color;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: $site-author-name-weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.site-description</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: $site-description-margin-top;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: $site-description-align;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: $site-description-font-size;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: $site-description-color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6、设置首页不显示全文-只显示预览-和设置语言\"><a href=\"#6、设置首页不显示全文-只显示预览-和设置语言\" class=\"headerlink\" title=\"6、设置首页不显示全文(只显示预览)和设置语言\"></a>6、设置首页不显示全文(只显示预览)和设置语言</h2><h3 id=\"6-1、首页不显示全文\"><a href=\"#6-1、首页不显示全文\" class=\"headerlink\" title=\"6.1、首页不显示全文\"></a>6.1、首页不显示全文</h3><p>​    打开<strong>主题配置文件</strong>_config.yml，ctrl + F搜索找到”auto_excerpt”，可以看见</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Automatically Excerpt. Not recommand.</span><br><span class=\"line\"># Please use <span class=\"comment\">&lt;!-- more --&gt;</span> in the post to control excerpt accurately.</span><br><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">enable: false</span><br><span class=\"line\">length: 150</span><br></pre></td></tr></table></figure>\n\n<p>把enable改为对应的false改为true，length就是预览显示的文字长度，你可以根据你的需要进行更改，然后重新部署(hexo clean &amp;&amp; hexo g &amp;&amp; hexo s)，再进主页，你就发现你首页的文章多了一个<strong>阅读全文</strong>的按钮。</p>\n<h3 id=\"6-2、设置语言\"><a href=\"#6-2、设置语言\" class=\"headerlink\" title=\"6.2、设置语言\"></a>6.2、设置语言</h3><p>​        打开站点配置文件，搜索 <code>language</code>，找到如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Copyauthor:</span><br><span class=\"line\">language:</span><br><span class=\"line\">timezone:</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>language</code> 后面输入 <code>zh-CN</code>。</p>\n<p>注意：冒号后面必须有一个空格。</p>\n<h2 id=\"7、添加动态背景\"><a href=\"#7、添加动态背景\" class=\"headerlink\" title=\"7、添加动态背景\"></a>7、添加动态背景</h2><p>先上张图</p>\n<p><img src=\"https://s2.ax1x.com/2020/01/02/lt3FO0.gif\" alt=\"img\"></p>\n<p>网站动态背景(非常占Cpu不是特别推荐)</p>\n<p>记得第一次在别人的博客里看到这个动态背景的时候觉得好好玩，当时觉得自己可以玩一天，哈哈。。。现在你只需要稍微设置一下，你的博客也能马上拥有这个效果咯。</p>\n<p>打开<strong>生成的Hexo目录\\themes\\next/layout/_layout.swig文件</strong>，<br> 在 &lt; /body&gt;上面添加代码(注意不要放在&lt; /head&gt;的后面)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.canvas_nest %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开主题配置文件（在theme-next里面的那个_config.yml），在里面找到并修改如下代码：(可以放在最后面)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># --------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># background settings</span></span><br><span class=\"line\"><span class=\"comment\"># --------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># add canvas-nest effect</span></span><br><span class=\"line\"><span class=\"comment\"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class=\"line\">canvas_nest: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>就这么简单，再运行 hexo clean，然后运行 hexo g,然后运行 hexo s，最后打开浏览器在浏览器的地址栏输入 localhost:4000 就能看到效果了。是不是很好玩。。。</p>\n<p>什么？线条太多了？没事，来看看怎么让线条变少点</p>\n<p>在上一步修改的主题配置文件中，把刚才的那些代码改成下面这样：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.canvas_nest %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">color</span>=<span class=\"string\">\"0,0,255\"</span> <span class=\"attr\">opacity</span>=<span class=\"string\">'0.7'</span> <span class=\"attr\">zIndex</span>=<span class=\"string\">\"-2\"</span> <span class=\"attr\">count</span>=<span class=\"string\">\"99\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#123;% e</span><br></pre></td></tr></table></figure>\n\n<p>怎么样，是不是少了很多了？没事，你开心就好(<em>▽</em>)</p>\n<blockquote>\n<p>配置项说明<br> color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B)<br> opacity: 线条透明度（0~1）, 默认: 0.5<br> count: 线条的总数量, 默认: 150<br> zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</p>\n</blockquote>\n<h2 id=\"8、分类和标签设置\"><a href=\"#8、分类和标签设置\" class=\"headerlink\" title=\"8、分类和标签设置\"></a>8、分类和标签设置</h2><p>这里主要说的是在编写文章的时候，怎么给文章设置标签和分类。</p>\n<p>首先通过<strong>hexo n “name”</strong>命令来新建一个页面，在source/_posts目录下找到刚才新建的name.md文件，用vscode打开。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">title</span>: <span class=\"selector-tag\">name</span></span><br><span class=\"line\"><span class=\"selector-tag\">date</span>: 2014<span class=\"selector-tag\">-08-05</span> 11<span class=\"selector-pseudo\">:15</span><span class=\"selector-pseudo\">:00</span> </span><br><span class=\"line\"><span class=\"selector-tag\">tags</span>: </span><br><span class=\"line\"><span class=\"selector-tag\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>页面默认就是长这样的，可以编辑标题、日期、标签和内容，但是没有分类的选项。我们可以手动加入categories:项,但是下次创建新的页面的时候还是没有，所以我们直接打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，重新执行hexo n ‘name’命令，会发现新建的页面里有categories:项了。</p>\n<blockquote>\n<p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>\n</blockquote>\n<h3 id=\"8-1、标签列表初始化\"><a href=\"#8-1、标签列表初始化\" class=\"headerlink\" title=\"8.1、标签列表初始化\"></a>8.1、标签列表初始化</h3><p>​    首先打开主题下的配置文件_config.yml，然后搜索menu找到如下配置项，将about、tags、categories前的#号去掉，就开启了关于、标签和分类标签，当然还有其他菜单项也可以开启</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:(注意空格即/之后的空格，标准如about其他像这样改)</span><br><span class=\"line\">  home: <span class=\"regexp\">/ || home</span></span><br><span class=\"line\"><span class=\"regexp\">  about: /</span>about/|| user</span><br><span class=\"line\">  tags: <span class=\"regexp\">/tags/</span> || tags</span><br><span class=\"line\">  categories: <span class=\"regexp\">/categories/</span> || th</span><br><span class=\"line\">  archives: <span class=\"regexp\">/archives/</span> || archive</span><br><span class=\"line\">  #schedule: /schedule/ || calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>\n\n<p>重新生成部署后，可以看到新增的菜单项，但是单击后会报如下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cannot GET &#x2F;about&#x2F;</span><br><span class=\"line\">Cannot GET &#x2F;tags&#x2F;</span><br><span class=\"line\">Cannot GET &#x2F;categories&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>这是因为你还需运行如下命令新建相关页面</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page \"about\"</span><br><span class=\"line\">hexo new page \"tags\"</span><br><span class=\"line\">hexo new page \"categories\"</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下，会再source文件下创建about、tags、categories文件夹，每个文件夹下还会创建一个index.md文件表示关于、标签页分类页面，编辑这三个MarkDown文件可以自定义这三个页面的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\hexo\\blog&gt;hexo new page &quot;about&quot;&#96;</span><br><span class=\"line\">&#96;INFO  Created: D:\\hexo\\blog\\source\\about\\index.md&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;D:\\hexo\\blog&gt;hexo new page &quot;tags&quot;&#96;</span><br><span class=\"line\">&#96;INFO  Created: D:\\hexo\\blog\\source\\tags\\index.md&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;D:\\hexo\\blog&gt;hexo new page &quot;categories&quot;&#96;</span><br><span class=\"line\">&#96;INFO  Created: D:\\hexo\\blog\\source\\categories\\index.md&#96;</span><br></pre></td></tr></table></figure>\n\n<p>还差最后一步，打开各页面对应的index.md文件，编辑如下内容，title和date是默认生成的，增加type即可</p>\n<h3 id=\"8-2、设置分类列表\"><a href=\"#8-2、设置分类列表\" class=\"headerlink\" title=\"8.2、设置分类列表\"></a>8.2、设置分类列表</h3><p>在我们编辑文章的时候，直接在categories:项填写属于哪个分类，但如果分类是中文的时候，路径也会包含中文。</p>\n<p>比如分类我们设置的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">categories: 开车</span><br></pre></td></tr></table></figure>\n\n<p>那在生成页面后，分类列表就会出现<strong>开车</strong>这个选项，他的访问路径是：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">*<span class=\"regexp\">/categories/</span>开车</span><br></pre></td></tr></table></figure>\n\n<p>我们都知道，有时候中文路径可能会出现一些奇奇怪怪的问题，所以我们需要路径名和分类名分别设置。</p>\n<p>打开站点配置文件_config.yml，找到如下位置做更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Category &amp; Tag</span></span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">    开车: drive</span><br><span class=\"line\">    生活: life</span><br><span class=\"line\">    其他: other</span><br><span class=\"line\">tag_map:</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在这里category_map:是设置分类的地方，每行一个分类，冒号前面是分类名称，后面是访问路径。<br> 可以提前在这里设置好一些分类，当编辑的文章填写了对应的分类名时，就会自动的按照对应的路径来访问。</p>\n</blockquote>\n<h3 id=\"8-3、设置标签\"><a href=\"#8-3、设置标签\" class=\"headerlink\" title=\"8.3、设置标签\"></a>8.3、设置标签</h3><p>在编辑文章的时候，tags:后面是设置标签的地方，如果有多个标签的话，可以用下面两种办法来设置：<br> 第一种：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tages</span>: <span class=\"selector-attr\">[标签1,标签2,...标签n]</span></span><br></pre></td></tr></table></figure>\n\n<p>第二种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> tages: </span><br><span class=\"line\">- 标签1</span><br><span class=\"line\">- 标签2</span><br><span class=\"line\">...</span><br><span class=\"line\">- 标签n</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"9、总结\"><a href=\"#9、总结\" class=\"headerlink\" title=\"9、总结\"></a>9、总结</h2><p>​    以上就是就是一些主题优化的一些基础操作喽！请观看下一篇文章，下一篇文章更精彩哦，有着回动的小宠物等着你哦！耐心打下去，可使你的博客靓丽不少哦！</p>\n<p>附上参考链接：</p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/b20fc983005f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/b20fc983005f</a>        ——初级版</li>\n<li><a href=\"https://www.cnblogs.com/zhangxiaochn/p/Hexo_Theme_Next.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhangxiaochn/p/Hexo_Theme_Next.html</a>    —–ZhangXiao’s Blog</li>\n</ol>\n","categories":["建站"],"tags":["hexo","next","webinit"]},{"title":"运用Hexo + GitHub 搭建免费个人博客网站","url":"/posts/fd1e545c/","content":"<p>​                                                        转载– <a href=\"https://zhuanlan.zhihu.com/p/60578464\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/60578464</a> </p>\n<p> 本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。 </p>\n<p>​        为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中<strong>第 3~5 步为最重要的步骤</strong>，其他内容如果已经会的可以选择性跳过。  o(￣▽￣)ｄ </p>\n <a id=\"more\"></a> \n\n<p>​        请留足时间来处理哦，下载npm东西是真的慢，可安装淘宝镜像安装法见常见问题。之后用cnpm代替npm。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h2><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"# 注意事项\"></a><strong># 注意事项</strong></h3><ul>\n<li>输入代码时，核对准确，最好切换成英文输入法；</li>\n<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>\n<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>\n<li>小白请严格按步骤进行，不要跳！</li>\n</ul>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"# 环境搭建\"></a><strong># 环境搭建</strong></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>\n<ul>\n<li>Node.js：<a href=\"https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></li>\n<li>Git：<a href=\"https://link.zhihu.com/?target=https%3A//git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n</ul>\n<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>\n<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606161052.png\" alt=\"\"></p>\n<h2 id=\"2-连接-Github\"><a href=\"#2-连接-Github\" class=\"headerlink\" title=\"2. 连接 Github\"></a>2. 连接 Github</h2><p>使用邮箱注册 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/\">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>\n<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建 SSH 密匙</strong>：</p>\n<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>\n<p><strong>添加密匙：</strong></p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606161127.png\" alt=\"\"></p>\n<p><strong>验证连接：</strong></p>\n<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>\n<p><img src=\"http://photo.jomeswang.top/20200410104018.png\" alt=\"\"></p>\n<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<h2 id=\"3-创建-Github-Pages-仓库\"><a href=\"#3-创建-Github-Pages-仓库\" class=\"headerlink\" title=\"3. 创建 Github Pages 仓库\"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>Repository name 中输入 <code>用户名.github.io</code></li>\n<li>勾选 “Initialize this repository with a README”</li>\n<li>Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606161149.png\" alt=\"\"></p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h2 id=\"4-本地安装-Hexo-博客程序\"><a href=\"#4-本地安装-Hexo-博客程序\" class=\"headerlink\" title=\"4. 本地安装 Hexo 博客程序\"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>\n<h3 id=\"4-1-安装-Hexo\"><a href=\"#4-1-安装-Hexo\" class=\"headerlink\" title=\"# 4.1 安装 Hexo\"></a><strong># 4.1 安装 Hexo</strong></h3><p>使用 npm 一键安装 Hexo 博客程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli --registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>\n<p><img src=\"http://photo.jomeswang.top/20200606161224.png\" alt=\"\"></p>\n<h3 id=\"4-2-Hexo-初始化和本地预览\"><a href=\"#4-2-Hexo-初始化和本地预览\" class=\"headerlink\" title=\"# 4.2 Hexo 初始化和本地预览\"></a><strong># 4.2 Hexo 初始化和本地预览</strong></h3><p><strong>初始化并安装所需组件：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init      # 初始化</span><br><span class=\"line\">npm install    # 安装组件</span><br></pre></td></tr></table></figure>\n\n<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>\n\n<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_hd.jpg\" alt=\"img\"></p>\n<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>\n<p>Hexo 博客文件夹目录结构如下：</p>\n<p><img src=\"http://photo.jomeswang.top/20200606161243.png\" alt=\"\"></p>\n<h2 id=\"5-部署-Hexo-到-GitHub-Pages\"><a href=\"#5-部署-Hexo-到-GitHub-Pages\" class=\"headerlink\" title=\"5. 部署 Hexo 到 GitHub Pages\"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先<strong>安装 hexo-deployer-git</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save  --registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2 id=\"6-绑定域名（可选）\"><a href=\"#6-绑定域名（可选）\" class=\"headerlink\" title=\"6. 绑定域名（可选）\"></a>6. 绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href=\"https://link.zhihu.com/?target=http%3A//github.io\">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>\n<p>我们使用 <a href=\"https://link.zhihu.com/?target=https%3A//www.namesilo.com/%3Frid%3Dd27fa32do\">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p>\n<h3 id=\"6-1-域名注册和解析\"><a href=\"#6-1-域名注册和解析\" class=\"headerlink\" title=\"# 6.1 域名注册和解析\"></a><strong># 6.1 域名注册和解析</strong></h3><ul>\n<li>域名注册和解析教程：<a href=\"https://zhuanlan.zhihu.com/p/33921436\" target=\"_blank\" rel=\"noopener\">Namesilo 域名购买及使用教程</a></li>\n</ul>\n<p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>\n<p><img src=\"http://photo.jomeswang.top/20200410104214.png\" alt=\"\"></p>\n<h3 id=\"6-2-绑定域名到-Hexo-博客\"><a href=\"#6-2-绑定域名到-Hexo-博客\" class=\"headerlink\" title=\"# 6.2 绑定域名到 Hexo 博客\"></a><strong># 6.2 绑定域名到 Hexo 博客</strong></h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href=\"http://www.example.com，保存名称为\" target=\"_blank\" rel=\"noopener\">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>\n<p>清除缓存等文件并重新发布网站：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean   # 清除缓存文件等</span><br><span class=\"line\">hexo g       # 生成页面</span><br><span class=\"line\">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>\n\n<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>\n<h3 id=\"6-3-开启-HTTPS\"><a href=\"#6-3-开启-HTTPS\" class=\"headerlink\" title=\"# 6.3 开启 HTTPS\"></a><strong># 6.3 开启 HTTPS</strong></h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-54f8744afc9746884e6b3acecfc5f8cf_hd.jpg\" alt=\"img\"></p>\n<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>\n<h2 id=\"7-开始使用\"><a href=\"#7-开始使用\" class=\"headerlink\" title=\"7. 开始使用\"></a>7. 开始使用</h2><h3 id=\"7-1-发布文章\"><a href=\"#7-1-发布文章\" class=\"headerlink\" title=\"# 7.1 发布文章\"></a><strong># 7.1 发布文章</strong></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>\n<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hello World # 标题</span><br><span class=\"line\">date: 2019&#x2F;3&#x2F;26 hh:mm:ss # 时间</span><br><span class=\"line\">categories: # 分类</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">tags: # 标签</span><br><span class=\"line\">- PS3</span><br><span class=\"line\">- Games</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">摘要</span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\">正文</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-网站设置\"><a href=\"#7-2-网站设置\" class=\"headerlink\" title=\"# 7.2 网站设置\"></a><strong># 7.2 网站设置</strong></h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href=\"https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration\">官方文档</a>按需要编辑。</p>\n<p>注意：冒号后要加一个空格！</p>\n<h3 id=\"7-3-更换主题\"><a href=\"#7-3-更换主题\" class=\"headerlink\" title=\"# 7.3 更换主题\"></a><strong># 7.3 更换主题</strong></h3><p>在 <a href=\"https://link.zhihu.com/?target=https%3A//hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href=\"https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/getting-started.html\">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>\n<h3 id=\"7-4-常用命令\"><a href=\"#7-4-常用命令\" class=\"headerlink\" title=\"# 7.4 常用命令\"></a><strong># 7.4 常用命令</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new &quot;name&quot;       # 新建文章</span><br><span class=\"line\">hexo new page &quot;name&quot;  # 新建页面</span><br><span class=\"line\">hexo g                # 生成页面</span><br><span class=\"line\">hexo d                # 部署</span><br><span class=\"line\">hexo g -d             # 生成页面并部署</span><br><span class=\"line\">hexo s                # 本地预览</span><br><span class=\"line\">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class=\"line\">hexo help             # 帮助</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-常见问题\"><a href=\"#8-常见问题\" class=\"headerlink\" title=\"8 常见问题\"></a>8 常见问题</h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p>\n<p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 `` 进行分段。</p>\n<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-45701cf120ca77e6733ad30b40666f33_hd.jpg\" alt=\"img\"></p>\n<p><strong>2、设置网站图标</strong></p>\n<p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>\n<p><strong>3、修改并部署后没有效果</strong></p>\n<p>使用 <code>hexo clean</code> 清理后重新部署。</p>\n<p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p>\n<p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>\n<p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p>\n<p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>\n<p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p>\n<p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>\n<p>临时更换方法：在 npm 安装命令后面加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">--registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>\n<p>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p>\n<p>（关注公众号 JustThink，专注于分享高效、实用、有趣的工具和网络教程）</p>\n","categories":["建站"],"tags":["hexo","webinit","github"]}]