<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>传道士|万物归一</title>
  
  <subtitle>快乐的宅男</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hexo.jomeswang.top/"/>
  <updated>2022-02-02T06:23:22.767Z</updated>
  <id>https://hexo.jomeswang.top/</id>
  
  <author>
    <name>Jomeswang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>转载：前端开发的瓶颈</title>
    <link href="https://hexo.jomeswang.top/posts/6c0bcfea/"/>
    <id>https://hexo.jomeswang.top/posts/6c0bcfea/</id>
    <published>2021-03-02T02:38:16.000Z</published>
    <updated>2022-02-02T06:23:22.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端开发的瓶颈与未来之路"><a href="#前端开发的瓶颈与未来之路" class="headerlink" title="前端开发的瓶颈与未来之路"></a>前端开发的瓶颈与未来之路</h1><a id="more"></a><p>​                                                                            –转载 <a href="https://keelii.com/2020/05/10/frontend-dev-bottleneck-and-future/" target="_blank" rel="noopener">https://keelii.com/2020/05/10/frontend-dev-bottleneck-and-future/</a></p><p>2020-5-10 19:18 PM · <a href="https://keelii.com/" target="_blank" rel="noopener">首页</a></p><blockquote><p>前端开发的瓶颈到底在哪里，前端技术是否已经走到一个十字路口，全栈化的系统架构是否能改变目前的窘境？本文将根据作者自身的开发经历谈谈当下前端开发中遇到的一些问题和想法。</p></blockquote><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>近两年我一直在思考的一个问题：</p><blockquote><p>如果前端不用考虑性能问题、不用考虑终端兼容性、不用考虑历史遗留问题，甚至不用考虑具体技术实现…</p></blockquote><p>如果我们假设自己有丰富的技术储备，同时不用考虑上面的问题，那么前端究竟 <strong>能</strong> 做出什么样有价值的东西？</p><p>我们把时间拉到 5 年前…</p><p>如果你「那时」还是前端开发的话。上面的问题肯定是你不得不面临的典型问题。甚至是当时前端开发的意义所在。</p><ul><li>你会为了精确还原设计稿熬夜加班，从而练就一双像素眼；</li><li>你会为了解决几个字节的性能问题研究优化方案，以至看懂了每一个 HTTP 请求头；</li><li>你也会因为某些技术问题和同事理论，最终到达到与产品谈笑风声的境界；</li><li>…</li></ul><p>但是随着时间的推移，前端技术的更新迭代，以及互联网的发展。你会发现这些曾经的问题似乎已经不再是问题，或者说在能预见的未来 <em>可能</em> 不再是问题。</p><p>页面加载性能可能不再是问题，技术上有了 HTTP2，基建上有了 5G，硬盘也越来越快。</p><p>兼容性问题慢慢淡出大家的视角，Chrome 一家独大，微软也不得不向它靠拢。</p><p>很多前端开发已经具备了后端（或者说多端）的技术能力，技术储备也可能不是问题，当然前提是你能招到人。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>到底什么是前端开发，前端与后端的界限在哪里？我在三年前对它的定义是：</p><blockquote><p>前端为 界面、交互展示负责； 后端为 数据、业务逻辑负责;</p></blockquote><p>不过现在看来似乎已经过时了，我越来越觉得不应该有这样一个清晰的界限把前后端分割开来，尤其是技术层面（除了职能层面的界限有利于协作以外）。这就好比说：如果你不能打破规则，那就必将被规则束缚。</p><p>我一直认为程序员应该对新的技术、工具、理念有比平常人更快的适应能力。举个简单的例子，我以前写代码通常使用 tab 缩进，后来大家都建议使用空格，刚开始尝试换成空格肯定是拒绝的，因为让人改变习惯是一件很难的事情。但是当你真正为了改变做出实践的时候，往往就会发现一条新大路。同样还有加不加分号的问题。</p><p>现在回过头来再看，前端在整个系统层面担任的角色至少应该是整个视图 View 层面的。视图层面的技术更接近软件系统的上层，更感性。感性的东西就是说一个颜色，我觉得好看，他觉得不好看，完全属于个人情感诉求。所以前端更注重与UI、交互 以及整个产品层面需要解决的问题。优秀的前端必然要具备敏锐的产品洞察能力。</p><p>当然这还只是前端最基础的职责所在。同时前端做为最接近产品的技术角色，技术才是前端真正的硬实力。</p><p>大约在去年一年的时间，我的岗位从前端转向了后端 Java 程序员的角色。虽然只做了一年的 Java 程序员，但是对我自身的技术提升而言是最多的一年。大家可能普遍的认为后端转前端比较容易，前端转后端会有门槛，实际上根据我自己的体验来讲并非如此。</p><p>Java 这门语言是商业化、成熟度特别高的语言。无论是语言本身，还是周边框架、工具都有一套非常成熟且层次分明的系统化抽象。如果你有两、三年的编程经验，突然让你上转写 Java 是非常容易的一件事情，尤其是写 Java web。Spring 框架已经为程序员屏蔽了很多复杂问题，而且已经事实上成为了各大互联网公司的主流框架选型。</p><p>我特意按我自己的学习线路绘制了一张 Java 版的程序员学习线路，仅供参考：</p><p><img src="https://vip1.loli.net/2020/05/10/wpNtkiOI231evPV.png" alt="Java arch.png"></p><p>我们可以清楚的看出来 Java 构建的整个体系最大的特点：它是渐进式的，一步一步地给开发者建立正向的引导。</p><p>当我处在在<strong>应用层</strong>阶段的时候，我需要关心的只是一些概念，方法，具备基础了以后就可以借助 Spring 框架入门，入门后就可以研究源码，你会发现 Spring 的本质核心类 DispatchServlet，从此 Servlet 就出现在了你的视野。我以前上学时理解不了 java 中 Servlet 的概念，后来参加了工作又学些了 Python，再次看到 Java 中的 Servlet 的时候瞬间就明白了它就是 Python 中的 uwsgi，就是一种接口，将编程语言和服务器网关链接起来的一种规范。</p><p>然后你就可以顺利进入下一环节，服务器/通信。这里你会发现整个网络编程的核心 Socket，同样以前上学的时候没理解 Socket 的概念，继续学习后你就会明白 Socket 其实就是操作系统提供给编程语言的一种能力，有了它就可以建立服务器与客户端之间的通信。在这一环节中你会学习到网络层 TCP/IP 协议，明白了 TCP/UDP 的区别，<code>while (true) { socket.listen() }</code> 建立 Socket 监听会有性能问题，此时你便进入下一个抽象层次，操作系统和计算机原理。</p><p>为了解决「while true」监听连接的性能问题，你会去学习多线程技术，了解并发的概念。你可能总会听到别人讨论并发和并行的区别。继续学习后，慢慢的你就会明白：并发多用来解决网络IO（硬盘）的效率问题，而并行则是为了更好的利用多/核处理器（CPU）的问题。这时你会发现这个阶段涉及到了很多的计算机硬件知识。内存分配、CPU计算、IO 复用等等。</p><p>像 Spring 这种框架才能真正意义上被称做 <strong>框架</strong>，因为它不仅仅解决了软件开发的问题，更重要的是 AOP/IoC 这类概念可以完全改变编程的一些理念。使用 Spring 开发 web 应用，联合 Java 构建出来的生态，整个开发流程就像呼吸一样自然。</p><p>Java 构建出来的软件开发体系就像是把程序员放进了一个一个的层次分明的小柜子里面，进去了以后你根本不需要关注外界是怎么样的，做好自己那部分工作就可以了。如果你对外界有兴趣可以一点点的顺藤摸瓜，跳出你原来的小柜子。即保证精力专注的同时又建立起一套有秩序的提升曲线。这一点是别的语言体系没有的。</p><p>实际上我在转 Java 之前对 Java 有着不小的误解，甚至转 Java 本身也不是我自己的想法。但当你真正转型成 Java 程序员后。看懂了数以百万行记的代码仓库、维护过每秒好几十万的 QPS 项目、见识过百行的 SQL 的时候，你才会对 Java 和软件开发产生一种敬畏之心，才会对技术才有了更深层次的理解。</p><p>这时候再回过头来看前端，看 JavaScript，才会发现它们之间的区别与特点。很多之前争论的东西也就有了结论。</p><h2 id="瓶颈"><a href="#瓶颈" class="headerlink" title="瓶颈"></a>瓶颈</h2><p>我相信从事前端工作稍微长一点（5年以上）的人近两年都会有一种感觉：前端似乎没什么东西可以玩出花样了。这是因为很多东西都已经成为了前端事实上的主流，以前前端没有的基建慢慢的被完善。语言、框架、可视化、跨端、游戏、工具/自动化/工程化 这些领域都在发展。</p><p>语言方面 TypeScript 必然是主流，无论你愿意与否，你都将不得不使用它来写前端。框架方面 React 已经是事实上的主流了，没必要再做选择题。打包工具 Webpack 也是一家独大，虽然被很多人诟病，但是社区生态起来了，想改变就很难。跨端应用 Electron 也不用想了，VSCode 能做好你做不好那就不是选型的问题了。2D 游戏/绘图方面 PixiJS 6 已经在设计中了，3D 我个人认为就先别玩了。</p><p>这些看似成熟的体系实际上还是有很多可以挖掘的东西。如果你不深入研究，或许会认为过两年这些技术就稳定了前端就可以做到大一统的状态。这个想法可能就过于天真了，我举例解释下它们各自的瓶颈：</p><h3 id="前-客户端框架的瓶颈"><a href="#前-客户端框架的瓶颈" class="headerlink" title="前/客户端框架的瓶颈"></a>前/客户端框架的瓶颈</h3><p>React（并不特指 React）虽然现在看起来是主流，但是它本身有很多问题是没解决的，甚至可以说是无解的。React 的本质只是一个 UI Library，并不是框架 Framework。框架要解决的问题是系统层面的不是某个抽象层面的。用 React 写过几个项目以后你就会认识到用 React 去写大型项目是非常麻烦的事情，React 本身并不解决 SPA 应用中数据流的问题，甚至没解决状态管理的问题（或者说状态管理本来就是个伪命题？）。一个很简单的父子组件之间状态共享的问题一直没有成熟的解决方案，hooks 这种方案更像是拆了东墙补西墙。</p><p>而且现在 React 社区弥漫着一种崇尚函数式编程的邪气，hooks 更像是一块遮羞布。多数人用 hooks 的原因仅仅是不想使用 Class，因为 Class 很臃肿，function 更简单。当然这个逻辑是没问题的。函数确实简单，但是如果你把一个函数里面写上几百行的代码，各种 hooks 用到飞起的时候，你才会回过头来反思如何组织代码。如果 Class 能以一种更好/更易于理解的方式去抽象那为什么不用呢？</p><h3 id="后-服务端框架的瓶颈"><a href="#后-服务端框架的瓶颈" class="headerlink" title="后/服务端框架的瓶颈"></a>后/服务端框架的瓶颈</h3><p>前端框架如此，基于 Node.JS 的后端框架也好不到哪儿去，难道你真的想用 Express/Koa.js 去写大型的后端应用？这种量级的框架连 web 开发最简单的三层模型（ 模型、视图、控制器）支持都不完整。当然你可能会说小型框架本来就只关注某一方面嘛，视图和模型层的东西可以用其它三方库解决。是的，确实可以这样，不过你不觉得 Node.JS 的第三方库有点太多了吗。正如 NestJS 在文档中提到的一个问题一样「很多 JavaScript 类库都没有高效地解决一个问题 <strong>架构</strong>。」React/Vue/Express/Koa 这些都是相对独立的点，没有一个东西能把他们连接起来形成一个面，形成一种框架级别的体系。这就是架构的问题。</p><p>这里多说一点，结合上面 Java 构建出来的生态，对比 Node.JS 的话。我借用自己打过的比喻：如果你低头看到的是 Node.JS，那么你抬头未必能看见 Java。假如你从事前端开发 2，3 年遇到瓶颈，想转学 Node.JS，你会学习 Exporess/Koa 这类框架，但是很快你就会发现一个严重的问题：没办法深入下去了。因为当你用 Express 写完一个页面后就面临着各种技术上的盲点，会让你无所适从。</p><p>我也尝试绘制一张我对 JavaScript/Node.JS 或者说大前端体系理解的一张图:</p><p><img src="https://vip1.loli.net/2020/05/10/6DBWfH7tybxdP1Q.png" alt="node-arch.png"></p><p>JavaScript 体系看似前后端通吃，客户端、 服务端甚至桌面端皆有。但是最大的问题在于：没有一个东西能给他们建立起关系并发展成为一种体系。</p><p>插播一条娱乐看点，前两天写 Ruby on rails 框架的作者 DHH 发推并配图：</p><p><img src="https://vip1.loli.net/2020/05/10/bKAeufqpHXNRmoG.png" alt="dhh.png"></p><p>大意如下：</p><blockquote><p>现在的年轻人在 web 开发的时候是这样的嘛？底层逻辑、纯手写连接池 + 纯手工 SQL、配置文件都放在了一起。天哪！（截图中使用的式TJ大神写的 Express 框架）</p></blockquote><p>然后 TJ 大神也回复了：</p><p><img src="https://vip1.loli.net/2020/05/10/vCJ4zSNBVDmLEHo.png" alt="tj.png"></p><p>大意如下：</p><blockquote><p>只有菜鸟玩家才能写出干净、简洁、高性能（黑 Ruby 性能）、见名知意的 SQL，而不是去写一个有15层的抽象。</p></blockquote><p>两者的推特对话挺有意思，大家娱乐一下。</p><h3 id="TypeScript-语言的瓶颈"><a href="#TypeScript-语言的瓶颈" class="headerlink" title="TypeScript 语言的瓶颈"></a>TypeScript 语言的瓶颈</h3><p>TypeScript 也主流，但是持续关注 TS 到现在，我发现 TS 也遇到了瓶颈，这个瓶颈不仅来自于 TS 的设计目标与理念，更多的还是社区及 TC39。TS 的设计初衷是 JavaScript 的超集，由于本身要编译成 JS，这一点本质上限制了 TypeScript 的方向，设计者对于添加一个新特性会非常谨慎，一者怕与 TC39 ES proposal 冲突，二者要考编译到不同版本 JavaScript 的兼容性问题。以至于现在 TS 新的语言特性只会跟进 TC 39 发布的最新 ES proposal。但是我个人对于 TC 39 的效率及未来持怀疑态度，decorator 的提案一直还处于 Stage 2 的阶段，像这种其它语言都成为标配好几年的事情，现在 JavaScript 社区还在草案（stage-2）阶段。</p><blockquote><p>普及下 ECMA 的标准的流程：</p><ol><li>stage-1：前期设想</li><li>stage-2：正式提案（装饰器所在的阶段）</li><li>stage-3：实现候选</li><li>Stage-4：完成测试</li><li>各个浏览器 JS 引擎实现；TypeScript 实现</li></ol></blockquote><p><img src="https://vip1.loli.net/2020/05/10/zuS1fYsNeyUKtxI.png" alt="stage2-decorator.png"></p><p>在这个问题上我认为其实也很好解决，开个脑洞：如果微软想借助编程语言一统浏览器和客户端是没有什么不可能的。并入 TC39 组织，开发真正属于 TypeScript 的原生引擎，奉天子以令不臣的方式也未尝不可。</p><p>近几年 Microsoft 对于开源的投入是肉眼可见的，微软要发力我相信很多东西都会有翻天覆地的变化。</p><h3 id="打包工具的瓶颈"><a href="#打包工具的瓶颈" class="headerlink" title="打包工具的瓶颈"></a>打包工具的瓶颈</h3><p>Webpack/Babel 就更不用说了，主流中的主流。但是也是问题最严重的一个。Webpack/Babel 的流行恰恰从反面证明了前端的基础设施有多么的烂。现在国外网友老天天叫喊着 Webpack/Babel is eval 也是挺值得深思的。我们引入了一个新工具来解决问题，却又在不经意之间产生了新问题。</p><p>前端构建工具问题的本质还是在于 Node.JS 的包管理工具的设计。这一点在 Node.JS 的作者 Ryan Dahl 关于 Deno 演讲《10 Things I Regret About Node.js》中也有过「官方」的承认。我相信任何一个实现过构建工具的人都被 Node gyp 打败过。node-sass, fsevent 的痛不必细说。更不用说万年被黑的 node_modules 了，你根本不知道一个简单的 npm install 命令会导致安装成千上万个 npm 包被安装到你的机器上。</p><p><img src="https://vip1.loli.net/2020/05/10/4FWgDfbqiOLh5Iu.png" alt="ry-node-regret.png"></p><p>当然每种编程语言对应的包管理工具都要解决依赖问题，而且这是一个普遍的问题，脚本/解释型编程语言尤为突出，Python/Ruby/PHP 都有这些类似的问题。或许 Go/Rust 这种把源代码编译打包成单个可执行文件的方式才是好的解决方式。</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>从前人们总是抱怨 JavaScript 这门语言，黑它、讽刺它。但是我看到的是它在一点点变好。不仅是语言层面逐步完善，工具链生态日趋成熟，使用它的也人越来越多。大家对它的关注程度也在提高，整个 JavaScript 开发者的水平也在向更高更强的方向发展。生存环境只会淘汰那些老旧不再进化的事物，能适应变化的才会永存。</p><p>JavaScript 这门语言有两个其它 <strong>任何</strong> 编程语言都不具备的优点：</p><ol><li>几乎 <strong>无所不在</strong> 且不用安装，有浏览器就有 JavaScript。脚本语言意味着它能被嵌入到任何宿主环境中去：Nginx、Native应用、硬件编程、物连网、嵌入式 都有它的身影</li><li>这门语言对于技术的更新迭代有着强大的 <strong>适应能力</strong>。JavaScript 本身的更新迭代速度导致它进化速度很多，语言上的新特性会很快被运用到生产环境。相比 Python 而言，这简直是做梦，Python 2 到 3 的转换没人能看到真正的时间表。</li></ol><p>当下的前端开发状况不由得让我我想起苏东坡《晁错论》中的一段话：</p><blockquote><p>天下之患，最不可为者，名为治平无事，而其实有不测之忧…</p></blockquote><p>最大的问题在于，有些事物，从表面上看着平淡无奇，但实际上底层暗流涌动，似乎每一时刻都有着巨变的可能性。这也是前端开发最有趣也最有潜力的地方。</p><p>作为一名新时代的前端开发者，就是要在这看似风平浪静的表面之下，找到一些真正的突破点，兴许只是一个简单的想法，顺应时势然后造就出不斐的成就也说不定呢。</p><p>无论是前端还是后端、国内还是国外，技术才是真正的核心竞争力，只有技术革新才能提高生产力，而对于我们程序员来讲，编程则是唯一能提升硬实力的方法。只要你心中充满了热情，坚持下去总会走出一条自己的路子。</p><p><strong>分享一段小经历</strong></p><p>我在 2018 年有幸参加了 TypeScirpt 的推广大会，TypeScript 的作者 Anders Hejlsberg 亲自主讲。一位将近 60 岁的程序员在讲台上滔滔不绝的讲技术方案，TS 的设计理念。你真的很难想像这样一位处于「知天命」阶段的老头子（实际上很年轻）讲的东西。</p><p><img src="https://vip1.loli.net/2020/05/10/lz6uP1RijHBqotd.jpg" alt="typescript-2015.jpg"></p><p>QA 环节有个年轻小伙问到 Anders「在中国做程序员很累、很难应该怎么坚持下去（类似这样的描述，细节记不清楚了）」的问题。</p><p>Anders 几乎毫不犹豫的说出了「Passion」这个单词。我瞬间就被打动了。因为在此之前我对于「激情」这个词的认识还停留在成功人士的演讲说辞层面，当 Anders 亲口说出 Passion 一词的时候，让人感觉真的是一字千金。</p><p>直到现在 Anders 还做为 TypeScript 的核心贡献者为它提交代码，到处奔走为 TypeScript 宣传。</p><p>我们再回到前端，那么未来的前端到底会发展成什么样？长期而言充满了未知数，谁也没法预测，但是短期来讲我比较关注几个东西：</p><ul><li><strong>ESBuild</strong> ：一个极快的 JavaScript bundler。这个工具可以说是真正的「Game changer」。同样是一个打包任务，它快到让你没反应过来就完成任务了。ESBuild 使用 Go 语言编写，实现了整套 <strong>并行的</strong> ES 解析器、代码生成器，作者是 Figma 的 CTO（是的国外的 CTO 是要写代码的）。最近更新很频繁，Vue 新的构建工具也会基于它来做 TS 部分的打包功能。</li><li><strong>Deno</strong> ：一个安全的 JavaScript &amp; TypeScript 运行时。Deno 的方向充满了可能性，未来 deno 不仅仅可以做 JS 后端，还能和 Rust 打通，给JS注入一些原生 native 的能力，然后 Webasmbly, webGL 之类的技术都变成了可能，1.0 正式版发布日期也快到了。</li><li><strong>Figma</strong>：一个在线版的 Sketch，虽然功能还没有 Sketch 强大，但是已经有了设计界面的基本能力。关键还在于它的整个实现都是基于 web 技术，底层 C++ 实现图形的渲染、绘制，前端通过 Webasmbly 与浏览器 Canvas 交互，做到了让用户在浏览器端体验到了 Native 软件能力。像 AutoLayout 这种功能在用户体验上就是颠覆式的，使用的时候它很自然，没有什么存在感。但是用了就回不去了。</li></ul><p>如果你仔细研究一番，上面的这些新鲜东西，都是起源于前端，但又不把视野局限在前端。或许这就是前端未来的发展方向吧。</p><p>这几项技术我们会在后期的更新中会有专门的干货文章，敬请期待~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端开发的瓶颈与未来之路&quot;&gt;&lt;a href=&quot;#前端开发的瓶颈与未来之路&quot; class=&quot;headerlink&quot; title=&quot;前端开发的瓶颈与未来之路&quot;&gt;&lt;/a&gt;前端开发的瓶颈与未来之路&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>粤港澳大湾区金融数学建模大赛（一等奖）量化论文</title>
    <link href="https://hexo.jomeswang.top/posts/4b195fc0/"/>
    <id>https://hexo.jomeswang.top/posts/4b195fc0/</id>
    <published>2021-02-14T13:37:50.000Z</published>
    <updated>2021-02-14T13:57:45.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="econmoic-model"><a href="#econmoic-model" class="headerlink" title="econmoic_model"></a>econmoic_model</h1><a id="more"></a><p>粤港澳大湾区金融数学建模一等奖作品(量化模型的建立)</p><p>在这里记录一下比赛时峥嵘的岁月，记录当年疯狂的青春，记录当初无数个挑灯野战的夜晚。</p><p>数据和论文我都放在 这里了哦！！！    地址: <a href="https://github.com/jomeswang/econmoic_model" target="_blank" rel="noopener">https://github.com/jomeswang/econmoic_model</a></p><p><img src="https://photo.jomeswang.top/20210214215717.png" alt=""></p><p>作者： 罗立旺  龚晓雪   张雯</p><p><img src="https://photo.jomeswang.top/20210213224418.png" alt=""></p><ul><li>首次上传于2021.2.14</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;econmoic-model&quot;&gt;&lt;a href=&quot;#econmoic-model&quot; class=&quot;headerlink&quot; title=&quot;econmoic_model&quot;&gt;&lt;/a&gt;econmoic_model&lt;/h1&gt;
    
    </summary>
    
    
      <category term="建模" scheme="https://hexo.jomeswang.top/categories/%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="建模" scheme="https://hexo.jomeswang.top/tags/%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>以太链上发行自己的代币Token</title>
    <link href="https://hexo.jomeswang.top/posts/4f7564f/"/>
    <id>https://hexo.jomeswang.top/posts/4f7564f/</id>
    <published>2021-02-13T08:18:33.000Z</published>
    <updated>2021-02-13T10:44:57.728Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近币圈随便发行的币太多了，都不知道什么币有什么的一个价值，所以自己亲自来尝试以下，发币的一个流程。</p></blockquote><a id="more"></a><h2 id="一：-流程介绍"><a href="#一：-流程介绍" class="headerlink" title="一： 流程介绍"></a>一： 流程介绍</h2><ol><li>创建自己的钱包</li><li>编写智能合约</li><li>部署智能合约</li><li>添加和接受代币</li></ol><p>智能合约地址:  <a href="https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol" target="_blank" rel="noopener">https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol</a></p><p>小狐狸钱包官网： <a href="https://metamask.io/" target="_blank" rel="noopener">https://metamask.io/</a></p><p>智能合约查询网站： <a href="https://blockexplorer.one/eth/ropsten" target="_blank" rel="noopener">https://blockexplorer.one/eth/ropsten</a></p><p>以太坊编译器： <a href="https://remix.ethereum.org/" target="_blank" rel="noopener">https://remix.ethereum.org/</a></p><h2 id="二：-创建自己的一个MetaMask-钱包"><a href="#二：-创建自己的一个MetaMask-钱包" class="headerlink" title="二： 创建自己的一个MetaMask 钱包"></a>二： 创建自己的一个MetaMask 钱包</h2><p>安装 MetaMask 插件（使用谷歌浏览器f）需要fq： <a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=zh-CN</a></p><p><img src="https://photo.jomeswang.top/20210213170032.png" alt=""></p><p>安装之后 然后他会弹出一个页面，点击确认进入来进入到这一个页面之后 ，之后点击下面的 创建钱包的这一个按钮。</p><p><img src="https://photo.jomeswang.top/20210213170301.png" alt=""></p><p>然后点击I agree，进入到设置密码的阶段。</p><p><img src="https://photo.jomeswang.top/20210213170532.png" alt=""></p><p><strong>注意：必须把下述的这一个密语复制 并且 妥善的保存下来（这是你账户的唯一凭证）</strong></p><p><img src="https://photo.jomeswang.top/20210213170546.png" alt=""></p><p>之后会让你重新输入这一个密语。</p><p>这就算 将 注册钱包的这一个流程完成啦！！！</p><h2 id="三：-编写智能合约"><a href="#三：-编写智能合约" class="headerlink" title="三： 编写智能合约"></a>三： 编写智能合约</h2><p>智能合约地址:  <a href="https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol" target="_blank" rel="noopener">https://github.com/jomeswang/solidity_learning/blob/master/Constrast/simple_erc20_constrast.sol</a></p><p>打开这一个地址然后复制里面的一个代码：</p><p><img src="https://photo.jomeswang.top/20210213172459.png" alt=""></p><h2 id="四：-部署智能合约"><a href="#四：-部署智能合约" class="headerlink" title="四： 部署智能合约"></a>四： 部署智能合约</h2><p>由于部署合约需要一定的GAS 费用，因此我们先在 测试网络上获取需要的测试ETF。</p><p><img src="https://photo.jomeswang.top/20210213173336.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210213173426.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210213173442.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210213173514.png" alt=""></p><p>然后看到下面 transactions  出现记录之后，就阔以耐心等待了，之后等3-5 分钟之后点击 刚刚那一个小猫咪插件 就阔以看到 我们已经有了 1个ETF（虽然是在测试网络上的）</p><p><img src="https://photo.jomeswang.top/20210213174244.png" alt=""></p><p>以太坊编译器： <a href="https://remix.ethereum.org/" target="_blank" rel="noopener">https://remix.ethereum.org/</a></p><p>打开这一个网站</p><p><img src="https://photo.jomeswang.top/20210213173055.png" alt=""></p><p>之后编译代码</p><p><img src="https://photo.jomeswang.top/20210213181147.png" alt=""></p><p>之后部署在测试链上去</p><p><img src="https://photo.jomeswang.top/20210213182029.png" alt=""></p><p>发现右边有这一个说明成功部署好了</p><p><img src="https://photo.jomeswang.top/20210213182213.png" alt=""></p><h2 id="六：-添加代币"><a href="#六：-添加代币" class="headerlink" title="六： 添加代币"></a>六： 添加代币</h2><p>左下角有这一个出现</p><p><img src="https://photo.jomeswang.top/20210213182412.png" alt=""></p><p>复制后要在 metamask 钱包中添加这一个代币</p><p><img src="https://photo.jomeswang.top/20210213182454.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210213182618.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210213182638.png" alt=""></p><p>有啦！！！！</p><p><img src="https://photo.jomeswang.top/20210213182707.png" alt=""></p><p>成功导入 ！！！！</p><p>发现整一个发布代币的流程非常简单。。。。。。 而且代币还有更简单的一个发布手段，代币做起来不难，主要是看代币背后的团队以及项目靠不靠谱，在2021的这一个大牛市时保持一番对币的清晰认识，这总归是我们这一群开发者所要做的事情，为大家解开发币的神秘面纱，普及区块链概念，让更多人了解区块链，认识区块链，看到区块链给我们生活带来的改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近币圈随便发行的币太多了，都不知道什么币有什么的一个价值，所以自己亲自来尝试以下，发币的一个流程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://hexo.jomeswang.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://hexo.jomeswang.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太链开发" scheme="https://hexo.jomeswang.top/tags/%E4%BB%A5%E5%A4%AA%E9%93%BE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2020-年春节总结</title>
    <link href="https://hexo.jomeswang.top/posts/22ff3d83/"/>
    <id>https://hexo.jomeswang.top/posts/22ff3d83/</id>
    <published>2021-02-12T10:11:02.000Z</published>
    <updated>2021-02-14T13:43:58.455Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学会顺势而为。这样才能在未来找到属于自己的一个机遇。</p></blockquote><a id="more"></a><p>2020年对全球而言是非常特殊的一年，因为疫情的原因，我们都被锁在了家里难以回到学校继续我们的学业，但是呢！！！！！！阔以和好朋友一起快乐地玩耍呀！！！真不错，阔以做自己想做的那一些事。但是也因为这样地一个原因，自己学习地方向也是很迷茫地。但是呢？？我觉得一切都是铺垫，为了自己能够对后面接的这些项目做了一个思维上地一个铺垫。好多呀！！我后面整理以下先再说吧！！</p><h2 id="一：-学习上"><a href="#一：-学习上" class="headerlink" title="一： 学习上"></a>一： 学习上</h2><h3 id="1-1-学习内容"><a href="#1-1-学习内容" class="headerlink" title="1.1 学习内容"></a>1.1 学习内容</h3><p>额，怎么说呢？ 在上半年中由于待在了家里，就非常地摸鱼！！！</p><p>上学期的话由于还在原来的微电专业，学习的还是原来电子相关的课程像（电路分析这些），但我后面呢？？？发现我对这些的兴趣不是很大，我希望呢！！！由于后面做项目的原因，做着做着就突然发现自己已经逃不出技术这一个大圈子里了，干着干着就突然变成了前端工程师了，额。。。。。。。算了算了干就干吧！！！之后呢！！被骗去计软的这一个圈子里，额 发现我也不是特别喜欢这一个oyouyih东西，我到底喜欢什么东西呢？？？？？发现我对金融感兴趣哎！！！我觉得我到时应该会进金融互联网公司阔能 干区块链相关的工作或者式其他的一些东西？？？？</p><p>讲讲我在计软的一个学习状态：我的态度无所谓。。。</p><p>学习数据结构只是任务如此，学习其他的也是一样。但是呢？ 这些都是我们在成长过程中不可或缺的一大部分，相信自己，我终能够熬过去的，寻找属于自己的未来。</p><h3 id="1-2-学习成就"><a href="#1-2-学习成就" class="headerlink" title="1.2 学习成就"></a>1.2 学习成就</h3><p>旺旺还是非常棒的哦！！！！！</p><p>大一一年的时间搞到了均绩点 3.8多这是非常强的哎！！！  拿了一个 学习之星 二等 也是真不错！！！！嘻嘻嘻 之后我就跑到其他专业鬼混去啦！！！</p><p><img src="https://photo.jomeswang.top/20210213221415.png" alt=""></p><p>之后拿到这一个奖后，我就开始摸鱼了，因为我觉得学习实在没啥好玩的了。。。。。</p><h2 id="二：竞赛上"><a href="#二：竞赛上" class="headerlink" title="二：竞赛上"></a>二：竞赛上</h2><h3 id="2-1-粤港澳金融数学建模大赛"><a href="#2-1-粤港澳金融数学建模大赛" class="headerlink" title="2.1  粤港澳金融数学建模大赛"></a>2.1  粤港澳金融数学建模大赛</h3><p>之后呢，和晓雪，张雯她们一起打了两个建模比赛，一个是大湾区金融建模竞赛，一个是美赛，额。。。。我的感觉是啥呢？？？ 比赛得时候确实会感觉到非常累得一个感觉，但是呢，，， 我却感觉到非常得充实，喜欢这样的一个 生活，喜欢这样的一个忙碌得生活，虽然会好累，但是却享受这样得一个过程，享受大家一起努力奋斗得一个生活，这就是我喜欢得一个生活.呀！！</p><p><img src="https://photo.jomeswang.top/20210213224418.png" alt=""></p><p>当然呢？？ 我也是超级感觉累得。。。。。额</p><p><img src="https://photo.jomeswang.top/20210213225853.png" alt=""></p><p>这一题做的是这样得一个样子！！！</p><p>我们呢！！！ 哈哈哈 ！！！！ 用了好几天的一个时间，来对这一个东西进行一个分析，然后还是我最后排版的，累死了。 超级怀念当初那一个充满活力的那一个自己啊！！！！希望未来阔以越来越棒哦！！！！我自己的一个代码哈  我来整理以下有点多，然后我就放上来吧！！</p><p>提交数据Github地址： <a href="https://github.com/jomeswang/econmoic_model" target="_blank" rel="noopener">https://github.com/jomeswang/econmoic_model</a></p><h3 id="2-2-美赛（F-题）"><a href="#2-2-美赛（F-题）" class="headerlink" title="2.2  美赛（F 题）"></a>2.2  美赛（F 题）</h3><p><a href="https://shimo.im/docs/q8WXPHcXVwxpWgKQ" target="_blank" rel="noopener">https://shimo.im/docs/q8WXPHcXVwxpWgKQ</a><br>美赛记录文档（题目翻译，注意事项） </p><p><a href="https://shimo.im/docs/rvJtWJjJhdXtR6xj" target="_blank" rel="noopener">https://shimo.im/docs/rvJtWJjJhdXtR6xj</a><br>美赛论文 记录文档<br>找到相关链接可以丢进去<br>记录格式  中文标题  链接      关键内容截图<br>自己的看法文档如何结合起题目以至于模型</p><p>美赛将于北京时间2021年‍‍‍‍‍‍‍‍‍2月5日上午6:00至2月9日上午9:00举行。</p><h2 id="三：项目上"><a href="#三：项目上" class="headerlink" title="三：项目上"></a>三：项目上</h2><p>今年肝了好多项目呀！！！</p><p>我先汇总一下！！！</p><p>对了 单单一个学期就被骗去好几个 开发团队了  哈哈哈  但最终发现校内团队，每一个可行的，都是有头但是过程 哈哈哈！！！</p><p>阿布这个人 我觉得的话，太过技术化了，很少从我们的一个角度去思考问题，感觉这样不太行，技术做领导，处理人与人之间的关系，真的不行啊。。。。。。</p><h3 id="3-1-百姓渔村"><a href="#3-1-百姓渔村" class="headerlink" title="3.1  百姓渔村"></a>3.1  百姓渔村</h3><p>之前在做这一个项目的时候，做的是一个小程序的管理后台，基本实现了大多数的一个功能，但还是套用的是 vue-admin-el 的一个后台管理模板，额。。。。技术还不够娴熟，希望你阔以继续努力的提高呀！！！</p><p>地址： <a href="https://github.com/Miigon/baixin-console" target="_blank" rel="noopener">https://github.com/Miigon/baixin-console</a></p><h3 id="3-2-大学生荔教"><a href="#3-2-大学生荔教" class="headerlink" title="3.2 大学生荔教"></a>3.2 大学生荔教</h3><p><img src="https://photo.jomeswang.top/20210214010925.png" alt=""></p><p>已上线项目：二维码见下</p><p><img src="https://photo.jomeswang.top/20210214011335.png" alt=""></p><h3 id="3-3-深大树洞和荔小树的改进"><a href="#3-3-深大树洞和荔小树的改进" class="headerlink" title="3.3 深大树洞和荔小树的改进"></a>3.3 深大树洞和荔小树的改进</h3><p>深大树洞的修改已上线 但仍有许多的一个问题 还没修复完成</p><p>。。。</p><h3 id="3-4-深大百科，实验室交流平台（待完成）"><a href="#3-4-深大百科，实验室交流平台（待完成）" class="headerlink" title="3.4 深大百科，实验室交流平台（待完成）"></a>3.4 深大百科，实验室交流平台（待完成）</h3><p>。。。。。。</p><h3 id="3-5-402-网站搭建"><a href="#3-5-402-网站搭建" class="headerlink" title="3.5 402 网站搭建"></a>3.5 402 网站搭建</h3><p>。。。。。。</p><h2 id="四：情感上"><a href="#四：情感上" class="headerlink" title="四：情感上"></a>四：情感上</h2><p>5555  好难！！！！算了 还是一直做单身🐕 吧！！！！ 哈哈哈哈哈哈！！</p><h2 id="五：编程上"><a href="#五：编程上" class="headerlink" title="五：编程上"></a>五：编程上</h2><p>学习 React, 小程序云开发，小程序使用。但是呢  在做业务的同时缺乏了对技术</p><h2 id="六：理财上"><a href="#六：理财上" class="headerlink" title="六：理财上"></a>六：理财上</h2><p>看了一些理财的书如： 富爸爸穷爸爸等 使用币投资和资金获得了一定的 资金汇报</p><h2 id="七：总结"><a href="#七：总结" class="headerlink" title="七：总结"></a>七：总结</h2><p>我再想一想。。。。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学会顺势而为。这样才能在未来找到属于自己的一个机遇。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://hexo.jomeswang.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="https://hexo.jomeswang.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>区块链学习二(以太坊)</title>
    <link href="https://hexo.jomeswang.top/posts/4a21ea90/"/>
    <id>https://hexo.jomeswang.top/posts/4a21ea90/</id>
    <published>2021-02-11T02:14:36.000Z</published>
    <updated>2021-02-14T13:44:21.214Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习新技术，享受新技术给我们带来的新突破</p></blockquote><a id="more"></a><h2 id="一：以太坊账户"><a href="#一：以太坊账户" class="headerlink" title="一：以太坊账户"></a>一：以太坊账户</h2><p>比特币的计算余额通过交易来计算，</p><p>以太坊基于账户的计算方式</p><p><img src="https://photo.jomeswang.top/20210211103243.png" alt=""></p><h2 id="二：以太坊的数据结构（状态树，交易树，收据树）"><a href="#二：以太坊的数据结构（状态树，交易树，收据树）" class="headerlink" title="二：以太坊的数据结构（状态树，交易树，收据树）"></a>二：以太坊的数据结构（状态树，交易树，收据树）</h2><p>状态树 -&gt; 前缀树（MPT      ）</p><p><img src="https://photo.jomeswang.top/20210211112112.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210211112345.png" alt=""></p><p>听不懂。。。。。。。。</p><h2 id="三：-以太坊的共识机制（GHOST）"><a href="#三：-以太坊的共识机制（GHOST）" class="headerlink" title="三： 以太坊的共识机制（GHOST）"></a>三： 以太坊的共识机制（GHOST）</h2><p> 出块时间短，迭代速度快， 无法成为最长链的快阔以成为 叔父区块，也阔以获得 7/8*3 的区块奖励。</p><h3 id="3-1-POW"><a href="#3-1-POW" class="headerlink" title="3.1  POW"></a>3.1  POW</h3><p>要研发出防止 ASIC Resistance 的共识算法</p><p>于是用内存来进行挖矿！！！ 第一个是LTC，使用scrypt算法！！！。</p><h3 id="3-2-POS-（PROOTAF-OF-STATE）"><a href="#3-2-POS-（PROOTAF-OF-STATE）" class="headerlink" title="3.2 POS （PROOTAF OF STATE）"></a>3.2 POS （PROOTAF OF STATE）</h3><p>量多的有投票权。</p><p>按照投票来获得记账权。</p><p>( ETF2.0    FFG)</p><h3 id="3-2-POD-（proof-of-prosit）"><a href="#3-2-POD-（proof-of-prosit）" class="headerlink" title="3.2 POD （proof of prosit）"></a>3.2 POD （proof of prosit）</h3><p>听不懂！！！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习新技术，享受新技术给我们带来的新突破&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://hexo.jomeswang.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://hexo.jomeswang.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="以太坊" scheme="https://hexo.jomeswang.top/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>区块链学习一（比特币）</title>
    <link href="https://hexo.jomeswang.top/posts/566c809e/"/>
    <id>https://hexo.jomeswang.top/posts/566c809e/</id>
    <published>2021-02-10T04:32:30.000Z</published>
    <updated>2021-02-14T13:44:49.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>逐渐打开区块链的神秘的大门</p></blockquote><a id="more"></a><h2 id="一：-比特币的密码学原理"><a href="#一：-比特币的密码学原理" class="headerlink" title="一： 比特币的密码学原理"></a>一： 比特币的密码学原理</h2><h3 id="1-1-哈希函数"><a href="#1-1-哈希函数" class="headerlink" title="1.1  哈希函数"></a>1.1  哈希函数</h3><h4 id="1-1-1-哈希碰撞"><a href="#1-1-1-哈希碰撞" class="headerlink" title="1.1.1  哈希碰撞"></a>1.1.1  哈希碰撞</h4><p>选取的哈希函数需要 有 collision resistance  即 在常理认为 哈希之后的数不会重复。</p><h4 id="1-1-2-哈希单向性"><a href="#1-1-2-哈希单向性" class="headerlink" title="1.1.2 哈希单向性"></a>1.1.2 哈希单向性</h4><p>即 x-&gt; f(x)  是 单向性的，即f（x） 不可能 得出 x的  (条件： 输入的值范围要足够大，足够随机）所以阔以在源数据之中拼接一个 nounce 值。</p><h4 id="1-1-3-puzzle-friendly"><a href="#1-1-3-puzzle-friendly" class="headerlink" title="1.1.3  puzzle friendly"></a>1.1.3  puzzle friendly</h4><p>知道输出，无法主导输入的值的大致范围，需要一个个 的进行计算，计算出NONCE， 在 block header 中有nonce，我们就需要算出这一个 nonce 值满足以下条件。 难以解决，容易验证。</p><p><img src="https://photo.jomeswang.top/20210210142642.png" alt=""></p><h4 id="1-1-4-哈希函数的算法"><a href="#1-1-4-哈希函数的算法" class="headerlink" title="1.1.4 哈希函数的算法"></a>1.1.4 哈希函数的算法</h4><p>比特币 使用 SHA-256 哈徐算法</p><h3 id="1-2-电子签名"><a href="#1-2-电子签名" class="headerlink" title="1.2  电子签名"></a>1.2  电子签名</h3><h4 id="1-2-1-非对称加密"><a href="#1-2-1-非对称加密" class="headerlink" title="1.2.1  非对称加密"></a>1.2.1  非对称加密</h4><p>使用公私钥对方式对信息进行加密和解密。</p><p>公钥加密，私钥解密。</p><p>因此r如果用私钥来 签名，相当于电子签名。</p><h4 id="1-2-2-公私钥生成"><a href="#1-2-2-公私钥生成" class="headerlink" title="1.2.2  公私钥生成"></a>1.2.2  公私钥生成</h4><p>生成的时候随机，那么随机 选取的随机源要good</p><h2 id="二：-比特币的数据结构"><a href="#二：-比特币的数据结构" class="headerlink" title="二： 比特币的数据结构"></a>二： 比特币的数据结构</h2><h3 id="2-1-哈希指针"><a href="#2-1-哈希指针" class="headerlink" title="2.1  哈希指针"></a>2.1  哈希指针</h3><p>有 指针域和哈希域</p><p>哈希域存上一个节点的哈希值。</p><p><img src="https://photo.jomeswang.top/20210210144026.png" alt=""></p><h3 id="2-3-莫克尔树"><a href="#2-3-莫克尔树" class="headerlink" title="2.3 莫克尔树"></a>2.3 莫克尔树</h3><p>使用莫克尔树，阔以对区块记录下来的交易记录进行错误勘察（查看数据源中有哪一些是被篡改过的）</p><p><img src="https://photo.jomeswang.top/20210210144453.png" alt=""></p><h3 id="2-3-莫克尔-证明"><a href="#2-3-莫克尔-证明" class="headerlink" title="2.3   莫克尔 证明"></a>2.3   莫克尔 证明</h3><p>需要去验证当前记录已经被打包在了区块中了</p><p>节点分轻节点和全节点。 轻节点只储存 block header 部分，一般运用在手机上。u。全节点需要去储存block header 部分和 block body 部分。</p><p>当轻节点想要去查找莫一交易记录是否已经记录在区块链中的时候。</p><p>那么需要全节点提供 红色部分的哈希值，然后 用要验证的交易记录来取一次哈希，接着用红色部分的哈希再来取一次哈希，不断重复这一个步骤。 最后 验证出来的 根哈希值和轻节点拥有的根哈希值比对 看是否对的上来验证交易记录是否存在区块链中。</p><p><img src="https://photo.jomeswang.top/20210210145107.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210210211822.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210210211850.png" alt=""></p><p>​     </p><h3 id="2-4-区块结构"><a href="#2-4-区块结构" class="headerlink" title="2.4 区块结构"></a>2.4 区块结构</h3><p><img src="https://photo.jomeswang.top/20210210165809.png" alt=""></p><h2 id="三：-比特币的共识算法"><a href="#三：-比特币的共识算法" class="headerlink" title="三： 比特币的共识算法"></a>三： 比特币的共识算法</h2><h3 id="3-1-攻击方式"><a href="#3-1-攻击方式" class="headerlink" title="3.1 攻击方式"></a>3.1 攻击方式</h3><h4 id="3-1-1-双花攻击"><a href="#3-1-1-双花攻击" class="headerlink" title="3.1.1  双花攻击"></a>3.1.1  双花攻击</h4><p>一个货币使用两次</p><p>解决方案：</p><ol><li>（中心化  是由央行发行 央行确认）</li><li>（去中心化  使用 区块链方式 双向哈希指针，指向币的 来源和去向。</li></ol><h4 id="3-1-2-分叉攻击"><a href="#3-1-2-分叉攻击" class="headerlink" title="3.1.2 分叉攻击"></a>3.1.2 分叉攻击</h4><p><img src="https://photo.jomeswang.top/20210210190636.png" alt=""></p><p>六节点确认，一小时确认时间</p><h3 id="3-2-分布式共识"><a href="#3-2-分布式共识" class="headerlink" title="3.2 分布式共识"></a>3.2 分布式共识</h3><p>FLP： 在一个异步的系统里，网络延迟没有上限，那么只要有一个错误，那么就无法达到共识。</p><p>CAP: Consistyncy, Availability, Partiton tolerance 三角形模型，无法满足三者完美。</p><h4 id="3-2-1-挖矿"><a href="#3-2-1-挖矿" class="headerlink" title="3.2.1 挖矿"></a>3.2.1 挖矿</h4><p>记录账本 -&gt; 矿工 -&gt; 计算nonce -&gt; POW </p><h2 id="四：-比特币系统的实现"><a href="#四：-比特币系统的实现" class="headerlink" title="四： 比特币系统的实现"></a>四： 比特币系统的实现</h2><h3 id="4-1-激励机制"><a href="#4-1-激励机制" class="headerlink" title="4.1  激励机制"></a>4.1  激励机制</h3><p>打包-&gt; 小费 and 出块奖励</p><h3 id="4-2-出块"><a href="#4-2-出块" class="headerlink" title="4.2 出块"></a>4.2 出块</h3><p>4 年出块奖励减半（挖出21万比特币的时间为4年左右 ） 由一开始的 50个   4年之后变到 25，以及类推 最终比特币的总量为2100个。</p><p>transaction-based ledger 维护一个结构 维护 totaloutputs</p><p>account-based ledger 账户机制</p><p><img src="https://photo.jomeswang.top/20210210183435.png" alt=""></p><p><img src="https://photo.jomeswang.top/20210210185624.png" alt=""></p><h3 id="4-3-挖矿"><a href="#4-3-挖矿" class="headerlink" title="4.3  挖矿"></a>4.3  挖矿</h3><p>进行伯努利试验，并且无记忆性   保证了算力与概率之间的比例关系。</p><p><img src="https://photo.jomeswang.top/20210210185206.png" alt=""></p><h2 id="四：-比特币挖矿难度调整"><a href="#四：-比特币挖矿难度调整" class="headerlink" title="四： 比特币挖矿难度调整"></a>四： 比特币挖矿难度调整</h2><p><img src="https://photo.jomeswang.top/20210210211015.png" alt=""></p><p> <img src="https://photo.jomeswang.top/20210210214129.png" alt=""> </p><h2 id="五：-分叉"><a href="#五：-分叉" class="headerlink" title="五： 分叉"></a>五： 分叉</h2><h3 id="5-1-状态分叉"><a href="#5-1-状态分叉" class="headerlink" title="5.1 状态分叉"></a>5.1 状态分叉</h3><p>分叉攻击</p><p><img src="https://photo.jomeswang.top/20210210232019.png" alt=""></p><h3 id="5-2-协议分叉"><a href="#5-2-协议分叉" class="headerlink" title="5.2 协议分叉"></a>5.2 协议分叉</h3><h4 id="5-2-1-硬分叉"><a href="#5-2-1-硬分叉" class="headerlink" title="5.2.1 硬分叉"></a>5.2.1 硬分叉</h4><p>对协议的内容产生分叉</p><ol><li>区块大小限制 1M （7tx/sec）</li></ol><h4 id="5-2-2-软分叉"><a href="#5-2-2-软分叉" class="headerlink" title="5.2.2 软分叉"></a>5.2.2 软分叉</h4><p>待探索</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;逐渐打开区块链的神秘的大门&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="https://hexo.jomeswang.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://hexo.jomeswang.top/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="比特币" scheme="https://hexo.jomeswang.top/tags/%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>前端进阶之路</title>
    <link href="https://hexo.jomeswang.top/posts/948da657/"/>
    <id>https://hexo.jomeswang.top/posts/948da657/</id>
    <published>2021-01-01T08:10:18.000Z</published>
    <updated>2021-02-13T10:44:57.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拨开一切的迷雾，最终一定能看到事物的本质！</p></blockquote><a id="more"></a><h2 id="一：-JS-相关"><a href="#一：-JS-相关" class="headerlink" title="一： JS 相关"></a>一： JS 相关</h2><h3 id="1-1-基础类型"><a href="#1-1-基础类型" class="headerlink" title="1.1 基础类型"></a>1.1 基础类型</h3><p>七种原始数据类型</p><ul><li>boolean</li><li>null</li><li>undefined</li><li>number</li><li>string</li><li>symbol</li><li>bigint</li></ul><p>引用类型</p><ul><li>Object 对象<ul><li>Object 普通对象</li><li>Array 数组对象</li><li>RegExp 正则对象</li><li>Date 日期对象</li><li>Math 数学函数</li><li>Function 函数对象</li></ul></li></ul><h3 id="1-2-检测类型"><a href="#1-2-检测类型" class="headerlink" title="1.2 检测类型"></a>1.2 检测类型</h3><h4 id="1-2-1-typeof"><a href="#1-2-1-typeof" class="headerlink" title="1.2.1 typeof"></a>1.2.1 typeof</h4><p>对于原始类型来说，除了 null 都可以调用typeof显示正确的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'1'</span> <span class="comment">// 'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() <span class="comment">// 'symbol'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>但对于引用数据类型，除了函数之外，都会显示”object”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log <span class="comment">// 'function'</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>因此采用typeof判断对象数据类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true</p><h4 id="1-2-2-instanceof"><a href="#1-2-2-instanceof" class="headerlink" title="1.2.2 instanceof"></a>1.2.2 instanceof</h4><p>因此采用typeof判断对象数据类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line">p1 <span class="keyword">instanceof</span> Person <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'hello world'</span></span><br><span class="line">str1 <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>)</span><br><span class="line">str2 <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-实现-instanceof-的功能"><a href="#1-2-3-实现-instanceof-的功能" class="headerlink" title="1.2.3  实现 instanceof 的功能"></a>1.2.3  实现 instanceof 的功能</h4><p>核心: 原型链的向上查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//基本数据类型直接返回false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">'object'</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//getProtypeOf是Object对象自带的一个方法，能够拿到参数的原型对象</span></span><br><span class="line">    <span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(left);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//查找到尽头，还没找到</span></span><br><span class="line">        <span class="keyword">if</span>(proto == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//找到相同的原型对象</span></span><br><span class="line">        <span class="keyword">if</span>(proto == right.prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        proto = <span class="built_in">Object</span>.getPrototypeOf(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="string">"111"</span>, <span class="built_in">String</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(myInstanceof(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"111"</span>), <span class="built_in">String</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-类型转换"><a href="#1-3-类型转换" class="headerlink" title="1.3 类型转换"></a>1.3 类型转换</h3><h4 id="1-3-1-类型转换"><a href="#1-3-1-类型转换" class="headerlink" title="1.3.1  类型转换"></a>1.3.1  类型转换</h4><ul><li><p>转换为布尔值</p></li><li><p>转换为数字</p></li><li><p>转换为字符串</p></li></ul><p>  <img src="http://photo.jomeswang.top/20210101234802.png" alt=""></p><h4 id="1-3-2-结果是什么？为什么？"><a href="#1-3-2-结果是什么？为什么？" class="headerlink" title="1.3.2 [] == ![]结果是什么？为什么？"></a>1.3.2 [] == ![]结果是什么？为什么？</h4><p>== 中，左右两边都需要转换为数字然后进行比较。</p><p>[]转换为数字为0。</p><p>![] 首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true。</p><p>因此![]为false，进而在转换成数字，变为0。</p><p>0 == 0 ， 结果为true。</p><h3 id="1-4-闭包"><a href="#1-4-闭包" class="headerlink" title="1.4  闭包"></a>1.4  闭包</h3><p>红宝书(p178)上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数.</p><h4 id="1-4-1-闭包产生的原因"><a href="#1-4-1-闭包产生的原因" class="headerlink" title="1.4.1 闭包产生的原因?"></a>1.4.1 闭包产生的原因?</h4><p>首先要明白作用域链的概念，其实很简单，在ES5中只存在两种作用域————全局作用域和函数作用域，<code>当访问一个变量时，解释器会首先在当前作用域查找标示符，如果没有找到，就去父作用域找，直到找到该变量的标示符或者不在父作用域中，这就是作用域链</code>，值得注意的是，每一个子函数都会拷贝上级的作用域，形成一个作用域的链条。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function f1() &#123;</span><br><span class="line">  var a &#x3D; 2</span><br><span class="line">  function f2() &#123;</span><br><span class="line">    console.log(a);&#x2F;&#x2F;2</span><br><span class="line">  &#125;</span><br><span class="line">  return f2;</span><br><span class="line">&#125;</span><br><span class="line">var x &#x3D; f1();</span><br><span class="line">x();</span><br></pre></td></tr></table></figure><h4 id="1-4-2-闭包有哪些表现形式"><a href="#1-4-2-闭包有哪些表现形式" class="headerlink" title="1.4.2  闭包有哪些表现形式?"></a>1.4.2  闭包有哪些表现形式?</h4><p>明白了本质之后，我们就来看看，在真实的场景中，究竟在哪些地方能体现闭包的存在？</p><ol><li><p>返回一个函数。刚刚已经举例。</p></li><li><p>作为函数参数传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">function foo()&#123;</span><br><span class="line">  var a &#x3D; 2;</span><br><span class="line">  function baz()&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  bar(baz);</span><br><span class="line">&#125;</span><br><span class="line">function bar(fn)&#123;</span><br><span class="line">  &#x2F;&#x2F; 这就是闭包</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 输出2，而不是1</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>在定时器、事件监听、Ajax请求、跨窗口通信、Web Workers或者任何异步中，只要使用了回调函数，实际上就是在使用闭包。</p></li><li><p>IIFE(立即执行函数表达式)创建闭包, 保存了<code>全局作用域window</code>和<code>当前函数的作用域</code>，因此可以全局的变量。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 2;</span><br><span class="line">(function IIFE()&#123;</span><br><span class="line">  &#x2F;&#x2F; 输出2</span><br><span class="line">  console.log(a);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="1-5-原型链相关"><a href="#1-5-原型链相关" class="headerlink" title="1.5 原型链相关"></a>1.5 原型链相关</h3><h4 id="1-5-1-原型对象和构造函数有何关系？"><a href="#1-5-1-原型对象和构造函数有何关系？" class="headerlink" title="1.5.1 .原型对象和构造函数有何关系？"></a>1.5.1 .原型对象和构造函数有何关系？</h4><p>在JavaScript中，每当定义一个函数数据类型(普通函数、类)时候，都会天生自带一个prototype属性，这个属性指向函数的原型对象。</p><p>当函数经过new调用时，这个函数就成为了构造函数，返回一个全新的实例对象，这个实例对象有一个<strong>proto</strong>属性，指向构造函数的原型对象。</p><p><img src="http://photo.jomeswang.top/20210102004853.png" alt=""></p><h4 id="1-5-2-描述一下-原型链"><a href="#1-5-2-描述一下-原型链" class="headerlink" title="1.5.2 描述一下 原型链"></a>1.5.2 描述一下 原型链</h4><p>JavaScript对象通过<strong>proto</strong> 指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条, 即原型链。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de955ca89f6091?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><ul><li>对象的 hasOwnProperty() 来检查对象自身中是否含有该属性</li><li>使用 in 检查对象中是否含有某个属性时，如果对象中没有但是原型链中有，也会返回 true</li></ul><h4 id="1-5-3-原型和原型链"><a href="#1-5-3-原型和原型链" class="headerlink" title="1.5.3 原型和原型链"></a>1.5.3 原型和原型链</h4><p>其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链</p><p><img src="http://photo.jomeswang.top/20210102005401.png" alt=""></p><p>看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 <code>__proto__</code> 的方式连接了起来。为什么 <code>obj</code> 可以访问到 <code>valueOf</code> 函数，就是因为 <code>obj</code> 通过原型链找到了 <code>valueOf</code> 函数。</p><p>对于这一小节的知识点，总结起来就是以下几点：</p><ul><li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li><li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li><li>函数的 <code>prototype</code> 是一个对象</li><li>对象的 <code>__proto__</code> 属性指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链</li></ul><h4 id="1-6-继承相关"><a href="#1-6-继承相关" class="headerlink" title="1.6 继承相关"></a>1.6 继承相关</h4><h4 id="1-6-1-借助call"><a href="#1-6-1-借助call" class="headerlink" title="1.6.1  借助call"></a>1.6.1  借助call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent1'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Parent1.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child1);</span><br></pre></td></tr></table></figure><p>这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。</p><h4 id="1-6-2-借助原型链"><a href="#1-6-2-借助原型链" class="headerlink" title="1.6.2 借助原型链"></a>1.6.2 借助原型链</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent2'</span>;</span><br><span class="line">  <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child2'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child2.prototype = <span class="keyword">new</span> Parent2();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child2());</span><br></pre></td></tr></table></figure><p>看似没有问题，父类的方法和属性都能够访问，但实际上有一个潜在的不足。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Child2();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Child2();</span><br><span class="line">s1.play.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1.play, s2.play);</span><br></pre></td></tr></table></figure><p>可以看到控制台：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de955fbdbd9d9c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>明明我只改变了s1的play属性，为什么s2也跟着变了呢？很简单，因为两个实例使用的是同一个原型对象。</p><p>那么还有更好的方式么？</p><h4 id="1-6-3-将前两种组合"><a href="#1-6-3-将前两种组合" class="headerlink" title="1.6.3  将前两种组合"></a>1.6.3  将前两种组合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent3'</span>;</span><br><span class="line">  <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent3.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child3'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child3.prototype = <span class="keyword">new</span> Parent3();</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Child3();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Child3();</span><br><span class="line">s3.play.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s3.play, s4.play);</span><br></pre></td></tr></table></figure><p>可以看到控制台：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de95621c0cdde1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>之前的问题都得以解决。但是这里又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype = new Parent3();）。这是我们不愿看到的。那么如何解决这个问题？</p><h4 id="1-6-4-组合继承的优化1"><a href="#1-6-4-组合继承的优化1" class="headerlink" title="1.6.4  组合继承的优化1"></a>1.6.4  组合继承的优化1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent4'</span>;</span><br><span class="line">  <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent4.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child4'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child4.prototype = Parent4.prototype;</span><br></pre></td></tr></table></figure><p>这里让将父类原型对象直接给到子类，父类构造函数只执行一次，而且父类属性和方法均能访问，但是我们来测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Child4();</span><br><span class="line"><span class="built_in">console</span>.log(s3)</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de956480812408?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>子类实例的构造函数是Parent4，显然这是不对的，应该是Child4。</p><h4 id="1-6-5-最推荐使用-组合继承的优化1"><a href="#1-6-5-最推荐使用-组合继承的优化1" class="headerlink" title="1.6.5  (最推荐使用): 组合继承的优化1"></a>1.6.5  (最推荐使用): 组合继承的优化1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Parent5</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'parent5'</span>;</span><br><span class="line">    <span class="keyword">this</span>.play = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Child5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent5.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'child5'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Child5.prototype = <span class="built_in">Object</span>.create(Parent5.prototype);</span><br><span class="line">  Child5.prototype.constructor = Child5;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这是最推荐的一种方式，接近完美的继承，它的名字也叫做寄生组合继承。</p><h3 id="1-6-手写JS-Array-原生方法"><a href="#1-6-手写JS-Array-原生方法" class="headerlink" title="1.6 手写JS  Array 原生方法"></a>1.6 手写JS  Array 原生方法</h3><h4 id="1-6-1-实现-Array-prototype-map-方法"><a href="#1-6-1-实现-Array-prototype-map-方法" class="headerlink" title="1.6.1 实现 Array.prototype.map 方法"></a>1.6.1 实现 Array.prototype.map 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.mymap &#x3D; function(callbackFn, thisArg) &#123;</span><br><span class="line">  &#x2F;&#x2F; 处理数组类型异常</span><br><span class="line">  if (this &#x3D;&#x3D;&#x3D; null || this &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">    throw new TypeError(&quot;Cannot read property &#39;map&#39; of null or undefined&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 处理回调类型异常</span><br><span class="line">  if (Object.prototype.toString.call(callbackFn) !&#x3D; &quot;[object Function]&quot;) &#123;</span><br><span class="line">    throw new TypeError(callbackFn + &#39; is not a function&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 草案中提到要先转换为对象</span><br><span class="line">  let O &#x3D; Object(this);</span><br><span class="line">  let T &#x3D; thisArg;</span><br><span class="line">  </span><br><span class="line">  let len &#x3D; O.length &gt;&gt;&gt; 0;</span><br><span class="line">  let A &#x3D; new Array(len);</span><br><span class="line">  for(let k &#x3D; 0; k &lt; len; k++) &#123;</span><br><span class="line">    &#x2F;&#x2F; 还记得原型链那一节提到的 in 吗？in 表示在原型链查找</span><br><span class="line">    &#x2F;&#x2F; 如果用 hasOwnProperty 是有问题的，它只能找私有属性</span><br><span class="line">    if (k in O) &#123;</span><br><span class="line">      let kValue &#x3D; O[k];</span><br><span class="line">      &#x2F;&#x2F; 依次传入this, 当前项，当前索引，整个数组</span><br><span class="line">      let mappedValue &#x3D; callbackFn.call(T, kValue, k, O);</span><br><span class="line">      A[k] &#x3D; mappedValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里解释一下, length &gt;&gt;&gt; 0, 字面意思是指”右移 0 位”，但实际上是把前面的空位用0填充，这里的作用是保证len为数字且为整数。</p><h4 id="1-6-2-实现-Array-prototype-reduce-方法"><a href="#1-6-2-实现-Array-prototype-reduce-方法" class="headerlink" title="1.6.2  实现 Array.prototype.reduce 方法"></a>1.6.2  实现 Array.prototype.reduce 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.reduce  &#x3D; function(callbackfn, initialValue) &#123;</span><br><span class="line">  &#x2F;&#x2F; 异常处理，和 map 一样</span><br><span class="line">  &#x2F;&#x2F; 处理数组类型异常</span><br><span class="line">  if (this &#x3D;&#x3D;&#x3D; null || this &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">    throw new TypeError(&quot;Cannot read property &#39;reduce&#39; of null or undefined&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 处理回调类型异常</span><br><span class="line">  if (Object.prototype.toString.call(callbackfn) !&#x3D; &quot;[object Function]&quot;) &#123;</span><br><span class="line">    throw new TypeError(callbackfn + &#39; is not a function&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  let O &#x3D; Object(this);</span><br><span class="line">  let len &#x3D; O.length &gt;&gt;&gt; 0;</span><br><span class="line">  let k &#x3D; 0;</span><br><span class="line">  let accumulator &#x3D; initialValue;</span><br><span class="line">  if (accumulator &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">    for(; k &lt; len ; k++) &#123;</span><br><span class="line">      &#x2F;&#x2F; 查找原型链</span><br><span class="line">      if (k in O) &#123;</span><br><span class="line">        accumulator &#x3D; O[k];</span><br><span class="line">        k++;</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 表示数组全为空</span><br><span class="line">  if(k &#x3D;&#x3D;&#x3D; len &amp;&amp; accumulator &#x3D;&#x3D;&#x3D; undefined) </span><br><span class="line">    throw new Error(&#39;Each element of the array is empty&#39;);</span><br><span class="line">  for(;k &lt; len; k++) &#123;</span><br><span class="line">    if (k in O) &#123;</span><br><span class="line">      &#x2F;&#x2F; 注意，核心！</span><br><span class="line">      accumulator &#x3D; callbackfn.call(undefined, accumulator, O[k], k, O);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return accumulator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6-3-实现-Array-prototype-push-pop-方法"><a href="#1-6-3-实现-Array-prototype-push-pop-方法" class="headerlink" title="1.6.3 实现 Array.prototype.push  pop 方法"></a>1.6.3 实现 Array.prototype.push  pop 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.push &#x3D; function(...items) &#123;</span><br><span class="line">  let O &#x3D; Object(this);</span><br><span class="line">  let len &#x3D; this.length &gt;&gt;&gt; 0;</span><br><span class="line">  let argCount &#x3D; items.length &gt;&gt;&gt; 0;</span><br><span class="line">  &#x2F;&#x2F; 2 ** 53 - 1 为JS能表示的最大正整数</span><br><span class="line">  if (len + argCount &gt; 2 ** 53 - 1) &#123;</span><br><span class="line">    throw new TypeError(&quot;The number of array is over the max value restricted!&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  for(let i &#x3D; 0; i &lt; argCount; i++) &#123;</span><br><span class="line">    O[len + i] &#x3D; items[i];</span><br><span class="line">  &#125;</span><br><span class="line">  let newLength &#x3D; len + argCount;</span><br><span class="line">  O.length &#x3D; newLength;</span><br><span class="line">  return newLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Array.prototype.pop &#x3D; function() &#123;</span><br><span class="line">  let O &#x3D; Object(this);</span><br><span class="line">  let len &#x3D; this.length &gt;&gt;&gt; 0;</span><br><span class="line">  if (len &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">    O.length &#x3D; 0;</span><br><span class="line">    return undefined;</span><br><span class="line">  &#125;</span><br><span class="line">  len --;</span><br><span class="line">  let value &#x3D; O[len];</span><br><span class="line">  delete O[len];</span><br><span class="line">  O.length &#x3D; len;</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6-4-实现-Array-prototype-filter-方法"><a href="#1-6-4-实现-Array-prototype-filter-方法" class="headerlink" title="1.6.4 实现 Array.prototype.filter 方法"></a>1.6.4 实现 Array.prototype.filter 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.filter &#x3D; function(callbackfn, thisArg) &#123;</span><br><span class="line">  &#x2F;&#x2F; 处理数组类型异常</span><br><span class="line">  if (this &#x3D;&#x3D;&#x3D; null || this &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">    throw new TypeError(&quot;Cannot read property &#39;filter&#39; of null or undefined&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 处理回调类型异常</span><br><span class="line">  if (Object.prototype.toString.call(callbackfn) !&#x3D; &quot;[object Function]&quot;) &#123;</span><br><span class="line">    throw new TypeError(callbackfn + &#39; is not a function&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  let O &#x3D; Object(this);</span><br><span class="line">  let len &#x3D; O.length &gt;&gt;&gt; 0;</span><br><span class="line">  let resLen &#x3D; 0;</span><br><span class="line">  let res &#x3D; [];</span><br><span class="line">  for(let i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    if (i in O) &#123;</span><br><span class="line">      let element &#x3D; O[i];</span><br><span class="line">      if (callbackfn.call(thisArg, O[i], i, O)) &#123;</span><br><span class="line">        res[resLen++] &#x3D; element;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-手写-new-apply-call-bind-方法"><a href="#1-7-手写-new-apply-call-bind-方法" class="headerlink" title="1.7 手写 new, apply, call, bind 方法"></a>1.7 手写 new, apply, call, bind 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">function newOperator(ctor, ...args) &#123;</span><br><span class="line">    if(typeof ctor !&#x3D;&#x3D; &#39;function&#39;)&#123;</span><br><span class="line">      throw &#39;newOperator function the first param must be a function&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    let obj &#x3D; Object.create(ctor.prototype);</span><br><span class="line">    let res &#x3D; ctor.apply(obj, args);</span><br><span class="line">    </span><br><span class="line">    let isObject &#x3D; typeof res &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; res !&#x3D;&#x3D; null;</span><br><span class="line">    let isFunction &#x3D; typoof res &#x3D;&#x3D;&#x3D; &#39;function&#39;;</span><br><span class="line">    return isObect || isFunction ? res : obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function.prototype.bind &#x3D; function (context, ...args) &#123;</span><br><span class="line">    if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;</span><br><span class="line">      throw new Error(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var self &#x3D; this;</span><br><span class="line"></span><br><span class="line">    var fbound &#x3D; function () &#123;</span><br><span class="line">        self.apply(this instanceof self ? </span><br><span class="line">            this : </span><br><span class="line">            context, args.concat(Array.prototype.slice.call(arguments)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fbound.prototype &#x3D; Object.create(self.prototype);</span><br><span class="line"></span><br><span class="line">    return fbound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Function.prototype.call &#x3D; function (context, ...args) &#123;</span><br><span class="line">  let context &#x3D; context || window;</span><br><span class="line">  let fn &#x3D; Symbol(&#39;fn&#39;);</span><br><span class="line">  context.fn &#x3D; this;</span><br><span class="line"></span><br><span class="line">  let result &#x3D; eval(&#39;context.fn(...args)&#39;);</span><br><span class="line"></span><br><span class="line">  delete context.fn</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Function.prototype.apply &#x3D; function (context, args) &#123;</span><br><span class="line">  let context &#x3D; context || window;</span><br><span class="line">  context.fn &#x3D; this;</span><br><span class="line">  let result &#x3D; eval(&#39;context.fn(...args)&#39;);</span><br><span class="line"></span><br><span class="line">  delete context.fn</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二：-HTML-CSS-相关"><a href="#二：-HTML-CSS-相关" class="headerlink" title="二： HTML, CSS 相关"></a>二： HTML, CSS 相关</h2><h2 id="三：-浏览器相关"><a href="#三：-浏览器相关" class="headerlink" title="三： 浏览器相关"></a>三： 浏览器相关</h2><h2 id="四：-框架进阶"><a href="#四：-框架进阶" class="headerlink" title="四： 框架进阶"></a>四： 框架进阶</h2><h2 id="五：-打包造轮子"><a href="#五：-打包造轮子" class="headerlink" title="五： 打包造轮子"></a>五： 打包造轮子</h2><h2 id="六：-计算机网络"><a href="#六：-计算机网络" class="headerlink" title="六： 计算机网络"></a>六： 计算机网络</h2><h2 id="七：-设计模式"><a href="#七：-设计模式" class="headerlink" title="七： 设计模式"></a>七： 设计模式</h2><h2 id="八：-数据结构"><a href="#八：-数据结构" class="headerlink" title="八： 数据结构"></a>八： 数据结构</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;拨开一切的迷雾，最终一定能看到事物的本质！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/categories/JS/"/>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS Generator 生成器和迭代器</title>
    <link href="https://hexo.jomeswang.top/posts/d567a06f/"/>
    <id>https://hexo.jomeswang.top/posts/d567a06f/</id>
    <published>2020-12-30T05:41:00.000Z</published>
    <updated>2021-01-01T08:07:11.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS的 生成器真的是一个神奇的东西， yield 和  function*（）</p></blockquote><a id="more"></a><p>在 JavaScript 中，<strong>迭代器</strong>是一个对象，它定义一个序列，并在终止时可能返回一个返回值。 更具体地说，迭代器是通过使用 <code>next()</code> 方法实现 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol" target="_blank" rel="noopener">Iterator protocol</a> 的任何一个对象，该方法返回具有两个属性的对象： <code>value</code>，这是序列中的 next 值；和 <code>done</code> ，如果已经迭代到序列中的最后一个值，则它为 <code>true</code> 。如果 <code>value</code> 和 <code>done</code> 一起存在，则它是迭代器的返回值。</p><p>一旦创建，迭代器对象可以通过重复调用next（）显式地迭代。 迭代一个迭代器被称为消耗了这个迭代器，因为它通常只能执行一次。 在产生终止值之后，对next（）的额外调用应该继续返回{done：true}。</p><p>The <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator/next" target="_blank" rel="noopener"><code>next()</code></a> 方法也接受一个参数用于修改生成器内部状态。传递给 <code>next()</code> 的参数值会被yield接收。要注意的是，传给第一个 <code>next()</code> 的值会被忽略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function * generatorFunction()&#123;</span><br><span class="line">  yield;</span><br><span class="line">  foo(yield &quot;I am a good boy!!&quot;)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo(x)&#123;</span><br><span class="line">  console.log(&quot;Hello !!&quot;, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let generator &#x3D; generatorFunction()</span><br><span class="line">console.log(generator.next());  &#x2F;&#x2F;  &#123; value: undefined, done: false &#125;</span><br><span class="line">console.log(generator.next());  &#x2F;&#x2F;  &#123; value: &#39;I am a good boy!!&#39;, done: false &#125;</span><br><span class="line">console.log(generator.next(23)); &#x2F;&#x2F; &#123; value: undefined, done: true &#125; 23 will be transpoted to yield yield &quot;I am a good boy!!&quot; as the x in the foo fuc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JS的 生成器真的是一个神奇的东西， yield 和  function*（）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/categories/JS/"/>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS Event Loop机制</title>
    <link href="https://hexo.jomeswang.top/posts/ad8e9b31/"/>
    <id>https://hexo.jomeswang.top/posts/ad8e9b31/</id>
    <published>2020-12-29T11:25:45.000Z</published>
    <updated>2020-12-29T11:48:38.166Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇写 JS 讲异步，任务的文章超级好！！</p></blockquote><a id="more"></a><p>文章链接： <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p><p>上一小节我们讲到了什么是执行栈，大家也知道了当我们执行 JS 代码的时候其实就是往执行栈中放入函数，那么遇到异步代码的时候该怎么办？其实当遇到异步的代码时，会被<strong>挂起</strong>并在需要执行的时候加入到 Task（有多种 Task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。</p><p><img src="http://books.shepiji.top/BOOKLETS_IMAGES/16740fa4cd9c6937" alt="img">事件循环</p><p>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 <strong>微任务</strong>（microtask） 和 <strong>宏任务</strong>（macrotask）。在 ES6 规范中，microtask 称为 <code>jobs</code>，macrotask 称为 <code>task</code>。下面来看以下代码的执行顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;script start&#39;)</span><br><span class="line"></span><br><span class="line">async function async1() &#123;</span><br><span class="line">  await async2()</span><br><span class="line">  console.log(&#39;async1 end&#39;)</span><br><span class="line">&#125;</span><br><span class="line">async function async2() &#123;</span><br><span class="line">  console.log(&#39;async2 end&#39;)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(&#39;setTimeout&#39;)</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;Promise&#39;)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;)</span><br><span class="line">  .then(function() &#123;</span><br><span class="line">    console.log(&#39;promise1&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function() &#123;</span><br><span class="line">    console.log(&#39;promise2&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#39;script end&#39;)</span><br><span class="line">&#x2F;&#x2F; script start &#x3D;&gt; async2 end &#x3D;&gt; Promise &#x3D;&gt; script end &#x3D;&gt; promise1 &#x3D;&gt; promise2 &#x3D;&gt; async1 end &#x3D;&gt; setTimeout</span><br></pre></td></tr></table></figure><blockquote><p>注意：新的浏览器中不是如上打印的，因为 await 变快了，具体内容可以往下看</p></blockquote><p>首先先来解释下上述代码的 <code>async</code> 和 <code>await</code> 的执行顺序。当我们调用 <code>async1</code> 函数时，会马上输出 <code>async2 end</code>，并且函数返回一个 <code>Promise</code>，接下来在遇到 <code>await</code>的时候会就让出线程开始执行 <code>async1</code> 外的代码，所以我们完全可以把 <code>await</code> 看成是<strong>让出线程</strong>的标志。</p><p>然后当同步代码全部执行完毕以后，就会去执行所有的异步代码，那么又会回到 <code>await</code> 的位置执行返回的 <code>Promise</code> 的 <code>resolve</code> 函数，这又会把 <code>resolve</code> 丢到微任务队列中，接下来去执行 <code>then</code> 中的回调，当两个 <code>then</code> 中的回调全部执行完毕以后，又会回到 <code>await</code> 的位置处理返回值，这时候你可以看成是 <code>Promise.resolve(返回值).then()</code>，然后 <code>await</code> 后的代码全部被包裹进了 <code>then</code> 的回调中，所以 <code>console.log(&#39;async1 end&#39;)</code> 会优先执行于 <code>setTimeout</code>。</p><p>如果你觉得上面这段解释还是有点绕，那么我把 <code>async</code> 的这两个函数改造成你一定能理解的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;async2 end&#39;)</span><br><span class="line">  &#x2F;&#x2F; Promise.resolve() 将代码插入微任务队列尾部</span><br><span class="line">  &#x2F;&#x2F; resolve 再次插入微任务队列尾部</span><br><span class="line">  resolve(Promise.resolve())</span><br><span class="line">&#125;).then(() &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;async1 end&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也就是说，如果 <code>await</code> 后面跟着 <code>Promise</code> 的话，<code>async1 end</code> 需要等待三个 tick 才能执行到。那么其实这个性能相对来说还是略慢的，所以 V8 团队借鉴了 Node 8 中的一个 Bug，在引擎底层将三次 tick 减少到了二次 tick。但是这种做法其实是违法了规范的，当然规范也是可以更改的，这是 V8 团队的一个 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Ftc39%2Fecma262%2Fpull%2F1250">PR</a>，目前已被同意这种做法。</p><p>所以 Event Loop 执行顺序如下所示：</p><ul><li>首先执行同步代码，这属于宏任务</li><li>当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</li><li>执行所有微任务</li><li>当执行完所有微任务后，如有必要会渲染页面</li><li>然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 <code>setTimeout</code> 中的回调函数</li></ul><p>所以以上代码虽然 <code>setTimeout</code> 写在 <code>Promise</code> 之前，但是因为 <code>Promise</code> 属于微任务而 <code>setTimeout</code> 属于宏任务，所以会有以上的打印。</p><p>微任务包括 <code>process.nextTick</code> ，<code>promise</code> ，<code>MutationObserver</code>。</p><p>宏任务包括 <code>script</code> ， <code>setTimeout</code> ，<code>setInterval</code> ，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI rendering</code>。</p><p>这里很多人会有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 <code>script</code> ，浏览器会<strong>先执行一个宏任务</strong>，接下来有异步代码的话才会先执行微任务。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇写 JS 讲异步，任务的文章超级好！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/categories/JS/"/>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS 正则表达式</title>
    <link href="https://hexo.jomeswang.top/posts/392503a1/"/>
    <id>https://hexo.jomeswang.top/posts/392503a1/</id>
    <published>2020-12-28T16:34:48.000Z</published>
    <updated>2020-12-29T11:48:38.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS 表达式 看到</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JS 表达式 看到&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/categories/JS/"/>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS 学习文章总结</title>
    <link href="https://hexo.jomeswang.top/posts/d6009c7/"/>
    <id>https://hexo.jomeswang.top/posts/d6009c7/</id>
    <published>2020-12-27T14:58:08.000Z</published>
    <updated>2020-12-29T11:48:38.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总结一下看过的文章</p></blockquote><a id="more"></a><ol><li><p>原生JS灵魂之问, 请问你能接得住几个？(上)</p><p><a href="https://juejin.cn/post/6844903974378668039#heading-19" target="_blank" rel="noopener">https://juejin.cn/post/6844903974378668039#heading-19</a></p></li><li><p>原生JS灵魂之问(中)，检验自己是否真的熟悉JavaScript</p><p><a href="https://juejin.cn/post/6844903986479251464#heading-56" target="_blank" rel="noopener">https://juejin.cn/post/6844903986479251464#heading-56</a></p></li><li><p>原生JS灵魂之问(下), 冲刺🚀进阶最后一公里(附个人成长经验分享)</p><p><a href="https://juejin.cn/post/6844904004007247880#heading-76" target="_blank" rel="noopener">https://juejin.cn/post/6844904004007247880#heading-76</a></p></li><li><p>写给初中级前端的高级进阶指南（万字路线）</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3NTM5NDgzOA==&amp;mid=2247484321&amp;idx=1&amp;sn=e5fb9256ce7887b314e69c17f3d3b872&amp;chksm=eb043bd8dc73b2cebc529089df47e12100144f936090c8e97eaa9450c3d4a6f72351b416a35b&amp;token=962173348&amp;lang=zh_CN#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI3NTM5NDgzOA==&amp;mid=2247484321&amp;idx=1&amp;sn=e5fb9256ce7887b314e69c17f3d3b872&amp;chksm=eb043bd8dc73b2cebc529089df47e12100144f936090c8e97eaa9450c3d4a6f72351b416a35b&amp;token=962173348&amp;lang=zh_CN#rd</a></p></li><li><p>看完跳槽少说涨 5 K，前端面试从准备到谈薪完全指南（近万字精华）</p><p><a href="https://github.com/KieSun/Dream/issues/28" target="_blank" rel="noopener">https://github.com/KieSun/Dream/issues/28</a></p></li><li><p>JS EventLoop， 宏任务， 微任务 运行机制</p><p><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总结一下看过的文章&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/categories/JS/"/>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS 之 apply，call, bind的运用</title>
    <link href="https://hexo.jomeswang.top/posts/4c61acf0/"/>
    <id>https://hexo.jomeswang.top/posts/4c61acf0/</id>
    <published>2020-12-27T10:16:35.000Z</published>
    <updated>2020-12-27T13:58:04.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>回炉重造喽</p></blockquote><a id="more"></a><ul><li>call 会l立即调用该函数，并允许您一个一个地传递参数。</li><li>Apply立即调用该函数，并允许您将参数作为数组传递。</li><li>Bind返回一个新函数，允许您传入this和任意数量的参数。</li></ul><p><strong>Call</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;<span class="attr">firstName</span>: <span class="string">'Jon'</span>, <span class="attr">lastName</span>: <span class="string">'Kuperman'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;<span class="attr">firstName</span>: <span class="string">'Kelly'</span>, <span class="attr">lastName</span>: <span class="string">'King'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">greeting</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(greeting + <span class="string">' '</span> + <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say.call(person1, <span class="string">'Hello'</span>); <span class="comment">// Hello Jon Kuperman</span></span><br><span class="line">say.call(person2, <span class="string">'Hello'</span>); <span class="comment">// Hello Kelly King</span></span><br></pre></td></tr></table></figure><p><strong>Apply</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;<span class="attr">firstName</span>: <span class="string">'Jon'</span>, <span class="attr">lastName</span>: <span class="string">'Kuperman'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;<span class="attr">firstName</span>: <span class="string">'Kelly'</span>, <span class="attr">lastName</span>: <span class="string">'King'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">greeting</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(greeting + <span class="string">' '</span> + <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say.apply(person1, [<span class="string">'Hello'</span>]); <span class="comment">// Hello Jon Kuperman</span></span><br><span class="line">say.apply(person2, [<span class="string">'Hello'</span>]); <span class="comment">// Hello Kelly King</span></span><br></pre></td></tr></table></figure><p><strong>Bind</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;<span class="attr">firstName</span>: <span class="string">'Jon'</span>, <span class="attr">lastName</span>: <span class="string">'Kuperman'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;<span class="attr">firstName</span>: <span class="string">'Kelly'</span>, <span class="attr">lastName</span>: <span class="string">'King'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHelloJon = say.bind(person1);</span><br><span class="line"><span class="keyword">var</span> sayHelloKelly = say.bind(person2);</span><br><span class="line"></span><br><span class="line">sayHelloJon(); <span class="comment">// Hello Jon Kuperman</span></span><br><span class="line">sayHelloKelly(); <span class="comment">// Hello Kelly King</span></span><br></pre></td></tr></table></figure><p>总而言之：</p><p>bind 会有点不同。它会返回一个新函数。 Call and Apply立即执行当前功能。</p><p>同时 bind 还可以做许多事情比如： </p><p>我们可以使用它来管理上面的示例中的函数。我们可以采用一个简单的hello函数并将其转换为helloJon或helloKelly。我们还可以将其用于诸如onClick之类的事件，这些事件我们不知道何时触发，但我们知道我们希望它们具有什么上下文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function hello(name, date)&#123;</span><br><span class="line">  console.log(&#96;$&#123;name&#125; was working here!!  on $&#123;date&#125;&#96;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let helloWang &#x3D; hello.bind(this, &quot;wangwang&quot;);</span><br><span class="line"></span><br><span class="line">helloWang(new Date())</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; log</span><br><span class="line">&#x2F;&#x2F; wangwang was working here!!  on Sun Dec 27 2020 21:35:24 GMT+0800 (GMT+08:00)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;回炉重造喽&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/categories/JS/"/>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>node Koa2 学习</title>
    <link href="https://hexo.jomeswang.top/posts/9e6407/"/>
    <id>https://hexo.jomeswang.top/posts/9e6407/</id>
    <published>2020-12-26T09:32:43.000Z</published>
    <updated>2020-12-26T14:09:30.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新的世界的大门又将向我们打开</p></blockquote><a id="more"></a><h2 id="一：-简介"><a href="#一：-简介" class="headerlink" title="一： 简介"></a>一： 简介</h2><p>Express是目前最流行的Node.js框架之一。 Koa是由Express背后的团队创建的新的Web框架。它旨在成为Express的现代且更加简约的版本。它的一些特征是它的支持和对新JavaScript功能（例如生成器和async / await）的依赖。 Koa也没有附带任何中间件，尽管可以使用自定义插件和现有插件进行扩展。</p><h2 id="二：-引入和使用"><a href="#二：-引入和使用" class="headerlink" title="二：  引入和使用"></a>二：  引入和使用</h2><p>router 功能需要自己引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa koa-router</span><br></pre></td></tr></table></figure><p>并且最后还要将router 挂载上去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const Koa &#x3D; require(&#39;koa&#39;);</span><br><span class="line">const app &#x3D; new Koa();</span><br><span class="line">const Router &#x3D; require(&quot;koa-router&quot;)</span><br><span class="line">const router &#x3D; new Router()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; logger</span><br><span class="line"></span><br><span class="line">app.use(async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">  await next();</span><br><span class="line">  const rt &#x3D; ctx.response.get(&#39;X-Response-Time&#39;);</span><br><span class="line">  console.log(&#96;$&#123;ctx.method&#125; $&#123;ctx.url&#125; - $&#123;rt&#125;&#96;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; x-response-time</span><br><span class="line"></span><br><span class="line">app.use(async (ctx, next) &#x3D;&gt; &#123;</span><br><span class="line">  const start &#x3D; Date.now();</span><br><span class="line">  await next();</span><br><span class="line">  const ms &#x3D; Date.now() - start;</span><br><span class="line">  ctx.set(&#39;X-Response-Time&#39;, &#96;$&#123;ms&#125;ms&#96;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; response</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; app.use(async ctx &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F;   ctx.body &#x3D; &#39;Hello World&#39;;</span><br><span class="line">&#x2F;&#x2F; &#125;);</span><br><span class="line"></span><br><span class="line">router.get(&quot;&#x2F;:id&quot;, async (ctx)&#x3D;&gt;&#123;</span><br><span class="line">  ctx.body &#x3D;  &quot;get&quot; + ctx.params.id </span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes());   &#x2F;*启动路由*&#x2F;</span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;新的世界的大门又将向我们打开&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="node" scheme="https://hexo.jomeswang.top/categories/node/"/>
    
    
      <category term="node" scheme="https://hexo.jomeswang.top/tags/node/"/>
    
      <category term="koa2" scheme="https://hexo.jomeswang.top/tags/koa2/"/>
    
  </entry>
  
  <entry>
    <title>node-express 的学习</title>
    <link href="https://hexo.jomeswang.top/posts/adc804d1/"/>
    <id>https://hexo.jomeswang.top/posts/adc804d1/</id>
    <published>2020-12-26T05:55:23.000Z</published>
    <updated>2020-12-26T09:22:42.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Node 的一个框架 ， 简洁好用是它的一个特性！！</p></blockquote><a id="more"></a><p>全文地址： <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website</a></p><h2 id="一：-安装-express"><a href="#一：-安装-express" class="headerlink" title="一： 安装 express"></a>一： 安装 express</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建 一个空目录</span><br><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  初始化 npm</span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下载 npm 包</span><br><span class="line">npm i express</span><br></pre></td></tr></table></figure><h2 id="二：-编写-js-文件"><a href="#二：-编写-js-文件" class="headerlink" title="二： 编写 js 文件"></a>二： 编写 js 文件</h2><p>编写 index.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入 express 包</span><br><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line">const app &#x3D; express()</span><br><span class="line">const port &#x3D; 3000</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配路由中间件  当当请求 localhost:3000 的时候服务端会返回以下数据</span><br><span class="line">app.get(&#39;&#x2F;&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  res.send(&#39;Hello World!&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 监听端口</span><br><span class="line">app.listen(port, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#96;Example app listening at http:&#x2F;&#x2F;localhost:$&#123;port&#125;&#96;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后运行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>即可打开浏览器 访问 localhost:3000 看到返回</p><p><img src="http://photo.jomeswang.top/20201226140403.png" alt=""></p><h2 id="三：-Express-生成器"><a href="#三：-Express-生成器" class="headerlink" title="三： Express 生成器"></a>三： Express 生成器</h2><h3 id="3-1：-安装"><a href="#3-1：-安装" class="headerlink" title="3.1： 安装"></a>3.1： 安装</h3><p> 可使用应用程序生成器工具 (<code>express</code>) 快速创建应用程序框架。</p><p>使用以下命令安装 <code>express</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure><h3 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">express test_express</span><br><span class="line">cd test_express</span><br><span class="line">npm i</span><br><span class="line">&#x2F;&#x2F; 运行</span><br><span class="line">DEBUG&#x3D;test-express:* &amp; npm start</span><br></pre></td></tr></table></figure><p>然后在浏览器中输入 <code>http://localhost:3000/</code> 以访问此应用程序。</p><p><img src="http://photo.jomeswang.top/20201226142259.png" alt=""></p><h3 id="3-3-详细讲解"><a href="#3-3-详细讲解" class="headerlink" title="3.3 详细讲解"></a>3.3 详细讲解</h3><p>框架信息详解： <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website</a></p><p>这个页面讲的超级详细的，我就不cv了。</p><h3 id="3-4-操作数据库"><a href="#3-4-操作数据库" class="headerlink" title="3.4 操作数据库"></a>3.4 操作数据库</h3><p>与数据库交互有两种方法：</p><ul><li><p>使用数据库的原生查询语言（例如SQL）</p></li><li><p>使用对象数据模型（Object Data Model，简称 ODM）或对象关系模型（Object Relational Model，简称 ORM）。 ODM / ORM 能将网站中的数据表示为 JavaScript 对象，然后将它们映射到底层数据库。一些 ORM 只适用某些特定数据库，还有一些是普遍适用的。</p></li><li><p><a href="https://www.npmjs.com/package/mongoose" target="_blank" rel="noopener">Mongoose</a>：一款为异步工作环境设计的 <a href="https://www.mongodb.org/" target="_blank" rel="noopener">MongoDB</a> 对象建模工具。</p></li></ul><h4 id="3-4-1-安装-Mongoose-和-MongoDB"><a href="#3-4-1-安装-Mongoose-和-MongoDB" class="headerlink" title="3.4.1  安装 Mongoose 和 MongoDB"></a>3.4.1  安装 Mongoose 和 MongoDB</h4><p>Mongoose 像任何其他依赖项一样，使用 NPM 将其安装在您的项目（<strong>package.json</strong>）中 。请在项目文件夹中运行下面的命令以完成安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mongoose</span><br></pre></td></tr></table></figure><p>安装 Mongoose 会添加所有依赖项，包括 MongoDB 数据库驱动程序，但不会安装 MongoDB 本身。要安装 MongoDB 服务器，可以 <a href="https://www.mongodb.com/download-center" target="_blank" rel="noopener">点击下载</a> 各操作系统的安装程序在本地安装。也可以使用云端 MongoDB 实例。</p><h4 id="3-4-2-连接数据库"><a href="#3-4-2-连接数据库" class="headerlink" title="3.4.2  连接数据库"></a>3.4.2  连接数据库</h4><p>在  app.js 中放置如下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入 mongoose 模块</span><br><span class="line">const mongoose &#x3D; require(&#39;mongoose&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置默认 mongoose 连接</span><br><span class="line">const mongoDB &#x3D; &#39;mongodb:&#x2F;&#x2F;127.0.0.1&#x2F;my_database&#39;;</span><br><span class="line">mongoose.connect(mongoDB);</span><br><span class="line">&#x2F;&#x2F; 让 mongoose 使用全局 Promise 库</span><br><span class="line">mongoose.Promise &#x3D; global.Promise;</span><br><span class="line">&#x2F;&#x2F; 取得默认连接</span><br><span class="line">const db &#x3D; mongoose.connection;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将连接与错误事件绑定（以获得连接错误的提示）</span><br><span class="line">db.on(&#39;error&#39;, console.error.bind(console, &#39;MongoDB 连接错误：&#39;));</span><br></pre></td></tr></table></figure><h4 id="3-4-3-定义和添加模型"><a href="#3-4-3-定义和添加模型" class="headerlink" title="3.4.3  定义和添加模型"></a>3.4.3  定义和添加模型</h4><p>模型使用 <code>Schema</code> 接口进行定义。 <code>Schema</code> 可以定义每个文档中存储的字段，及字段的验证要求和默认值。还可以通过定义静态和实例辅助方法来更轻松地处理各种类型的数据，还可以像使用普通字段一样使用数据库中并不存在的虚拟属性（稍后讨论）。</p><p>创建一个 bookModel 实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const mongoose &#x3D; require(&quot;mongoose&quot;)</span><br><span class="line"></span><br><span class="line">let Schema &#x3D; mongoose.Schema</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义模式</span><br><span class="line">let BookSchema &#x3D; new Schema(&#123;</span><br><span class="line">  name: String,</span><br><span class="line">  author: String,</span><br><span class="line">  id: &#123;type: Number, required: true&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 虚拟属性， 不存在数据库中， 类似于 计算属性</span><br><span class="line">BookSchema</span><br><span class="line">.virtual(&quot;url&quot;)</span><br><span class="line">.get(()&#x3D;&gt;&#123;</span><br><span class="line">  return &quot;&#x2F;book&#x2F;&quot;+ this.id;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用模式“编译”模型</span><br><span class="line">module.exports &#x3D; mongoose.model(&quot;Book&quot;, BookSchema)</span><br><span class="line">&#x2F;&#x2F;第一个参数是为模型所创建集合的别名（Mongoose 将为 SomeModel 模型创建数据库集合），第二个参数是创建模型时使用的模式。</span><br></pre></td></tr></table></figure><h4 id="3-4-4-创建，-查找，-修改记录"><a href="#3-4-4-创建，-查找，-修改记录" class="headerlink" title="3.4.4 创建， 查找， 修改记录"></a>3.4.4 创建， 查找， 修改记录</h4><p>创建  <code>bookController.js</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const &#123; log &#125; &#x3D; require(&quot;debug&quot;)</span><br><span class="line">let Book &#x3D; require(&quot;..&#x2F;model&#x2F;bookModel&quot;)</span><br><span class="line"></span><br><span class="line">exports.create &#x3D; (req, res)&#x3D;&gt;&#123;</span><br><span class="line">  &#x2F;&#x2F;  创建</span><br><span class="line">  let bookInstance &#x3D; new Book(&#123;</span><br><span class="line">    name: &quot;llw&quot;,</span><br><span class="line">    author: &quot;llwnb&quot;,</span><br><span class="line">    id: 23</span><br><span class="line">  &#125;)</span><br><span class="line">  bookInstance.save(err&#x3D;&gt;&#123;</span><br><span class="line">    if(err)</span><br><span class="line">      return handleError(err)</span><br><span class="line">    res.send(&quot;Hello World!!&quot;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.query &#x3D; (req, res)&#x3D;&gt;&#123;</span><br><span class="line">  &#x2F;&#x2F;  搜索</span><br><span class="line">  Book.find()</span><br><span class="line">      .exec((err, data)&#x3D;&gt;&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">        res.send(data)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.edit &#x3D; (req, res)&#x3D;&gt;&#123;</span><br><span class="line">  &#x2F;&#x2F;  只更新一个记录</span><br><span class="line">  Book.where(&#123;id: 23&#125;)</span><br><span class="line">  .update(&#123;$set: &#123;name: &quot;111111wangwang&quot;&#125;&#125;)</span><br><span class="line">  .exec((err, data)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">    res.send(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-5-配置路由"><a href="#3-4-5-配置路由" class="headerlink" title="3.4.5  配置路由"></a>3.4.5  配置路由</h4><p>在 <code>routes/index.js</code> 中配置成如下形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">var router &#x3D; express.Router();</span><br><span class="line">let book_controller &#x3D; require(&quot;..&#x2F;controllers&#x2F;bookController&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;* GET home page. *&#x2F;</span><br><span class="line">router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&#39;index&#39;, &#123; title: &#39;Express&#39; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&quot;&#x2F;create&quot;, book_controller.create)</span><br><span class="line">router.get(&quot;&#x2F;query&quot;, book_controller.query)</span><br><span class="line">router.get(&quot;&#x2F;edit&quot;, book_controller.edit)</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; router;</span><br></pre></td></tr></table></figure><p>之后就可以愉快的访问啦！！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Node 的一个框架 ， 简洁好用是它的一个特性！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="node" scheme="https://hexo.jomeswang.top/categories/node/"/>
    
    
      <category term="node" scheme="https://hexo.jomeswang.top/tags/node/"/>
    
      <category term="express" scheme="https://hexo.jomeswang.top/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>node 学习</title>
    <link href="https://hexo.jomeswang.top/posts/f4f44d6e/"/>
    <id>https://hexo.jomeswang.top/posts/f4f44d6e/</id>
    <published>2020-12-25T13:41:49.000Z</published>
    <updated>2020-12-26T03:03:50.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>终于有时间来学习 node 啦！！！</p></blockquote><a id="more"></a><h2 id="一：-Node-介绍"><a href="#一：-Node-介绍" class="headerlink" title="一： Node 介绍"></a>一： Node 介绍</h2><p>Node.js运行单线程，非阻塞，异步编程，这非常节省内存。</p><ol><li>Node.js可以生成动态页面内容</li><li>Node.js可以在服务器上创建，打开，读取，写入，删除和关闭文件</li><li>Node.js可以收集表单数据</li><li>Node.js可以添加，删除，修改数据库中的数据</li></ol><h2 id="二：-Node-的语法"><a href="#二：-Node-的语法" class="headerlink" title="二： Node 的语法"></a>二： Node 的语法</h2><h3 id="2-1-Node-HTTP-服务"><a href="#2-1-Node-HTTP-服务" class="headerlink" title="2.1 Node  HTTP 服务"></a>2.1 Node  HTTP 服务</h3><p>HTTP模块可以创建一个HTTP服务器，该服务器侦听服务器端口并将响应返回给客户端。</p><p>使用 url 模块来对url 进行解析 获得 url 的query 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let http &#x3D; require(&#39;http&#39;);</span><br><span class="line">let url &#x3D; require(&quot;url&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;create a server object:</span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">  res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html&#39;&#125;);</span><br><span class="line">  let queryData &#x3D; url.parse(req.url, true).query   &#x2F;&#x2F; call ?test&#x3D;123 return &#123;test: 123&#125;</span><br><span class="line">  res.write(&#39;Hello World!&#39;); &#x2F;&#x2F;write a response to the client</span><br><span class="line">  res.end(); &#x2F;&#x2F;end the response</span><br><span class="line">&#125;).listen(8080); &#x2F;&#x2F;the server object listens on port 8080</span><br></pre></td></tr></table></figure><h3 id="2-2-Node-模块化"><a href="#2-2-Node-模块化" class="headerlink" title="2.2 Node 模块化"></a>2.2 Node 模块化</h3><p>编写一个 返回 当前时间的 模块 并命名为 getDate.js </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.getDate &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">  return new Date()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后创建 index.js  在里面写入以下内容  注意要与 getDate.js 在同意路径下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let http &#x3D; require(&#39;http&#39;);</span><br><span class="line">&#x2F;&#x2F; 析构出 getDate 函数 ， 并且通过 require 方法引入模块</span><br><span class="line">let &#123;getDate&#125; &#x3D; require(&quot;.&#x2F;getDate.js&quot;)</span><br><span class="line"></span><br><span class="line">http.createServer(function (req, res) &#123;</span><br><span class="line">  res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text&#x2F;html&#39;&#125;);</span><br><span class="line">  res.write(&#39;Hello World!&#39; + getDate());</span><br><span class="line">  res.end();</span><br><span class="line">&#125;).listen(8080);</span><br></pre></td></tr></table></figure><h3 id="2-3-Node-文件操作"><a href="#2-3-Node-文件操作" class="headerlink" title="2.3  Node 文件操作"></a>2.3  Node 文件操作</h3><p>使用 fs 模块 来 对文件进行 增删改查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">let http &#x3D; require(&quot;http&quot;)</span><br><span class="line">let fs &#x3D; require(&quot;fs&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  读取文件</span><br><span class="line">let readFile &#x3D; (filePath)&#x3D;&gt;&#123;</span><br><span class="line">  return new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class="line">    fs.readFile(filePath, (err, data)&#x3D;&gt;&#123;</span><br><span class="line">      if(err)</span><br><span class="line">        reject(err)</span><br><span class="line"></span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  创建文件</span><br><span class="line">let createFile &#x3D; (path, content)&#x3D;&gt;&#123;</span><br><span class="line">  &#x2F;&#x2F;  有三种方法 </span><br><span class="line">  &#x2F;&#x2F;  1. fs.appendFile()  如果有 继续往后添加内容</span><br><span class="line">  &#x2F;&#x2F; 2. fs.open()  接受一个 path 参数， 一个打开模式</span><br><span class="line">  &#x2F;&#x2F;  3. fs.writeFile()  如果有取而代之</span><br><span class="line">  return new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class="line">    fs.writeFile(path, content, (err)&#x3D;&gt;&#123;</span><br><span class="line">      if(err)</span><br><span class="line">        reject(err)</span><br><span class="line"></span><br><span class="line">      resolve(&#123;code: 200, errmsg:&quot;Success&quot;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer((req, res)&#x3D;&gt;&#123;</span><br><span class="line">  &#x2F;&#x2F;  创建文件 并返回文件内容</span><br><span class="line">  createFile(&quot;hello.txt&quot;, &quot;Hello, I am creating a file using writeFile method &quot;)</span><br><span class="line">        .then(()&#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F;  重新创建文件之后 读取文件内容并返回</span><br><span class="line">          readFile(&quot;hello.txt&quot;)</span><br><span class="line">                .then(</span><br><span class="line">                data&#x3D;&gt; &#123;res.write(data), res.end()&#125;</span><br><span class="line">                )&#125;)</span><br><span class="line">&#125;).listen(8080)</span><br></pre></td></tr></table></figure><h3 id="2-4-Node-事件监听"><a href="#2-4-Node-事件监听" class="headerlink" title="2.4   Node 事件监听"></a>2.4   Node 事件监听</h3><p>Node.js具有一个内置的模块，称为“event”，您可以在其中创建，触发和侦听自己的事件。使用  eventEmitter 来 监听 事件的触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var events &#x3D; require(&#39;events&#39;);</span><br><span class="line">var eventEmitter &#x3D; new events.EventEmitter();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Create an event handler:</span><br><span class="line">var myEventHandler &#x3D; function () &#123;</span><br><span class="line">  console.log(&#39;I hear a scream!&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Assign the event handler to an event:</span><br><span class="line">eventEmitter.on(&#39;scream&#39;, myEventHandler);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Fire the &#39;scream&#39; event:</span><br><span class="line">eventEmitter.emit(&#39;scream&#39;);</span><br></pre></td></tr></table></figure><p>要发布事件，我们使用emit（）函数，要监听事件，我们使用on（）函数。  </p><p>同时在这一个样例中， 我们先 监听 scream 事件， 之后我们再发布， 同时发布事件的这一个过程是同步操作的。</p><p>还要再发布之前必须先去 监听。</p><h2 id="三：-Node-与-Mysql-交互"><a href="#三：-Node-与-Mysql-交互" class="headerlink" title="三： Node 与 Mysql 交互"></a>三： Node 与 Mysql 交互</h2><h3 id="3-1-在本机中安装-mysql"><a href="#3-1-在本机中安装-mysql" class="headerlink" title="3.1 在本机中安装 mysql"></a>3.1 在本机中安装 mysql</h3><p><a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">https://www.mysql.com/downloads/</a></p><h3 id="3-2-安装-mysql-驱动"><a href="#3-2-安装-mysql-驱动" class="headerlink" title="3.2 安装 mysql 驱动"></a>3.2 安装 mysql 驱动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql</span><br></pre></td></tr></table></figure><h3 id="3-3-配置myql-参数"><a href="#3-3-配置myql-参数" class="headerlink" title="3.3 配置myql 参数"></a>3.3 配置myql 参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let con &#x3D; mysql.createConnection(&#123;</span><br><span class="line">  host: &quot;localhost&quot;,</span><br><span class="line">  user: &quot;root&quot;,</span><br><span class="line">  password: &quot;llw012800&quot;,</span><br><span class="line">  database: &quot;test_node&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>创建 test_node 数据库  和 user 数据表</p><h3 id="3-4-mysql-模块包和-mysql8-0-验证方式不兼容"><a href="#3-4-mysql-模块包和-mysql8-0-验证方式不兼容" class="headerlink" title="3.4 mysql  模块包和 mysql8.0 验证方式不兼容"></a>3.4 mysql  模块包和 mysql8.0 验证方式不兼容</h3><p><code>Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</code></p><p><img src="http://photo.jomeswang.top/20201226020304.png" alt=""></p><p>解决方法：</p><p>导致这个错误的原因是，目前，最新的mysql模块并未完全支持MySQL 8的“caching_sha2_password”加密方式，而“caching_sha2_password”在MySQL 8中是默认的加密方式。因此，下面的方式命令是默认已经使用了“caching_sha2_password”加密方式，该账号、密码无法在mysql模块中使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决方法是从新修改用户root的密码，并指定mysql模块能够支持的加密方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br></pre></td></tr></table></figure><p>上述语句，显示指定了使用“mysql_native_password”的加密方式。这种方式是在mysql模块能够支持。</p><h3 id="3-5-mysql-交互-全部代码"><a href="#3-5-mysql-交互-全部代码" class="headerlink" title="3.5 mysql 交互 全部代码"></a>3.5 mysql 交互 全部代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">let http &#x3D; require(&quot;http&quot;)</span><br><span class="line">const &#123; reject, result &#125; &#x3D; require(&quot;lodash&quot;)</span><br><span class="line">let mysql &#x3D; require(&quot;mysql&quot;)</span><br><span class="line"></span><br><span class="line">let con &#x3D; mysql.createConnection(&#123;</span><br><span class="line">  host: &quot;localhost&quot;,</span><br><span class="line">  user: &quot;root&quot;,</span><br><span class="line">  password: &quot;llw012800&quot;,</span><br><span class="line">  database: &quot;test_node&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let queryDB &#x3D; (sql)&#x3D;&gt;&#123;</span><br><span class="line">  return new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class="line">    con.query(sql, (err, result)&#x3D;&gt;&#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(result)</span><br><span class="line">      if(err)</span><br><span class="line">        reject(err)</span><br><span class="line">      resolve(result)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  con.connect((err)&#x3D;&gt;&#123;</span><br><span class="line">    if(err)</span><br><span class="line">      throw err;</span><br><span class="line">    &#x2F;&#x2F;  插入语法</span><br><span class="line">    let sql &#x3D; &quot;INSERT INTO user (name, address) VALUES (&#39;Michelle&#39;, &#39;Blue Village 1&#39;)&quot;</span><br><span class="line">    queryDB(sql)</span><br><span class="line">          .then(res&#x3D;&gt;&#123;</span><br><span class="line">            console.log(res)</span><br><span class="line">            &#x2F;&#x2F;  取出数据表的数据</span><br><span class="line">            queryDB(&quot;SELECT * FROM user LIMIT 1&quot;)</span><br><span class="line">            .then(res&#x3D;&gt;&#123;</span><br><span class="line">              console.log(res)</span><br><span class="line">              &#x2F;&#x2F;  这里是 update 数据表记录的方法</span><br><span class="line">              let updateSql &#x3D; &quot;UPDATE user SET address &#x3D;&#39;szdx&#39;, name&#x3D;&#39;llw&#39; WHERE id&#x3D;2 &quot;</span><br><span class="line">              queryDB(updateSql)</span><br><span class="line">              .then(res&#x3D;&gt;&#123;</span><br><span class="line">                console.log(res)</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">  console.error(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四：-Node-与-Mongodb-进行交互"><a href="#四：-Node-与-Mongodb-进行交互" class="headerlink" title="四： Node 与 Mongodb 进行交互"></a>四： Node 与 Mongodb 进行交互</h2><h3 id="4-1-安装-mongodb"><a href="#4-1-安装-mongodb" class="headerlink" title="4.1 安装 mongodb"></a>4.1 安装 mongodb</h3><p> 安装 Windows 版本的  <a href="https://www.mongodb.com/try/download/community?tck=docs_server" target="_blank" rel="noopener">https://www.mongodb.com/try/download/community?tck=docs_server</a></p><h3 id="4-2-安装mongodb-模块"><a href="#4-2-安装mongodb-模块" class="headerlink" title="4.2  安装mongodb 模块"></a>4.2  安装mongodb 模块</h3><p>Download and install mongodb package:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb</span><br></pre></td></tr></table></figure><h3 id="4-3-创建-数据库和数据表"><a href="#4-3-创建-数据库和数据表" class="headerlink" title="4.3   创建 数据库和数据表"></a>4.3   创建 数据库和数据表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, function(err, db) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  &#x2F;&#x2F;  如果不存在 数据库 数据集合 会自动创建</span><br><span class="line">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class="line">  dbo.createCollection(&quot;customers&quot;, function(err, res) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    console.log(&quot;Collection created!&quot;);</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-4-插入一条记录"><a href="#4-4-插入一条记录" class="headerlink" title="4.4    插入一条记录"></a>4.4    插入一条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, function(err, db) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class="line">  var myobj &#x3D; &#123; name: &quot;Company Inc&quot;, address: &quot;Highway 37&quot; &#125;;</span><br><span class="line">  dbo.collection(&quot;customers&quot;).insertOne(myobj, function(err, res) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    console.log(&quot;1 document inserted&quot;);</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-5-插入多条记录"><a href="#4-5-插入多条记录" class="headerlink" title="4.5   插入多条记录"></a>4.5   插入多条记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, function(err, db) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class="line">  var myobj &#x3D; [</span><br><span class="line">    &#123; name: &#39;John&#39;, address: &#39;Highway 71&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Peter&#39;, address: &#39;Lowstreet 4&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Amy&#39;, address: &#39;Apple st 652&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Hannah&#39;, address: &#39;Mountain 21&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Michael&#39;, address: &#39;Valley 345&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Sandy&#39;, address: &#39;Ocean blvd 2&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Betty&#39;, address: &#39;Green Grass 1&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Richard&#39;, address: &#39;Sky st 331&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Susan&#39;, address: &#39;One way 98&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Vicky&#39;, address: &#39;Yellow Garden 2&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Ben&#39;, address: &#39;Park Lane 38&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;William&#39;, address: &#39;Central st 954&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Chuck&#39;, address: &#39;Main Road 989&#39;&#125;,</span><br><span class="line">    &#123; name: &#39;Viola&#39;, address: &#39;Sideway 1633&#39;&#125;</span><br><span class="line">  ];</span><br><span class="line">  dbo.collection(&quot;customers&quot;).insertMany(myobj, function(err, res) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    console.log(&quot;Number of documents inserted: &quot; + res.insertedCount);</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-6-查找一个数据"><a href="#4-6-查找一个数据" class="headerlink" title="4.6     查找一个数据"></a>4.6     查找一个数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, function(err, db) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class="line">  dbo.collection(&quot;customers&quot;).findOne(&#123;&#125;, function(err, result) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    console.log(result.name);</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-7-查找多个数据"><a href="#4-7-查找多个数据" class="headerlink" title="4.7    查找多个数据"></a>4.7    查找多个数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, function(err, db) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class="line">  var query &#x3D; &#123; address: &quot;Park Lane 38&quot; &#125;;</span><br><span class="line">  dbo.collection(&quot;customers&quot;).find(query).toArray(function(err, result) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    console.log(result);</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-8-更新一条数据"><a href="#4-8-更新一条数据" class="headerlink" title="4.8   更新一条数据"></a>4.8   更新一条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, function(err, db) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class="line">  var myquery &#x3D; &#123; address: &quot;Valley 345&quot; &#125;;</span><br><span class="line">  var newvalues &#x3D; &#123; $set: &#123;name: &quot;Mickey&quot;, address: &quot;Canyon 123&quot; &#125; &#125;;</span><br><span class="line">  dbo.collection(&quot;customers&quot;).updateOne(myquery, newvalues, function(err, res) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    console.log(&quot;1 document updated&quot;);</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="9"><li><h3 id="更新多条数据"><a href="#更新多条数据" class="headerlink" title="更新多条数据"></a>更新多条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var MongoClient &#x3D; require(&#39;mongodb&#39;).MongoClient;</span><br><span class="line">var url &#x3D; &quot;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(url, function(err, db) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var dbo &#x3D; db.db(&quot;mydb&quot;);</span><br><span class="line">  var myquery &#x3D; &#123; address: &#x2F;^S&#x2F; &#125;;</span><br><span class="line">  var newvalues &#x3D; &#123;$set: &#123;name: &quot;Minnie&quot;&#125; &#125;;</span><br><span class="line">  dbo.collection(&quot;customers&quot;).updateMany(myquery, newvalues, function(err, res) &#123;</span><br><span class="line">    if (err) throw err;</span><br><span class="line">    console.log(res.result.nModified + &quot; document(s) updated&quot;);</span><br><span class="line">    db.close();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;终于有时间来学习 node 啦！！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="node" scheme="https://hexo.jomeswang.top/categories/node/"/>
    
    
      <category term="node" scheme="https://hexo.jomeswang.top/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>JS实现深拷贝</title>
    <link href="https://hexo.jomeswang.top/posts/b83467fc/"/>
    <id>https://hexo.jomeswang.top/posts/b83467fc/</id>
    <published>2020-12-24T06:46:51.000Z</published>
    <updated>2020-12-25T13:31:20.301Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近得学一下 </p></blockquote><a id="more"></a><h2 id="一：-递归-复制法"><a href="#一：-递归-复制法" class="headerlink" title="一： 递归 复制法"></a>一： 递归 复制法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let deepClone &#x3D; (obj)&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F; 1. 先判断 是否是 [] || &#123;&#125;, 不是 就返回</span><br><span class="line">  if(!obj | typeof obj !&#x3D;&#x3D; &quot;object&quot;)</span><br><span class="line">    return obj</span><br><span class="line"> &#x2F;&#x2F; 2. 初始化 objClone</span><br><span class="line">  let objClone &#x3D; Array.isArray(obj)?[]:&#123;&#125;</span><br><span class="line">  for(key in obj)&#123;</span><br><span class="line">    if(typeof obj[key] &#x3D;&#x3D; &quot;object&quot;)</span><br><span class="line">      objClone[key] &#x3D; deepClone(obj[key])</span><br><span class="line">    else</span><br><span class="line">      objClone[key] &#x3D; obj[key];</span><br><span class="line">  &#125;</span><br><span class="line">  return objClone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let arr &#x3D; [&quot;sf&quot;, 1, &#123;&quot;fsdf&quot;: &quot;fsdf&quot;&#125;, [1,2,3]]</span><br><span class="line">console.log(deepClone(arr));</span><br></pre></td></tr></table></figure><h2 id="二：-JSON-方法"><a href="#二：-JSON-方法" class="headerlink" title="二： JSON 方法"></a>二： JSON 方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; [56, 43]</span><br><span class="line">let objClone &#x3D; JSON.parse(JSON.stringify(obj));</span><br><span class="line">console.log(objClone);</span><br></pre></td></tr></table></figure><h2 id="三：-lodash-方法"><a href="#三：-lodash-方法" class="headerlink" title="三： lodash 方法"></a>三： lodash 方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;  在这里主要的是 析构 cloneDeep 函数 之后 重命名为 clone 函数</span><br><span class="line">const &#123;cloneDeep: clone &#125;   &#x3D; require(&#39;lodash&#39;)</span><br><span class="line"></span><br><span class="line">let objA &#x3D; &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: &#123;</span><br><span class="line">        c: 2,</span><br><span class="line">        d: &#123;</span><br><span class="line">            e: 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; copy objA save as new variable objB</span><br><span class="line">let objB &#x3D; clone(objA)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; change the values in the original object objA</span><br><span class="line">objA.a &#x3D; 20</span><br><span class="line">objA.b.c &#x3D; 30</span><br><span class="line">objA.b.d.e &#x3D; 40</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(objA))</span><br><span class="line">&#x2F;&#x2F; → &#123;&quot;a&quot;:20,&quot;b&quot;:&#123;&quot;c&quot;:30,&quot;d&quot;:&#123;&quot;e&quot;:40&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; objB which is the cloned object is still the same</span><br><span class="line">console.log(JSON.stringify(objB))</span><br><span class="line">&#x2F;&#x2F; → &#123;&quot;a&quot;:1,&quot;b&quot;:&#123;&quot;c&quot;:2,&quot;d&quot;:&#123;&quot;e&quot;:3&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近得学一下 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/categories/JS/"/>
    
    
      <category term="JS" scheme="https://hexo.jomeswang.top/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>React-router 的学习和使用</title>
    <link href="https://hexo.jomeswang.top/posts/d32c71e/"/>
    <id>https://hexo.jomeswang.top/posts/d32c71e/</id>
    <published>2020-12-24T03:43:12.000Z</published>
    <updated>2020-12-24T04:24:47.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在React 中 处处皆组件！！ Router 这也是一个组件，有点不怎么好用</p></blockquote><a id="more"></a><h2 id="一：-安装-react-router-dom"><a href="#一：-安装-react-router-dom" class="headerlink" title="一： 安装 react-router-dom"></a>一： 安装 react-router-dom</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom</span><br></pre></td></tr></table></figure><h2 id="二-简单使用方法"><a href="#二-简单使用方法" class="headerlink" title="二: 简单使用方法"></a>二: 简单使用方法</h2><p><code>在 src/app.js 中 用以下代码</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter as Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  useRouteMatch,</span><br><span class="line">  useParams,</span><br><span class="line">  NavLink </span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import &quot;.&#x2F;App.css&quot;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;NavLink&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;NavLink&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&quot;&#x2F;topics&quot;&gt;Topics&lt;&#x2F;NavLink&gt;</span><br><span class="line">          &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path&#x3D;&quot;&#x2F;about&quot;&gt;</span><br><span class="line">            &lt;About &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;Route&gt;</span><br><span class="line">          &lt;Route path&#x3D;&quot;&#x2F;topics&quot;&gt;</span><br><span class="line">            &lt;Topics &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;Route&gt;</span><br><span class="line">          &lt;Route exact  path&#x3D;&quot;&#x2F;&quot;&gt;</span><br><span class="line">            &lt;Home &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;&#x2F;Switch&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Home() &#123;</span><br><span class="line">  return &lt;h2&gt;Home&lt;&#x2F;h2&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function About() &#123;</span><br><span class="line">  return &lt;h2&gt;About&lt;&#x2F;h2&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Topics() &#123;</span><br><span class="line">  let match &#x3D; useRouteMatch();</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Topics&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&#123;&#96;$&#123;match.url&#125;&#x2F;components&#96;&#125;&gt;Components&lt;&#x2F;NavLink&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;NavLink activeClassName&#x3D;&quot;hurray&quot; to&#x3D;&#123;&#96;$&#123;match.url&#125;&#x2F;props-v-state&#96;&#125;&gt;</span><br><span class="line">            Props v. State</span><br><span class="line">          &lt;&#x2F;NavLink&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">      &#123;&#x2F;* The Topics page has its own &lt;Switch&gt; with more routes</span><br><span class="line">          that build on the &#x2F;topics URL path. You can think of the</span><br><span class="line">          2nd &lt;Route&gt; here as an &quot;index&quot; page for all topics, or</span><br><span class="line">          the page that is shown when no topic is selected *&#x2F;&#125;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path&#x3D;&#123;&#96;$&#123;match.path&#125;&#x2F;:topicId&#96;&#125;&gt;</span><br><span class="line">          &lt;Topic &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;Route path&#x3D;&#123;match.path&#125;&gt;</span><br><span class="line">          &lt;h3&gt;Please select a topic.&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;&#x2F;Route&gt;</span><br><span class="line">      &lt;&#x2F;Switch&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Topic() &#123;</span><br><span class="line">  let &#123; topicId &#125; &#x3D; useParams();</span><br><span class="line">  return &lt;h3&gt;Requested topic ID: &#123;topicId&#125;&lt;&#x2F;h3&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三：-Router-详解"><a href="#三：-Router-详解" class="headerlink" title="三： Router 详解"></a>三： Router 详解</h2><h3 id="3-1-Router-的引入"><a href="#3-1-Router-的引入" class="headerlink" title="3.1  Router 的引入"></a>3.1  Router 的引入</h3><p>每个React Router应用程序的核心应该是路由器组件。对于Web项目，react-router-dom提供<BrowserRouter>和<HashRouter>路由器。两者之间的主要区别是它们存储URL和与Web服务器通信的方式。</p><p>因此需要在 把根组件包囊在 router 组件内部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">import &#123; BrowserRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return &lt;h1&gt;Hello React Router&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;App &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;BrowserRouter&gt;,</span><br><span class="line">  document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-2-Router-的匹配"><a href="#3-2-Router-的匹配" class="headerlink" title="3.2 Router 的匹配"></a>3.2 Router 的匹配</h3><p>使用 Switch， Route 这两个组件 来匹配路由。</p><p><Switch>的独特之处在于它专门呈现一条路由。使用<div>的话，每个与位置匹配的<Route>都将包含在内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter as Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &#123;&#x2F;* If the current URL is &#x2F;about, this route is rendered</span><br><span class="line">            while the rest are ignored *&#x2F;&#125;</span><br><span class="line">        &lt;Route path&#x3D;&quot;&#x2F;about&quot;&gt;</span><br><span class="line">          &lt;About &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Route&gt;</span><br><span class="line"></span><br><span class="line">        &#123;&#x2F;* Note how these two routes are ordered. The more specific</span><br><span class="line">            path&#x3D;&quot;&#x2F;contact&#x2F;:id&quot; comes before path&#x3D;&quot;&#x2F;contact&quot; so that</span><br><span class="line">            route will render when viewing an individual contact *&#x2F;&#125;</span><br><span class="line">        &lt;Route path&#x3D;&quot;&#x2F;contact&#x2F;:id&quot;&gt;</span><br><span class="line">          &lt;Contact &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Route&gt;</span><br><span class="line">        &lt;Route path&#x3D;&quot;&#x2F;contact&quot;&gt;</span><br><span class="line">          &lt;AllContacts &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Route&gt;</span><br><span class="line"></span><br><span class="line">        &#123;&#x2F;* If none of the previous routes render anything,</span><br><span class="line">            this route acts as a fallback.</span><br><span class="line"></span><br><span class="line">            Important: A route with path&#x3D;&quot;&#x2F;&quot; will *always* match</span><br><span class="line">            the URL because all URLs begin with a &#x2F;. So that&#39;s</span><br><span class="line">            why we put this one last of all *&#x2F;&#125;</span><br><span class="line">        &lt;Route path&#x3D;&quot;&#x2F;&quot;&gt;</span><br><span class="line">          &lt;Home &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;Route&gt;</span><br><span class="line">      &lt;&#x2F;Switch&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;App &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Router&gt;,</span><br><span class="line">  document.getElementById(&quot;root&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-3-路由跳转"><a href="#3-3-路由跳转" class="headerlink" title="3.3 路由跳转"></a>3.3 路由跳转</h3><p>React Router提供了一个<Link>组件来在您的应用程序中创建链接。无论在何处呈现<Link>，锚点（<a>）都将呈现在HTML文档中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;Link&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;The &lt;NavLink&gt; is a special type of &lt;Link&gt; that can style itself as “active” when its to prop matches the current location.</span><br><span class="line">&lt;NavLink to&#x3D;&quot;&#x2F;react&quot; activeClassName&#x3D;&quot;hurray&quot;&gt;</span><br><span class="line">  React</span><br><span class="line">&lt;&#x2F;NavLink&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; When the URL is &#x2F;react, this renders:</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;&#x2F;react&quot; className&#x3D;&quot;hurray&quot;&gt;React&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; When it&#39;s something else:</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;&#x2F;react&quot;&gt;React&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在React 中 处处皆组件！！ Router 这也是一个组件，有点不怎么好用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://hexo.jomeswang.top/categories/react/"/>
    
    
      <category term="react-router" scheme="https://hexo.jomeswang.top/tags/react-router/"/>
    
      <category term="react" scheme="https://hexo.jomeswang.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>为react 项目添加 scss 和 ts</title>
    <link href="https://hexo.jomeswang.top/posts/f84ce3f2/"/>
    <id>https://hexo.jomeswang.top/posts/f84ce3f2/</id>
    <published>2020-12-23T11:33:55.000Z</published>
    <updated>2020-12-23T11:36:37.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="How-to-Set-Up-a-React-Project-Using-Webpack-TypeScript-and-Sass"><a href="#How-to-Set-Up-a-React-Project-Using-Webpack-TypeScript-and-Sass" class="headerlink" title="How to Set Up a React Project Using Webpack, TypeScript, and Sass"></a>How to Set Up a React Project Using Webpack, TypeScript, and Sass</h1></blockquote><a id="more"></a><p><img src="https://miro.medium.com/max/5472/0*QJHASp4Lqspc4Gt8" alt="Image for post"></p><p>Photo by <a href="https://unsplash.com/@sapegin?utm_source=medium&utm_medium=referral" target="_blank" rel="noopener">Artem Sapegin</a> on <a href="https://unsplash.com/?utm_source=medium&utm_medium=referral" target="_blank" rel="noopener">Unsplash</a></p><p>I’ve always used <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create-React-App</a> (CRA) when I needed to make a project. I needed to make another React project, but this time I didn’t want to use CRA. I was stuck with many problems and it took a lot of time to get through them. So, let me tell you what I did and how I got through it.</p><h2 id="Prior-reading"><a href="#Prior-reading" class="headerlink" title="Prior reading"></a>Prior reading</h2><p>If you aren’t aware of what Webpack is, go to the <a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener">official Webpack site</a> and read about it.</p><h1 id="React-Project-Setup"><a href="#React-Project-Setup" class="headerlink" title="React Project Setup"></a>React Project Setup</h1><p>First, you need to install some packages for the Webpack or React.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack webpack-cli @babel&#x2F;core @babel&#x2F;preset-env @babel&#x2F;preset-react babel-loadernpm i -S react react-dom</span><br></pre></td></tr></table></figure><p>Webpack is the code bundler for JavaScript, CSS and HTML files. It reduces the size of your project by putting everything into a few files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch webpack.config.js</span><br></pre></td></tr></table></figure><p>Now, create the configuration file for Webpack. This will be used automatically by the Webpack once you run the program.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123;</span><br><span class="line">  entry: path.resolve(__dirname, &#39;src&#39;, &#39;index.jsx&#39;),</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &#39;bundle.js&#39;,</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [&#39;.js&#39;, &#39;.jsx&#39;]</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.jsx?$&#x2F;,</span><br><span class="line">        use: [&#39;babel-loader&#39;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>entry</code> — the file to be used at first once Webpack starts to work.</li><li><code>output</code>— the file to be exported by the Webpack process.</li><li><code>resolve.extensions</code> — the file extensions to be used by Webpack.</li><li><code>module</code> — the rules Webpack will use when it works on the files.</li></ul><p>We will check if Webpack can recognize the React files before adopting TypeScript.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir src dist</span><br><span class="line">touch src&#x2F;index.jsx</span><br></pre></td></tr></table></figure><p>And write this code into <code>index.jsx</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;Hello Wepack!&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;;ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure><p>This is the simple first React component, which prints “Hello Webpack!”. You need to use <code>react-dom</code> to hook React components into the HTML file. But we don’t have any HTML files yet.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin html-loadermkdir public</span><br><span class="line">touch public&#x2F;index.html</span><br></pre></td></tr></table></figure><iframe src="https://medium.com/media/b478c684c8d3b465a2a5e196e4cbfea7" allowfullscreen="" frameborder="0" height="369" width="680" title="medium_index.html" class="t u v iz aj" scrolling="auto" style="box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 369px;"></iframe><p>To make Webpack recognize and use this file, add more information in <code>webpack.config.js</code>:</p><iframe src="https://medium.com/media/39b3679dc7831e68c98e5e9475034e6e" allowfullscreen="" frameborder="0" height="391" width="680" title="" class="t u v iz aj" scrolling="auto" style="box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 391px;"></iframe><p>And add the script in <code>package.json</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you run this script, you’ll see the following error:</p><p><img src="https://miro.medium.com/max/60/1*xr5cmCeXHG4OVkuA47OPvA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/1392/1*xr5cmCeXHG4OVkuA47OPvA.png" alt="Image for post"></p><p>Webpack gives you an error, but why?</p><p>This is because you didn’t let Babel know what plugins it should use to transpile your React code to the plain JavaScript code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .babelrc</span><br></pre></td></tr></table></figure><p>Write this in <code>.babelrc</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;, &quot;@babel&#x2F;preset-react&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@babel/preset-env</code> lets you use the latest JavaScript without having a headache of what plugins you should use. <code>@babel/preset-react</code> is a plugin that can interpret the JSX syntax and transforms it into JavaScript DOM syntax.</p><p>One thing you ought to remember is that Babel reads the “presets” configuration from the right to the left. So, React JSX should be transformed into DOM syntax first by <code>@babel/preset-react</code>, then it can be transformed into the appropriate JavaScript version by <code>@babel/preset-env</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure><p>Now, let’s see if the code can be run successfully. Install the package that allows you to run your code in the dev server. Add this to <code>webpack.config.js</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  ...,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    port: 8888</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To run the dev server more conveniently, add the new script:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; package.json&quot;scripts&quot;: &#123;</span><br><span class="line">  ...,</span><br><span class="line">  &quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now if you run the script, your code should be run well on port 8888.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/60/1*ugyMi_bCjdtSXBr_87mbiA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/476/1*ugyMi_bCjdtSXBr_87mbiA.png" alt="Image for post"></p><p>The code should be run successfully</p><h1 id="Use-SASS"><a href="#Use-SASS" class="headerlink" title="Use SASS"></a>Use SASS</h1><p>Now, it’s time to adopt the SASS in the project. For this, you should install the appropriate loader for SASS.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D style-loader css-loader sass-loader node-sass</span><br></pre></td></tr></table></figure><ul><li><code>style-loader</code>— Inject CSS to the DOM</li><li><code>css-loader</code>— Takes the CSS files and returns the CSS with <code>imports</code> and <code>url(...)</code> for Webpack</li><li><code>sass-loader</code> — Takes the Sass/SCSS file and compiles to the CSS</li><li><code>node-sass</code>— You need this is the required package to load your SCSS files</li></ul><p>And add this to your <code>webpack.config.js</code>:</p><iframe src="https://medium.com/media/9a7530ecbcd6ca4ee7932980fc37cc8e" allowfullscreen="" frameborder="0" height="457" width="680" title="" class="t u v iz aj" scrolling="auto" style="box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 456.984px;"></iframe><p>In case you want to use the module system with SASS, add <code>modules: true</code> in the <code>options</code> property that will allow you to use it.</p><p>Create the SASS file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src&#x2F;index.scss</span><br></pre></td></tr></table></figure><p>It will be very simple:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; index.scss</span><br><span class="line">.title &#123; </span><br><span class="line">  color: red;</span><br><span class="line">&#125;&#x2F;&#x2F; index.jsx</span><br><span class="line">...</span><br><span class="line">import styles from &#39;.&#x2F;index.scss&#39;;</span><br></pre></td></tr></table></figure><p>All you need to do is to add it as the class name of the DOM:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 className&#x3D;&#123;styles.title&#125;&gt;Hello Webpack!&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><p>Now you can see the color is changed:</p><p><img src="https://miro.medium.com/max/60/1*WrEF2WajeUaFpiuTY705jA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/472/1*WrEF2WajeUaFpiuTY705jA.png" alt="Image for post"></p><p>The color is changed</p><h1 id="Use-TypeScript"><a href="#Use-TypeScript" class="headerlink" title="Use TypeScript"></a>Use TypeScript</h1><p>Install Typescript and its loader for Webpack.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D typescript ts-loader @types&#x2F;react @types&#x2F;react-dom</span><br></pre></td></tr></table></figure><p>There are a few changes in <code>webpack.config.js</code> to use TypeScript.</p><p>First, you should change the loader for <code>.jsx</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: &#x2F;\.tsx?$&#x2F;,</span><br><span class="line">  use: [&#39;ts-loader&#39;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.jsx</code> → <code>.tsx</code> and <code>babel-loader</code> → <code>ts-loader</code> .</p><p>Secondly, change the extensions:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [&#39;.js&#39;, &#39;.ts&#39;, &#39;.tsx&#39;]</span><br><span class="line">&#125;</span><br><span class="line">[&#39;.js&#39;, &#39;.jsx&#39;]&#96; → &#96;[&#39;.js&#39;, &#39;.ts&#39;, &#39;.tsx&#39;]</span><br></pre></td></tr></table></figure><p>You should still need <code>&#39;.js&#39;</code> so that Webpack can recognize the transpiled JavaScript files.</p><p>Finally, change the entry point:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entry: path.resolve(__dirname, &#39;src&#39;, &#39;index.tsx&#39;)</span><br><span class="line">&#39;index.jsx&#39;&#96; → &#96;&#39;index.tsx&#39;</span><br></pre></td></tr></table></figure><p>And change the file name to <code>index.tsx</code>.</p><p>Then you’ll encounter this error:</p><p><img src="https://miro.medium.com/max/60/1*gHYdGc-E7pQrAdU6w-Rclg.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/956/1*gHYdGc-E7pQrAdU6w-Rclg.png" alt="Image for post"></p><p>This is because TypeScript in your project doesn’t know where <code>index.scss</code> is. You can resolve this problem simply by creating the configuration file for TypeSciprt and a little extra setup.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch tsconfig.json</span><br></pre></td></tr></table></figure><p>TypeScript automatically looks for <code>tsconfig.json</code> from the root directory of your project, unless you specify its location.</p><iframe src="https://medium.com/media/54c8c85e1d0f71b3bf362cc8dddac213" allowfullscreen="" frameborder="0" height="457" width="680" title="medium_typescript_webpack_config.json" class="t u v iz aj" scrolling="auto" style="box-sizing: inherit; position: absolute; top: 0px; left: 0px; width: 680px; height: 456.984px;"></iframe><p>Create a new folder and make a file in it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir src&#x2F;typings</span><br><span class="line">touch src&#x2F;typings&#x2F;scss.d.ts</span><br></pre></td></tr></table></figure><p><code>scss.d.ts</code> is a typed file. TypeScript can read and understand what types it should also remember.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; scss.d.ts</span><br><span class="line">declare module &#39;*.css&#39; &#123;</span><br><span class="line">  const content: &#123; [className: string]: string; &#125;;</span><br><span class="line">  export default content;</span><br><span class="line">&#125;declare module &#39;*.scss&#39; &#123;</span><br><span class="line">  const content: &#123; [className: string]: string; &#125;;</span><br><span class="line">  export default content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, you’ll see the error is gone. Now run the server and see if the result is the same.</p><h1 id="Bonus-—-Hash-ClassNames"><a href="#Bonus-—-Hash-ClassNames" class="headerlink" title="Bonus — Hash ClassNames"></a>Bonus — Hash ClassNames</h1><p>In development mode, it would be quite inconvenient to work with the CSS class names transformed into the hash strings.</p><p><img src="https://miro.medium.com/max/60/1*qPIcxN0EA7SXMjiCupVUHw.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/566/1*qPIcxN0EA7SXMjiCupVUHw.png" alt="Image for post"></p><p>Hash strings always get in the way of your working journey</p><p>Actually, you can tell Webpack not to create a hash name for CSS.</p><p>Change the <code>module</code> part of <code>css-loader</code> in <code>webpack.config.js</code> as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  loader: &#39;css-loader&#39;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      modules: &#123;</span><br><span class="line">        localIdentName: &#39;[local]&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you’ll see the non-hash strings.</p><p><img src="https://miro.medium.com/max/60/1*_k5Zft_4aF-0sWo5KyhCrA.png?q=20" alt="Image for post"></p><p><img src="https://miro.medium.com/max/432/1*_k5Zft_4aF-0sWo5KyhCrA.png" alt="Image for post"></p><p>Now it’s much better!</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;How-to-Set-Up-a-React-Project-Using-Webpack-TypeScript-and-Sass&quot;&gt;&lt;a href=&quot;#How-to-Set-Up-a-React-Project-Using-Webpack-TypeScript-and-Sass&quot; class=&quot;headerlink&quot; title=&quot;How to Set Up a React Project Using Webpack, TypeScript, and Sass&quot;&gt;&lt;/a&gt;How to Set Up a React Project Using Webpack, TypeScript, and Sass&lt;/h1&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://hexo.jomeswang.top/categories/react/"/>
    
    
      <category term="react" scheme="https://hexo.jomeswang.top/tags/react/"/>
    
      <category term="webpack" scheme="https://hexo.jomeswang.top/tags/webpack/"/>
    
      <category term="sass" scheme="https://hexo.jomeswang.top/tags/sass/"/>
    
      <category term="typescript" scheme="https://hexo.jomeswang.top/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>初始化React 项目 使用webpack和Babel</title>
    <link href="https://hexo.jomeswang.top/posts/1a1b343a/"/>
    <id>https://hexo.jomeswang.top/posts/1a1b343a/</id>
    <published>2020-12-23T08:55:52.000Z</published>
    <updated>2020-12-23T11:23:18.965Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天建react 项目的时候发现</p></blockquote><a id="more"></a><p>在一个典型的React项目中，我们使用Babel和Webpack。 Babel用于将JSX和ES6转换为纯ES5代码。 Webpack用作捆绑程序。在这一篇文章中，我们从头开始对React 项目的建立。</p><p>首先 创建一个 <code>react-starter</code> 的文件夹。 之后在文件夹内部操作。</p><h2 id="一：-初始化-Package-json-文件夹"><a href="#一：-初始化-Package-json-文件夹" class="headerlink" title="一： 初始化 Package.json 文件夹"></a>一： 初始化 Package.json 文件夹</h2><p>在Node项目中，package.json文件存储有关项目的信息，例如其名称，许可证，脚本，依赖项等。我们可以使用这一条命令来创建package.json文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>-y标志用于设置默认值。现在，在项目文件夹中创建了一个package.json文件，内容如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;react-starter&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二：-创建-资源文件夹"><a href="#二：-创建-资源文件夹" class="headerlink" title="二： 创建 资源文件夹"></a>二： 创建 资源文件夹</h2><p>因此，首先在根目录中创建一个文件夹src。现在，该文件夹将包含所有使用JSX编写的React组件代码，使用SCSS编写的样式以及用于呈现React组件的模板HTML。当我们构建项目时，所有的JSX将被转换为JavaScript，所有的SCSS将被转换为纯CSS，HTML将使用所需的文件引用进行更新，并复制到/ dist文件夹中。</p><p>创建一个 <code>src/index.html</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;React Starter&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>关于此index.html源文件的几点要点。即将创建的React组件将呈现在div标签内。目前，我们在html中看不到任何对JavaScript或CSS文件的引用。这些将在构建步骤中添加到生成的html文件中。怎么样？我们稍后会看到。</p><h2 id="三：-React-组件"><a href="#三：-React-组件" class="headerlink" title="三： React 组件"></a>三： React 组件</h2><p> <code>src/index.js</code>  中创建一个 这样的一个文件  写入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line"></span><br><span class="line">const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;Hello React 16,Webpack 4 &amp; Babel 7!&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App &#x2F;&gt;, document.getElementById(&quot;root&quot;));</span><br></pre></td></tr></table></figure><p>下载如下NPM包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom --save</span><br></pre></td></tr></table></figure><h2 id="四：配置Webpack"><a href="#四：配置Webpack" class="headerlink" title="四：配置Webpack"></a>四：配置Webpack</h2><p>到目前为止，我们的源代码位于/ src文件夹中。我们没有可以部署到服务器的任何文件。如果仅将index.html和index.js复制到nginx或Apache之类的Web服务器，会发生什么情况？它只是在浏览器中呈现index.html。由于没有引用index.js，因此将其忽略。</p><p>因此，我们需要有人缝制两个文件并将其设置为可在/ dist文件夹中进行部署。有人是Webpack。 Webpack是捆绑器。简单来说，我们可以说Webpack将项目的所有依赖项都包装到一个捆绑文件中，并将其放置在/ dist文件夹中。</p><p>这是我们为什么要安装Webpack。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><p>安装webpack程序包后，我们需要向webpack提供操作说明。为此，我们需要在项目根目录中创建webpack.config.js文件。 Webpack总是检查此文件以了解如何捆绑项目。</p><p>在项目根目录中创建webpack.config.js文件。粘贴以下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;bundle.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="五：-运行-webpack"><a href="#五：-运行-webpack" class="headerlink" title="五： 运行 webpack"></a>五： 运行 webpack</h2><p>让我们在 package.json 中创建相应的脚本吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再 输入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>来启动项目。</p><p>但会产生这样的一个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">One CLI for webpack must be installed.</span><br><span class="line">...</span><br><span class="line">You need to install &#39;webpack-cli&#39; to use webpack via CLI.</span><br></pre></td></tr></table></figure><p>这一个错误 告诉我们， 我们需要去安装 这样的一个包  <code>webpack-cli</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-cli -g</span><br></pre></td></tr></table></figure><p> 这里需要全局安装才行！！！！</p><p>之后我们 再次使用  <code>npm start</code>  命令来启动</p><p>但是 报了以下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Module parse failed: Unexpected token (5:9)</span><br><span class="line">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https:&#x2F;&#x2F;webpack.js.org&#x2F;concepts#loaders</span><br></pre></td></tr></table></figure><p> 说 webpack不认识 这样的 jsx 语法。</p><p> 所以需要有一个工具， 来将 JSX 的语法转为 JS的语法。 因此 我们就有了 Babel 的这样一个工具。</p><h2 id="六：-配置Babel"><a href="#六：-配置Babel" class="headerlink" title="六： 配置Babel"></a>六： 配置Babel</h2><p>Babel是一个编译器，这意味着它可以将一种类型的代码转换为另一种类型。在我们的项目中，我们使用Babel将JSX转换为JavaScript。</p><p>Babel可以单独使用，也可以将JSX转换为JavaScript。但是，我们已经完成了将文件捆绑到Webpack的工作。因此，为了使webpack使用Babel处理JSX文件，Webpack需要babel-loader。</p><p>babel-loader只是将Babel功能加载到webpack。它没有任何其他权力。因此，为了使babel-loader正常工作，我们需要安装核心babel软件包@ babel / core。我们还需要安装@ babel / preset-env @ babel / preset-react分别将ES6和JSX转换为ES5。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel&#x2F;core babel-loader @babel&#x2F;preset-env @babel&#x2F;preset-react --save-dev</span><br></pre></td></tr></table></figure><p>现在 所有的 Babel 包都已经安装好了， 但是 我们 还没有告诉 webpack 去加载这一个 Babel 去加载JS 文件， 因此 我们需要在 <code>webpack.config.js</code> 中去添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: &#x2F;\.(js|jsx)$&#x2F;,</span><br><span class="line">      exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: &quot;babel-loader&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码在webpack配置文件中设置了一条规则。该规则适用于.js或.jsx文件，不包括node_modules文件夹中的文件。由于存在此规则，因此每当webpack需要将JavaScript文件或JSX文件添加到包中时，它都会使用babel来转译代码，然后将输出添加到包中。</p><p>Webpack使用babel-loader调用babel。 Babel需要知道它需要具备的所有功能，换句话说，需要定义所有预设。为此，我们在项目根目录中创建一个<code>.babelrc</code>文件，并添加以下文本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;, &quot;@babel&#x2F;preset-react&quot;] &#125;</span><br></pre></td></tr></table></figure><p>现在让我们转到终端并运行npm start。这次，webpack成功创建了bundle.js并将其放置在/ dist文件夹中。我们可以在控制台中看到类似下面的输出。</p><p><img src="http://photo.jomeswang.top/20201223190635.png" alt=""></p><h2 id="七：-配置-HtmlWebpackPlugin-来产生-html-文件"><a href="#七：-配置-HtmlWebpackPlugin-来产生-html-文件" class="headerlink" title="七： 配置 HtmlWebpackPlugin 来产生 html 文件"></a>七： 配置 HtmlWebpackPlugin 来产生 html 文件</h2><p>目前的状态是，我们现在在/ dist文件夹中有一个bundle.js。 但 dist文件夹中没有要部署的HTML文件。在构建过程中，我们希望Webpack在/ dist文件夹中创建一个HTML文件来加载bundle.js文件。 HtmlWebpackPlugin是一个webpack插件，可以在此处为我们提供帮助。首先使用以下命令安装它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>当我们安装好之后，我们需要去 修改  <code>webpack.config.js</code> 文件来加载这一个插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">var path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">  module: &#123; &#x2F;*...*&#x2F; &#125;,</span><br><span class="line">  plugins: [new HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们将HtmlWebpackPlugin添加到webpack.config.js中的plugins数组。插件接受模板选项，我们可以在其中指定已创建的源模板html文件。</p><p>现在，当我们运行npm start时，webpack在/ dist文件夹中同时创建bundle.js和index.html。生成的index.html文件包含对bundle.js的引用。</p><p>我们可以在浏览器中打开index.html文件来查看我们的React组件！</p><h2 id="八：-配置-Webpackdevserver"><a href="#八：-配置-Webpackdevserver" class="headerlink" title="八： 配置 Webpackdevserver"></a>八： 配置 Webpackdevserver</h2><p>我们的项目运行良好。但是在开发过程中，每次我们需要运行webpack命令并等待构建完成。然后在浏览器中打开html文件以查看输出。这很费时间。Webpack有自己的Web服务器，称为webpack-dev-server。如果源文件中有任何文件更改，它将自动以新更改刷新浏览器。首先让我们安装webpack-dev-server。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><p>然后我们修改    <code>package.json</code> 文件来加载这一个配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;webpack serve&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还要  <code>webpack.config.js</code>  修改端口号和配置热重载  在  里面添加多这一个属性 与 plugins 并列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  open: true,</span><br><span class="line">  port: 3000,</span><br><span class="line">  hot: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后 就可以在 命令行中输入 <code>npm start</code> 来运行啦。</p><h2 id="九：-总结"><a href="#九：-总结" class="headerlink" title="九： 总结"></a>九： 总结</h2><p>现在我们有了一个代码库，可以开始尝试任何React项目。这只是一个开始。在投入实际生产之前，可以做很多改进。</p><p>博文源地址：  <a href="https://backbencher.dev/create-react-starter-webpack-babel" target="_blank" rel="noopener">https://backbencher.dev/create-react-starter-webpack-babel</a></p><p>仓库代码： <a href="https://github.com/jomeswang/react-webpack-babel-test" target="_blank" rel="noopener">https://github.com/jomeswang/react-webpack-babel-test</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天建react 项目的时候发现&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://hexo.jomeswang.top/categories/react/"/>
    
    
      <category term="webpack" scheme="https://hexo.jomeswang.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Typescript interface 和 type 的区别</title>
    <link href="https://hexo.jomeswang.top/posts/cd0b2548/"/>
    <id>https://hexo.jomeswang.top/posts/cd0b2548/</id>
    <published>2020-12-20T07:19:16.000Z</published>
    <updated>2020-12-20T07:33:14.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习学习学习！！！！！</p></blockquote><a id="more"></a><p>首先，interface只能表示function，object和class类型，type除了这些类型还可以表示其他类型，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface A&#123;name:string;</span><br><span class="line">            add:()&#x3D;&gt;void;</span><br><span class="line">&#125;</span><br><span class="line">interface B&#123;():void&#125;</span><br><span class="line"> </span><br><span class="line">type C&#x3D;()&#x3D;&gt;number;</span><br><span class="line">type D&#x3D;string;</span><br><span class="line">type E&#x3D;&#123;name:string,age:number&#125;</span><br></pre></td></tr></table></figure><p>interface可以合并同名接口，type不可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface A&#123;name:string&#125;</span><br><span class="line">interface A&#123;age:number&#125;</span><br><span class="line">var x:A&#x3D;&#123;name:&#39;xx&#39;,age:20&#125;</span><br></pre></td></tr></table></figure><p>interface可以继承interface，继承type，使用extends关键字，type也可继承type，也可继承interface，使用&amp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface A&#123;name:string&#125;</span><br><span class="line">interface B extends A&#123;age:number&#125;</span><br><span class="line"> </span><br><span class="line">type C&#x3D;&#123;sex:string&#125;</span><br><span class="line"> </span><br><span class="line">interface D extends C&#123;name:string&#125;</span><br><span class="line"> </span><br><span class="line">type E&#x3D;&#123;name:string&#125;&amp;C</span><br><span class="line"> </span><br><span class="line">type F &#x3D;&#123;age:number&#125;&amp;A</span><br></pre></td></tr></table></figure><p>还有类可以实现接口，也可以实现type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface A&#123;name:string;add:()&#x3D;&gt;void&#125;</span><br><span class="line">type B&#x3D;&#123;age:number,add:()&#x3D;&gt;void&#125;</span><br><span class="line"> </span><br><span class="line">class C implements A&#123;</span><br><span class="line">    name:&#39;xx&#39;</span><br><span class="line">    add()&#123;console.log(&#39;类实现接口&#39;)&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class D implements B&#123;</span><br><span class="line">    age:20</span><br><span class="line">    add()&#123;console.log(&#39;类实现type&#39;)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习学习学习！！！！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Typescript" scheme="https://hexo.jomeswang.top/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="https://hexo.jomeswang.top/tags/Typescript/"/>
    
  </entry>
  
</feed>
